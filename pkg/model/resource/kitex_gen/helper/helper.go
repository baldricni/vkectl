// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package helper

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/base"
	"strings"
)

type Taint struct {
	Key    string `thrift:"Key,1,required" json:"Key"`
	Value  string `thrift:"Value,2,required" json:"Value"`
	Effect string `thrift:"Effect,3,required" json:"Effect"`
	System bool   `thrift:"System,4,required" json:"System"`
}

func NewTaint() *Taint {
	return &Taint{

		System: false,
	}
}

func (p *Taint) GetKey() (v string) {
	return p.Key
}

func (p *Taint) GetValue() (v string) {
	return p.Value
}

func (p *Taint) GetEffect() (v string) {
	return p.Effect
}

func (p *Taint) GetSystem() (v bool) {
	return p.System
}
func (p *Taint) SetKey(val string) {
	p.Key = val
}
func (p *Taint) SetValue(val string) {
	p.Value = val
}
func (p *Taint) SetEffect(val string) {
	p.Effect = val
}
func (p *Taint) SetSystem(val bool) {
	p.System = val
}

var fieldIDToName_Taint = map[int16]string{
	1: "Key",
	2: "Value",
	3: "Effect",
	4: "System",
}

func (p *Taint) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false
	var issetValue bool = false
	var issetEffect bool = false
	var issetSystem bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEffect = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSystem = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValue {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEffect {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSystem {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Taint[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Taint[fieldId]))
}

func (p *Taint) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Key = v
	}
	return nil
}

func (p *Taint) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = v
	}
	return nil
}

func (p *Taint) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Effect = v
	}
	return nil
}

func (p *Taint) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.System = v
	}
	return nil
}

func (p *Taint) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Taint"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Taint) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Taint) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Taint) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Effect", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Effect); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Taint) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("System", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.System); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Taint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Taint(%+v)", *p)
}

func (p *Taint) DeepEqual(ano *Taint) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	if !p.Field3DeepEqual(ano.Effect) {
		return false
	}
	if !p.Field4DeepEqual(ano.System) {
		return false
	}
	return true
}

func (p *Taint) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *Taint) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}
func (p *Taint) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Effect, src) != 0 {
		return false
	}
	return true
}
func (p *Taint) Field4DeepEqual(src bool) bool {

	if p.System != src {
		return false
	}
	return true
}

type Label struct {
	Name   string  `thrift:"Name,1,required" json:"Name"`
	Value  *string `thrift:"Value,2" json:"Value,omitempty"`
	System bool    `thrift:"System,3,required" json:"System"`
}

func NewLabel() *Label {
	return &Label{

		System: false,
	}
}

func (p *Label) GetName() (v string) {
	return p.Name
}

var Label_Value_DEFAULT string

func (p *Label) GetValue() (v string) {
	if !p.IsSetValue() {
		return Label_Value_DEFAULT
	}
	return *p.Value
}

func (p *Label) GetSystem() (v bool) {
	return p.System
}
func (p *Label) SetName(val string) {
	p.Name = val
}
func (p *Label) SetValue(val *string) {
	p.Value = val
}
func (p *Label) SetSystem(val bool) {
	p.System = val
}

var fieldIDToName_Label = map[int16]string{
	1: "Name",
	2: "Value",
	3: "System",
}

func (p *Label) IsSetValue() bool {
	return p.Value != nil
}

func (p *Label) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetSystem bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSystem = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSystem {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Label[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Label[fieldId]))
}

func (p *Label) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Label) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = &v
	}
	return nil
}

func (p *Label) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.System = v
	}
	return nil
}

func (p *Label) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Label"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Label) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Label) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Label) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("System", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.System); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Label) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Label(%+v)", *p)
}

func (p *Label) DeepEqual(ano *Label) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	if !p.Field3DeepEqual(ano.System) {
		return false
	}
	return true
}

func (p *Label) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Label) Field2DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *Label) Field3DeepEqual(src bool) bool {

	if p.System != src {
		return false
	}
	return true
}

type PageInfo struct {
	PageNumber *string `thrift:"PageNumber,1" json:"PageNumber,omitempty"`
	PageSize   *string `thrift:"PageSize,2" json:"PageSize,omitempty"`
	TotalCount *string `thrift:"TotalCount,3" json:"TotalCount,omitempty"`
}

func NewPageInfo() *PageInfo {
	return &PageInfo{}
}

var PageInfo_PageNumber_DEFAULT string

func (p *PageInfo) GetPageNumber() (v string) {
	if !p.IsSetPageNumber() {
		return PageInfo_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var PageInfo_PageSize_DEFAULT string

func (p *PageInfo) GetPageSize() (v string) {
	if !p.IsSetPageSize() {
		return PageInfo_PageSize_DEFAULT
	}
	return *p.PageSize
}

var PageInfo_TotalCount_DEFAULT string

func (p *PageInfo) GetTotalCount() (v string) {
	if !p.IsSetTotalCount() {
		return PageInfo_TotalCount_DEFAULT
	}
	return *p.TotalCount
}
func (p *PageInfo) SetPageNumber(val *string) {
	p.PageNumber = val
}
func (p *PageInfo) SetPageSize(val *string) {
	p.PageSize = val
}
func (p *PageInfo) SetTotalCount(val *string) {
	p.TotalCount = val
}

var fieldIDToName_PageInfo = map[int16]string{
	1: "PageNumber",
	2: "PageSize",
	3: "TotalCount",
}

func (p *PageInfo) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *PageInfo) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *PageInfo) IsSetTotalCount() bool {
	return p.TotalCount != nil
}

func (p *PageInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PageInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PageInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PageNumber = &v
	}
	return nil
}

func (p *PageInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PageSize = &v
	}
	return nil
}

func (p *PageInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalCount = &v
	}
	return nil
}

func (p *PageInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PageInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PageInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PageInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PageInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalCount() {
		if err = oprot.WriteFieldBegin("TotalCount", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TotalCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageInfo(%+v)", *p)
}

func (p *PageInfo) DeepEqual(ano *PageInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.TotalCount) {
		return false
	}
	return true
}

func (p *PageInfo) Field1DeepEqual(src *string) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageNumber, *src) != 0 {
		return false
	}
	return true
}
func (p *PageInfo) Field2DeepEqual(src *string) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageSize, *src) != 0 {
		return false
	}
	return true
}
func (p *PageInfo) Field3DeepEqual(src *string) bool {

	if p.TotalCount == src {
		return true
	} else if p.TotalCount == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TotalCount, *src) != 0 {
		return false
	}
	return true
}

type BasicSetting struct {
	ClusterOS          *string `thrift:"ClusterOS,1" json:"ClusterOS,omitempty"`
	ClusterName        *string `thrift:"ClusterName,2" json:"ClusterName,omitempty"`
	ClusterDescription *string `thrift:"ClusterDescription,3" json:"ClusterDescription,omitempty"`
	KubernetesVersion  string  `thrift:"KubernetesVersion,4,required" json:"KubernetesVersion"`
}

func NewBasicSetting() *BasicSetting {
	return &BasicSetting{}
}

var BasicSetting_ClusterOS_DEFAULT string

func (p *BasicSetting) GetClusterOS() (v string) {
	if !p.IsSetClusterOS() {
		return BasicSetting_ClusterOS_DEFAULT
	}
	return *p.ClusterOS
}

var BasicSetting_ClusterName_DEFAULT string

func (p *BasicSetting) GetClusterName() (v string) {
	if !p.IsSetClusterName() {
		return BasicSetting_ClusterName_DEFAULT
	}
	return *p.ClusterName
}

var BasicSetting_ClusterDescription_DEFAULT string

func (p *BasicSetting) GetClusterDescription() (v string) {
	if !p.IsSetClusterDescription() {
		return BasicSetting_ClusterDescription_DEFAULT
	}
	return *p.ClusterDescription
}

func (p *BasicSetting) GetKubernetesVersion() (v string) {
	return p.KubernetesVersion
}
func (p *BasicSetting) SetClusterOS(val *string) {
	p.ClusterOS = val
}
func (p *BasicSetting) SetClusterName(val *string) {
	p.ClusterName = val
}
func (p *BasicSetting) SetClusterDescription(val *string) {
	p.ClusterDescription = val
}
func (p *BasicSetting) SetKubernetesVersion(val string) {
	p.KubernetesVersion = val
}

var fieldIDToName_BasicSetting = map[int16]string{
	1: "ClusterOS",
	2: "ClusterName",
	3: "ClusterDescription",
	4: "KubernetesVersion",
}

func (p *BasicSetting) IsSetClusterOS() bool {
	return p.ClusterOS != nil
}

func (p *BasicSetting) IsSetClusterName() bool {
	return p.ClusterName != nil
}

func (p *BasicSetting) IsSetClusterDescription() bool {
	return p.ClusterDescription != nil
}

func (p *BasicSetting) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKubernetesVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubernetesVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKubernetesVersion {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BasicSetting[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_BasicSetting[fieldId]))
}

func (p *BasicSetting) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterOS = &v
	}
	return nil
}

func (p *BasicSetting) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterName = &v
	}
	return nil
}

func (p *BasicSetting) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterDescription = &v
	}
	return nil
}

func (p *BasicSetting) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubernetesVersion = v
	}
	return nil
}

func (p *BasicSetting) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BasicSetting"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BasicSetting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterOS() {
		if err = oprot.WriteFieldBegin("ClusterOS", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterOS); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BasicSetting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterName() {
		if err = oprot.WriteFieldBegin("ClusterName", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BasicSetting) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterDescription() {
		if err = oprot.WriteFieldBegin("ClusterDescription", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BasicSetting) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubernetesVersion", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubernetesVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BasicSetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BasicSetting(%+v)", *p)
}

func (p *BasicSetting) DeepEqual(ano *BasicSetting) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterOS) {
		return false
	}
	if !p.Field2DeepEqual(ano.ClusterName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClusterDescription) {
		return false
	}
	if !p.Field4DeepEqual(ano.KubernetesVersion) {
		return false
	}
	return true
}

func (p *BasicSetting) Field1DeepEqual(src *string) bool {

	if p.ClusterOS == src {
		return true
	} else if p.ClusterOS == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterOS, *src) != 0 {
		return false
	}
	return true
}
func (p *BasicSetting) Field2DeepEqual(src *string) bool {

	if p.ClusterName == src {
		return true
	} else if p.ClusterName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterName, *src) != 0 {
		return false
	}
	return true
}
func (p *BasicSetting) Field3DeepEqual(src *string) bool {

	if p.ClusterDescription == src {
		return true
	} else if p.ClusterDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *BasicSetting) Field4DeepEqual(src string) bool {

	if strings.Compare(p.KubernetesVersion, src) != 0 {
		return false
	}
	return true
}

type AdvanceSetting struct {
	KubeproxyMode      *string `thrift:"KubeproxyMode,1" json:"KubeproxyMode,omitempty"`
	DeletionProtection *bool   `thrift:"DeletionProtection,2" json:"DeletionProtection,omitempty"`
}

func NewAdvanceSetting() *AdvanceSetting {
	return &AdvanceSetting{}
}

var AdvanceSetting_KubeproxyMode_DEFAULT string

func (p *AdvanceSetting) GetKubeproxyMode() (v string) {
	if !p.IsSetKubeproxyMode() {
		return AdvanceSetting_KubeproxyMode_DEFAULT
	}
	return *p.KubeproxyMode
}

var AdvanceSetting_DeletionProtection_DEFAULT bool

func (p *AdvanceSetting) GetDeletionProtection() (v bool) {
	if !p.IsSetDeletionProtection() {
		return AdvanceSetting_DeletionProtection_DEFAULT
	}
	return *p.DeletionProtection
}
func (p *AdvanceSetting) SetKubeproxyMode(val *string) {
	p.KubeproxyMode = val
}
func (p *AdvanceSetting) SetDeletionProtection(val *bool) {
	p.DeletionProtection = val
}

var fieldIDToName_AdvanceSetting = map[int16]string{
	1: "KubeproxyMode",
	2: "DeletionProtection",
}

func (p *AdvanceSetting) IsSetKubeproxyMode() bool {
	return p.KubeproxyMode != nil
}

func (p *AdvanceSetting) IsSetDeletionProtection() bool {
	return p.DeletionProtection != nil
}

func (p *AdvanceSetting) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AdvanceSetting[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AdvanceSetting) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubeproxyMode = &v
	}
	return nil
}

func (p *AdvanceSetting) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.DeletionProtection = &v
	}
	return nil
}

func (p *AdvanceSetting) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AdvanceSetting"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AdvanceSetting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKubeproxyMode() {
		if err = oprot.WriteFieldBegin("KubeproxyMode", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.KubeproxyMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AdvanceSetting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletionProtection() {
		if err = oprot.WriteFieldBegin("DeletionProtection", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DeletionProtection); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AdvanceSetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdvanceSetting(%+v)", *p)
}

func (p *AdvanceSetting) DeepEqual(ano *AdvanceSetting) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.KubeproxyMode) {
		return false
	}
	if !p.Field2DeepEqual(ano.DeletionProtection) {
		return false
	}
	return true
}

func (p *AdvanceSetting) Field1DeepEqual(src *string) bool {

	if p.KubeproxyMode == src {
		return true
	} else if p.KubeproxyMode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.KubeproxyMode, *src) != 0 {
		return false
	}
	return true
}
func (p *AdvanceSetting) Field2DeepEqual(src *bool) bool {

	if p.DeletionProtection == src {
		return true
	} else if p.DeletionProtection == nil || src == nil {
		return false
	}
	if *p.DeletionProtection != *src {
		return false
	}
	return true
}

type ContainerRuntime struct {
	Name    *string `thrift:"Name,1" json:"Name,omitempty"`
	Version *string `thrift:"Version,2" json:"Version,omitempty"`
}

func NewContainerRuntime() *ContainerRuntime {
	return &ContainerRuntime{}
}

var ContainerRuntime_Name_DEFAULT string

func (p *ContainerRuntime) GetName() (v string) {
	if !p.IsSetName() {
		return ContainerRuntime_Name_DEFAULT
	}
	return *p.Name
}

var ContainerRuntime_Version_DEFAULT string

func (p *ContainerRuntime) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return ContainerRuntime_Version_DEFAULT
	}
	return *p.Version
}
func (p *ContainerRuntime) SetName(val *string) {
	p.Name = val
}
func (p *ContainerRuntime) SetVersion(val *string) {
	p.Version = val
}

var fieldIDToName_ContainerRuntime = map[int16]string{
	1: "Name",
	2: "Version",
}

func (p *ContainerRuntime) IsSetName() bool {
	return p.Name != nil
}

func (p *ContainerRuntime) IsSetVersion() bool {
	return p.Version != nil
}

func (p *ContainerRuntime) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContainerRuntime[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContainerRuntime) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *ContainerRuntime) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Version = &v
	}
	return nil
}

func (p *ContainerRuntime) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContainerRuntime"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContainerRuntime) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContainerRuntime) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("Version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContainerRuntime) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContainerRuntime(%+v)", *p)
}

func (p *ContainerRuntime) DeepEqual(ano *ContainerRuntime) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *ContainerRuntime) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ContainerRuntime) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}

type Calico struct {
}

func NewCalico() *Calico {
	return &Calico{}
}

var fieldIDToName_Calico = map[int16]string{}

func (p *Calico) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Calico) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("Calico"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Calico) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Calico(%+v)", *p)
}

func (p *Calico) DeepEqual(ano *Calico) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type CNI struct {
	Name   string  `thrift:"Name,1,required" json:"Name"`
	Caloco *Calico `thrift:"Caloco,2" json:"Caloco,omitempty"`
}

func NewCNI() *CNI {
	return &CNI{}
}

func (p *CNI) GetName() (v string) {
	return p.Name
}

var CNI_Caloco_DEFAULT *Calico

func (p *CNI) GetCaloco() (v *Calico) {
	if !p.IsSetCaloco() {
		return CNI_Caloco_DEFAULT
	}
	return p.Caloco
}
func (p *CNI) SetName(val string) {
	p.Name = val
}
func (p *CNI) SetCaloco(val *Calico) {
	p.Caloco = val
}

var fieldIDToName_CNI = map[int16]string{
	1: "Name",
	2: "Caloco",
}

func (p *CNI) IsSetCaloco() bool {
	return p.Caloco != nil
}

func (p *CNI) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CNI[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CNI[fieldId]))
}

func (p *CNI) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CNI) ReadField2(iprot thrift.TProtocol) error {
	p.Caloco = NewCalico()
	if err := p.Caloco.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CNI) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CNI"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CNI) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CNI) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaloco() {
		if err = oprot.WriteFieldBegin("Caloco", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Caloco.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CNI) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CNI(%+v)", *p)
}

func (p *CNI) DeepEqual(ano *CNI) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Caloco) {
		return false
	}
	return true
}

func (p *CNI) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CNI) Field2DeepEqual(src *Calico) bool {

	if !p.Caloco.DeepEqual(src) {
		return false
	}
	return true
}

type UpgradeStrategy struct {
	MaxUnready             *string `thrift:"MaxUnready,1" json:"MaxUnready,omitempty"`
	DrainNodeBeforeUpgrade *bool   `thrift:"DrainNodeBeforeUpgrade,2" json:"DrainNodeBeforeUpgrade,omitempty"`
}

func NewUpgradeStrategy() *UpgradeStrategy {
	return &UpgradeStrategy{}
}

var UpgradeStrategy_MaxUnready_DEFAULT string

func (p *UpgradeStrategy) GetMaxUnready() (v string) {
	if !p.IsSetMaxUnready() {
		return UpgradeStrategy_MaxUnready_DEFAULT
	}
	return *p.MaxUnready
}

var UpgradeStrategy_DrainNodeBeforeUpgrade_DEFAULT bool

func (p *UpgradeStrategy) GetDrainNodeBeforeUpgrade() (v bool) {
	if !p.IsSetDrainNodeBeforeUpgrade() {
		return UpgradeStrategy_DrainNodeBeforeUpgrade_DEFAULT
	}
	return *p.DrainNodeBeforeUpgrade
}
func (p *UpgradeStrategy) SetMaxUnready(val *string) {
	p.MaxUnready = val
}
func (p *UpgradeStrategy) SetDrainNodeBeforeUpgrade(val *bool) {
	p.DrainNodeBeforeUpgrade = val
}

var fieldIDToName_UpgradeStrategy = map[int16]string{
	1: "MaxUnready",
	2: "DrainNodeBeforeUpgrade",
}

func (p *UpgradeStrategy) IsSetMaxUnready() bool {
	return p.MaxUnready != nil
}

func (p *UpgradeStrategy) IsSetDrainNodeBeforeUpgrade() bool {
	return p.DrainNodeBeforeUpgrade != nil
}

func (p *UpgradeStrategy) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpgradeStrategy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpgradeStrategy) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MaxUnready = &v
	}
	return nil
}

func (p *UpgradeStrategy) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.DrainNodeBeforeUpgrade = &v
	}
	return nil
}

func (p *UpgradeStrategy) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeStrategy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpgradeStrategy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxUnready() {
		if err = oprot.WriteFieldBegin("MaxUnready", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MaxUnready); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpgradeStrategy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDrainNodeBeforeUpgrade() {
		if err = oprot.WriteFieldBegin("DrainNodeBeforeUpgrade", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DrainNodeBeforeUpgrade); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpgradeStrategy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpgradeStrategy(%+v)", *p)
}

func (p *UpgradeStrategy) DeepEqual(ano *UpgradeStrategy) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxUnready) {
		return false
	}
	if !p.Field2DeepEqual(ano.DrainNodeBeforeUpgrade) {
		return false
	}
	return true
}

func (p *UpgradeStrategy) Field1DeepEqual(src *string) bool {

	if p.MaxUnready == src {
		return true
	} else if p.MaxUnready == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MaxUnready, *src) != 0 {
		return false
	}
	return true
}
func (p *UpgradeStrategy) Field2DeepEqual(src *bool) bool {

	if p.DrainNodeBeforeUpgrade == src {
		return true
	} else if p.DrainNodeBeforeUpgrade == nil || src == nil {
		return false
	}
	if *p.DrainNodeBeforeUpgrade != *src {
		return false
	}
	return true
}

type MachineAdvancedSetting struct {
	MountTarget   *string  `thrift:"MountTarget,1" json:"MountTarget,omitempty"`
	CustomScrit   *string  `thrift:"CustomScrit,2" json:"CustomScrit,omitempty"`
	Unschedulable *bool    `thrift:"Unschedulable,3" json:"Unschedulable,omitempty"`
	Labels        []*Label `thrift:"Labels,4" json:"Labels,omitempty"`
}

func NewMachineAdvancedSetting() *MachineAdvancedSetting {
	return &MachineAdvancedSetting{}
}

var MachineAdvancedSetting_MountTarget_DEFAULT string

func (p *MachineAdvancedSetting) GetMountTarget() (v string) {
	if !p.IsSetMountTarget() {
		return MachineAdvancedSetting_MountTarget_DEFAULT
	}
	return *p.MountTarget
}

var MachineAdvancedSetting_CustomScrit_DEFAULT string

func (p *MachineAdvancedSetting) GetCustomScrit() (v string) {
	if !p.IsSetCustomScrit() {
		return MachineAdvancedSetting_CustomScrit_DEFAULT
	}
	return *p.CustomScrit
}

var MachineAdvancedSetting_Unschedulable_DEFAULT bool

func (p *MachineAdvancedSetting) GetUnschedulable() (v bool) {
	if !p.IsSetUnschedulable() {
		return MachineAdvancedSetting_Unschedulable_DEFAULT
	}
	return *p.Unschedulable
}

var MachineAdvancedSetting_Labels_DEFAULT []*Label

func (p *MachineAdvancedSetting) GetLabels() (v []*Label) {
	if !p.IsSetLabels() {
		return MachineAdvancedSetting_Labels_DEFAULT
	}
	return p.Labels
}
func (p *MachineAdvancedSetting) SetMountTarget(val *string) {
	p.MountTarget = val
}
func (p *MachineAdvancedSetting) SetCustomScrit(val *string) {
	p.CustomScrit = val
}
func (p *MachineAdvancedSetting) SetUnschedulable(val *bool) {
	p.Unschedulable = val
}
func (p *MachineAdvancedSetting) SetLabels(val []*Label) {
	p.Labels = val
}

var fieldIDToName_MachineAdvancedSetting = map[int16]string{
	1: "MountTarget",
	2: "CustomScrit",
	3: "Unschedulable",
	4: "Labels",
}

func (p *MachineAdvancedSetting) IsSetMountTarget() bool {
	return p.MountTarget != nil
}

func (p *MachineAdvancedSetting) IsSetCustomScrit() bool {
	return p.CustomScrit != nil
}

func (p *MachineAdvancedSetting) IsSetUnschedulable() bool {
	return p.Unschedulable != nil
}

func (p *MachineAdvancedSetting) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *MachineAdvancedSetting) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MachineAdvancedSetting[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MachineAdvancedSetting) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MountTarget = &v
	}
	return nil
}

func (p *MachineAdvancedSetting) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CustomScrit = &v
	}
	return nil
}

func (p *MachineAdvancedSetting) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Unschedulable = &v
	}
	return nil
}

func (p *MachineAdvancedSetting) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MachineAdvancedSetting) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("machine_advanced_setting"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MachineAdvancedSetting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMountTarget() {
		if err = oprot.WriteFieldBegin("MountTarget", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MountTarget); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MachineAdvancedSetting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomScrit() {
		if err = oprot.WriteFieldBegin("CustomScrit", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CustomScrit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MachineAdvancedSetting) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnschedulable() {
		if err = oprot.WriteFieldBegin("Unschedulable", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Unschedulable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MachineAdvancedSetting) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MachineAdvancedSetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MachineAdvancedSetting(%+v)", *p)
}

func (p *MachineAdvancedSetting) DeepEqual(ano *MachineAdvancedSetting) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MountTarget) {
		return false
	}
	if !p.Field2DeepEqual(ano.CustomScrit) {
		return false
	}
	if !p.Field3DeepEqual(ano.Unschedulable) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	return true
}

func (p *MachineAdvancedSetting) Field1DeepEqual(src *string) bool {

	if p.MountTarget == src {
		return true
	} else if p.MountTarget == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MountTarget, *src) != 0 {
		return false
	}
	return true
}
func (p *MachineAdvancedSetting) Field2DeepEqual(src *string) bool {

	if p.CustomScrit == src {
		return true
	} else if p.CustomScrit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CustomScrit, *src) != 0 {
		return false
	}
	return true
}
func (p *MachineAdvancedSetting) Field3DeepEqual(src *bool) bool {

	if p.Unschedulable == src {
		return true
	} else if p.Unschedulable == nil || src == nil {
		return false
	}
	if *p.Unschedulable != *src {
		return false
	}
	return true
}
func (p *MachineAdvancedSetting) Field4DeepEqual(src []*Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CheckResourceExistRequest struct {
	Kind      string         `thrift:"Kind,1,required" validate:"required,oneof=Cluster Node NodePool Namespace Ingress StorageClass PersistentVolume PersistentVolumeClaim"`
	Name      string         `thrift:"Name,2,required" validate:"required"`
	ClusterId *string        `thrift:"ClusterId,3" json:"ClusterId,omitempty"`
	Namespace *string        `thrift:"Namespace,4" json:"Namespace,omitempty"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCheckResourceExistRequest() *CheckResourceExistRequest {
	return &CheckResourceExistRequest{}
}

func (p *CheckResourceExistRequest) GetKind() (v string) {
	return p.Kind
}

func (p *CheckResourceExistRequest) GetName() (v string) {
	return p.Name
}

var CheckResourceExistRequest_ClusterId_DEFAULT string

func (p *CheckResourceExistRequest) GetClusterId() (v string) {
	if !p.IsSetClusterId() {
		return CheckResourceExistRequest_ClusterId_DEFAULT
	}
	return *p.ClusterId
}

var CheckResourceExistRequest_Namespace_DEFAULT string

func (p *CheckResourceExistRequest) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return CheckResourceExistRequest_Namespace_DEFAULT
	}
	return *p.Namespace
}

var CheckResourceExistRequest_Top_DEFAULT *base.TopParam

func (p *CheckResourceExistRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CheckResourceExistRequest_Top_DEFAULT
	}
	return p.Top
}

var CheckResourceExistRequest_Base_DEFAULT *base.Base

func (p *CheckResourceExistRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CheckResourceExistRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CheckResourceExistRequest) SetKind(val string) {
	p.Kind = val
}
func (p *CheckResourceExistRequest) SetName(val string) {
	p.Name = val
}
func (p *CheckResourceExistRequest) SetClusterId(val *string) {
	p.ClusterId = val
}
func (p *CheckResourceExistRequest) SetNamespace(val *string) {
	p.Namespace = val
}
func (p *CheckResourceExistRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *CheckResourceExistRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CheckResourceExistRequest = map[int16]string{
	1:   "Kind",
	2:   "Name",
	3:   "ClusterId",
	4:   "Namespace",
	254: "Top",
	255: "Base",
}

func (p *CheckResourceExistRequest) IsSetClusterId() bool {
	return p.ClusterId != nil
}

func (p *CheckResourceExistRequest) IsSetNamespace() bool {
	return p.Namespace != nil
}

func (p *CheckResourceExistRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CheckResourceExistRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CheckResourceExistRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKind bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKind {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckResourceExistRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CheckResourceExistRequest[fieldId]))
}

func (p *CheckResourceExistRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *CheckResourceExistRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CheckResourceExistRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = &v
	}
	return nil
}

func (p *CheckResourceExistRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = &v
	}
	return nil
}

func (p *CheckResourceExistRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckResourceExistRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckResourceExistRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckResourceExistRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckResourceExistRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckResourceExistRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckResourceExistRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterId() {
		if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClusterId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CheckResourceExistRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CheckResourceExistRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *CheckResourceExistRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckResourceExistRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckResourceExistRequest(%+v)", *p)
}

func (p *CheckResourceExistRequest) DeepEqual(ano *CheckResourceExistRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CheckResourceExistRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *CheckResourceExistRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CheckResourceExistRequest) Field3DeepEqual(src *string) bool {

	if p.ClusterId == src {
		return true
	} else if p.ClusterId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClusterId, *src) != 0 {
		return false
	}
	return true
}
func (p *CheckResourceExistRequest) Field4DeepEqual(src *string) bool {

	if p.Namespace == src {
		return true
	} else if p.Namespace == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Namespace, *src) != 0 {
		return false
	}
	return true
}
func (p *CheckResourceExistRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CheckResourceExistRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CheckResourceExistResponse struct {
	Exist bool `thrift:"exist,1,required" json:"exist"`
}

func NewCheckResourceExistResponse() *CheckResourceExistResponse {
	return &CheckResourceExistResponse{}
}

func (p *CheckResourceExistResponse) GetExist() (v bool) {
	return p.Exist
}
func (p *CheckResourceExistResponse) SetExist(val bool) {
	p.Exist = val
}

var fieldIDToName_CheckResourceExistResponse = map[int16]string{
	1: "exist",
}

func (p *CheckResourceExistResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExist bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExist = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExist {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckResourceExistResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CheckResourceExistResponse[fieldId]))
}

func (p *CheckResourceExistResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Exist = v
	}
	return nil
}

func (p *CheckResourceExistResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckResourceExistResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckResourceExistResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exist", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Exist); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckResourceExistResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckResourceExistResponse(%+v)", *p)
}

func (p *CheckResourceExistResponse) DeepEqual(ano *CheckResourceExistResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Exist) {
		return false
	}
	return true
}

func (p *CheckResourceExistResponse) Field1DeepEqual(src bool) bool {

	if p.Exist != src {
		return false
	}
	return true
}
