// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package cluster

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/addon"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/base"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/helper"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/iaas"
	"strings"
)

const (
	LoginTypeKeyPair = "KeyPair"

	LoginTypeSshKey = "SshKey"

	LoginTypePassword = "Password"

	ClusterTypeStandard = "Standard"

	ClusterTypeManaged = "Managed"

	ClusterTypeOnPremise = "OnPremise"

	ClusterTypeRegistered = "Registered"

	NodeSourceNew = "New"

	NodeSourceExist = "Exist"

	NetworkTypeCalico = "Calico"

	NetworkModeCalico = "VXLAN"

	NetworkTypeFlannel = "Flannel"

	NetworkTypeVpcCNI = "VPC-CNI"

	KubeProxyModeIpvs = "ipvs"

	KubeProxyModeIptables = "iptables"

	StatusClusterCreating = "Creating"

	StatusClusterFailed = "Failed"

	StatusClusterRuning = "Running"

	StatusClusterError = "Error"

	StatusClusterUpdating = "Updating"

	StatusClusterUpgrading = "Upgrading"

	StatusClusterDeleting = "Deleting"

	StatusClusterOverdue = "Overdue"

	StatusClusterImporting = "Importing"

	StatusClusterimportFailed = "ImportFailed"

	KubeconfigTypeUserExternal = "UserExternal"

	KubeconfigTypeUserInternal = "UserInternal"

	KubeconfigTypeServiceInternal = "ServiceInternal"

	KubeconfigTypeRegistered = "Registered"

	StatusClusterDeployWaiting = "Waiting"

	StatusClusterDeployRunning = "Running"

	StatusClusterDeployCompleted = "Completed"

	StatusClusterDeployFailed = "Failed"

	StatusNodeNormal = "Normal"

	StatusNodeError = "Error"

	StatusNodeCreating = "Creating"

	StatusNodeFailed = "Failed"

	StatusNodeAdding = "Adding"

	StatusNodeRemoving = "Removing"

	StatusNodeRemoveFailed = "RemoveFailed"

	StatusNodeOnlining = "Onlining"

	StatusNodeOfflining = "Offlining"

	StatusNodeOffline = "Offline"

	StatusNodeCordon = "Cordon"

	StatusNodeOverdue = "Overdue"

	StatusNodePoolNormal = "Normal"

	StatusNodePoolCreating = "Creating"

	StatusNodePoolFailed = "Failed"

	StatusNodePoolScaling = "Scaling"

	StatusNodePoolDeleting = "Deleting"

	StatusNodePoolDeleteFailed = "DeleteFailed"

	StatusScalingRecordScaling = "Scaling"

	StatusScalingRecordSucceed = "Succeed"

	StatusScalingRecordFailed = "Failed"

	StatusNamespaceActive = "Active"

	StatusNamespaceTerminating = "Terminating"

	PodCidrConflictWithVpcCidr = "PodCidrConflictWithVpcCidr"

	PodCidrConflictWithServiceCidr = "PodCidrConflictWithServiceCidr"

	PodCidrConflictWithClusterCidr = "PodCidrConflictWithClusterCidr"

	ServiceCidrConflictWithVpcCidr = "ServiceCidrConflictWithVpcCidr"

	ServiceCidrConflictWithClusterCidr = "ServiceCidrConflictWithClusterCidr"

	PodCidrForbidden = "PodCidrForbidden"

	ServiceCidrForbbiden = "ServiceCidrForbidden"
)

type ResourceStatistics struct {
	TotalCpu            string `thrift:"TotalCpu,1,required" json:"TotalCpu"`
	UsedCpu             string `thrift:"UsedCpu,2,required" json:"UsedCpu"`
	FreeCpu             string `thrift:"FreeCpu,3,required" json:"FreeCpu"`
	UnschedulableCpu    string `thrift:"UnschedulableCpu,4,required" json:"UnschedulableCpu"`
	TotalMemory         string `thrift:"TotalMemory,5,required" json:"TotalMemory"`
	UsedMemory          string `thrift:"UsedMemory,6,required" json:"UsedMemory"`
	FreeMemory          string `thrift:"FreeMemory,7,required" json:"FreeMemory"`
	UnschedulableMemory string `thrift:"UnschedulableMemory,8,required" json:"UnschedulableMemory"`
}

func NewResourceStatistics() *ResourceStatistics {
	return &ResourceStatistics{}
}

func (p *ResourceStatistics) GetTotalCpu() (v string) {
	return p.TotalCpu
}

func (p *ResourceStatistics) GetUsedCpu() (v string) {
	return p.UsedCpu
}

func (p *ResourceStatistics) GetFreeCpu() (v string) {
	return p.FreeCpu
}

func (p *ResourceStatistics) GetUnschedulableCpu() (v string) {
	return p.UnschedulableCpu
}

func (p *ResourceStatistics) GetTotalMemory() (v string) {
	return p.TotalMemory
}

func (p *ResourceStatistics) GetUsedMemory() (v string) {
	return p.UsedMemory
}

func (p *ResourceStatistics) GetFreeMemory() (v string) {
	return p.FreeMemory
}

func (p *ResourceStatistics) GetUnschedulableMemory() (v string) {
	return p.UnschedulableMemory
}
func (p *ResourceStatistics) SetTotalCpu(val string) {
	p.TotalCpu = val
}
func (p *ResourceStatistics) SetUsedCpu(val string) {
	p.UsedCpu = val
}
func (p *ResourceStatistics) SetFreeCpu(val string) {
	p.FreeCpu = val
}
func (p *ResourceStatistics) SetUnschedulableCpu(val string) {
	p.UnschedulableCpu = val
}
func (p *ResourceStatistics) SetTotalMemory(val string) {
	p.TotalMemory = val
}
func (p *ResourceStatistics) SetUsedMemory(val string) {
	p.UsedMemory = val
}
func (p *ResourceStatistics) SetFreeMemory(val string) {
	p.FreeMemory = val
}
func (p *ResourceStatistics) SetUnschedulableMemory(val string) {
	p.UnschedulableMemory = val
}

var fieldIDToName_ResourceStatistics = map[int16]string{
	1: "TotalCpu",
	2: "UsedCpu",
	3: "FreeCpu",
	4: "UnschedulableCpu",
	5: "TotalMemory",
	6: "UsedMemory",
	7: "FreeMemory",
	8: "UnschedulableMemory",
}

func (p *ResourceStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCpu bool = false
	var issetUsedCpu bool = false
	var issetFreeCpu bool = false
	var issetUnschedulableCpu bool = false
	var issetTotalMemory bool = false
	var issetUsedMemory bool = false
	var issetFreeMemory bool = false
	var issetUnschedulableMemory bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnschedulableCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnschedulableMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCpu {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUsedCpu {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFreeCpu {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUnschedulableCpu {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTotalMemory {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUsedMemory {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetFreeMemory {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetUnschedulableMemory {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ResourceStatistics[fieldId]))
}

func (p *ResourceStatistics) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalCpu = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedCpu = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeCpu = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnschedulableCpu = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalMemory = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedMemory = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeMemory = v
	}
	return nil
}

func (p *ResourceStatistics) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnschedulableMemory = v
	}
	return nil
}

func (p *ResourceStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResourceStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCpu", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedCpu", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ResourceStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeCpu", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ResourceStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnschedulableCpu", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnschedulableCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ResourceStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalMemory", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ResourceStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedMemory", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ResourceStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeMemory", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ResourceStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnschedulableMemory", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnschedulableMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ResourceStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceStatistics(%+v)", *p)
}

func (p *ResourceStatistics) DeepEqual(ano *ResourceStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCpu) {
		return false
	}
	if !p.Field2DeepEqual(ano.UsedCpu) {
		return false
	}
	if !p.Field3DeepEqual(ano.FreeCpu) {
		return false
	}
	if !p.Field4DeepEqual(ano.UnschedulableCpu) {
		return false
	}
	if !p.Field5DeepEqual(ano.TotalMemory) {
		return false
	}
	if !p.Field6DeepEqual(ano.UsedMemory) {
		return false
	}
	if !p.Field7DeepEqual(ano.FreeMemory) {
		return false
	}
	if !p.Field8DeepEqual(ano.UnschedulableMemory) {
		return false
	}
	return true
}

func (p *ResourceStatistics) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TotalCpu, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UsedCpu, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field3DeepEqual(src string) bool {

	if strings.Compare(p.FreeCpu, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field4DeepEqual(src string) bool {

	if strings.Compare(p.UnschedulableCpu, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TotalMemory, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UsedMemory, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field7DeepEqual(src string) bool {

	if strings.Compare(p.FreeMemory, src) != 0 {
		return false
	}
	return true
}
func (p *ResourceStatistics) Field8DeepEqual(src string) bool {

	if strings.Compare(p.UnschedulableMemory, src) != 0 {
		return false
	}
	return true
}

type Gpu struct {
	Model  string `thrift:"Model,1,required" json:"Model"`
	Number string `thrift:"Number,2,required" json:"Number"`
}

func NewGpu() *Gpu {
	return &Gpu{}
}

func (p *Gpu) GetModel() (v string) {
	return p.Model
}

func (p *Gpu) GetNumber() (v string) {
	return p.Number
}
func (p *Gpu) SetModel(val string) {
	p.Model = val
}
func (p *Gpu) SetNumber(val string) {
	p.Number = val
}

var fieldIDToName_Gpu = map[int16]string{
	1: "Model",
	2: "Number",
}

func (p *Gpu) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetModel bool = false
	var issetNumber bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetModel = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumber = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetModel {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNumber {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Gpu[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Gpu[fieldId]))
}

func (p *Gpu) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Model = v
	}
	return nil
}

func (p *Gpu) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Number = v
	}
	return nil
}

func (p *Gpu) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Gpu"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Gpu) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Model", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Model); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Gpu) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Number", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Number); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Gpu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Gpu(%+v)", *p)
}

func (p *Gpu) DeepEqual(ano *Gpu) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Model) {
		return false
	}
	if !p.Field2DeepEqual(ano.Number) {
		return false
	}
	return true
}

func (p *Gpu) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Model, src) != 0 {
		return false
	}
	return true
}
func (p *Gpu) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Number, src) != 0 {
		return false
	}
	return true
}

type InstanceType struct {
	Id         string `thrift:"Id,1,required" json:"Id"`
	Type       string `thrift:"Type,2,required" json:"Type"`
	TypeFamily string `thrift:"TypeFamily,3,required" json:"TypeFamily"`
	Cpu        string `thrift:"Cpu,4,required" json:"Cpu"`
	Memory     string `thrift:"Memory,5,required" json:"Memory"`
	Gpu        *Gpu   `thrift:"Gpu,6,required" json:"Gpu"`
}

func NewInstanceType() *InstanceType {
	return &InstanceType{}
}

func (p *InstanceType) GetId() (v string) {
	return p.Id
}

func (p *InstanceType) GetType() (v string) {
	return p.Type
}

func (p *InstanceType) GetTypeFamily() (v string) {
	return p.TypeFamily
}

func (p *InstanceType) GetCpu() (v string) {
	return p.Cpu
}

func (p *InstanceType) GetMemory() (v string) {
	return p.Memory
}

var InstanceType_Gpu_DEFAULT *Gpu

func (p *InstanceType) GetGpu() (v *Gpu) {
	if !p.IsSetGpu() {
		return InstanceType_Gpu_DEFAULT
	}
	return p.Gpu
}
func (p *InstanceType) SetId(val string) {
	p.Id = val
}
func (p *InstanceType) SetType(val string) {
	p.Type = val
}
func (p *InstanceType) SetTypeFamily(val string) {
	p.TypeFamily = val
}
func (p *InstanceType) SetCpu(val string) {
	p.Cpu = val
}
func (p *InstanceType) SetMemory(val string) {
	p.Memory = val
}
func (p *InstanceType) SetGpu(val *Gpu) {
	p.Gpu = val
}

var fieldIDToName_InstanceType = map[int16]string{
	1: "Id",
	2: "Type",
	3: "TypeFamily",
	4: "Cpu",
	5: "Memory",
	6: "Gpu",
}

func (p *InstanceType) IsSetGpu() bool {
	return p.Gpu != nil
}

func (p *InstanceType) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetType bool = false
	var issetTypeFamily bool = false
	var issetCpu bool = false
	var issetMemory bool = false
	var issetGpu bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTypeFamily = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTypeFamily {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCpu {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetMemory {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetGpu {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InstanceType[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_InstanceType[fieldId]))
}

func (p *InstanceType) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *InstanceType) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *InstanceType) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TypeFamily = v
	}
	return nil
}

func (p *InstanceType) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Cpu = v
	}
	return nil
}

func (p *InstanceType) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Memory = v
	}
	return nil
}

func (p *InstanceType) ReadField6(iprot thrift.TProtocol) error {
	p.Gpu = NewGpu()
	if err := p.Gpu.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InstanceType) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InstanceType"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InstanceType) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InstanceType) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InstanceType) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TypeFamily", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TypeFamily); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InstanceType) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Cpu", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Cpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *InstanceType) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Memory", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Memory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *InstanceType) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Gpu", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Gpu.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *InstanceType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceType(%+v)", *p)
}

func (p *InstanceType) DeepEqual(ano *InstanceType) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.TypeFamily) {
		return false
	}
	if !p.Field4DeepEqual(ano.Cpu) {
		return false
	}
	if !p.Field5DeepEqual(ano.Memory) {
		return false
	}
	if !p.Field6DeepEqual(ano.Gpu) {
		return false
	}
	return true
}

func (p *InstanceType) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TypeFamily, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Cpu, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Memory, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field6DeepEqual(src *Gpu) bool {

	if !p.Gpu.DeepEqual(src) {
		return false
	}
	return true
}

type Kubernetes struct {
	RuntimeVersion    string `thrift:"RuntimeVersion,1,required" json:"RuntimeVersion"`
	KubernetesVersion string `thrift:"KubernetesVersion,2,required" json:"KubernetesVersion"`
	KubeProxyVersion  string `thrift:"KubeProxyVersion,3,required" json:"KubeProxyVersion"`
}

func NewKubernetes() *Kubernetes {
	return &Kubernetes{}
}

func (p *Kubernetes) GetRuntimeVersion() (v string) {
	return p.RuntimeVersion
}

func (p *Kubernetes) GetKubernetesVersion() (v string) {
	return p.KubernetesVersion
}

func (p *Kubernetes) GetKubeProxyVersion() (v string) {
	return p.KubeProxyVersion
}
func (p *Kubernetes) SetRuntimeVersion(val string) {
	p.RuntimeVersion = val
}
func (p *Kubernetes) SetKubernetesVersion(val string) {
	p.KubernetesVersion = val
}
func (p *Kubernetes) SetKubeProxyVersion(val string) {
	p.KubeProxyVersion = val
}

var fieldIDToName_Kubernetes = map[int16]string{
	1: "RuntimeVersion",
	2: "KubernetesVersion",
	3: "KubeProxyVersion",
}

func (p *Kubernetes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRuntimeVersion bool = false
	var issetKubernetesVersion bool = false
	var issetKubeProxyVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRuntimeVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubernetesVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubeProxyVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRuntimeVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetKubernetesVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetKubeProxyVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Kubernetes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Kubernetes[fieldId]))
}

func (p *Kubernetes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RuntimeVersion = v
	}
	return nil
}

func (p *Kubernetes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubernetesVersion = v
	}
	return nil
}

func (p *Kubernetes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubeProxyVersion = v
	}
	return nil
}

func (p *Kubernetes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Kubernetes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Kubernetes) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RuntimeVersion", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RuntimeVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Kubernetes) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubernetesVersion", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubernetesVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Kubernetes) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubeProxyVersion", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubeProxyVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Kubernetes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Kubernetes(%+v)", *p)
}

func (p *Kubernetes) DeepEqual(ano *Kubernetes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RuntimeVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.KubernetesVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.KubeProxyVersion) {
		return false
	}
	return true
}

func (p *Kubernetes) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RuntimeVersion, src) != 0 {
		return false
	}
	return true
}
func (p *Kubernetes) Field2DeepEqual(src string) bool {

	if strings.Compare(p.KubernetesVersion, src) != 0 {
		return false
	}
	return true
}
func (p *Kubernetes) Field3DeepEqual(src string) bool {

	if strings.Compare(p.KubeProxyVersion, src) != 0 {
		return false
	}
	return true
}

type Volume struct {
	DiskType string `thrift:"DiskType,1,required" validate:"required,oneof=PTSSD"`
	Size     int64  `thrift:"Size,2,required" validate:"gte=0"`
}

func NewVolume() *Volume {
	return &Volume{}
}

func (p *Volume) GetDiskType() (v string) {
	return p.DiskType
}

func (p *Volume) GetSize() (v int64) {
	return p.Size
}
func (p *Volume) SetDiskType(val string) {
	p.DiskType = val
}
func (p *Volume) SetSize(val int64) {
	p.Size = val
}

var fieldIDToName_Volume = map[int16]string{
	1: "DiskType",
	2: "Size",
}

func (p *Volume) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDiskType bool = false
	var issetSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDiskType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDiskType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSize {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Volume[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Volume[fieldId]))
}

func (p *Volume) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DiskType = v
	}
	return nil
}

func (p *Volume) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Size = v
	}
	return nil
}

func (p *Volume) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Volume"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Volume) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DiskType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DiskType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Volume) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Size", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Size); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Volume) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Volume(%+v)", *p)
}

func (p *Volume) DeepEqual(ano *Volume) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DiskType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *Volume) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DiskType, src) != 0 {
		return false
	}
	return true
}
func (p *Volume) Field2DeepEqual(src int64) bool {

	if p.Size != src {
		return false
	}
	return true
}

type Login struct {
	LoginType   string  `thrift:"LoginType,1,required" validate:"required"`
	SshKey      *string `thrift:"SshKey,2" json:"SshKey,omitempty"`
	Password    *string `thrift:"Password,3" json:"Password,omitempty"`
	KeyPairName *string `thrift:"KeyPairName,4" json:"KeyPairName,omitempty"`
}

func NewLogin() *Login {
	return &Login{}
}

func (p *Login) GetLoginType() (v string) {
	return p.LoginType
}

var Login_SshKey_DEFAULT string

func (p *Login) GetSshKey() (v string) {
	if !p.IsSetSshKey() {
		return Login_SshKey_DEFAULT
	}
	return *p.SshKey
}

var Login_Password_DEFAULT string

func (p *Login) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return Login_Password_DEFAULT
	}
	return *p.Password
}

var Login_KeyPairName_DEFAULT string

func (p *Login) GetKeyPairName() (v string) {
	if !p.IsSetKeyPairName() {
		return Login_KeyPairName_DEFAULT
	}
	return *p.KeyPairName
}
func (p *Login) SetLoginType(val string) {
	p.LoginType = val
}
func (p *Login) SetSshKey(val *string) {
	p.SshKey = val
}
func (p *Login) SetPassword(val *string) {
	p.Password = val
}
func (p *Login) SetKeyPairName(val *string) {
	p.KeyPairName = val
}

var fieldIDToName_Login = map[int16]string{
	1: "LoginType",
	2: "SshKey",
	3: "Password",
	4: "KeyPairName",
}

func (p *Login) IsSetSshKey() bool {
	return p.SshKey != nil
}

func (p *Login) IsSetPassword() bool {
	return p.Password != nil
}

func (p *Login) IsSetKeyPairName() bool {
	return p.KeyPairName != nil
}

func (p *Login) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLoginType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoginType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLoginType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Login[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Login[fieldId]))
}

func (p *Login) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LoginType = v
	}
	return nil
}

func (p *Login) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SshKey = &v
	}
	return nil
}

func (p *Login) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = &v
	}
	return nil
}

func (p *Login) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KeyPairName = &v
	}
	return nil
}

func (p *Login) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Login"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Login) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LoginType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LoginType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Login) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSshKey() {
		if err = oprot.WriteFieldBegin("SshKey", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SshKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Login) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err = oprot.WriteFieldBegin("Password", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Password); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Login) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyPairName() {
		if err = oprot.WriteFieldBegin("KeyPairName", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.KeyPairName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Login) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Login(%+v)", *p)
}

func (p *Login) DeepEqual(ano *Login) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoginType) {
		return false
	}
	if !p.Field2DeepEqual(ano.SshKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	if !p.Field4DeepEqual(ano.KeyPairName) {
		return false
	}
	return true
}

func (p *Login) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LoginType, src) != 0 {
		return false
	}
	return true
}
func (p *Login) Field2DeepEqual(src *string) bool {

	if p.SshKey == src {
		return true
	} else if p.SshKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SshKey, *src) != 0 {
		return false
	}
	return true
}
func (p *Login) Field3DeepEqual(src *string) bool {

	if p.Password == src {
		return true
	} else if p.Password == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Password, *src) != 0 {
		return false
	}
	return true
}
func (p *Login) Field4DeepEqual(src *string) bool {

	if p.KeyPairName == src {
		return true
	} else if p.KeyPairName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.KeyPairName, *src) != 0 {
		return false
	}
	return true
}

type NetworkPermission struct {
	ChargeType     string `thrift:"ChargeType,1" json:"ChargeType" validate:"oneof=PostPaid" default:"PostPaid"`
	LanType        string `thrift:"LanType,2" json:"LanType" validate:"oneof=BGP ChinaUnicom ChinaMobile ChinaTelecom" default:"BGP"`
	BandwidthLimit int32  `thrift:"BandwidthLimit,3,required" validate:"required,gte=1,lte=500"`
}

func NewNetworkPermission() *NetworkPermission {
	return &NetworkPermission{

		ChargeType: "PostPaid",
		LanType:    "BGP",
	}
}

var NetworkPermission_ChargeType_DEFAULT string = "PostPaid"

func (p *NetworkPermission) GetChargeType() (v string) {
	if !p.IsSetChargeType() {
		return NetworkPermission_ChargeType_DEFAULT
	}
	return p.ChargeType
}

var NetworkPermission_LanType_DEFAULT string = "BGP"

func (p *NetworkPermission) GetLanType() (v string) {
	if !p.IsSetLanType() {
		return NetworkPermission_LanType_DEFAULT
	}
	return p.LanType
}

func (p *NetworkPermission) GetBandwidthLimit() (v int32) {
	return p.BandwidthLimit
}
func (p *NetworkPermission) SetChargeType(val string) {
	p.ChargeType = val
}
func (p *NetworkPermission) SetLanType(val string) {
	p.LanType = val
}
func (p *NetworkPermission) SetBandwidthLimit(val int32) {
	p.BandwidthLimit = val
}

var fieldIDToName_NetworkPermission = map[int16]string{
	1: "ChargeType",
	2: "LanType",
	3: "BandwidthLimit",
}

func (p *NetworkPermission) IsSetChargeType() bool {
	return p.ChargeType != NetworkPermission_ChargeType_DEFAULT
}

func (p *NetworkPermission) IsSetLanType() bool {
	return p.LanType != NetworkPermission_LanType_DEFAULT
}

func (p *NetworkPermission) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBandwidthLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetBandwidthLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBandwidthLimit {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NetworkPermission[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NetworkPermission[fieldId]))
}

func (p *NetworkPermission) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = v
	}
	return nil
}

func (p *NetworkPermission) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LanType = v
	}
	return nil
}

func (p *NetworkPermission) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BandwidthLimit = v
	}
	return nil
}

func (p *NetworkPermission) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NetworkPermission"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NetworkPermission) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetChargeType() {
		if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ChargeType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NetworkPermission) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLanType() {
		if err = oprot.WriteFieldBegin("LanType", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.LanType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NetworkPermission) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BandwidthLimit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.BandwidthLimit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NetworkPermission) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NetworkPermission(%+v)", *p)
}

func (p *NetworkPermission) DeepEqual(ano *NetworkPermission) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field2DeepEqual(ano.LanType) {
		return false
	}
	if !p.Field3DeepEqual(ano.BandwidthLimit) {
		return false
	}
	return true
}

func (p *NetworkPermission) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ChargeType, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkPermission) Field2DeepEqual(src string) bool {

	if strings.Compare(p.LanType, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkPermission) Field3DeepEqual(src int32) bool {

	if p.BandwidthLimit != src {
		return false
	}
	return true
}

type ClusterNetworkConfig struct {
	VpcId                 *string            `thrift:"VpcId,1" json:"VpcId,omitempty"`
	SubnetId              *string            `thrift:"SubnetId,2" json:"SubnetId,omitempty"`
	Type                  string             `thrift:"Type,3,required" validate:"required,oneof=Calico Flannel VPC-CNI"`
	Mode                  *string            `thrift:"Mode,4" json:"Mode,omitempty"`
	PodCidr               *string            `thrift:"PodCidr,5" json:"PodCidr,omitempty"`
	PodSubnets            []string           `thrift:"PodSubnets,6" json:"PodSubnets,omitempty"`
	ServiceCidr           string             `thrift:"ServiceCidr,7,required" validate:"required"`
	MaxNodePodNumber      *int32             `thrift:"MaxNodePodNumber,8" json:"MaxNodePodNumber,omitempty"`
	NodePublicAccess      bool               `thrift:"NodePublicAccess,9,required" json:"NodePublicAccess"`
	ApiServerPublicAccess *NetworkPermission `thrift:"ApiServerPublicAccess,10" json:"ApiServerPublicAccess,omitempty"`
	Vip                   *string            `thrift:"Vip,11" json:"Vip,omitempty"`
	SubnetIds             []string           `thrift:"SubnetIds,12" json:"SubnetIds,omitempty"`
}

func NewClusterNetworkConfig() *ClusterNetworkConfig {
	return &ClusterNetworkConfig{}
}

var ClusterNetworkConfig_VpcId_DEFAULT string

func (p *ClusterNetworkConfig) GetVpcId() (v string) {
	if !p.IsSetVpcId() {
		return ClusterNetworkConfig_VpcId_DEFAULT
	}
	return *p.VpcId
}

var ClusterNetworkConfig_SubnetId_DEFAULT string

func (p *ClusterNetworkConfig) GetSubnetId() (v string) {
	if !p.IsSetSubnetId() {
		return ClusterNetworkConfig_SubnetId_DEFAULT
	}
	return *p.SubnetId
}

func (p *ClusterNetworkConfig) GetType() (v string) {
	return p.Type
}

var ClusterNetworkConfig_Mode_DEFAULT string

func (p *ClusterNetworkConfig) GetMode() (v string) {
	if !p.IsSetMode() {
		return ClusterNetworkConfig_Mode_DEFAULT
	}
	return *p.Mode
}

var ClusterNetworkConfig_PodCidr_DEFAULT string

func (p *ClusterNetworkConfig) GetPodCidr() (v string) {
	if !p.IsSetPodCidr() {
		return ClusterNetworkConfig_PodCidr_DEFAULT
	}
	return *p.PodCidr
}

var ClusterNetworkConfig_PodSubnets_DEFAULT []string

func (p *ClusterNetworkConfig) GetPodSubnets() (v []string) {
	if !p.IsSetPodSubnets() {
		return ClusterNetworkConfig_PodSubnets_DEFAULT
	}
	return p.PodSubnets
}

func (p *ClusterNetworkConfig) GetServiceCidr() (v string) {
	return p.ServiceCidr
}

var ClusterNetworkConfig_MaxNodePodNumber_DEFAULT int32

func (p *ClusterNetworkConfig) GetMaxNodePodNumber() (v int32) {
	if !p.IsSetMaxNodePodNumber() {
		return ClusterNetworkConfig_MaxNodePodNumber_DEFAULT
	}
	return *p.MaxNodePodNumber
}

func (p *ClusterNetworkConfig) GetNodePublicAccess() (v bool) {
	return p.NodePublicAccess
}

var ClusterNetworkConfig_ApiServerPublicAccess_DEFAULT *NetworkPermission

func (p *ClusterNetworkConfig) GetApiServerPublicAccess() (v *NetworkPermission) {
	if !p.IsSetApiServerPublicAccess() {
		return ClusterNetworkConfig_ApiServerPublicAccess_DEFAULT
	}
	return p.ApiServerPublicAccess
}

var ClusterNetworkConfig_Vip_DEFAULT string

func (p *ClusterNetworkConfig) GetVip() (v string) {
	if !p.IsSetVip() {
		return ClusterNetworkConfig_Vip_DEFAULT
	}
	return *p.Vip
}

var ClusterNetworkConfig_SubnetIds_DEFAULT []string

func (p *ClusterNetworkConfig) GetSubnetIds() (v []string) {
	if !p.IsSetSubnetIds() {
		return ClusterNetworkConfig_SubnetIds_DEFAULT
	}
	return p.SubnetIds
}
func (p *ClusterNetworkConfig) SetVpcId(val *string) {
	p.VpcId = val
}
func (p *ClusterNetworkConfig) SetSubnetId(val *string) {
	p.SubnetId = val
}
func (p *ClusterNetworkConfig) SetType(val string) {
	p.Type = val
}
func (p *ClusterNetworkConfig) SetMode(val *string) {
	p.Mode = val
}
func (p *ClusterNetworkConfig) SetPodCidr(val *string) {
	p.PodCidr = val
}
func (p *ClusterNetworkConfig) SetPodSubnets(val []string) {
	p.PodSubnets = val
}
func (p *ClusterNetworkConfig) SetServiceCidr(val string) {
	p.ServiceCidr = val
}
func (p *ClusterNetworkConfig) SetMaxNodePodNumber(val *int32) {
	p.MaxNodePodNumber = val
}
func (p *ClusterNetworkConfig) SetNodePublicAccess(val bool) {
	p.NodePublicAccess = val
}
func (p *ClusterNetworkConfig) SetApiServerPublicAccess(val *NetworkPermission) {
	p.ApiServerPublicAccess = val
}
func (p *ClusterNetworkConfig) SetVip(val *string) {
	p.Vip = val
}
func (p *ClusterNetworkConfig) SetSubnetIds(val []string) {
	p.SubnetIds = val
}

var fieldIDToName_ClusterNetworkConfig = map[int16]string{
	1:  "VpcId",
	2:  "SubnetId",
	3:  "Type",
	4:  "Mode",
	5:  "PodCidr",
	6:  "PodSubnets",
	7:  "ServiceCidr",
	8:  "MaxNodePodNumber",
	9:  "NodePublicAccess",
	10: "ApiServerPublicAccess",
	11: "Vip",
	12: "SubnetIds",
}

func (p *ClusterNetworkConfig) IsSetVpcId() bool {
	return p.VpcId != nil
}

func (p *ClusterNetworkConfig) IsSetSubnetId() bool {
	return p.SubnetId != nil
}

func (p *ClusterNetworkConfig) IsSetMode() bool {
	return p.Mode != nil
}

func (p *ClusterNetworkConfig) IsSetPodCidr() bool {
	return p.PodCidr != nil
}

func (p *ClusterNetworkConfig) IsSetPodSubnets() bool {
	return p.PodSubnets != nil
}

func (p *ClusterNetworkConfig) IsSetMaxNodePodNumber() bool {
	return p.MaxNodePodNumber != nil
}

func (p *ClusterNetworkConfig) IsSetApiServerPublicAccess() bool {
	return p.ApiServerPublicAccess != nil
}

func (p *ClusterNetworkConfig) IsSetVip() bool {
	return p.Vip != nil
}

func (p *ClusterNetworkConfig) IsSetSubnetIds() bool {
	return p.SubnetIds != nil
}

func (p *ClusterNetworkConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	var issetServiceCidr bool = false
	var issetNodePublicAccess bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetServiceCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodePublicAccess = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetServiceCidr {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNodePublicAccess {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterNetworkConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterNetworkConfig[fieldId]))
}

func (p *ClusterNetworkConfig) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VpcId = &v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubnetId = &v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mode = &v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodCidr = &v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodSubnets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PodSubnets = append(p.PodSubnets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceCidr = v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MaxNodePodNumber = &v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.NodePublicAccess = v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField10(iprot thrift.TProtocol) error {
	p.ApiServerPublicAccess = NewNetworkPermission()
	if err := p.ApiServerPublicAccess.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Vip = &v
	}
	return nil
}

func (p *ClusterNetworkConfig) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SubnetIds = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SubnetIds = append(p.SubnetIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetworkConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterNetworkConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVpcId() {
		if err = oprot.WriteFieldBegin("VpcId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VpcId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnetId() {
		if err = oprot.WriteFieldBegin("SubnetId", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SubnetId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMode() {
		if err = oprot.WriteFieldBegin("Mode", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Mode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodCidr() {
		if err = oprot.WriteFieldBegin("PodCidr", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PodCidr); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodSubnets() {
		if err = oprot.WriteFieldBegin("PodSubnets", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PodSubnets)); err != nil {
			return err
		}
		for _, v := range p.PodSubnets {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ServiceCidr", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxNodePodNumber() {
		if err = oprot.WriteFieldBegin("MaxNodePodNumber", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxNodePodNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodePublicAccess", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.NodePublicAccess); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiServerPublicAccess() {
		if err = oprot.WriteFieldBegin("ApiServerPublicAccess", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ApiServerPublicAccess.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetVip() {
		if err = oprot.WriteFieldBegin("Vip", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Vip); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ClusterNetworkConfig) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnetIds() {
		if err = oprot.WriteFieldBegin("SubnetIds", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SubnetIds)); err != nil {
			return err
		}
		for _, v := range p.SubnetIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ClusterNetworkConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterNetworkConfig(%+v)", *p)
}

func (p *ClusterNetworkConfig) DeepEqual(ano *ClusterNetworkConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VpcId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SubnetId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.Mode) {
		return false
	}
	if !p.Field5DeepEqual(ano.PodCidr) {
		return false
	}
	if !p.Field6DeepEqual(ano.PodSubnets) {
		return false
	}
	if !p.Field7DeepEqual(ano.ServiceCidr) {
		return false
	}
	if !p.Field8DeepEqual(ano.MaxNodePodNumber) {
		return false
	}
	if !p.Field9DeepEqual(ano.NodePublicAccess) {
		return false
	}
	if !p.Field10DeepEqual(ano.ApiServerPublicAccess) {
		return false
	}
	if !p.Field11DeepEqual(ano.Vip) {
		return false
	}
	if !p.Field12DeepEqual(ano.SubnetIds) {
		return false
	}
	return true
}

func (p *ClusterNetworkConfig) Field1DeepEqual(src *string) bool {

	if p.VpcId == src {
		return true
	} else if p.VpcId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.VpcId, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field2DeepEqual(src *string) bool {

	if p.SubnetId == src {
		return true
	} else if p.SubnetId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SubnetId, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field4DeepEqual(src *string) bool {

	if p.Mode == src {
		return true
	} else if p.Mode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Mode, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field5DeepEqual(src *string) bool {

	if p.PodCidr == src {
		return true
	} else if p.PodCidr == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PodCidr, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field6DeepEqual(src []string) bool {

	if len(p.PodSubnets) != len(src) {
		return false
	}
	for i, v := range p.PodSubnets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ClusterNetworkConfig) Field7DeepEqual(src string) bool {

	if strings.Compare(p.ServiceCidr, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field8DeepEqual(src *int32) bool {

	if p.MaxNodePodNumber == src {
		return true
	} else if p.MaxNodePodNumber == nil || src == nil {
		return false
	}
	if *p.MaxNodePodNumber != *src {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field9DeepEqual(src bool) bool {

	if p.NodePublicAccess != src {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field10DeepEqual(src *NetworkPermission) bool {

	if !p.ApiServerPublicAccess.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field11DeepEqual(src *string) bool {

	if p.Vip == src {
		return true
	} else if p.Vip == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Vip, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetworkConfig) Field12DeepEqual(src []string) bool {

	if len(p.SubnetIds) != len(src) {
		return false
	}
	for i, v := range p.SubnetIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type Address struct {
	Ipv4 *string `thrift:"Ipv4,1" json:"Ipv4,omitempty"`
}

func NewAddress() *Address {
	return &Address{}
}

var Address_Ipv4_DEFAULT string

func (p *Address) GetIpv4() (v string) {
	if !p.IsSetIpv4() {
		return Address_Ipv4_DEFAULT
	}
	return *p.Ipv4
}
func (p *Address) SetIpv4(val *string) {
	p.Ipv4 = val
}

var fieldIDToName_Address = map[int16]string{
	1: "Ipv4",
}

func (p *Address) IsSetIpv4() bool {
	return p.Ipv4 != nil
}

func (p *Address) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Address[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Address) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Ipv4 = &v
	}
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Address"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIpv4() {
		if err = oprot.WriteFieldBegin("Ipv4", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Ipv4); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)
}

func (p *Address) DeepEqual(ano *Address) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ipv4) {
		return false
	}
	return true
}

func (p *Address) Field1DeepEqual(src *string) bool {

	if p.Ipv4 == src {
		return true
	} else if p.Ipv4 == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Ipv4, *src) != 0 {
		return false
	}
	return true
}

type ClusterNetwork struct {
	Vpc                      *iaas.Vpc `thrift:"Vpc,1,required" json:"Vpc"`
	Type                     *string   `thrift:"Type,2" json:"Type,omitempty"`
	Mode                     *string   `thrift:"Mode,3" json:"Mode,omitempty"`
	PodCidr                  string    `thrift:"PodCidr,4,required" json:"PodCidr"`
	MaxNodePodNumber         int32     `thrift:"MaxNodePodNumber,5,required" json:"MaxNodePodNumber"`
	ServiceCidr              string    `thrift:"ServiceCidr,6,required" json:"ServiceCidr"`
	KubeProxyMode            string    `thrift:"KubeProxyMode,7,required" json:"KubeProxyMode"`
	ApiServerInternalAddress *Address  `thrift:"ApiServerInternalAddress,8,required" json:"ApiServerInternalAddress"`
	ApiServerPublicAddress   *Address  `thrift:"ApiServerPublicAddress,9" json:"ApiServerPublicAddress,omitempty"`
	EnableApiServerPublic    bool      `thrift:"EnableApiServerPublic,10,required" json:"EnableApiServerPublic"`
	PodSubnets               []string  `thrift:"PodSubnets,11" json:"PodSubnets,omitempty"`
	Zones                    []string  `thrift:"Zones,12" json:"Zones,omitempty"`
}

func NewClusterNetwork() *ClusterNetwork {
	return &ClusterNetwork{}
}

var ClusterNetwork_Vpc_DEFAULT *iaas.Vpc

func (p *ClusterNetwork) GetVpc() (v *iaas.Vpc) {
	if !p.IsSetVpc() {
		return ClusterNetwork_Vpc_DEFAULT
	}
	return p.Vpc
}

var ClusterNetwork_Type_DEFAULT string

func (p *ClusterNetwork) GetType() (v string) {
	if !p.IsSetType() {
		return ClusterNetwork_Type_DEFAULT
	}
	return *p.Type
}

var ClusterNetwork_Mode_DEFAULT string

func (p *ClusterNetwork) GetMode() (v string) {
	if !p.IsSetMode() {
		return ClusterNetwork_Mode_DEFAULT
	}
	return *p.Mode
}

func (p *ClusterNetwork) GetPodCidr() (v string) {
	return p.PodCidr
}

func (p *ClusterNetwork) GetMaxNodePodNumber() (v int32) {
	return p.MaxNodePodNumber
}

func (p *ClusterNetwork) GetServiceCidr() (v string) {
	return p.ServiceCidr
}

func (p *ClusterNetwork) GetKubeProxyMode() (v string) {
	return p.KubeProxyMode
}

var ClusterNetwork_ApiServerInternalAddress_DEFAULT *Address

func (p *ClusterNetwork) GetApiServerInternalAddress() (v *Address) {
	if !p.IsSetApiServerInternalAddress() {
		return ClusterNetwork_ApiServerInternalAddress_DEFAULT
	}
	return p.ApiServerInternalAddress
}

var ClusterNetwork_ApiServerPublicAddress_DEFAULT *Address

func (p *ClusterNetwork) GetApiServerPublicAddress() (v *Address) {
	if !p.IsSetApiServerPublicAddress() {
		return ClusterNetwork_ApiServerPublicAddress_DEFAULT
	}
	return p.ApiServerPublicAddress
}

func (p *ClusterNetwork) GetEnableApiServerPublic() (v bool) {
	return p.EnableApiServerPublic
}

var ClusterNetwork_PodSubnets_DEFAULT []string

func (p *ClusterNetwork) GetPodSubnets() (v []string) {
	if !p.IsSetPodSubnets() {
		return ClusterNetwork_PodSubnets_DEFAULT
	}
	return p.PodSubnets
}

var ClusterNetwork_Zones_DEFAULT []string

func (p *ClusterNetwork) GetZones() (v []string) {
	if !p.IsSetZones() {
		return ClusterNetwork_Zones_DEFAULT
	}
	return p.Zones
}
func (p *ClusterNetwork) SetVpc(val *iaas.Vpc) {
	p.Vpc = val
}
func (p *ClusterNetwork) SetType(val *string) {
	p.Type = val
}
func (p *ClusterNetwork) SetMode(val *string) {
	p.Mode = val
}
func (p *ClusterNetwork) SetPodCidr(val string) {
	p.PodCidr = val
}
func (p *ClusterNetwork) SetMaxNodePodNumber(val int32) {
	p.MaxNodePodNumber = val
}
func (p *ClusterNetwork) SetServiceCidr(val string) {
	p.ServiceCidr = val
}
func (p *ClusterNetwork) SetKubeProxyMode(val string) {
	p.KubeProxyMode = val
}
func (p *ClusterNetwork) SetApiServerInternalAddress(val *Address) {
	p.ApiServerInternalAddress = val
}
func (p *ClusterNetwork) SetApiServerPublicAddress(val *Address) {
	p.ApiServerPublicAddress = val
}
func (p *ClusterNetwork) SetEnableApiServerPublic(val bool) {
	p.EnableApiServerPublic = val
}
func (p *ClusterNetwork) SetPodSubnets(val []string) {
	p.PodSubnets = val
}
func (p *ClusterNetwork) SetZones(val []string) {
	p.Zones = val
}

var fieldIDToName_ClusterNetwork = map[int16]string{
	1:  "Vpc",
	2:  "Type",
	3:  "Mode",
	4:  "PodCidr",
	5:  "MaxNodePodNumber",
	6:  "ServiceCidr",
	7:  "KubeProxyMode",
	8:  "ApiServerInternalAddress",
	9:  "ApiServerPublicAddress",
	10: "EnableApiServerPublic",
	11: "PodSubnets",
	12: "Zones",
}

func (p *ClusterNetwork) IsSetVpc() bool {
	return p.Vpc != nil
}

func (p *ClusterNetwork) IsSetType() bool {
	return p.Type != nil
}

func (p *ClusterNetwork) IsSetMode() bool {
	return p.Mode != nil
}

func (p *ClusterNetwork) IsSetApiServerInternalAddress() bool {
	return p.ApiServerInternalAddress != nil
}

func (p *ClusterNetwork) IsSetApiServerPublicAddress() bool {
	return p.ApiServerPublicAddress != nil
}

func (p *ClusterNetwork) IsSetPodSubnets() bool {
	return p.PodSubnets != nil
}

func (p *ClusterNetwork) IsSetZones() bool {
	return p.Zones != nil
}

func (p *ClusterNetwork) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVpc bool = false
	var issetPodCidr bool = false
	var issetMaxNodePodNumber bool = false
	var issetServiceCidr bool = false
	var issetKubeProxyMode bool = false
	var issetApiServerInternalAddress bool = false
	var issetEnableApiServerPublic bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpc = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetMaxNodePodNumber = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetServiceCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubeProxyMode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetApiServerInternalAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableApiServerPublic = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVpc {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPodCidr {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetMaxNodePodNumber {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetServiceCidr {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetKubeProxyMode {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetApiServerInternalAddress {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetEnableApiServerPublic {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterNetwork[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterNetwork[fieldId]))
}

func (p *ClusterNetwork) ReadField1(iprot thrift.TProtocol) error {
	p.Vpc = iaas.NewVpc()
	if err := p.Vpc.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetwork) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = &v
	}
	return nil
}

func (p *ClusterNetwork) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Mode = &v
	}
	return nil
}

func (p *ClusterNetwork) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodCidr = v
	}
	return nil
}

func (p *ClusterNetwork) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MaxNodePodNumber = v
	}
	return nil
}

func (p *ClusterNetwork) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceCidr = v
	}
	return nil
}

func (p *ClusterNetwork) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubeProxyMode = v
	}
	return nil
}

func (p *ClusterNetwork) ReadField8(iprot thrift.TProtocol) error {
	p.ApiServerInternalAddress = NewAddress()
	if err := p.ApiServerInternalAddress.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetwork) ReadField9(iprot thrift.TProtocol) error {
	p.ApiServerPublicAddress = NewAddress()
	if err := p.ApiServerPublicAddress.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetwork) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableApiServerPublic = v
	}
	return nil
}

func (p *ClusterNetwork) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodSubnets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PodSubnets = append(p.PodSubnets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetwork) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Zones = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Zones = append(p.Zones, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNetwork) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterNetwork"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterNetwork) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Vpc", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Vpc.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterNetwork) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterNetwork) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMode() {
		if err = oprot.WriteFieldBegin("Mode", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Mode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterNetwork) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodCidr", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PodCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterNetwork) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MaxNodePodNumber", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxNodePodNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterNetwork) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ServiceCidr", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ClusterNetwork) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubeProxyMode", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubeProxyMode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ClusterNetwork) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ApiServerInternalAddress", thrift.STRUCT, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ApiServerInternalAddress.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ClusterNetwork) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiServerPublicAddress() {
		if err = oprot.WriteFieldBegin("ApiServerPublicAddress", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ApiServerPublicAddress.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ClusterNetwork) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnableApiServerPublic", thrift.BOOL, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableApiServerPublic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ClusterNetwork) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodSubnets() {
		if err = oprot.WriteFieldBegin("PodSubnets", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PodSubnets)); err != nil {
			return err
		}
		for _, v := range p.PodSubnets {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ClusterNetwork) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetZones() {
		if err = oprot.WriteFieldBegin("Zones", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Zones)); err != nil {
			return err
		}
		for _, v := range p.Zones {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ClusterNetwork) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterNetwork(%+v)", *p)
}

func (p *ClusterNetwork) DeepEqual(ano *ClusterNetwork) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Vpc) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Mode) {
		return false
	}
	if !p.Field4DeepEqual(ano.PodCidr) {
		return false
	}
	if !p.Field5DeepEqual(ano.MaxNodePodNumber) {
		return false
	}
	if !p.Field6DeepEqual(ano.ServiceCidr) {
		return false
	}
	if !p.Field7DeepEqual(ano.KubeProxyMode) {
		return false
	}
	if !p.Field8DeepEqual(ano.ApiServerInternalAddress) {
		return false
	}
	if !p.Field9DeepEqual(ano.ApiServerPublicAddress) {
		return false
	}
	if !p.Field10DeepEqual(ano.EnableApiServerPublic) {
		return false
	}
	if !p.Field11DeepEqual(ano.PodSubnets) {
		return false
	}
	if !p.Field12DeepEqual(ano.Zones) {
		return false
	}
	return true
}

func (p *ClusterNetwork) Field1DeepEqual(src *iaas.Vpc) bool {

	if !p.Vpc.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field2DeepEqual(src *string) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field3DeepEqual(src *string) bool {

	if p.Mode == src {
		return true
	} else if p.Mode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Mode, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PodCidr, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field5DeepEqual(src int32) bool {

	if p.MaxNodePodNumber != src {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ServiceCidr, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field7DeepEqual(src string) bool {

	if strings.Compare(p.KubeProxyMode, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field8DeepEqual(src *Address) bool {

	if !p.ApiServerInternalAddress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field9DeepEqual(src *Address) bool {

	if !p.ApiServerPublicAddress.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field10DeepEqual(src bool) bool {

	if p.EnableApiServerPublic != src {
		return false
	}
	return true
}
func (p *ClusterNetwork) Field11DeepEqual(src []string) bool {

	if len(p.PodSubnets) != len(src) {
		return false
	}
	for i, v := range p.PodSubnets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ClusterNetwork) Field12DeepEqual(src []string) bool {

	if len(p.Zones) != len(src) {
		return false
	}
	for i, v := range p.Zones {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type OnPremiseNode struct {
	Id string `thrift:"Id,1,required" validate:"required"`
}

func NewOnPremiseNode() *OnPremiseNode {
	return &OnPremiseNode{}
}

func (p *OnPremiseNode) GetId() (v string) {
	return p.Id
}
func (p *OnPremiseNode) SetId(val string) {
	p.Id = val
}

var fieldIDToName_OnPremiseNode = map[int16]string{
	1: "Id",
}

func (p *OnPremiseNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnPremiseNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_OnPremiseNode[fieldId]))
}

func (p *OnPremiseNode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *OnPremiseNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OnPremiseNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnPremiseNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OnPremiseNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnPremiseNode(%+v)", *p)
}

func (p *OnPremiseNode) DeepEqual(ano *OnPremiseNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *OnPremiseNode) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}

type ExistingNode struct {
	InstanceId string `thrift:"InstanceId,1,required" validate:"required"`
}

func NewExistingNode() *ExistingNode {
	return &ExistingNode{}
}

func (p *ExistingNode) GetInstanceId() (v string) {
	return p.InstanceId
}
func (p *ExistingNode) SetInstanceId(val string) {
	p.InstanceId = val
}

var fieldIDToName_ExistingNode = map[int16]string{
	1: "InstanceId",
}

func (p *ExistingNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInstanceId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInstanceId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExistingNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ExistingNode[fieldId]))
}

func (p *ExistingNode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.InstanceId = v
	}
	return nil
}

func (p *ExistingNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExistingNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExistingNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InstanceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExistingNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExistingNode(%+v)", *p)
}

func (p *ExistingNode) DeepEqual(ano *ExistingNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InstanceId) {
		return false
	}
	return true
}

func (p *ExistingNode) Field1DeepEqual(src string) bool {

	if strings.Compare(p.InstanceId, src) != 0 {
		return false
	}
	return true
}

type NewNode_ struct {
	ZoneId         *string   `thrift:"ZoneId,1" json:"ZoneId,omitempty"`
	SubnetId       string    `thrift:"SubnetId,2,required" validate:"required"`
	ChargeType     *string   `thrift:"ChargeType,3" json:"ChargeType" validate:"oneof=PostPaid" default:"PostPaid"`
	InstanceTypeId string    `thrift:"InstanceTypeId,4,required" json:"InstanceTypeId"`
	ImageId        string    `thrift:"ImageId,5" json:"ImageId,omitempty"`
	RootVolume     *Volume   `thrift:"RootVolume,6,required" validate:"required"`
	DataVolumes    []*Volume `thrift:"DataVolumes,7" json:"DataVolumes,omitempty"`
	Amount         int32     `thrift:"Amount,8,required" validate:"required"`
}

func NewNewNode_() *NewNode_ {
	return &NewNode_{

		ImageId: "Velinux-VKE",
	}
}

var NewNode__ZoneId_DEFAULT string

func (p *NewNode_) GetZoneId() (v string) {
	if !p.IsSetZoneId() {
		return NewNode__ZoneId_DEFAULT
	}
	return *p.ZoneId
}

func (p *NewNode_) GetSubnetId() (v string) {
	return p.SubnetId
}

var NewNode__ChargeType_DEFAULT string

func (p *NewNode_) GetChargeType() (v string) {
	if !p.IsSetChargeType() {
		return NewNode__ChargeType_DEFAULT
	}
	return *p.ChargeType
}

func (p *NewNode_) GetInstanceTypeId() (v string) {
	return p.InstanceTypeId
}

var NewNode__ImageId_DEFAULT string = "Velinux-VKE"

func (p *NewNode_) GetImageId() (v string) {
	if !p.IsSetImageId() {
		return NewNode__ImageId_DEFAULT
	}
	return p.ImageId
}

var NewNode__RootVolume_DEFAULT *Volume

func (p *NewNode_) GetRootVolume() (v *Volume) {
	if !p.IsSetRootVolume() {
		return NewNode__RootVolume_DEFAULT
	}
	return p.RootVolume
}

var NewNode__DataVolumes_DEFAULT []*Volume

func (p *NewNode_) GetDataVolumes() (v []*Volume) {
	if !p.IsSetDataVolumes() {
		return NewNode__DataVolumes_DEFAULT
	}
	return p.DataVolumes
}

func (p *NewNode_) GetAmount() (v int32) {
	return p.Amount
}
func (p *NewNode_) SetZoneId(val *string) {
	p.ZoneId = val
}
func (p *NewNode_) SetSubnetId(val string) {
	p.SubnetId = val
}
func (p *NewNode_) SetChargeType(val *string) {
	p.ChargeType = val
}
func (p *NewNode_) SetInstanceTypeId(val string) {
	p.InstanceTypeId = val
}
func (p *NewNode_) SetImageId(val string) {
	p.ImageId = val
}
func (p *NewNode_) SetRootVolume(val *Volume) {
	p.RootVolume = val
}
func (p *NewNode_) SetDataVolumes(val []*Volume) {
	p.DataVolumes = val
}
func (p *NewNode_) SetAmount(val int32) {
	p.Amount = val
}

var fieldIDToName_NewNode_ = map[int16]string{
	1: "ZoneId",
	2: "SubnetId",
	3: "ChargeType",
	4: "InstanceTypeId",
	5: "ImageId",
	6: "RootVolume",
	7: "DataVolumes",
	8: "Amount",
}

func (p *NewNode_) IsSetZoneId() bool {
	return p.ZoneId != nil
}

func (p *NewNode_) IsSetChargeType() bool {
	return p.ChargeType != nil
}

func (p *NewNode_) IsSetImageId() bool {
	return p.ImageId != NewNode__ImageId_DEFAULT
}

func (p *NewNode_) IsSetRootVolume() bool {
	return p.RootVolume != nil
}

func (p *NewNode_) IsSetDataVolumes() bool {
	return p.DataVolumes != nil
}

func (p *NewNode_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSubnetId bool = false
	var issetInstanceTypeId bool = false
	var issetRootVolume bool = false
	var issetAmount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSubnetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceTypeId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetRootVolume = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSubnetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetInstanceTypeId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRootVolume {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetAmount {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NewNode_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NewNode_[fieldId]))
}

func (p *NewNode_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ZoneId = &v
	}
	return nil
}

func (p *NewNode_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubnetId = v
	}
	return nil
}

func (p *NewNode_) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = &v
	}
	return nil
}

func (p *NewNode_) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.InstanceTypeId = v
	}
	return nil
}

func (p *NewNode_) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ImageId = v
	}
	return nil
}

func (p *NewNode_) ReadField6(iprot thrift.TProtocol) error {
	p.RootVolume = NewVolume()
	if err := p.RootVolume.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NewNode_) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DataVolumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.DataVolumes = append(p.DataVolumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NewNode_) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Amount = v
	}
	return nil
}

func (p *NewNode_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NewNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NewNode_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetZoneId() {
		if err = oprot.WriteFieldBegin("ZoneId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ZoneId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NewNode_) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SubnetId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SubnetId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NewNode_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetChargeType() {
		if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChargeType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NewNode_) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceTypeId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InstanceTypeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NewNode_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageId() {
		if err = oprot.WriteFieldBegin("ImageId", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ImageId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NewNode_) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RootVolume", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RootVolume.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NewNode_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataVolumes() {
		if err = oprot.WriteFieldBegin("DataVolumes", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DataVolumes)); err != nil {
			return err
		}
		for _, v := range p.DataVolumes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NewNode_) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Amount", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NewNode_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NewNode_(%+v)", *p)
}

func (p *NewNode_) DeepEqual(ano *NewNode_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ZoneId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SubnetId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field4DeepEqual(ano.InstanceTypeId) {
		return false
	}
	if !p.Field5DeepEqual(ano.ImageId) {
		return false
	}
	if !p.Field6DeepEqual(ano.RootVolume) {
		return false
	}
	if !p.Field7DeepEqual(ano.DataVolumes) {
		return false
	}
	if !p.Field8DeepEqual(ano.Amount) {
		return false
	}
	return true
}

func (p *NewNode_) Field1DeepEqual(src *string) bool {

	if p.ZoneId == src {
		return true
	} else if p.ZoneId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ZoneId, *src) != 0 {
		return false
	}
	return true
}
func (p *NewNode_) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SubnetId, src) != 0 {
		return false
	}
	return true
}
func (p *NewNode_) Field3DeepEqual(src *string) bool {

	if p.ChargeType == src {
		return true
	} else if p.ChargeType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChargeType, *src) != 0 {
		return false
	}
	return true
}
func (p *NewNode_) Field4DeepEqual(src string) bool {

	if strings.Compare(p.InstanceTypeId, src) != 0 {
		return false
	}
	return true
}
func (p *NewNode_) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ImageId, src) != 0 {
		return false
	}
	return true
}
func (p *NewNode_) Field6DeepEqual(src *Volume) bool {

	if !p.RootVolume.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NewNode_) Field7DeepEqual(src []*Volume) bool {

	if len(p.DataVolumes) != len(src) {
		return false
	}
	for i, v := range p.DataVolumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NewNode_) Field8DeepEqual(src int32) bool {

	if p.Amount != src {
		return false
	}
	return true
}

type NodeBaseConfig struct {
	ExistingNode  *ExistingNode  `thrift:"ExistingNode,1" json:"ExistingNode,omitempty"`
	NewNode_      *NewNode_      `thrift:"NewNode,2" json:"NewNode,omitempty"`
	OnPremiseNode *OnPremiseNode `thrift:"OnPremiseNode,3" json:"OnPremiseNode,omitempty"`
}

func NewNodeBaseConfig() *NodeBaseConfig {
	return &NodeBaseConfig{}
}

var NodeBaseConfig_ExistingNode_DEFAULT *ExistingNode

func (p *NodeBaseConfig) GetExistingNode() (v *ExistingNode) {
	if !p.IsSetExistingNode() {
		return NodeBaseConfig_ExistingNode_DEFAULT
	}
	return p.ExistingNode
}

var NodeBaseConfig_NewNode__DEFAULT *NewNode_

func (p *NodeBaseConfig) GetNewNode_() (v *NewNode_) {
	if !p.IsSetNewNode_() {
		return NodeBaseConfig_NewNode__DEFAULT
	}
	return p.NewNode_
}

var NodeBaseConfig_OnPremiseNode_DEFAULT *OnPremiseNode

func (p *NodeBaseConfig) GetOnPremiseNode() (v *OnPremiseNode) {
	if !p.IsSetOnPremiseNode() {
		return NodeBaseConfig_OnPremiseNode_DEFAULT
	}
	return p.OnPremiseNode
}
func (p *NodeBaseConfig) SetExistingNode(val *ExistingNode) {
	p.ExistingNode = val
}
func (p *NodeBaseConfig) SetNewNode_(val *NewNode_) {
	p.NewNode_ = val
}
func (p *NodeBaseConfig) SetOnPremiseNode(val *OnPremiseNode) {
	p.OnPremiseNode = val
}

var fieldIDToName_NodeBaseConfig = map[int16]string{
	1: "ExistingNode",
	2: "NewNode",
	3: "OnPremiseNode",
}

func (p *NodeBaseConfig) IsSetExistingNode() bool {
	return p.ExistingNode != nil
}

func (p *NodeBaseConfig) IsSetNewNode_() bool {
	return p.NewNode_ != nil
}

func (p *NodeBaseConfig) IsSetOnPremiseNode() bool {
	return p.OnPremiseNode != nil
}

func (p *NodeBaseConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodeBaseConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NodeBaseConfig) ReadField1(iprot thrift.TProtocol) error {
	p.ExistingNode = NewExistingNode()
	if err := p.ExistingNode.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodeBaseConfig) ReadField2(iprot thrift.TProtocol) error {
	p.NewNode_ = NewNewNode_()
	if err := p.NewNode_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodeBaseConfig) ReadField3(iprot thrift.TProtocol) error {
	p.OnPremiseNode = NewOnPremiseNode()
	if err := p.OnPremiseNode.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodeBaseConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeBaseConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodeBaseConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExistingNode() {
		if err = oprot.WriteFieldBegin("ExistingNode", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExistingNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodeBaseConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNewNode_() {
		if err = oprot.WriteFieldBegin("NewNode", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NewNode_.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodeBaseConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnPremiseNode() {
		if err = oprot.WriteFieldBegin("OnPremiseNode", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OnPremiseNode.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodeBaseConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeBaseConfig(%+v)", *p)
}

func (p *NodeBaseConfig) DeepEqual(ano *NodeBaseConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExistingNode) {
		return false
	}
	if !p.Field2DeepEqual(ano.NewNode_) {
		return false
	}
	if !p.Field3DeepEqual(ano.OnPremiseNode) {
		return false
	}
	return true
}

func (p *NodeBaseConfig) Field1DeepEqual(src *ExistingNode) bool {

	if !p.ExistingNode.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodeBaseConfig) Field2DeepEqual(src *NewNode_) bool {

	if !p.NewNode_.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodeBaseConfig) Field3DeepEqual(src *OnPremiseNode) bool {

	if !p.OnPremiseNode.DeepEqual(src) {
		return false
	}
	return true
}

type ClusterNodeConfig struct {
	Masters            []*NodeBaseConfig `thrift:"Masters,1" json:"Masters,omitempty"`
	Workers            []*NodeBaseConfig `thrift:"Workers,2" json:"Workers,omitempty"`
	SecurityGroups     []string          `thrift:"SecurityGroups,3" json:"SecurityGroups,omitempty"`
	Login              *Login            `thrift:"Login,4" json:"Login,omitempty"`
	NamePrefix         *string           `thrift:"NamePrefix,5" json:"NamePrefix,omitempty"`
	PreScript          *string           `thrift:"PreScript,6" json:"PreScript,omitempty"`
	PostScript         *string           `thrift:"PostScript,7" json:"PostScript,omitempty"`
	Cordon             bool              `thrift:"Cordon,8" json:"Cordon,omitempty"`
	SecurityStrategies []string          `thrift:"SecurityStrategies,9" json:"SecurityStrategies,omitempty"`
}

func NewClusterNodeConfig() *ClusterNodeConfig {
	return &ClusterNodeConfig{

		Cordon: false,
	}
}

var ClusterNodeConfig_Masters_DEFAULT []*NodeBaseConfig

func (p *ClusterNodeConfig) GetMasters() (v []*NodeBaseConfig) {
	if !p.IsSetMasters() {
		return ClusterNodeConfig_Masters_DEFAULT
	}
	return p.Masters
}

var ClusterNodeConfig_Workers_DEFAULT []*NodeBaseConfig

func (p *ClusterNodeConfig) GetWorkers() (v []*NodeBaseConfig) {
	if !p.IsSetWorkers() {
		return ClusterNodeConfig_Workers_DEFAULT
	}
	return p.Workers
}

var ClusterNodeConfig_SecurityGroups_DEFAULT []string

func (p *ClusterNodeConfig) GetSecurityGroups() (v []string) {
	if !p.IsSetSecurityGroups() {
		return ClusterNodeConfig_SecurityGroups_DEFAULT
	}
	return p.SecurityGroups
}

var ClusterNodeConfig_Login_DEFAULT *Login

func (p *ClusterNodeConfig) GetLogin() (v *Login) {
	if !p.IsSetLogin() {
		return ClusterNodeConfig_Login_DEFAULT
	}
	return p.Login
}

var ClusterNodeConfig_NamePrefix_DEFAULT string

func (p *ClusterNodeConfig) GetNamePrefix() (v string) {
	if !p.IsSetNamePrefix() {
		return ClusterNodeConfig_NamePrefix_DEFAULT
	}
	return *p.NamePrefix
}

var ClusterNodeConfig_PreScript_DEFAULT string

func (p *ClusterNodeConfig) GetPreScript() (v string) {
	if !p.IsSetPreScript() {
		return ClusterNodeConfig_PreScript_DEFAULT
	}
	return *p.PreScript
}

var ClusterNodeConfig_PostScript_DEFAULT string

func (p *ClusterNodeConfig) GetPostScript() (v string) {
	if !p.IsSetPostScript() {
		return ClusterNodeConfig_PostScript_DEFAULT
	}
	return *p.PostScript
}

var ClusterNodeConfig_Cordon_DEFAULT bool = false

func (p *ClusterNodeConfig) GetCordon() (v bool) {
	if !p.IsSetCordon() {
		return ClusterNodeConfig_Cordon_DEFAULT
	}
	return p.Cordon
}

var ClusterNodeConfig_SecurityStrategies_DEFAULT []string

func (p *ClusterNodeConfig) GetSecurityStrategies() (v []string) {
	if !p.IsSetSecurityStrategies() {
		return ClusterNodeConfig_SecurityStrategies_DEFAULT
	}
	return p.SecurityStrategies
}
func (p *ClusterNodeConfig) SetMasters(val []*NodeBaseConfig) {
	p.Masters = val
}
func (p *ClusterNodeConfig) SetWorkers(val []*NodeBaseConfig) {
	p.Workers = val
}
func (p *ClusterNodeConfig) SetSecurityGroups(val []string) {
	p.SecurityGroups = val
}
func (p *ClusterNodeConfig) SetLogin(val *Login) {
	p.Login = val
}
func (p *ClusterNodeConfig) SetNamePrefix(val *string) {
	p.NamePrefix = val
}
func (p *ClusterNodeConfig) SetPreScript(val *string) {
	p.PreScript = val
}
func (p *ClusterNodeConfig) SetPostScript(val *string) {
	p.PostScript = val
}
func (p *ClusterNodeConfig) SetCordon(val bool) {
	p.Cordon = val
}
func (p *ClusterNodeConfig) SetSecurityStrategies(val []string) {
	p.SecurityStrategies = val
}

var fieldIDToName_ClusterNodeConfig = map[int16]string{
	1: "Masters",
	2: "Workers",
	3: "SecurityGroups",
	4: "Login",
	5: "NamePrefix",
	6: "PreScript",
	7: "PostScript",
	8: "Cordon",
	9: "SecurityStrategies",
}

func (p *ClusterNodeConfig) IsSetMasters() bool {
	return p.Masters != nil
}

func (p *ClusterNodeConfig) IsSetWorkers() bool {
	return p.Workers != nil
}

func (p *ClusterNodeConfig) IsSetSecurityGroups() bool {
	return p.SecurityGroups != nil
}

func (p *ClusterNodeConfig) IsSetLogin() bool {
	return p.Login != nil
}

func (p *ClusterNodeConfig) IsSetNamePrefix() bool {
	return p.NamePrefix != nil
}

func (p *ClusterNodeConfig) IsSetPreScript() bool {
	return p.PreScript != nil
}

func (p *ClusterNodeConfig) IsSetPostScript() bool {
	return p.PostScript != nil
}

func (p *ClusterNodeConfig) IsSetCordon() bool {
	return p.Cordon != ClusterNodeConfig_Cordon_DEFAULT
}

func (p *ClusterNodeConfig) IsSetSecurityStrategies() bool {
	return p.SecurityStrategies != nil
}

func (p *ClusterNodeConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterNodeConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClusterNodeConfig) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Masters = make([]*NodeBaseConfig, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodeBaseConfig()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Masters = append(p.Masters, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Workers = make([]*NodeBaseConfig, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodeBaseConfig()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Workers = append(p.Workers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityGroups = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SecurityGroups = append(p.SecurityGroups, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField4(iprot thrift.TProtocol) error {
	p.Login = NewLogin()
	if err := p.Login.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NamePrefix = &v
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PreScript = &v
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostScript = &v
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Cordon = v
	}
	return nil
}

func (p *ClusterNodeConfig) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityStrategies = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SecurityStrategies = append(p.SecurityStrategies, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterNodeConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasters() {
		if err = oprot.WriteFieldBegin("Masters", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Masters)); err != nil {
			return err
		}
		for _, v := range p.Masters {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkers() {
		if err = oprot.WriteFieldBegin("Workers", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Workers)); err != nil {
			return err
		}
		for _, v := range p.Workers {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecurityGroups() {
		if err = oprot.WriteFieldBegin("SecurityGroups", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SecurityGroups)); err != nil {
			return err
		}
		for _, v := range p.SecurityGroups {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogin() {
		if err = oprot.WriteFieldBegin("Login", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Login.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamePrefix() {
		if err = oprot.WriteFieldBegin("NamePrefix", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NamePrefix); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreScript() {
		if err = oprot.WriteFieldBegin("PreScript", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PreScript); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPostScript() {
		if err = oprot.WriteFieldBegin("PostScript", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PostScript); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCordon() {
		if err = oprot.WriteFieldBegin("Cordon", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Cordon); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ClusterNodeConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecurityStrategies() {
		if err = oprot.WriteFieldBegin("SecurityStrategies", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SecurityStrategies)); err != nil {
			return err
		}
		for _, v := range p.SecurityStrategies {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ClusterNodeConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterNodeConfig(%+v)", *p)
}

func (p *ClusterNodeConfig) DeepEqual(ano *ClusterNodeConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Masters) {
		return false
	}
	if !p.Field2DeepEqual(ano.Workers) {
		return false
	}
	if !p.Field3DeepEqual(ano.SecurityGroups) {
		return false
	}
	if !p.Field4DeepEqual(ano.Login) {
		return false
	}
	if !p.Field5DeepEqual(ano.NamePrefix) {
		return false
	}
	if !p.Field6DeepEqual(ano.PreScript) {
		return false
	}
	if !p.Field7DeepEqual(ano.PostScript) {
		return false
	}
	if !p.Field8DeepEqual(ano.Cordon) {
		return false
	}
	if !p.Field9DeepEqual(ano.SecurityStrategies) {
		return false
	}
	return true
}

func (p *ClusterNodeConfig) Field1DeepEqual(src []*NodeBaseConfig) bool {

	if len(p.Masters) != len(src) {
		return false
	}
	for i, v := range p.Masters {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ClusterNodeConfig) Field2DeepEqual(src []*NodeBaseConfig) bool {

	if len(p.Workers) != len(src) {
		return false
	}
	for i, v := range p.Workers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ClusterNodeConfig) Field3DeepEqual(src []string) bool {

	if len(p.SecurityGroups) != len(src) {
		return false
	}
	for i, v := range p.SecurityGroups {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ClusterNodeConfig) Field4DeepEqual(src *Login) bool {

	if !p.Login.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNodeConfig) Field5DeepEqual(src *string) bool {

	if p.NamePrefix == src {
		return true
	} else if p.NamePrefix == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NamePrefix, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeConfig) Field6DeepEqual(src *string) bool {

	if p.PreScript == src {
		return true
	} else if p.PreScript == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PreScript, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeConfig) Field7DeepEqual(src *string) bool {

	if p.PostScript == src {
		return true
	} else if p.PostScript == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PostScript, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeConfig) Field8DeepEqual(src bool) bool {

	if p.Cordon != src {
		return false
	}
	return true
}
func (p *ClusterNodeConfig) Field9DeepEqual(src []string) bool {

	if len(p.SecurityStrategies) != len(src) {
		return false
	}
	for i, v := range p.SecurityStrategies {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type CreateClusterRequest struct {
	Name                   string                `thrift:"Name,1,required" validate:"required,k8sAlias"`
	Type                   string                `thrift:"Type,2" json:"Type,omitempty"`
	KubernetesVersion      string                `thrift:"KubernetesVersion,3" json:"KubernetesVersion" default:"v1.20.12"`
	RegionId               *string               `thrift:"RegionId,4" json:"RegionId,omitempty"`
	Description            *string               `thrift:"Description,5" json:"Description,omitempty"`
	NetworkConfig          *ClusterNetworkConfig `thrift:"NetworkConfig,6,required" validate:"required"`
	Labels                 []*helper.Label       `thrift:"Labels,7" validate:"k8sLabel"`
	EnableDeleteProtection bool                  `thrift:"EnableDeleteProtection,8" json:"EnableDeleteProtection,omitempty"`
	NodeConfig             *ClusterNodeConfig    `thrift:"NodeConfig,9" json:"NodeConfig,omitempty"`
	Addons                 []*addon.AddonConfig  `thrift:"Addons,10,required" validate:"required"`
	ChargeType             string                `thrift:"ChargeType,11" json:"ChargeType" validate:"oneof=PostPaid" default:"PostPaid"`
	Top                    *base.TopParam        `thrift:"Top,254,required" json:"Top"`
	Base                   *base.Base            `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCreateClusterRequest() *CreateClusterRequest {
	return &CreateClusterRequest{

		Type:                   "",
		KubernetesVersion:      "v1.20.12",
		EnableDeleteProtection: false,
		ChargeType:             "PostPaid",
	}
}

func (p *CreateClusterRequest) GetName() (v string) {
	return p.Name
}

var CreateClusterRequest_Type_DEFAULT string = ""

func (p *CreateClusterRequest) GetType() (v string) {
	if !p.IsSetType() {
		return CreateClusterRequest_Type_DEFAULT
	}
	return p.Type
}

var CreateClusterRequest_KubernetesVersion_DEFAULT string = "v1.20.12"

func (p *CreateClusterRequest) GetKubernetesVersion() (v string) {
	if !p.IsSetKubernetesVersion() {
		return CreateClusterRequest_KubernetesVersion_DEFAULT
	}
	return p.KubernetesVersion
}

var CreateClusterRequest_RegionId_DEFAULT string

func (p *CreateClusterRequest) GetRegionId() (v string) {
	if !p.IsSetRegionId() {
		return CreateClusterRequest_RegionId_DEFAULT
	}
	return *p.RegionId
}

var CreateClusterRequest_Description_DEFAULT string

func (p *CreateClusterRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateClusterRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateClusterRequest_NetworkConfig_DEFAULT *ClusterNetworkConfig

func (p *CreateClusterRequest) GetNetworkConfig() (v *ClusterNetworkConfig) {
	if !p.IsSetNetworkConfig() {
		return CreateClusterRequest_NetworkConfig_DEFAULT
	}
	return p.NetworkConfig
}

var CreateClusterRequest_Labels_DEFAULT []*helper.Label

func (p *CreateClusterRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return CreateClusterRequest_Labels_DEFAULT
	}
	return p.Labels
}

var CreateClusterRequest_EnableDeleteProtection_DEFAULT bool = false

func (p *CreateClusterRequest) GetEnableDeleteProtection() (v bool) {
	if !p.IsSetEnableDeleteProtection() {
		return CreateClusterRequest_EnableDeleteProtection_DEFAULT
	}
	return p.EnableDeleteProtection
}

var CreateClusterRequest_NodeConfig_DEFAULT *ClusterNodeConfig

func (p *CreateClusterRequest) GetNodeConfig() (v *ClusterNodeConfig) {
	if !p.IsSetNodeConfig() {
		return CreateClusterRequest_NodeConfig_DEFAULT
	}
	return p.NodeConfig
}

func (p *CreateClusterRequest) GetAddons() (v []*addon.AddonConfig) {
	return p.Addons
}

var CreateClusterRequest_ChargeType_DEFAULT string = "PostPaid"

func (p *CreateClusterRequest) GetChargeType() (v string) {
	if !p.IsSetChargeType() {
		return CreateClusterRequest_ChargeType_DEFAULT
	}
	return p.ChargeType
}

var CreateClusterRequest_Top_DEFAULT *base.TopParam

func (p *CreateClusterRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateClusterRequest_Top_DEFAULT
	}
	return p.Top
}

var CreateClusterRequest_Base_DEFAULT *base.Base

func (p *CreateClusterRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateClusterRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateClusterRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateClusterRequest) SetType(val string) {
	p.Type = val
}
func (p *CreateClusterRequest) SetKubernetesVersion(val string) {
	p.KubernetesVersion = val
}
func (p *CreateClusterRequest) SetRegionId(val *string) {
	p.RegionId = val
}
func (p *CreateClusterRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateClusterRequest) SetNetworkConfig(val *ClusterNetworkConfig) {
	p.NetworkConfig = val
}
func (p *CreateClusterRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *CreateClusterRequest) SetEnableDeleteProtection(val bool) {
	p.EnableDeleteProtection = val
}
func (p *CreateClusterRequest) SetNodeConfig(val *ClusterNodeConfig) {
	p.NodeConfig = val
}
func (p *CreateClusterRequest) SetAddons(val []*addon.AddonConfig) {
	p.Addons = val
}
func (p *CreateClusterRequest) SetChargeType(val string) {
	p.ChargeType = val
}
func (p *CreateClusterRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *CreateClusterRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateClusterRequest = map[int16]string{
	1:   "Name",
	2:   "Type",
	3:   "KubernetesVersion",
	4:   "RegionId",
	5:   "Description",
	6:   "NetworkConfig",
	7:   "Labels",
	8:   "EnableDeleteProtection",
	9:   "NodeConfig",
	10:  "Addons",
	11:  "ChargeType",
	254: "Top",
	255: "Base",
}

func (p *CreateClusterRequest) IsSetType() bool {
	return p.Type != CreateClusterRequest_Type_DEFAULT
}

func (p *CreateClusterRequest) IsSetKubernetesVersion() bool {
	return p.KubernetesVersion != CreateClusterRequest_KubernetesVersion_DEFAULT
}

func (p *CreateClusterRequest) IsSetRegionId() bool {
	return p.RegionId != nil
}

func (p *CreateClusterRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateClusterRequest) IsSetNetworkConfig() bool {
	return p.NetworkConfig != nil
}

func (p *CreateClusterRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *CreateClusterRequest) IsSetEnableDeleteProtection() bool {
	return p.EnableDeleteProtection != CreateClusterRequest_EnableDeleteProtection_DEFAULT
}

func (p *CreateClusterRequest) IsSetNodeConfig() bool {
	return p.NodeConfig != nil
}

func (p *CreateClusterRequest) IsSetChargeType() bool {
	return p.ChargeType != CreateClusterRequest_ChargeType_DEFAULT
}

func (p *CreateClusterRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateClusterRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateClusterRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetNetworkConfig bool = false
	var issetAddons bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetworkConfig = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetAddons = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNetworkConfig {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetAddons {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateClusterRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateClusterRequest[fieldId]))
}

func (p *CreateClusterRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubernetesVersion = v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RegionId = &v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField6(iprot thrift.TProtocol) error {
	p.NetworkConfig = NewClusterNetworkConfig()
	if err := p.NetworkConfig.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableDeleteProtection = v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField9(iprot thrift.TProtocol) error {
	p.NodeConfig = NewClusterNodeConfig()
	if err := p.NodeConfig.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Addons = make([]*addon.AddonConfig, 0, size)
	for i := 0; i < size; i++ {
		_elem := addon.NewAddonConfig()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Addons = append(p.Addons, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = v
	}
	return nil
}

func (p *CreateClusterRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateClusterRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateClusterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKubernetesVersion() {
		if err = oprot.WriteFieldBegin("KubernetesVersion", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.KubernetesVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegionId() {
		if err = oprot.WriteFieldBegin("RegionId", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RegionId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetworkConfig", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NetworkConfig.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableDeleteProtection() {
		if err = oprot.WriteFieldBegin("EnableDeleteProtection", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.EnableDeleteProtection); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeConfig() {
		if err = oprot.WriteFieldBegin("NodeConfig", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Addons", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addons)); err != nil {
		return err
	}
	for _, v := range p.Addons {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetChargeType() {
		if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ChargeType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *CreateClusterRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateClusterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateClusterRequest(%+v)", *p)
}

func (p *CreateClusterRequest) DeepEqual(ano *CreateClusterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.KubernetesVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.RegionId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.NetworkConfig) {
		return false
	}
	if !p.Field7DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field8DeepEqual(ano.EnableDeleteProtection) {
		return false
	}
	if !p.Field9DeepEqual(ano.NodeConfig) {
		return false
	}
	if !p.Field10DeepEqual(ano.Addons) {
		return false
	}
	if !p.Field11DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateClusterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.KubernetesVersion, src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field4DeepEqual(src *string) bool {

	if p.RegionId == src {
		return true
	} else if p.RegionId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RegionId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field5DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field6DeepEqual(src *ClusterNetworkConfig) bool {

	if !p.NetworkConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field7DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateClusterRequest) Field8DeepEqual(src bool) bool {

	if p.EnableDeleteProtection != src {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field9DeepEqual(src *ClusterNodeConfig) bool {

	if !p.NodeConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field10DeepEqual(src []*addon.AddonConfig) bool {

	if len(p.Addons) != len(src) {
		return false
	}
	for i, v := range p.Addons {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateClusterRequest) Field11DeepEqual(src string) bool {

	if strings.Compare(p.ChargeType, src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateClusterRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateClusterResponse struct {
	Id   string     `thrift:"Id,1,required" json:"Id"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCreateClusterResponse() *CreateClusterResponse {
	return &CreateClusterResponse{}
}

func (p *CreateClusterResponse) GetId() (v string) {
	return p.Id
}

var CreateClusterResponse_Base_DEFAULT *base.Base

func (p *CreateClusterResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateClusterResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateClusterResponse) SetId(val string) {
	p.Id = val
}
func (p *CreateClusterResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateClusterResponse = map[int16]string{
	1:   "Id",
	255: "Base",
}

func (p *CreateClusterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateClusterResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateClusterResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateClusterResponse[fieldId]))
}

func (p *CreateClusterResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *CreateClusterResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateClusterResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateClusterResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateClusterResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateClusterResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateClusterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateClusterResponse(%+v)", *p)
}

func (p *CreateClusterResponse) DeepEqual(ano *CreateClusterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateClusterResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *CreateClusterResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RegisterClusterRequest struct {
	Name             string          `thrift:"Name,1,required" validate:"required,k8sAlias"`
	Description      *string         `thrift:"Description,2" json:"Description,omitempty"`
	Labels           []*helper.Label `thrift:"Labels,3" validate:"k8sLabel"`
	DeleteProtection bool            `thrift:"DeleteProtection,4,required" json:"DeleteProtection"`
	CloudType        string          `thrift:"CloudType,5,required" validate:"required,oneof=ACK CCE TKE Self"`
	ImportType       string          `thrift:"ImportType,6,required" validate:"required,oneof=Direct Agent"`
	Kubeconfig       string          `thrift:"Kubeconfig,7,required" json:"Kubeconfig"`
	Top              *base.TopParam  `thrift:"Top,254,required" json:"Top"`
	Base             *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewRegisterClusterRequest() *RegisterClusterRequest {
	return &RegisterClusterRequest{}
}

func (p *RegisterClusterRequest) GetName() (v string) {
	return p.Name
}

var RegisterClusterRequest_Description_DEFAULT string

func (p *RegisterClusterRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return RegisterClusterRequest_Description_DEFAULT
	}
	return *p.Description
}

var RegisterClusterRequest_Labels_DEFAULT []*helper.Label

func (p *RegisterClusterRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return RegisterClusterRequest_Labels_DEFAULT
	}
	return p.Labels
}

func (p *RegisterClusterRequest) GetDeleteProtection() (v bool) {
	return p.DeleteProtection
}

func (p *RegisterClusterRequest) GetCloudType() (v string) {
	return p.CloudType
}

func (p *RegisterClusterRequest) GetImportType() (v string) {
	return p.ImportType
}

func (p *RegisterClusterRequest) GetKubeconfig() (v string) {
	return p.Kubeconfig
}

var RegisterClusterRequest_Top_DEFAULT *base.TopParam

func (p *RegisterClusterRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return RegisterClusterRequest_Top_DEFAULT
	}
	return p.Top
}

var RegisterClusterRequest_Base_DEFAULT *base.Base

func (p *RegisterClusterRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return RegisterClusterRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RegisterClusterRequest) SetName(val string) {
	p.Name = val
}
func (p *RegisterClusterRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *RegisterClusterRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *RegisterClusterRequest) SetDeleteProtection(val bool) {
	p.DeleteProtection = val
}
func (p *RegisterClusterRequest) SetCloudType(val string) {
	p.CloudType = val
}
func (p *RegisterClusterRequest) SetImportType(val string) {
	p.ImportType = val
}
func (p *RegisterClusterRequest) SetKubeconfig(val string) {
	p.Kubeconfig = val
}
func (p *RegisterClusterRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *RegisterClusterRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RegisterClusterRequest = map[int16]string{
	1:   "Name",
	2:   "Description",
	3:   "Labels",
	4:   "DeleteProtection",
	5:   "CloudType",
	6:   "ImportType",
	7:   "Kubeconfig",
	254: "Top",
	255: "Base",
}

func (p *RegisterClusterRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *RegisterClusterRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *RegisterClusterRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *RegisterClusterRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterClusterRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetDeleteProtection bool = false
	var issetCloudType bool = false
	var issetImportType bool = false
	var issetKubeconfig bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDeleteProtection = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCloudType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetImportType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubeconfig = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetDeleteProtection {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCloudType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetImportType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetKubeconfig {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RegisterClusterRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RegisterClusterRequest[fieldId]))
}

func (p *RegisterClusterRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.DeleteProtection = v
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CloudType = v
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ImportType = v
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kubeconfig = v
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RegisterClusterRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RegisterClusterRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterClusterRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DeleteProtection", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.DeleteProtection); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CloudType", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CloudType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImportType", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ImportType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kubeconfig", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kubeconfig); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *RegisterClusterRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RegisterClusterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterClusterRequest(%+v)", *p)
}

func (p *RegisterClusterRequest) DeepEqual(ano *RegisterClusterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.DeleteProtection) {
		return false
	}
	if !p.Field5DeepEqual(ano.CloudType) {
		return false
	}
	if !p.Field6DeepEqual(ano.ImportType) {
		return false
	}
	if !p.Field7DeepEqual(ano.Kubeconfig) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RegisterClusterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field3DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *RegisterClusterRequest) Field4DeepEqual(src bool) bool {

	if p.DeleteProtection != src {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CloudType, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ImportType, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Kubeconfig, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RegisterClusterRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RegisterClusterResponse struct {
	Id   string     `thrift:"Id,1,required" json:"Id"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewRegisterClusterResponse() *RegisterClusterResponse {
	return &RegisterClusterResponse{}
}

func (p *RegisterClusterResponse) GetId() (v string) {
	return p.Id
}

var RegisterClusterResponse_Base_DEFAULT *base.Base

func (p *RegisterClusterResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return RegisterClusterResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *RegisterClusterResponse) SetId(val string) {
	p.Id = val
}
func (p *RegisterClusterResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RegisterClusterResponse = map[int16]string{
	1:   "Id",
	255: "Base",
}

func (p *RegisterClusterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RegisterClusterResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RegisterClusterResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RegisterClusterResponse[fieldId]))
}

func (p *RegisterClusterResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *RegisterClusterResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RegisterClusterResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterClusterResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RegisterClusterResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RegisterClusterResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RegisterClusterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterClusterResponse(%+v)", *p)
}

func (p *RegisterClusterResponse) DeepEqual(ano *RegisterClusterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RegisterClusterResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *RegisterClusterResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetClusterRequest struct {
	Id   string         `thrift:"Id,1,required" validate:"required,k8sName"`
	Top  *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterRequest() *GetClusterRequest {
	return &GetClusterRequest{}
}

func (p *GetClusterRequest) GetId() (v string) {
	return p.Id
}

var GetClusterRequest_Top_DEFAULT *base.TopParam

func (p *GetClusterRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetClusterRequest_Top_DEFAULT
	}
	return p.Top
}

var GetClusterRequest_Base_DEFAULT *base.Base

func (p *GetClusterRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterRequest) SetId(val string) {
	p.Id = val
}
func (p *GetClusterRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetClusterRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterRequest = map[int16]string{
	1:   "Id",
	254: "Top",
	255: "Base",
}

func (p *GetClusterRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetClusterRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterRequest[fieldId]))
}

func (p *GetClusterRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetClusterRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetClusterRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterRequest(%+v)", *p)
}

func (p *GetClusterRequest) DeepEqual(ano *GetClusterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetClusterResponse struct {
	Id                         string              `thrift:"Id,1,required" json:"Id"`
	Name                       string              `thrift:"Name,2,required" json:"Name"`
	Type                       string              `thrift:"Type,3,required" json:"Type"`
	KubernetesVersion          string              `thrift:"KubernetesVersion,4,required" json:"KubernetesVersion"`
	Region                     *iaas.Region        `thrift:"Region,5,required" json:"Region"`
	NodeCount                  int32               `thrift:"NodeCount,6,required" json:"NodeCount"`
	Labels                     []*helper.Label     `thrift:"Labels,7,required" json:"Labels"`
	EnableDeleteProtection     bool                `thrift:"EnableDeleteProtection,8,required" json:"EnableDeleteProtection"`
	Description                string              `thrift:"Description,9,required" json:"Description"`
	Resource                   *ResourceStatistics `thrift:"Resource,10,required" json:"Resource"`
	Network                    *ClusterNetwork     `thrift:"Network,11,required" json:"Network"`
	DefaultWorkerSecurityGroup *iaas.SecurityGroup `thrift:"DefaultWorkerSecurityGroup,12,required" json:"DefaultWorkerSecurityGroup"`
	CreateTime                 string              `thrift:"CreateTime,13,required" json:"CreateTime"`
	Status                     string              `thrift:"Status,14,required" json:"Status"`
	ErrorMessage               string              `thrift:"ErrorMessage,16,required" json:"ErrorMessage"`
	RegisteredCloudType        *string             `thrift:"RegisteredCloudType,17" json:"RegisteredCloudType,omitempty"`
	RegisteredImportType       *string             `thrift:"RegisteredImportType,18" json:"RegisteredImportType,omitempty"`
	Base                       *base.Base          `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterResponse() *GetClusterResponse {
	return &GetClusterResponse{}
}

func (p *GetClusterResponse) GetId() (v string) {
	return p.Id
}

func (p *GetClusterResponse) GetName() (v string) {
	return p.Name
}

func (p *GetClusterResponse) GetType() (v string) {
	return p.Type
}

func (p *GetClusterResponse) GetKubernetesVersion() (v string) {
	return p.KubernetesVersion
}

var GetClusterResponse_Region_DEFAULT *iaas.Region

func (p *GetClusterResponse) GetRegion() (v *iaas.Region) {
	if !p.IsSetRegion() {
		return GetClusterResponse_Region_DEFAULT
	}
	return p.Region
}

func (p *GetClusterResponse) GetNodeCount() (v int32) {
	return p.NodeCount
}

func (p *GetClusterResponse) GetLabels() (v []*helper.Label) {
	return p.Labels
}

func (p *GetClusterResponse) GetEnableDeleteProtection() (v bool) {
	return p.EnableDeleteProtection
}

func (p *GetClusterResponse) GetDescription() (v string) {
	return p.Description
}

var GetClusterResponse_Resource_DEFAULT *ResourceStatistics

func (p *GetClusterResponse) GetResource() (v *ResourceStatistics) {
	if !p.IsSetResource() {
		return GetClusterResponse_Resource_DEFAULT
	}
	return p.Resource
}

var GetClusterResponse_Network_DEFAULT *ClusterNetwork

func (p *GetClusterResponse) GetNetwork() (v *ClusterNetwork) {
	if !p.IsSetNetwork() {
		return GetClusterResponse_Network_DEFAULT
	}
	return p.Network
}

var GetClusterResponse_DefaultWorkerSecurityGroup_DEFAULT *iaas.SecurityGroup

func (p *GetClusterResponse) GetDefaultWorkerSecurityGroup() (v *iaas.SecurityGroup) {
	if !p.IsSetDefaultWorkerSecurityGroup() {
		return GetClusterResponse_DefaultWorkerSecurityGroup_DEFAULT
	}
	return p.DefaultWorkerSecurityGroup
}

func (p *GetClusterResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetClusterResponse) GetStatus() (v string) {
	return p.Status
}

func (p *GetClusterResponse) GetErrorMessage() (v string) {
	return p.ErrorMessage
}

var GetClusterResponse_RegisteredCloudType_DEFAULT string

func (p *GetClusterResponse) GetRegisteredCloudType() (v string) {
	if !p.IsSetRegisteredCloudType() {
		return GetClusterResponse_RegisteredCloudType_DEFAULT
	}
	return *p.RegisteredCloudType
}

var GetClusterResponse_RegisteredImportType_DEFAULT string

func (p *GetClusterResponse) GetRegisteredImportType() (v string) {
	if !p.IsSetRegisteredImportType() {
		return GetClusterResponse_RegisteredImportType_DEFAULT
	}
	return *p.RegisteredImportType
}

var GetClusterResponse_Base_DEFAULT *base.Base

func (p *GetClusterResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterResponse) SetId(val string) {
	p.Id = val
}
func (p *GetClusterResponse) SetName(val string) {
	p.Name = val
}
func (p *GetClusterResponse) SetType(val string) {
	p.Type = val
}
func (p *GetClusterResponse) SetKubernetesVersion(val string) {
	p.KubernetesVersion = val
}
func (p *GetClusterResponse) SetRegion(val *iaas.Region) {
	p.Region = val
}
func (p *GetClusterResponse) SetNodeCount(val int32) {
	p.NodeCount = val
}
func (p *GetClusterResponse) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *GetClusterResponse) SetEnableDeleteProtection(val bool) {
	p.EnableDeleteProtection = val
}
func (p *GetClusterResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetClusterResponse) SetResource(val *ResourceStatistics) {
	p.Resource = val
}
func (p *GetClusterResponse) SetNetwork(val *ClusterNetwork) {
	p.Network = val
}
func (p *GetClusterResponse) SetDefaultWorkerSecurityGroup(val *iaas.SecurityGroup) {
	p.DefaultWorkerSecurityGroup = val
}
func (p *GetClusterResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetClusterResponse) SetStatus(val string) {
	p.Status = val
}
func (p *GetClusterResponse) SetErrorMessage(val string) {
	p.ErrorMessage = val
}
func (p *GetClusterResponse) SetRegisteredCloudType(val *string) {
	p.RegisteredCloudType = val
}
func (p *GetClusterResponse) SetRegisteredImportType(val *string) {
	p.RegisteredImportType = val
}
func (p *GetClusterResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterResponse = map[int16]string{
	1:   "Id",
	2:   "Name",
	3:   "Type",
	4:   "KubernetesVersion",
	5:   "Region",
	6:   "NodeCount",
	7:   "Labels",
	8:   "EnableDeleteProtection",
	9:   "Description",
	10:  "Resource",
	11:  "Network",
	12:  "DefaultWorkerSecurityGroup",
	13:  "CreateTime",
	14:  "Status",
	16:  "ErrorMessage",
	17:  "RegisteredCloudType",
	18:  "RegisteredImportType",
	255: "Base",
}

func (p *GetClusterResponse) IsSetRegion() bool {
	return p.Region != nil
}

func (p *GetClusterResponse) IsSetResource() bool {
	return p.Resource != nil
}

func (p *GetClusterResponse) IsSetNetwork() bool {
	return p.Network != nil
}

func (p *GetClusterResponse) IsSetDefaultWorkerSecurityGroup() bool {
	return p.DefaultWorkerSecurityGroup != nil
}

func (p *GetClusterResponse) IsSetRegisteredCloudType() bool {
	return p.RegisteredCloudType != nil
}

func (p *GetClusterResponse) IsSetRegisteredImportType() bool {
	return p.RegisteredImportType != nil
}

func (p *GetClusterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetType bool = false
	var issetKubernetesVersion bool = false
	var issetRegion bool = false
	var issetNodeCount bool = false
	var issetLabels bool = false
	var issetEnableDeleteProtection bool = false
	var issetDescription bool = false
	var issetResource bool = false
	var issetNetwork bool = false
	var issetDefaultWorkerSecurityGroup bool = false
	var issetCreateTime bool = false
	var issetStatus bool = false
	var issetErrorMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubernetesVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRegion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableDeleteProtection = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetResource = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetwork = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetDefaultWorkerSecurityGroup = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetKubernetesVersion {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRegion {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNodeCount {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetEnableDeleteProtection {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetResource {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetNetwork {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetDefaultWorkerSecurityGroup {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetErrorMessage {
		fieldId = 16
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterResponse[fieldId]))
}

func (p *GetClusterResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubernetesVersion = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField5(iprot thrift.TProtocol) error {
	p.Region = iaas.NewRegion()
	if err := p.Region.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NodeCount = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableDeleteProtection = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField10(iprot thrift.TProtocol) error {
	p.Resource = NewResourceStatistics()
	if err := p.Resource.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterResponse) ReadField11(iprot thrift.TProtocol) error {
	p.Network = NewClusterNetwork()
	if err := p.Network.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterResponse) ReadField12(iprot thrift.TProtocol) error {
	p.DefaultWorkerSecurityGroup = iaas.NewSecurityGroup()
	if err := p.DefaultWorkerSecurityGroup.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterResponse) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *GetClusterResponse) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RegisteredCloudType = &v
	}
	return nil
}

func (p *GetClusterResponse) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RegisteredImportType = &v
	}
	return nil
}

func (p *GetClusterResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetClusterResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetClusterResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubernetesVersion", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubernetesVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetClusterResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Region", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Region.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetClusterResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeCount", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NodeCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetClusterResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetClusterResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnableDeleteProtection", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableDeleteProtection); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetClusterResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetClusterResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Resource", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resource.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetClusterResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Network", thrift.STRUCT, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Network.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetClusterResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DefaultWorkerSecurityGroup", thrift.STRUCT, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.DefaultWorkerSecurityGroup.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetClusterResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetClusterResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetClusterResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorMessage", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ErrorMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetClusterResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegisteredCloudType() {
		if err = oprot.WriteFieldBegin("RegisteredCloudType", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RegisteredCloudType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetClusterResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegisteredImportType() {
		if err = oprot.WriteFieldBegin("RegisteredImportType", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RegisteredImportType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetClusterResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterResponse(%+v)", *p)
}

func (p *GetClusterResponse) DeepEqual(ano *GetClusterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.KubernetesVersion) {
		return false
	}
	if !p.Field5DeepEqual(ano.Region) {
		return false
	}
	if !p.Field6DeepEqual(ano.NodeCount) {
		return false
	}
	if !p.Field7DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field8DeepEqual(ano.EnableDeleteProtection) {
		return false
	}
	if !p.Field9DeepEqual(ano.Description) {
		return false
	}
	if !p.Field10DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field11DeepEqual(ano.Network) {
		return false
	}
	if !p.Field12DeepEqual(ano.DefaultWorkerSecurityGroup) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.Status) {
		return false
	}
	if !p.Field16DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field17DeepEqual(ano.RegisteredCloudType) {
		return false
	}
	if !p.Field18DeepEqual(ano.RegisteredImportType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.KubernetesVersion, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field5DeepEqual(src *iaas.Region) bool {

	if !p.Region.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field6DeepEqual(src int32) bool {

	if p.NodeCount != src {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field7DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetClusterResponse) Field8DeepEqual(src bool) bool {

	if p.EnableDeleteProtection != src {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field10DeepEqual(src *ResourceStatistics) bool {

	if !p.Resource.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field11DeepEqual(src *ClusterNetwork) bool {

	if !p.Network.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field12DeepEqual(src *iaas.SecurityGroup) bool {

	if !p.DefaultWorkerSecurityGroup.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field14DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field16DeepEqual(src string) bool {

	if strings.Compare(p.ErrorMessage, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field17DeepEqual(src *string) bool {

	if p.RegisteredCloudType == src {
		return true
	} else if p.RegisteredCloudType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RegisteredCloudType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field18DeepEqual(src *string) bool {

	if p.RegisteredImportType == src {
		return true
	} else if p.RegisteredImportType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RegisteredImportType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type PublicAccess struct {
	Enable    bool               `thrift:"Enable,1,required" json:"Enable"`
	EipConfig *NetworkPermission `thrift:"EipConfig,2" json:"EipConfig,omitempty"`
}

func NewPublicAccess() *PublicAccess {
	return &PublicAccess{}
}

func (p *PublicAccess) GetEnable() (v bool) {
	return p.Enable
}

var PublicAccess_EipConfig_DEFAULT *NetworkPermission

func (p *PublicAccess) GetEipConfig() (v *NetworkPermission) {
	if !p.IsSetEipConfig() {
		return PublicAccess_EipConfig_DEFAULT
	}
	return p.EipConfig
}
func (p *PublicAccess) SetEnable(val bool) {
	p.Enable = val
}
func (p *PublicAccess) SetEipConfig(val *NetworkPermission) {
	p.EipConfig = val
}

var fieldIDToName_PublicAccess = map[int16]string{
	1: "Enable",
	2: "EipConfig",
}

func (p *PublicAccess) IsSetEipConfig() bool {
	return p.EipConfig != nil
}

func (p *PublicAccess) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEnable bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnable = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEnable {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PublicAccess[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_PublicAccess[fieldId]))
}

func (p *PublicAccess) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Enable = v
	}
	return nil
}

func (p *PublicAccess) ReadField2(iprot thrift.TProtocol) error {
	p.EipConfig = NewNetworkPermission()
	if err := p.EipConfig.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PublicAccess) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PublicAccess"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PublicAccess) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Enable", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Enable); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PublicAccess) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEipConfig() {
		if err = oprot.WriteFieldBegin("EipConfig", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EipConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PublicAccess) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublicAccess(%+v)", *p)
}

func (p *PublicAccess) DeepEqual(ano *PublicAccess) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Enable) {
		return false
	}
	if !p.Field2DeepEqual(ano.EipConfig) {
		return false
	}
	return true
}

func (p *PublicAccess) Field1DeepEqual(src bool) bool {

	if p.Enable != src {
		return false
	}
	return true
}
func (p *PublicAccess) Field2DeepEqual(src *NetworkPermission) bool {

	if !p.EipConfig.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateClusterRequest struct {
	Id                     string          `thrift:"Id,1,required" validate:"required,k8sName"`
	Name                   *string         `thrift:"Name,2" json:"Name,omitempty"`
	Description            *string         `thrift:"Description,3" json:"Description,omitempty"`
	ApiServerPublicAccess  *PublicAccess   `thrift:"ApiServerPublicAccess,4" json:"ApiServerPublicAccess,omitempty"`
	EnableDeleteProtection *bool           `thrift:"EnableDeleteProtection,5" json:"EnableDeleteProtection,omitempty"`
	Labels                 []*helper.Label `thrift:"Labels,6" validate:"k8sLabel"`
	Top                    *base.TopParam  `thrift:"Top,254,required" json:"Top"`
	Base                   *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateClusterRequest() *UpdateClusterRequest {
	return &UpdateClusterRequest{}
}

func (p *UpdateClusterRequest) GetId() (v string) {
	return p.Id
}

var UpdateClusterRequest_Name_DEFAULT string

func (p *UpdateClusterRequest) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateClusterRequest_Name_DEFAULT
	}
	return *p.Name
}

var UpdateClusterRequest_Description_DEFAULT string

func (p *UpdateClusterRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdateClusterRequest_Description_DEFAULT
	}
	return *p.Description
}

var UpdateClusterRequest_ApiServerPublicAccess_DEFAULT *PublicAccess

func (p *UpdateClusterRequest) GetApiServerPublicAccess() (v *PublicAccess) {
	if !p.IsSetApiServerPublicAccess() {
		return UpdateClusterRequest_ApiServerPublicAccess_DEFAULT
	}
	return p.ApiServerPublicAccess
}

var UpdateClusterRequest_EnableDeleteProtection_DEFAULT bool

func (p *UpdateClusterRequest) GetEnableDeleteProtection() (v bool) {
	if !p.IsSetEnableDeleteProtection() {
		return UpdateClusterRequest_EnableDeleteProtection_DEFAULT
	}
	return *p.EnableDeleteProtection
}

var UpdateClusterRequest_Labels_DEFAULT []*helper.Label

func (p *UpdateClusterRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return UpdateClusterRequest_Labels_DEFAULT
	}
	return p.Labels
}

var UpdateClusterRequest_Top_DEFAULT *base.TopParam

func (p *UpdateClusterRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateClusterRequest_Top_DEFAULT
	}
	return p.Top
}

var UpdateClusterRequest_Base_DEFAULT *base.Base

func (p *UpdateClusterRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateClusterRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateClusterRequest) SetId(val string) {
	p.Id = val
}
func (p *UpdateClusterRequest) SetName(val *string) {
	p.Name = val
}
func (p *UpdateClusterRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateClusterRequest) SetApiServerPublicAccess(val *PublicAccess) {
	p.ApiServerPublicAccess = val
}
func (p *UpdateClusterRequest) SetEnableDeleteProtection(val *bool) {
	p.EnableDeleteProtection = val
}
func (p *UpdateClusterRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *UpdateClusterRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpdateClusterRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateClusterRequest = map[int16]string{
	1:   "Id",
	2:   "Name",
	3:   "Description",
	4:   "ApiServerPublicAccess",
	5:   "EnableDeleteProtection",
	6:   "Labels",
	254: "Top",
	255: "Base",
}

func (p *UpdateClusterRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateClusterRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateClusterRequest) IsSetApiServerPublicAccess() bool {
	return p.ApiServerPublicAccess != nil
}

func (p *UpdateClusterRequest) IsSetEnableDeleteProtection() bool {
	return p.EnableDeleteProtection != nil
}

func (p *UpdateClusterRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *UpdateClusterRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateClusterRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateClusterRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateClusterRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateClusterRequest[fieldId]))
}

func (p *UpdateClusterRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField4(iprot thrift.TProtocol) error {
	p.ApiServerPublicAccess = NewPublicAccess()
	if err := p.ApiServerPublicAccess.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableDeleteProtection = &v
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateClusterRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiServerPublicAccess() {
		if err = oprot.WriteFieldBegin("ApiServerPublicAccess", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ApiServerPublicAccess.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableDeleteProtection() {
		if err = oprot.WriteFieldBegin("EnableDeleteProtection", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableDeleteProtection); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpdateClusterRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateClusterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateClusterRequest(%+v)", *p)
}

func (p *UpdateClusterRequest) DeepEqual(ano *UpdateClusterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.ApiServerPublicAccess) {
		return false
	}
	if !p.Field5DeepEqual(ano.EnableDeleteProtection) {
		return false
	}
	if !p.Field6DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateClusterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateClusterRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateClusterRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateClusterRequest) Field4DeepEqual(src *PublicAccess) bool {

	if !p.ApiServerPublicAccess.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateClusterRequest) Field5DeepEqual(src *bool) bool {

	if p.EnableDeleteProtection == src {
		return true
	} else if p.EnableDeleteProtection == nil || src == nil {
		return false
	}
	if *p.EnableDeleteProtection != *src {
		return false
	}
	return true
}
func (p *UpdateClusterRequest) Field6DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateClusterRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateClusterRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateClusterResponse struct {
	Id string `thrift:"Id,1,required" json:"Id"`
}

func NewUpdateClusterResponse() *UpdateClusterResponse {
	return &UpdateClusterResponse{}
}

func (p *UpdateClusterResponse) GetId() (v string) {
	return p.Id
}
func (p *UpdateClusterResponse) SetId(val string) {
	p.Id = val
}

var fieldIDToName_UpdateClusterResponse = map[int16]string{
	1: "Id",
}

func (p *UpdateClusterResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateClusterResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateClusterResponse[fieldId]))
}

func (p *UpdateClusterResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateClusterResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateClusterResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateClusterResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateClusterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateClusterResponse(%+v)", *p)
}

func (p *UpdateClusterResponse) DeepEqual(ano *UpdateClusterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *UpdateClusterResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}

type DeleteClusterRequest struct {
	Id                       string         `thrift:"Id,1,required" validate:"required,k8sName"`
	CascadingDeleteResources []string       `thrift:"CascadingDeleteResources,2,required" json:"CascadingDeleteResources"`
	Top                      *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base                     *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewDeleteClusterRequest() *DeleteClusterRequest {
	return &DeleteClusterRequest{}
}

func (p *DeleteClusterRequest) GetId() (v string) {
	return p.Id
}

func (p *DeleteClusterRequest) GetCascadingDeleteResources() (v []string) {
	return p.CascadingDeleteResources
}

var DeleteClusterRequest_Top_DEFAULT *base.TopParam

func (p *DeleteClusterRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return DeleteClusterRequest_Top_DEFAULT
	}
	return p.Top
}

var DeleteClusterRequest_Base_DEFAULT *base.Base

func (p *DeleteClusterRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return DeleteClusterRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteClusterRequest) SetId(val string) {
	p.Id = val
}
func (p *DeleteClusterRequest) SetCascadingDeleteResources(val []string) {
	p.CascadingDeleteResources = val
}
func (p *DeleteClusterRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *DeleteClusterRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteClusterRequest = map[int16]string{
	1:   "Id",
	2:   "CascadingDeleteResources",
	254: "Top",
	255: "Base",
}

func (p *DeleteClusterRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *DeleteClusterRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteClusterRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetCascadingDeleteResources bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCascadingDeleteResources = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCascadingDeleteResources {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteClusterRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeleteClusterRequest[fieldId]))
}

func (p *DeleteClusterRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *DeleteClusterRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CascadingDeleteResources = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CascadingDeleteResources = append(p.CascadingDeleteResources, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DeleteClusterRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteClusterRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteClusterRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteClusterRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteClusterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteClusterRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CascadingDeleteResources", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.CascadingDeleteResources)); err != nil {
		return err
	}
	for _, v := range p.CascadingDeleteResources {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteClusterRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *DeleteClusterRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteClusterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteClusterRequest(%+v)", *p)
}

func (p *DeleteClusterRequest) DeepEqual(ano *DeleteClusterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.CascadingDeleteResources) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteClusterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteClusterRequest) Field2DeepEqual(src []string) bool {

	if len(p.CascadingDeleteResources) != len(src) {
		return false
	}
	for i, v := range p.CascadingDeleteResources {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *DeleteClusterRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DeleteClusterRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteClusterResponse struct {
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewDeleteClusterResponse() *DeleteClusterResponse {
	return &DeleteClusterResponse{}
}

var DeleteClusterResponse_Base_DEFAULT *base.Base

func (p *DeleteClusterResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return DeleteClusterResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteClusterResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteClusterResponse = map[int16]string{
	255: "Base",
}

func (p *DeleteClusterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteClusterResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteClusterResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteClusterResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteClusterResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteClusterResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteClusterResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteClusterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteClusterResponse(%+v)", *p)
}

func (p *DeleteClusterResponse) DeepEqual(ano *DeleteClusterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteClusterResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpgradeClusterRequest struct {
	Id                string                  `thrift:"Id,1,required" json:"Id"`
	KubernetesVersion string                  `thrift:"KubernetesVersion,2,required" json:"KubernetesVersion"`
	UpgradeMode       *string                 `thrift:"UpgradeMode,3" json:"UpgradeMode,omitempty"`
	Strategy          *helper.UpgradeStrategy `thrift:"Strategy,4" json:"Strategy,omitempty"`
	Top               *base.TopParam          `thrift:"Top,254,required" json:"Top"`
	Base              *base.Base              `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpgradeClusterRequest() *UpgradeClusterRequest {
	return &UpgradeClusterRequest{}
}

func (p *UpgradeClusterRequest) GetId() (v string) {
	return p.Id
}

func (p *UpgradeClusterRequest) GetKubernetesVersion() (v string) {
	return p.KubernetesVersion
}

var UpgradeClusterRequest_UpgradeMode_DEFAULT string

func (p *UpgradeClusterRequest) GetUpgradeMode() (v string) {
	if !p.IsSetUpgradeMode() {
		return UpgradeClusterRequest_UpgradeMode_DEFAULT
	}
	return *p.UpgradeMode
}

var UpgradeClusterRequest_Strategy_DEFAULT *helper.UpgradeStrategy

func (p *UpgradeClusterRequest) GetStrategy() (v *helper.UpgradeStrategy) {
	if !p.IsSetStrategy() {
		return UpgradeClusterRequest_Strategy_DEFAULT
	}
	return p.Strategy
}

var UpgradeClusterRequest_Top_DEFAULT *base.TopParam

func (p *UpgradeClusterRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpgradeClusterRequest_Top_DEFAULT
	}
	return p.Top
}

var UpgradeClusterRequest_Base_DEFAULT *base.Base

func (p *UpgradeClusterRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpgradeClusterRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpgradeClusterRequest) SetId(val string) {
	p.Id = val
}
func (p *UpgradeClusterRequest) SetKubernetesVersion(val string) {
	p.KubernetesVersion = val
}
func (p *UpgradeClusterRequest) SetUpgradeMode(val *string) {
	p.UpgradeMode = val
}
func (p *UpgradeClusterRequest) SetStrategy(val *helper.UpgradeStrategy) {
	p.Strategy = val
}
func (p *UpgradeClusterRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpgradeClusterRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpgradeClusterRequest = map[int16]string{
	1:   "Id",
	2:   "KubernetesVersion",
	3:   "UpgradeMode",
	4:   "Strategy",
	254: "Top",
	255: "Base",
}

func (p *UpgradeClusterRequest) IsSetUpgradeMode() bool {
	return p.UpgradeMode != nil
}

func (p *UpgradeClusterRequest) IsSetStrategy() bool {
	return p.Strategy != nil
}

func (p *UpgradeClusterRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpgradeClusterRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpgradeClusterRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetKubernetesVersion bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubernetesVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetKubernetesVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpgradeClusterRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpgradeClusterRequest[fieldId]))
}

func (p *UpgradeClusterRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpgradeClusterRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubernetesVersion = v
	}
	return nil
}

func (p *UpgradeClusterRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpgradeMode = &v
	}
	return nil
}

func (p *UpgradeClusterRequest) ReadField4(iprot thrift.TProtocol) error {
	p.Strategy = helper.NewUpgradeStrategy()
	if err := p.Strategy.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpgradeClusterRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpgradeClusterRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpgradeClusterRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeClusterRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpgradeClusterRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpgradeClusterRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubernetesVersion", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubernetesVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpgradeClusterRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpgradeMode() {
		if err = oprot.WriteFieldBegin("UpgradeMode", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpgradeMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpgradeClusterRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStrategy() {
		if err = oprot.WriteFieldBegin("Strategy", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Strategy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpgradeClusterRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpgradeClusterRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpgradeClusterRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpgradeClusterRequest(%+v)", *p)
}

func (p *UpgradeClusterRequest) DeepEqual(ano *UpgradeClusterRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.KubernetesVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.UpgradeMode) {
		return false
	}
	if !p.Field4DeepEqual(ano.Strategy) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpgradeClusterRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpgradeClusterRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.KubernetesVersion, src) != 0 {
		return false
	}
	return true
}
func (p *UpgradeClusterRequest) Field3DeepEqual(src *string) bool {

	if p.UpgradeMode == src {
		return true
	} else if p.UpgradeMode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpgradeMode, *src) != 0 {
		return false
	}
	return true
}
func (p *UpgradeClusterRequest) Field4DeepEqual(src *helper.UpgradeStrategy) bool {

	if !p.Strategy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpgradeClusterRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpgradeClusterRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpgradeClusterResponse struct {
	Id   string     `thrift:"Id,1,required" json:"Id"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpgradeClusterResponse() *UpgradeClusterResponse {
	return &UpgradeClusterResponse{}
}

func (p *UpgradeClusterResponse) GetId() (v string) {
	return p.Id
}

var UpgradeClusterResponse_Base_DEFAULT *base.Base

func (p *UpgradeClusterResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpgradeClusterResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpgradeClusterResponse) SetId(val string) {
	p.Id = val
}
func (p *UpgradeClusterResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpgradeClusterResponse = map[int16]string{
	1:   "Id",
	255: "Base",
}

func (p *UpgradeClusterResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpgradeClusterResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpgradeClusterResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpgradeClusterResponse[fieldId]))
}

func (p *UpgradeClusterResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpgradeClusterResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpgradeClusterResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeClusterResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpgradeClusterResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpgradeClusterResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpgradeClusterResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpgradeClusterResponse(%+v)", *p)
}

func (p *UpgradeClusterResponse) DeepEqual(ano *UpgradeClusterResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpgradeClusterResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpgradeClusterResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListClustersFilter struct {
	Ids      []string `thrift:"Ids,1" json:"Ids,omitempty"`
	Names    []string `thrift:"Names,2" json:"Names,omitempty"`
	Statuses []string `thrift:"Statuses,3" json:"Statuses,omitempty"`
	Types    []string `thrift:"Types,4" json:"Types,omitempty"`
}

func NewListClustersFilter() *ListClustersFilter {
	return &ListClustersFilter{}
}

var ListClustersFilter_Ids_DEFAULT []string

func (p *ListClustersFilter) GetIds() (v []string) {
	if !p.IsSetIds() {
		return ListClustersFilter_Ids_DEFAULT
	}
	return p.Ids
}

var ListClustersFilter_Names_DEFAULT []string

func (p *ListClustersFilter) GetNames() (v []string) {
	if !p.IsSetNames() {
		return ListClustersFilter_Names_DEFAULT
	}
	return p.Names
}

var ListClustersFilter_Statuses_DEFAULT []string

func (p *ListClustersFilter) GetStatuses() (v []string) {
	if !p.IsSetStatuses() {
		return ListClustersFilter_Statuses_DEFAULT
	}
	return p.Statuses
}

var ListClustersFilter_Types_DEFAULT []string

func (p *ListClustersFilter) GetTypes() (v []string) {
	if !p.IsSetTypes() {
		return ListClustersFilter_Types_DEFAULT
	}
	return p.Types
}
func (p *ListClustersFilter) SetIds(val []string) {
	p.Ids = val
}
func (p *ListClustersFilter) SetNames(val []string) {
	p.Names = val
}
func (p *ListClustersFilter) SetStatuses(val []string) {
	p.Statuses = val
}
func (p *ListClustersFilter) SetTypes(val []string) {
	p.Types = val
}

var fieldIDToName_ListClustersFilter = map[int16]string{
	1: "Ids",
	2: "Names",
	3: "Statuses",
	4: "Types",
}

func (p *ListClustersFilter) IsSetIds() bool {
	return p.Ids != nil
}

func (p *ListClustersFilter) IsSetNames() bool {
	return p.Names != nil
}

func (p *ListClustersFilter) IsSetStatuses() bool {
	return p.Statuses != nil
}

func (p *ListClustersFilter) IsSetTypes() bool {
	return p.Types != nil
}

func (p *ListClustersFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListClustersFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListClustersFilter) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ids = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Ids = append(p.Ids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersFilter) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Names = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Names = append(p.Names, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersFilter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Statuses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Statuses = append(p.Statuses, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersFilter) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Types = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Types = append(p.Types, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClustersFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListClustersFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIds() {
		if err = oprot.WriteFieldBegin("Ids", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
			return err
		}
		for _, v := range p.Ids {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListClustersFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNames() {
		if err = oprot.WriteFieldBegin("Names", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
			return err
		}
		for _, v := range p.Names {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListClustersFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatuses() {
		if err = oprot.WriteFieldBegin("Statuses", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Statuses)); err != nil {
			return err
		}
		for _, v := range p.Statuses {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListClustersFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypes() {
		if err = oprot.WriteFieldBegin("Types", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Types)); err != nil {
			return err
		}
		for _, v := range p.Types {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListClustersFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListClustersFilter(%+v)", *p)
}

func (p *ListClustersFilter) DeepEqual(ano *ListClustersFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	if !p.Field2DeepEqual(ano.Names) {
		return false
	}
	if !p.Field3DeepEqual(ano.Statuses) {
		return false
	}
	if !p.Field4DeepEqual(ano.Types) {
		return false
	}
	return true
}

func (p *ListClustersFilter) Field1DeepEqual(src []string) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListClustersFilter) Field2DeepEqual(src []string) bool {

	if len(p.Names) != len(src) {
		return false
	}
	for i, v := range p.Names {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListClustersFilter) Field3DeepEqual(src []string) bool {

	if len(p.Statuses) != len(src) {
		return false
	}
	for i, v := range p.Statuses {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListClustersFilter) Field4DeepEqual(src []string) bool {

	if len(p.Types) != len(src) {
		return false
	}
	for i, v := range p.Types {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ListClustersRequest struct {
	PageNumber int32               `thrift:"PageNumber,1" json:"PageNumber" default:"1"`
	PageSize   int32               `thrift:"PageSize,2" json:"PageSize" default:"100"`
	Filter     *ListClustersFilter `thrift:"Filter,3" json:"Filter,omitempty"`
	Top        *base.TopParam      `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base          `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListClustersRequest() *ListClustersRequest {
	return &ListClustersRequest{

		PageNumber: 1,
		PageSize:   100,
	}
}

var ListClustersRequest_PageNumber_DEFAULT int32 = 1

func (p *ListClustersRequest) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListClustersRequest_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListClustersRequest_PageSize_DEFAULT int32 = 100

func (p *ListClustersRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListClustersRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListClustersRequest_Filter_DEFAULT *ListClustersFilter

func (p *ListClustersRequest) GetFilter() (v *ListClustersFilter) {
	if !p.IsSetFilter() {
		return ListClustersRequest_Filter_DEFAULT
	}
	return p.Filter
}

var ListClustersRequest_Top_DEFAULT *base.TopParam

func (p *ListClustersRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListClustersRequest_Top_DEFAULT
	}
	return p.Top
}

var ListClustersRequest_Base_DEFAULT *base.Base

func (p *ListClustersRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListClustersRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListClustersRequest) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListClustersRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListClustersRequest) SetFilter(val *ListClustersFilter) {
	p.Filter = val
}
func (p *ListClustersRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListClustersRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListClustersRequest = map[int16]string{
	1:   "PageNumber",
	2:   "PageSize",
	3:   "Filter",
	254: "Top",
	255: "Base",
}

func (p *ListClustersRequest) IsSetPageNumber() bool {
	return p.PageNumber != ListClustersRequest_PageNumber_DEFAULT
}

func (p *ListClustersRequest) IsSetPageSize() bool {
	return p.PageSize != ListClustersRequest_PageSize_DEFAULT
}

func (p *ListClustersRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListClustersRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListClustersRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListClustersRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListClustersRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListClustersRequest[fieldId]))
}

func (p *ListClustersRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListClustersRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListClustersRequest) ReadField3(iprot thrift.TProtocol) error {
	p.Filter = NewListClustersFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClustersRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListClustersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListClustersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListClustersRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListClustersRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListClustersRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListClustersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListClustersRequest(%+v)", *p)
}

func (p *ListClustersRequest) DeepEqual(ano *ListClustersRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListClustersRequest) Field1DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListClustersRequest) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListClustersRequest) Field3DeepEqual(src *ListClustersFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListClustersRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListClustersRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClusterItem struct {
	Id                     string              `thrift:"Id,1,required" json:"Id"`
	Name                   string              `thrift:"Name,2,required" json:"Name"`
	Type                   string              `thrift:"Type,3,required" json:"Type"`
	KubernetesVersion      string              `thrift:"KubernetesVersion,4,required" json:"KubernetesVersion"`
	AvailableNodeAmount    int32               `thrift:"AvailableNodeAmount,5,required" json:"AvailableNodeAmount"`
	TotalNode              int32               `thrift:"TotalNode,6,required" json:"TotalNode"`
	ResourceStatistics     *ResourceStatistics `thrift:"ResourceStatistics,7,required" json:"ResourceStatistics"`
	Labels                 []*helper.Label     `thrift:"Labels,8,required" json:"Labels"`
	EnableDeleteProtection bool                `thrift:"EnableDeleteProtection,9,required" json:"EnableDeleteProtection"`
	Vpc                    *iaas.Vpc           `thrift:"Vpc,10,required" json:"Vpc"`
	PodCidr                string              `thrift:"PodCidr,11,required" json:"PodCidr"`
	MaxNodePodNumber       int32               `thrift:"MaxNodePodNumber,12,required" json:"MaxNodePodNumber"`
	CreateTime             string              `thrift:"CreateTime,13,required" json:"CreateTime"`
	Status                 string              `thrift:"Status,14,required" json:"Status"`
	ErrorMessage           string              `thrift:"ErrorMessage,15,required" json:"ErrorMessage"`
	RegisteredCloudType    *string             `thrift:"RegisteredCloudType,16" json:"RegisteredCloudType,omitempty"`
	RegisteredImportType   *string             `thrift:"RegisteredImportType,17" json:"RegisteredImportType,omitempty"`
	NetworkType            *string             `thrift:"NetworkType,18" json:"NetworkType,omitempty"`
}

func NewClusterItem() *ClusterItem {
	return &ClusterItem{}
}

func (p *ClusterItem) GetId() (v string) {
	return p.Id
}

func (p *ClusterItem) GetName() (v string) {
	return p.Name
}

func (p *ClusterItem) GetType() (v string) {
	return p.Type
}

func (p *ClusterItem) GetKubernetesVersion() (v string) {
	return p.KubernetesVersion
}

func (p *ClusterItem) GetAvailableNodeAmount() (v int32) {
	return p.AvailableNodeAmount
}

func (p *ClusterItem) GetTotalNode() (v int32) {
	return p.TotalNode
}

var ClusterItem_ResourceStatistics_DEFAULT *ResourceStatistics

func (p *ClusterItem) GetResourceStatistics() (v *ResourceStatistics) {
	if !p.IsSetResourceStatistics() {
		return ClusterItem_ResourceStatistics_DEFAULT
	}
	return p.ResourceStatistics
}

func (p *ClusterItem) GetLabels() (v []*helper.Label) {
	return p.Labels
}

func (p *ClusterItem) GetEnableDeleteProtection() (v bool) {
	return p.EnableDeleteProtection
}

var ClusterItem_Vpc_DEFAULT *iaas.Vpc

func (p *ClusterItem) GetVpc() (v *iaas.Vpc) {
	if !p.IsSetVpc() {
		return ClusterItem_Vpc_DEFAULT
	}
	return p.Vpc
}

func (p *ClusterItem) GetPodCidr() (v string) {
	return p.PodCidr
}

func (p *ClusterItem) GetMaxNodePodNumber() (v int32) {
	return p.MaxNodePodNumber
}

func (p *ClusterItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *ClusterItem) GetStatus() (v string) {
	return p.Status
}

func (p *ClusterItem) GetErrorMessage() (v string) {
	return p.ErrorMessage
}

var ClusterItem_RegisteredCloudType_DEFAULT string

func (p *ClusterItem) GetRegisteredCloudType() (v string) {
	if !p.IsSetRegisteredCloudType() {
		return ClusterItem_RegisteredCloudType_DEFAULT
	}
	return *p.RegisteredCloudType
}

var ClusterItem_RegisteredImportType_DEFAULT string

func (p *ClusterItem) GetRegisteredImportType() (v string) {
	if !p.IsSetRegisteredImportType() {
		return ClusterItem_RegisteredImportType_DEFAULT
	}
	return *p.RegisteredImportType
}

var ClusterItem_NetworkType_DEFAULT string

func (p *ClusterItem) GetNetworkType() (v string) {
	if !p.IsSetNetworkType() {
		return ClusterItem_NetworkType_DEFAULT
	}
	return *p.NetworkType
}
func (p *ClusterItem) SetId(val string) {
	p.Id = val
}
func (p *ClusterItem) SetName(val string) {
	p.Name = val
}
func (p *ClusterItem) SetType(val string) {
	p.Type = val
}
func (p *ClusterItem) SetKubernetesVersion(val string) {
	p.KubernetesVersion = val
}
func (p *ClusterItem) SetAvailableNodeAmount(val int32) {
	p.AvailableNodeAmount = val
}
func (p *ClusterItem) SetTotalNode(val int32) {
	p.TotalNode = val
}
func (p *ClusterItem) SetResourceStatistics(val *ResourceStatistics) {
	p.ResourceStatistics = val
}
func (p *ClusterItem) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *ClusterItem) SetEnableDeleteProtection(val bool) {
	p.EnableDeleteProtection = val
}
func (p *ClusterItem) SetVpc(val *iaas.Vpc) {
	p.Vpc = val
}
func (p *ClusterItem) SetPodCidr(val string) {
	p.PodCidr = val
}
func (p *ClusterItem) SetMaxNodePodNumber(val int32) {
	p.MaxNodePodNumber = val
}
func (p *ClusterItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *ClusterItem) SetStatus(val string) {
	p.Status = val
}
func (p *ClusterItem) SetErrorMessage(val string) {
	p.ErrorMessage = val
}
func (p *ClusterItem) SetRegisteredCloudType(val *string) {
	p.RegisteredCloudType = val
}
func (p *ClusterItem) SetRegisteredImportType(val *string) {
	p.RegisteredImportType = val
}
func (p *ClusterItem) SetNetworkType(val *string) {
	p.NetworkType = val
}

var fieldIDToName_ClusterItem = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "Type",
	4:  "KubernetesVersion",
	5:  "AvailableNodeAmount",
	6:  "TotalNode",
	7:  "ResourceStatistics",
	8:  "Labels",
	9:  "EnableDeleteProtection",
	10: "Vpc",
	11: "PodCidr",
	12: "MaxNodePodNumber",
	13: "CreateTime",
	14: "Status",
	15: "ErrorMessage",
	16: "RegisteredCloudType",
	17: "RegisteredImportType",
	18: "NetworkType",
}

func (p *ClusterItem) IsSetResourceStatistics() bool {
	return p.ResourceStatistics != nil
}

func (p *ClusterItem) IsSetVpc() bool {
	return p.Vpc != nil
}

func (p *ClusterItem) IsSetRegisteredCloudType() bool {
	return p.RegisteredCloudType != nil
}

func (p *ClusterItem) IsSetRegisteredImportType() bool {
	return p.RegisteredImportType != nil
}

func (p *ClusterItem) IsSetNetworkType() bool {
	return p.NetworkType != nil
}

func (p *ClusterItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetType bool = false
	var issetKubernetesVersion bool = false
	var issetAvailableNodeAmount bool = false
	var issetTotalNode bool = false
	var issetResourceStatistics bool = false
	var issetLabels bool = false
	var issetEnableDeleteProtection bool = false
	var issetVpc bool = false
	var issetPodCidr bool = false
	var issetMaxNodePodNumber bool = false
	var issetCreateTime bool = false
	var issetStatus bool = false
	var issetErrorMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubernetesVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvailableNodeAmount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalNode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetResourceStatistics = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableDeleteProtection = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpc = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetMaxNodePodNumber = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetKubernetesVersion {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAvailableNodeAmount {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTotalNode {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetResourceStatistics {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetEnableDeleteProtection {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetVpc {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPodCidr {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetMaxNodePodNumber {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetErrorMessage {
		fieldId = 15
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterItem[fieldId]))
}

func (p *ClusterItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ClusterItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ClusterItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ClusterItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubernetesVersion = v
	}
	return nil
}

func (p *ClusterItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AvailableNodeAmount = v
	}
	return nil
}

func (p *ClusterItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalNode = v
	}
	return nil
}

func (p *ClusterItem) ReadField7(iprot thrift.TProtocol) error {
	p.ResourceStatistics = NewResourceStatistics()
	if err := p.ResourceStatistics.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterItem) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ClusterItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableDeleteProtection = v
	}
	return nil
}

func (p *ClusterItem) ReadField10(iprot thrift.TProtocol) error {
	p.Vpc = iaas.NewVpc()
	if err := p.Vpc.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodCidr = v
	}
	return nil
}

func (p *ClusterItem) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MaxNodePodNumber = v
	}
	return nil
}

func (p *ClusterItem) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *ClusterItem) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ClusterItem) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *ClusterItem) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RegisteredCloudType = &v
	}
	return nil
}

func (p *ClusterItem) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RegisteredImportType = &v
	}
	return nil
}

func (p *ClusterItem) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NetworkType = &v
	}
	return nil
}

func (p *ClusterItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubernetesVersion", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubernetesVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvailableNodeAmount", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AvailableNodeAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalNode", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalNode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ClusterItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ResourceStatistics", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ResourceStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ClusterItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ClusterItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnableDeleteProtection", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableDeleteProtection); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ClusterItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Vpc", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Vpc.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ClusterItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodCidr", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PodCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ClusterItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MaxNodePodNumber", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxNodePodNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ClusterItem) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ClusterItem) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ClusterItem) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorMessage", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ErrorMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ClusterItem) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegisteredCloudType() {
		if err = oprot.WriteFieldBegin("RegisteredCloudType", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RegisteredCloudType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ClusterItem) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetRegisteredImportType() {
		if err = oprot.WriteFieldBegin("RegisteredImportType", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RegisteredImportType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ClusterItem) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetNetworkType() {
		if err = oprot.WriteFieldBegin("NetworkType", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NetworkType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ClusterItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterItem(%+v)", *p)
}

func (p *ClusterItem) DeepEqual(ano *ClusterItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.KubernetesVersion) {
		return false
	}
	if !p.Field5DeepEqual(ano.AvailableNodeAmount) {
		return false
	}
	if !p.Field6DeepEqual(ano.TotalNode) {
		return false
	}
	if !p.Field7DeepEqual(ano.ResourceStatistics) {
		return false
	}
	if !p.Field8DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field9DeepEqual(ano.EnableDeleteProtection) {
		return false
	}
	if !p.Field10DeepEqual(ano.Vpc) {
		return false
	}
	if !p.Field11DeepEqual(ano.PodCidr) {
		return false
	}
	if !p.Field12DeepEqual(ano.MaxNodePodNumber) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.Status) {
		return false
	}
	if !p.Field15DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field16DeepEqual(ano.RegisteredCloudType) {
		return false
	}
	if !p.Field17DeepEqual(ano.RegisteredImportType) {
		return false
	}
	if !p.Field18DeepEqual(ano.NetworkType) {
		return false
	}
	return true
}

func (p *ClusterItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.KubernetesVersion, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field5DeepEqual(src int32) bool {

	if p.AvailableNodeAmount != src {
		return false
	}
	return true
}
func (p *ClusterItem) Field6DeepEqual(src int32) bool {

	if p.TotalNode != src {
		return false
	}
	return true
}
func (p *ClusterItem) Field7DeepEqual(src *ResourceStatistics) bool {

	if !p.ResourceStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterItem) Field8DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ClusterItem) Field9DeepEqual(src bool) bool {

	if p.EnableDeleteProtection != src {
		return false
	}
	return true
}
func (p *ClusterItem) Field10DeepEqual(src *iaas.Vpc) bool {

	if !p.Vpc.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterItem) Field11DeepEqual(src string) bool {

	if strings.Compare(p.PodCidr, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field12DeepEqual(src int32) bool {

	if p.MaxNodePodNumber != src {
		return false
	}
	return true
}
func (p *ClusterItem) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field14DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field15DeepEqual(src string) bool {

	if strings.Compare(p.ErrorMessage, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field16DeepEqual(src *string) bool {

	if p.RegisteredCloudType == src {
		return true
	} else if p.RegisteredCloudType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RegisteredCloudType, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field17DeepEqual(src *string) bool {

	if p.RegisteredImportType == src {
		return true
	} else if p.RegisteredImportType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RegisteredImportType, *src) != 0 {
		return false
	}
	return true
}
func (p *ClusterItem) Field18DeepEqual(src *string) bool {

	if p.NetworkType == src {
		return true
	} else if p.NetworkType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NetworkType, *src) != 0 {
		return false
	}
	return true
}

type ListClustersResponse struct {
	Items []*ClusterItem `thrift:"Items,1,required" json:"Items"`
	Total int32          `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListClustersResponse() *ListClustersResponse {
	return &ListClustersResponse{}
}

func (p *ListClustersResponse) GetItems() (v []*ClusterItem) {
	return p.Items
}

func (p *ListClustersResponse) GetTotal() (v int32) {
	return p.Total
}

var ListClustersResponse_Base_DEFAULT *base.Base

func (p *ListClustersResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListClustersResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListClustersResponse) SetItems(val []*ClusterItem) {
	p.Items = val
}
func (p *ListClustersResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListClustersResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListClustersResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListClustersResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListClustersResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListClustersResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListClustersResponse[fieldId]))
}

func (p *ListClustersResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ClusterItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewClusterItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListClustersResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClustersResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClustersResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListClustersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListClustersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListClustersResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListClustersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListClustersResponse(%+v)", *p)
}

func (p *ListClustersResponse) DeepEqual(ano *ListClustersResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListClustersResponse) Field1DeepEqual(src []*ClusterItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListClustersResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListClustersResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetKubeConfigRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	Type      string         `thrift:"Type,2,required" validate:"required,oneof=UserExternal UserInternal ServiceInternal Registered"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetKubeConfigRequest() *GetKubeConfigRequest {
	return &GetKubeConfigRequest{}
}

func (p *GetKubeConfigRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetKubeConfigRequest) GetType() (v string) {
	return p.Type
}

var GetKubeConfigRequest_Top_DEFAULT *base.TopParam

func (p *GetKubeConfigRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetKubeConfigRequest_Top_DEFAULT
	}
	return p.Top
}

var GetKubeConfigRequest_Base_DEFAULT *base.Base

func (p *GetKubeConfigRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetKubeConfigRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetKubeConfigRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetKubeConfigRequest) SetType(val string) {
	p.Type = val
}
func (p *GetKubeConfigRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetKubeConfigRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetKubeConfigRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Type",
	254: "Top",
	255: "Base",
}

func (p *GetKubeConfigRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetKubeConfigRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetKubeConfigRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetType bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetKubeConfigRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetKubeConfigRequest[fieldId]))
}

func (p *GetKubeConfigRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetKubeConfigRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *GetKubeConfigRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetKubeConfigRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetKubeConfigRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeConfigRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetKubeConfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetKubeConfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetKubeConfigRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetKubeConfigRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetKubeConfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetKubeConfigRequest(%+v)", *p)
}

func (p *GetKubeConfigRequest) DeepEqual(ano *GetKubeConfigRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetKubeConfigRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetKubeConfigRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *GetKubeConfigRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetKubeConfigRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetKubeConfigResponse struct {
	KubeConfig string     `thrift:"KubeConfig,1,required" json:"KubeConfig"`
	Base       *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetKubeConfigResponse() *GetKubeConfigResponse {
	return &GetKubeConfigResponse{}
}

func (p *GetKubeConfigResponse) GetKubeConfig() (v string) {
	return p.KubeConfig
}

var GetKubeConfigResponse_Base_DEFAULT *base.Base

func (p *GetKubeConfigResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetKubeConfigResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetKubeConfigResponse) SetKubeConfig(val string) {
	p.KubeConfig = val
}
func (p *GetKubeConfigResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetKubeConfigResponse = map[int16]string{
	1:   "KubeConfig",
	255: "Base",
}

func (p *GetKubeConfigResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetKubeConfigResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKubeConfig bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubeConfig = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKubeConfig {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetKubeConfigResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetKubeConfigResponse[fieldId]))
}

func (p *GetKubeConfigResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.KubeConfig = v
	}
	return nil
}

func (p *GetKubeConfigResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetKubeConfigResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeConfigResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetKubeConfigResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("KubeConfig", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.KubeConfig); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetKubeConfigResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetKubeConfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetKubeConfigResponse(%+v)", *p)
}

func (p *GetKubeConfigResponse) DeepEqual(ano *GetKubeConfigResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.KubeConfig) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetKubeConfigResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.KubeConfig, src) != 0 {
		return false
	}
	return true
}
func (p *GetKubeConfigResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetKubeconfigRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	Type      string         `thrift:"Type,2,required" validate:"required,oneof=UserExternal UserInternal ServiceInternal Registered"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetKubeconfigRequest() *GetKubeconfigRequest {
	return &GetKubeconfigRequest{}
}

func (p *GetKubeconfigRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetKubeconfigRequest) GetType() (v string) {
	return p.Type
}

var GetKubeconfigRequest_Top_DEFAULT *base.TopParam

func (p *GetKubeconfigRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetKubeconfigRequest_Top_DEFAULT
	}
	return p.Top
}

var GetKubeconfigRequest_Base_DEFAULT *base.Base

func (p *GetKubeconfigRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetKubeconfigRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetKubeconfigRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetKubeconfigRequest) SetType(val string) {
	p.Type = val
}
func (p *GetKubeconfigRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetKubeconfigRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetKubeconfigRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Type",
	254: "Top",
	255: "Base",
}

func (p *GetKubeconfigRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetKubeconfigRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetKubeconfigRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetType bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetKubeconfigRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetKubeconfigRequest[fieldId]))
}

func (p *GetKubeconfigRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetKubeconfigRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *GetKubeconfigRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetKubeconfigRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetKubeconfigRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeconfigRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetKubeconfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetKubeconfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetKubeconfigRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetKubeconfigRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetKubeconfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetKubeconfigRequest(%+v)", *p)
}

func (p *GetKubeconfigRequest) DeepEqual(ano *GetKubeconfigRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetKubeconfigRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetKubeconfigRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *GetKubeconfigRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetKubeconfigRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetKubeconfigResponse struct {
	Kubeconfig string     `thrift:"Kubeconfig,1,required" json:"Kubeconfig"`
	Base       *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetKubeconfigResponse() *GetKubeconfigResponse {
	return &GetKubeconfigResponse{}
}

func (p *GetKubeconfigResponse) GetKubeconfig() (v string) {
	return p.Kubeconfig
}

var GetKubeconfigResponse_Base_DEFAULT *base.Base

func (p *GetKubeconfigResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetKubeconfigResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetKubeconfigResponse) SetKubeconfig(val string) {
	p.Kubeconfig = val
}
func (p *GetKubeconfigResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetKubeconfigResponse = map[int16]string{
	1:   "Kubeconfig",
	255: "Base",
}

func (p *GetKubeconfigResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetKubeconfigResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKubeconfig bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubeconfig = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKubeconfig {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetKubeconfigResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetKubeconfigResponse[fieldId]))
}

func (p *GetKubeconfigResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kubeconfig = v
	}
	return nil
}

func (p *GetKubeconfigResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetKubeconfigResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeconfigResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetKubeconfigResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kubeconfig", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kubeconfig); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetKubeconfigResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetKubeconfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetKubeconfigResponse(%+v)", *p)
}

func (p *GetKubeconfigResponse) DeepEqual(ano *GetKubeconfigResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Kubeconfig) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetKubeconfigResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Kubeconfig, src) != 0 {
		return false
	}
	return true
}
func (p *GetKubeconfigResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RevokeKubeconfigRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	UserIds   []string       `thrift:"UserIds,2,required" validate:"required"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewRevokeKubeconfigRequest() *RevokeKubeconfigRequest {
	return &RevokeKubeconfigRequest{}
}

func (p *RevokeKubeconfigRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *RevokeKubeconfigRequest) GetUserIds() (v []string) {
	return p.UserIds
}

var RevokeKubeconfigRequest_Top_DEFAULT *base.TopParam

func (p *RevokeKubeconfigRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return RevokeKubeconfigRequest_Top_DEFAULT
	}
	return p.Top
}

var RevokeKubeconfigRequest_Base_DEFAULT *base.Base

func (p *RevokeKubeconfigRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return RevokeKubeconfigRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RevokeKubeconfigRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *RevokeKubeconfigRequest) SetUserIds(val []string) {
	p.UserIds = val
}
func (p *RevokeKubeconfigRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *RevokeKubeconfigRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RevokeKubeconfigRequest = map[int16]string{
	1:   "ClusterId",
	2:   "UserIds",
	254: "Top",
	255: "Base",
}

func (p *RevokeKubeconfigRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *RevokeKubeconfigRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RevokeKubeconfigRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetUserIds bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserIds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUserIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RevokeKubeconfigRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RevokeKubeconfigRequest[fieldId]))
}

func (p *RevokeKubeconfigRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RevokeKubeconfigRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.UserIds = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.UserIds = append(p.UserIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *RevokeKubeconfigRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RevokeKubeconfigRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RevokeKubeconfigRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevokeKubeconfigRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RevokeKubeconfigRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RevokeKubeconfigRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserIds", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.UserIds)); err != nil {
		return err
	}
	for _, v := range p.UserIds {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RevokeKubeconfigRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *RevokeKubeconfigRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RevokeKubeconfigRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeKubeconfigRequest(%+v)", *p)
}

func (p *RevokeKubeconfigRequest) DeepEqual(ano *RevokeKubeconfigRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserIds) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RevokeKubeconfigRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *RevokeKubeconfigRequest) Field2DeepEqual(src []string) bool {

	if len(p.UserIds) != len(src) {
		return false
	}
	for i, v := range p.UserIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *RevokeKubeconfigRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RevokeKubeconfigRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RevokeKubeconfigResponse struct {
}

func NewRevokeKubeconfigResponse() *RevokeKubeconfigResponse {
	return &RevokeKubeconfigResponse{}
}

var fieldIDToName_RevokeKubeconfigResponse = map[int16]string{}

func (p *RevokeKubeconfigResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RevokeKubeconfigResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("RevokeKubeconfigResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RevokeKubeconfigResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeKubeconfigResponse(%+v)", *p)
}

func (p *RevokeKubeconfigResponse) DeepEqual(ano *RevokeKubeconfigResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ListKubeconfigUsersRequest struct {
	ClusterId  string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	PageNumber int32          `thrift:"PageNumber,2" json:"PageNumber" default:"1"`
	PageSize   int32          `thrift:"PageSize,3" json:"PageSize" default:"100"`
	Top        *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListKubeconfigUsersRequest() *ListKubeconfigUsersRequest {
	return &ListKubeconfigUsersRequest{

		PageNumber: 1,
		PageSize:   100,
	}
}

func (p *ListKubeconfigUsersRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListKubeconfigUsersRequest_PageNumber_DEFAULT int32 = 1

func (p *ListKubeconfigUsersRequest) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListKubeconfigUsersRequest_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListKubeconfigUsersRequest_PageSize_DEFAULT int32 = 100

func (p *ListKubeconfigUsersRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListKubeconfigUsersRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListKubeconfigUsersRequest_Top_DEFAULT *base.TopParam

func (p *ListKubeconfigUsersRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListKubeconfigUsersRequest_Top_DEFAULT
	}
	return p.Top
}

var ListKubeconfigUsersRequest_Base_DEFAULT *base.Base

func (p *ListKubeconfigUsersRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListKubeconfigUsersRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListKubeconfigUsersRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListKubeconfigUsersRequest) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListKubeconfigUsersRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListKubeconfigUsersRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListKubeconfigUsersRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListKubeconfigUsersRequest = map[int16]string{
	1:   "ClusterId",
	2:   "PageNumber",
	3:   "PageSize",
	254: "Top",
	255: "Base",
}

func (p *ListKubeconfigUsersRequest) IsSetPageNumber() bool {
	return p.PageNumber != ListKubeconfigUsersRequest_PageNumber_DEFAULT
}

func (p *ListKubeconfigUsersRequest) IsSetPageSize() bool {
	return p.PageSize != ListKubeconfigUsersRequest_PageSize_DEFAULT
}

func (p *ListKubeconfigUsersRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListKubeconfigUsersRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListKubeconfigUsersRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListKubeconfigUsersRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListKubeconfigUsersRequest[fieldId]))
}

func (p *ListKubeconfigUsersRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListKubeconfigUsersRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListKubeconfigUsersRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListKubeconfigUsersRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListKubeconfigUsersRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListKubeconfigUsersRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListKubeconfigUsersRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListKubeconfigUsersRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListKubeconfigUsersRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListKubeconfigUsersRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListKubeconfigUsersRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListKubeconfigUsersRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListKubeconfigUsersRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListKubeconfigUsersRequest(%+v)", *p)
}

func (p *ListKubeconfigUsersRequest) DeepEqual(ano *ListKubeconfigUsersRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListKubeconfigUsersRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListKubeconfigUsersRequest) Field2DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListKubeconfigUsersRequest) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListKubeconfigUsersRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListKubeconfigUsersRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type KubeconfigUser struct {
	UserId     string `thrift:"UserId,1,required" json:"UserId"`
	UpdateTime string `thrift:"UpdateTime,2,required" json:"UpdateTime"`
}

func NewKubeconfigUser() *KubeconfigUser {
	return &KubeconfigUser{}
}

func (p *KubeconfigUser) GetUserId() (v string) {
	return p.UserId
}

func (p *KubeconfigUser) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *KubeconfigUser) SetUserId(val string) {
	p.UserId = val
}
func (p *KubeconfigUser) SetUpdateTime(val string) {
	p.UpdateTime = val
}

var fieldIDToName_KubeconfigUser = map[int16]string{
	1: "UserId",
	2: "UpdateTime",
}

func (p *KubeconfigUser) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetUpdateTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KubeconfigUser[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_KubeconfigUser[fieldId]))
}

func (p *KubeconfigUser) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *KubeconfigUser) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *KubeconfigUser) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KubeconfigUser"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KubeconfigUser) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *KubeconfigUser) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *KubeconfigUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KubeconfigUser(%+v)", *p)
}

func (p *KubeconfigUser) DeepEqual(ano *KubeconfigUser) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UpdateTime) {
		return false
	}
	return true
}

func (p *KubeconfigUser) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *KubeconfigUser) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}

type ListKubeconfigUsersResponse struct {
	Items []*KubeconfigUser `thrift:"Items,1,required" json:"Items"`
	Total int32             `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base        `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListKubeconfigUsersResponse() *ListKubeconfigUsersResponse {
	return &ListKubeconfigUsersResponse{}
}

func (p *ListKubeconfigUsersResponse) GetItems() (v []*KubeconfigUser) {
	return p.Items
}

func (p *ListKubeconfigUsersResponse) GetTotal() (v int32) {
	return p.Total
}

var ListKubeconfigUsersResponse_Base_DEFAULT *base.Base

func (p *ListKubeconfigUsersResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListKubeconfigUsersResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListKubeconfigUsersResponse) SetItems(val []*KubeconfigUser) {
	p.Items = val
}
func (p *ListKubeconfigUsersResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListKubeconfigUsersResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListKubeconfigUsersResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListKubeconfigUsersResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListKubeconfigUsersResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListKubeconfigUsersResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListKubeconfigUsersResponse[fieldId]))
}

func (p *ListKubeconfigUsersResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*KubeconfigUser, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKubeconfigUser()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListKubeconfigUsersResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListKubeconfigUsersResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListKubeconfigUsersResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListKubeconfigUsersResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListKubeconfigUsersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListKubeconfigUsersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListKubeconfigUsersResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListKubeconfigUsersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListKubeconfigUsersResponse(%+v)", *p)
}

func (p *ListKubeconfigUsersResponse) DeepEqual(ano *ListKubeconfigUsersResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListKubeconfigUsersResponse) Field1DeepEqual(src []*KubeconfigUser) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListKubeconfigUsersResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListKubeconfigUsersResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetClusterDeployProgressRequest struct {
	Id   string         `thrift:"Id,1,required" validate:"required,k8sName"`
	Top  *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterDeployProgressRequest() *GetClusterDeployProgressRequest {
	return &GetClusterDeployProgressRequest{}
}

func (p *GetClusterDeployProgressRequest) GetId() (v string) {
	return p.Id
}

var GetClusterDeployProgressRequest_Top_DEFAULT *base.TopParam

func (p *GetClusterDeployProgressRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetClusterDeployProgressRequest_Top_DEFAULT
	}
	return p.Top
}

var GetClusterDeployProgressRequest_Base_DEFAULT *base.Base

func (p *GetClusterDeployProgressRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterDeployProgressRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterDeployProgressRequest) SetId(val string) {
	p.Id = val
}
func (p *GetClusterDeployProgressRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetClusterDeployProgressRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterDeployProgressRequest = map[int16]string{
	1:   "Id",
	254: "Top",
	255: "Base",
}

func (p *GetClusterDeployProgressRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetClusterDeployProgressRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterDeployProgressRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterDeployProgressRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterDeployProgressRequest[fieldId]))
}

func (p *GetClusterDeployProgressRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetClusterDeployProgressRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterDeployProgressRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterDeployProgressRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterDeployProgressRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterDeployProgressRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterDeployProgressRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetClusterDeployProgressRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterDeployProgressRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterDeployProgressRequest(%+v)", *p)
}

func (p *GetClusterDeployProgressRequest) DeepEqual(ano *GetClusterDeployProgressRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterDeployProgressRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterDeployProgressRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterDeployProgressRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClusterDeployProgress struct {
	Name      string `thrift:"Name,1,required" json:"Name"`
	Status    string `thrift:"Status,2,required" json:"Status"`
	StartTime string `thrift:"StartTime,3,required" json:"StartTime"`
	EndTime   string `thrift:"EndTime,4,required" json:"EndTime"`
	Message   string `thrift:"Message,5,required" json:"Message"`
}

func NewClusterDeployProgress() *ClusterDeployProgress {
	return &ClusterDeployProgress{}
}

func (p *ClusterDeployProgress) GetName() (v string) {
	return p.Name
}

func (p *ClusterDeployProgress) GetStatus() (v string) {
	return p.Status
}

func (p *ClusterDeployProgress) GetStartTime() (v string) {
	return p.StartTime
}

func (p *ClusterDeployProgress) GetEndTime() (v string) {
	return p.EndTime
}

func (p *ClusterDeployProgress) GetMessage() (v string) {
	return p.Message
}
func (p *ClusterDeployProgress) SetName(val string) {
	p.Name = val
}
func (p *ClusterDeployProgress) SetStatus(val string) {
	p.Status = val
}
func (p *ClusterDeployProgress) SetStartTime(val string) {
	p.StartTime = val
}
func (p *ClusterDeployProgress) SetEndTime(val string) {
	p.EndTime = val
}
func (p *ClusterDeployProgress) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_ClusterDeployProgress = map[int16]string{
	1: "Name",
	2: "Status",
	3: "StartTime",
	4: "EndTime",
	5: "Message",
}

func (p *ClusterDeployProgress) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetStatus bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetMessage {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterDeployProgress[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterDeployProgress[fieldId]))
}

func (p *ClusterDeployProgress) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ClusterDeployProgress) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ClusterDeployProgress) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *ClusterDeployProgress) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *ClusterDeployProgress) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *ClusterDeployProgress) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterDeployProgress"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterDeployProgress) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterDeployProgress) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterDeployProgress) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterDeployProgress) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EndTime", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterDeployProgress) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Message", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterDeployProgress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterDeployProgress(%+v)", *p)
}

func (p *ClusterDeployProgress) DeepEqual(ano *ClusterDeployProgress) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field3DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *ClusterDeployProgress) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDeployProgress) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDeployProgress) Field3DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDeployProgress) Field4DeepEqual(src string) bool {

	if strings.Compare(p.EndTime, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDeployProgress) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetClusterDeployProgressResponse struct {
	Items    []*ClusterDeployProgress `thrift:"Items,1,required" json:"Items"`
	Progress int32                    `thrift:"Progress,2,required" json:"Progress"`
	Base     *base.Base               `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterDeployProgressResponse() *GetClusterDeployProgressResponse {
	return &GetClusterDeployProgressResponse{}
}

func (p *GetClusterDeployProgressResponse) GetItems() (v []*ClusterDeployProgress) {
	return p.Items
}

func (p *GetClusterDeployProgressResponse) GetProgress() (v int32) {
	return p.Progress
}

var GetClusterDeployProgressResponse_Base_DEFAULT *base.Base

func (p *GetClusterDeployProgressResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterDeployProgressResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterDeployProgressResponse) SetItems(val []*ClusterDeployProgress) {
	p.Items = val
}
func (p *GetClusterDeployProgressResponse) SetProgress(val int32) {
	p.Progress = val
}
func (p *GetClusterDeployProgressResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterDeployProgressResponse = map[int16]string{
	1:   "Items",
	2:   "Progress",
	255: "Base",
}

func (p *GetClusterDeployProgressResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterDeployProgressResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetProgress bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetProgress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetProgress {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterDeployProgressResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterDeployProgressResponse[fieldId]))
}

func (p *GetClusterDeployProgressResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ClusterDeployProgress, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewClusterDeployProgress()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterDeployProgressResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Progress = v
	}
	return nil
}

func (p *GetClusterDeployProgressResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterDeployProgressResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterDeployProgressResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterDeployProgressResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterDeployProgressResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Progress", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Progress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetClusterDeployProgressResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterDeployProgressResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterDeployProgressResponse(%+v)", *p)
}

func (p *GetClusterDeployProgressResponse) DeepEqual(ano *GetClusterDeployProgressResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Progress) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterDeployProgressResponse) Field1DeepEqual(src []*ClusterDeployProgress) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetClusterDeployProgressResponse) Field2DeepEqual(src int32) bool {

	if p.Progress != src {
		return false
	}
	return true
}
func (p *GetClusterDeployProgressResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSupportedKubernetesVersionsRequest struct {
	Top  *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListSupportedKubernetesVersionsRequest() *ListSupportedKubernetesVersionsRequest {
	return &ListSupportedKubernetesVersionsRequest{}
}

var ListSupportedKubernetesVersionsRequest_Top_DEFAULT *base.TopParam

func (p *ListSupportedKubernetesVersionsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListSupportedKubernetesVersionsRequest_Top_DEFAULT
	}
	return p.Top
}

var ListSupportedKubernetesVersionsRequest_Base_DEFAULT *base.Base

func (p *ListSupportedKubernetesVersionsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListSupportedKubernetesVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSupportedKubernetesVersionsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListSupportedKubernetesVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSupportedKubernetesVersionsRequest = map[int16]string{
	254: "Top",
	255: "Base",
}

func (p *ListSupportedKubernetesVersionsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListSupportedKubernetesVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSupportedKubernetesVersionsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSupportedKubernetesVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListSupportedKubernetesVersionsRequest[fieldId]))
}

func (p *ListSupportedKubernetesVersionsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedKubernetesVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedKubernetesVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedKubernetesVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSupportedKubernetesVersionsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListSupportedKubernetesVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSupportedKubernetesVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSupportedKubernetesVersionsRequest(%+v)", *p)
}

func (p *ListSupportedKubernetesVersionsRequest) DeepEqual(ano *ListSupportedKubernetesVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSupportedKubernetesVersionsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListSupportedKubernetesVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSupportedKubernetesVersionsResponse struct {
	Items []string   `thrift:"Items,1,required" json:"Items"`
	Base  *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListSupportedKubernetesVersionsResponse() *ListSupportedKubernetesVersionsResponse {
	return &ListSupportedKubernetesVersionsResponse{}
}

func (p *ListSupportedKubernetesVersionsResponse) GetItems() (v []string) {
	return p.Items
}

var ListSupportedKubernetesVersionsResponse_Base_DEFAULT *base.Base

func (p *ListSupportedKubernetesVersionsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListSupportedKubernetesVersionsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSupportedKubernetesVersionsResponse) SetItems(val []string) {
	p.Items = val
}
func (p *ListSupportedKubernetesVersionsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSupportedKubernetesVersionsResponse = map[int16]string{
	1:   "Items",
	255: "Base",
}

func (p *ListSupportedKubernetesVersionsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSupportedKubernetesVersionsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSupportedKubernetesVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListSupportedKubernetesVersionsResponse[fieldId]))
}

func (p *ListSupportedKubernetesVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedKubernetesVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedKubernetesVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedKubernetesVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSupportedKubernetesVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListSupportedKubernetesVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSupportedKubernetesVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSupportedKubernetesVersionsResponse(%+v)", *p)
}

func (p *ListSupportedKubernetesVersionsResponse) DeepEqual(ano *ListSupportedKubernetesVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSupportedKubernetesVersionsResponse) Field1DeepEqual(src []string) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListSupportedKubernetesVersionsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListClusterNetworkCidrsRequest struct {
	VpcId string         `thrift:"VpcId,1,required" validate:"required"`
	Top   *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base  *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListClusterNetworkCidrsRequest() *ListClusterNetworkCidrsRequest {
	return &ListClusterNetworkCidrsRequest{}
}

func (p *ListClusterNetworkCidrsRequest) GetVpcId() (v string) {
	return p.VpcId
}

var ListClusterNetworkCidrsRequest_Top_DEFAULT *base.TopParam

func (p *ListClusterNetworkCidrsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListClusterNetworkCidrsRequest_Top_DEFAULT
	}
	return p.Top
}

var ListClusterNetworkCidrsRequest_Base_DEFAULT *base.Base

func (p *ListClusterNetworkCidrsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListClusterNetworkCidrsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListClusterNetworkCidrsRequest) SetVpcId(val string) {
	p.VpcId = val
}
func (p *ListClusterNetworkCidrsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListClusterNetworkCidrsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListClusterNetworkCidrsRequest = map[int16]string{
	1:   "VpcId",
	254: "Top",
	255: "Base",
}

func (p *ListClusterNetworkCidrsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListClusterNetworkCidrsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListClusterNetworkCidrsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVpcId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpcId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVpcId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListClusterNetworkCidrsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListClusterNetworkCidrsRequest[fieldId]))
}

func (p *ListClusterNetworkCidrsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VpcId = v
	}
	return nil
}

func (p *ListClusterNetworkCidrsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClusterNetworkCidrsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClusterNetworkCidrsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClusterNetworkCidrsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListClusterNetworkCidrsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VpcId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VpcId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListClusterNetworkCidrsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListClusterNetworkCidrsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListClusterNetworkCidrsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListClusterNetworkCidrsRequest(%+v)", *p)
}

func (p *ListClusterNetworkCidrsRequest) DeepEqual(ano *ListClusterNetworkCidrsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VpcId) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListClusterNetworkCidrsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VpcId, src) != 0 {
		return false
	}
	return true
}
func (p *ListClusterNetworkCidrsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListClusterNetworkCidrsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListClusterNetworkCidrsResponse struct {
	Items []*Address `thrift:"Items,1,required" json:"Items"`
	Base  *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListClusterNetworkCidrsResponse() *ListClusterNetworkCidrsResponse {
	return &ListClusterNetworkCidrsResponse{}
}

func (p *ListClusterNetworkCidrsResponse) GetItems() (v []*Address) {
	return p.Items
}

var ListClusterNetworkCidrsResponse_Base_DEFAULT *base.Base

func (p *ListClusterNetworkCidrsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListClusterNetworkCidrsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListClusterNetworkCidrsResponse) SetItems(val []*Address) {
	p.Items = val
}
func (p *ListClusterNetworkCidrsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListClusterNetworkCidrsResponse = map[int16]string{
	1:   "Items",
	255: "Base",
}

func (p *ListClusterNetworkCidrsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListClusterNetworkCidrsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListClusterNetworkCidrsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListClusterNetworkCidrsResponse[fieldId]))
}

func (p *ListClusterNetworkCidrsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*Address, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAddress()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListClusterNetworkCidrsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListClusterNetworkCidrsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClusterNetworkCidrsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListClusterNetworkCidrsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListClusterNetworkCidrsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListClusterNetworkCidrsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListClusterNetworkCidrsResponse(%+v)", *p)
}

func (p *ListClusterNetworkCidrsResponse) DeepEqual(ano *ListClusterNetworkCidrsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListClusterNetworkCidrsResponse) Field1DeepEqual(src []*Address) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListClusterNetworkCidrsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSupportedGpuModelsRequest struct {
	Top  *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListSupportedGpuModelsRequest() *ListSupportedGpuModelsRequest {
	return &ListSupportedGpuModelsRequest{}
}

var ListSupportedGpuModelsRequest_Top_DEFAULT *base.TopParam

func (p *ListSupportedGpuModelsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListSupportedGpuModelsRequest_Top_DEFAULT
	}
	return p.Top
}

var ListSupportedGpuModelsRequest_Base_DEFAULT *base.Base

func (p *ListSupportedGpuModelsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListSupportedGpuModelsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSupportedGpuModelsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListSupportedGpuModelsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSupportedGpuModelsRequest = map[int16]string{
	254: "Top",
	255: "Base",
}

func (p *ListSupportedGpuModelsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListSupportedGpuModelsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSupportedGpuModelsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSupportedGpuModelsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListSupportedGpuModelsRequest[fieldId]))
}

func (p *ListSupportedGpuModelsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedGpuModelsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedGpuModelsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedGpuModelsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSupportedGpuModelsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListSupportedGpuModelsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSupportedGpuModelsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSupportedGpuModelsRequest(%+v)", *p)
}

func (p *ListSupportedGpuModelsRequest) DeepEqual(ano *ListSupportedGpuModelsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSupportedGpuModelsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListSupportedGpuModelsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSupportedGpuModelsResponse struct {
	Items []string   `thrift:"Items,1,required" json:"Items"`
	Base  *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListSupportedGpuModelsResponse() *ListSupportedGpuModelsResponse {
	return &ListSupportedGpuModelsResponse{}
}

func (p *ListSupportedGpuModelsResponse) GetItems() (v []string) {
	return p.Items
}

var ListSupportedGpuModelsResponse_Base_DEFAULT *base.Base

func (p *ListSupportedGpuModelsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListSupportedGpuModelsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSupportedGpuModelsResponse) SetItems(val []string) {
	p.Items = val
}
func (p *ListSupportedGpuModelsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSupportedGpuModelsResponse = map[int16]string{
	1:   "Items",
	255: "Base",
}

func (p *ListSupportedGpuModelsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSupportedGpuModelsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSupportedGpuModelsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListSupportedGpuModelsResponse[fieldId]))
}

func (p *ListSupportedGpuModelsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedGpuModelsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSupportedGpuModelsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedGpuModelsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSupportedGpuModelsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListSupportedGpuModelsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSupportedGpuModelsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSupportedGpuModelsResponse(%+v)", *p)
}

func (p *ListSupportedGpuModelsResponse) DeepEqual(ano *ListSupportedGpuModelsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSupportedGpuModelsResponse) Field1DeepEqual(src []string) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListSupportedGpuModelsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodesFilter struct {
	Ids      []string `thrift:"Ids,1" json:"Ids,omitempty"`
	Names    []string `thrift:"Names,2" json:"Names,omitempty"`
	Statuses []string `thrift:"Statuses,3" json:"Statuses,omitempty"`
}

func NewListNodesFilter() *ListNodesFilter {
	return &ListNodesFilter{}
}

var ListNodesFilter_Ids_DEFAULT []string

func (p *ListNodesFilter) GetIds() (v []string) {
	if !p.IsSetIds() {
		return ListNodesFilter_Ids_DEFAULT
	}
	return p.Ids
}

var ListNodesFilter_Names_DEFAULT []string

func (p *ListNodesFilter) GetNames() (v []string) {
	if !p.IsSetNames() {
		return ListNodesFilter_Names_DEFAULT
	}
	return p.Names
}

var ListNodesFilter_Statuses_DEFAULT []string

func (p *ListNodesFilter) GetStatuses() (v []string) {
	if !p.IsSetStatuses() {
		return ListNodesFilter_Statuses_DEFAULT
	}
	return p.Statuses
}
func (p *ListNodesFilter) SetIds(val []string) {
	p.Ids = val
}
func (p *ListNodesFilter) SetNames(val []string) {
	p.Names = val
}
func (p *ListNodesFilter) SetStatuses(val []string) {
	p.Statuses = val
}

var fieldIDToName_ListNodesFilter = map[int16]string{
	1: "Ids",
	2: "Names",
	3: "Statuses",
}

func (p *ListNodesFilter) IsSetIds() bool {
	return p.Ids != nil
}

func (p *ListNodesFilter) IsSetNames() bool {
	return p.Names != nil
}

func (p *ListNodesFilter) IsSetStatuses() bool {
	return p.Statuses != nil
}

func (p *ListNodesFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodesFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListNodesFilter) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ids = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Ids = append(p.Ids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesFilter) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Names = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Names = append(p.Names, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesFilter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Statuses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Statuses = append(p.Statuses, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodesFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodesFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIds() {
		if err = oprot.WriteFieldBegin("Ids", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
			return err
		}
		for _, v := range p.Ids {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodesFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNames() {
		if err = oprot.WriteFieldBegin("Names", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
			return err
		}
		for _, v := range p.Names {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodesFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatuses() {
		if err = oprot.WriteFieldBegin("Statuses", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Statuses)); err != nil {
			return err
		}
		for _, v := range p.Statuses {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNodesFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodesFilter(%+v)", *p)
}

func (p *ListNodesFilter) DeepEqual(ano *ListNodesFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	if !p.Field2DeepEqual(ano.Names) {
		return false
	}
	if !p.Field3DeepEqual(ano.Statuses) {
		return false
	}
	return true
}

func (p *ListNodesFilter) Field1DeepEqual(src []string) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListNodesFilter) Field2DeepEqual(src []string) bool {

	if len(p.Names) != len(src) {
		return false
	}
	for i, v := range p.Names {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListNodesFilter) Field3DeepEqual(src []string) bool {

	if len(p.Statuses) != len(src) {
		return false
	}
	for i, v := range p.Statuses {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ListNodesRequest struct {
	ClusterId  string           `thrift:"ClusterId,1,required" json:"ClusterId"`
	PageNumber int32            `thrift:"PageNumber,2" json:"PageNumber" default:"1"`
	PageSize   int32            `thrift:"PageSize,3" json:"PageSize" default:"100"`
	Filter     *ListNodesFilter `thrift:"Filter,4" json:"Filter,omitempty"`
	Top        *base.TopParam   `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base       `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodesRequest() *ListNodesRequest {
	return &ListNodesRequest{

		PageNumber: 1,
		PageSize:   100,
	}
}

func (p *ListNodesRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListNodesRequest_PageNumber_DEFAULT int32 = 1

func (p *ListNodesRequest) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListNodesRequest_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListNodesRequest_PageSize_DEFAULT int32 = 100

func (p *ListNodesRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListNodesRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListNodesRequest_Filter_DEFAULT *ListNodesFilter

func (p *ListNodesRequest) GetFilter() (v *ListNodesFilter) {
	if !p.IsSetFilter() {
		return ListNodesRequest_Filter_DEFAULT
	}
	return p.Filter
}

var ListNodesRequest_Top_DEFAULT *base.TopParam

func (p *ListNodesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNodesRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNodesRequest_Base_DEFAULT *base.Base

func (p *ListNodesRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodesRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNodesRequest) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListNodesRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListNodesRequest) SetFilter(val *ListNodesFilter) {
	p.Filter = val
}
func (p *ListNodesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNodesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodesRequest = map[int16]string{
	1:   "ClusterId",
	2:   "PageNumber",
	3:   "PageSize",
	4:   "Filter",
	254: "Top",
	255: "Base",
}

func (p *ListNodesRequest) IsSetPageNumber() bool {
	return p.PageNumber != ListNodesRequest_PageNumber_DEFAULT
}

func (p *ListNodesRequest) IsSetPageSize() bool {
	return p.PageSize != ListNodesRequest_PageSize_DEFAULT
}

func (p *ListNodesRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListNodesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNodesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodesRequest[fieldId]))
}

func (p *ListNodesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNodesRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListNodesRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListNodesRequest) ReadField4(iprot thrift.TProtocol) error {
	p.Filter = NewListNodesFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNodesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListNodesRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNodesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodesRequest(%+v)", *p)
}

func (p *ListNodesRequest) DeepEqual(ano *ListNodesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodesRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodesRequest) Field2DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListNodesRequest) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListNodesRequest) Field4DeepEqual(src *ListNodesFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodesRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClusterNodeItem struct {
	Id                 string              `thrift:"Id,1,required" json:"Id"`
	Name               string              `thrift:"Name,2,required" json:"Name"`
	NodeName           string              `thrift:"NodeName,3" json:"NodeName,omitempty"`
	Role               string              `thrift:"Role,4,required" json:"Role"`
	NodePoolId         string              `thrift:"NodePoolId,5,required" json:"NodePoolId"`
	NodePoolName       string              `thrift:"NodePoolName,6,required" json:"NodePoolName"`
	InstanceType       *InstanceType       `thrift:"InstanceType,7,required" json:"InstanceType"`
	ResourceStatistics *ResourceStatistics `thrift:"ResourceStatistics,8,required" json:"ResourceStatistics"`
	Zone               *iaas.Zone          `thrift:"Zone,9,required" json:"Zone"`
	Instance           *iaas.Instance      `thrift:"Instance,10,required" json:"Instance"`
	PublicAddress      string              `thrift:"PublicAddress,11,required" json:"PublicAddress"`
	PrivateAddress     string              `thrift:"PrivateAddress,12,required" json:"PrivateAddress"`
	ChargeType         string              `thrift:"ChargeType,13,required" json:"ChargeType"`
	Status             string              `thrift:"Status,14,required" json:"Status"`
	ErrorMessage       string              `thrift:"ErrorMessage,15,required" json:"ErrorMessage"`
	Type               string              `thrift:"Type,16,required" json:"Type"`
}

func NewClusterNodeItem() *ClusterNodeItem {
	return &ClusterNodeItem{

		NodeName: "",
	}
}

func (p *ClusterNodeItem) GetId() (v string) {
	return p.Id
}

func (p *ClusterNodeItem) GetName() (v string) {
	return p.Name
}

var ClusterNodeItem_NodeName_DEFAULT string = ""

func (p *ClusterNodeItem) GetNodeName() (v string) {
	if !p.IsSetNodeName() {
		return ClusterNodeItem_NodeName_DEFAULT
	}
	return p.NodeName
}

func (p *ClusterNodeItem) GetRole() (v string) {
	return p.Role
}

func (p *ClusterNodeItem) GetNodePoolId() (v string) {
	return p.NodePoolId
}

func (p *ClusterNodeItem) GetNodePoolName() (v string) {
	return p.NodePoolName
}

var ClusterNodeItem_InstanceType_DEFAULT *InstanceType

func (p *ClusterNodeItem) GetInstanceType() (v *InstanceType) {
	if !p.IsSetInstanceType() {
		return ClusterNodeItem_InstanceType_DEFAULT
	}
	return p.InstanceType
}

var ClusterNodeItem_ResourceStatistics_DEFAULT *ResourceStatistics

func (p *ClusterNodeItem) GetResourceStatistics() (v *ResourceStatistics) {
	if !p.IsSetResourceStatistics() {
		return ClusterNodeItem_ResourceStatistics_DEFAULT
	}
	return p.ResourceStatistics
}

var ClusterNodeItem_Zone_DEFAULT *iaas.Zone

func (p *ClusterNodeItem) GetZone() (v *iaas.Zone) {
	if !p.IsSetZone() {
		return ClusterNodeItem_Zone_DEFAULT
	}
	return p.Zone
}

var ClusterNodeItem_Instance_DEFAULT *iaas.Instance

func (p *ClusterNodeItem) GetInstance() (v *iaas.Instance) {
	if !p.IsSetInstance() {
		return ClusterNodeItem_Instance_DEFAULT
	}
	return p.Instance
}

func (p *ClusterNodeItem) GetPublicAddress() (v string) {
	return p.PublicAddress
}

func (p *ClusterNodeItem) GetPrivateAddress() (v string) {
	return p.PrivateAddress
}

func (p *ClusterNodeItem) GetChargeType() (v string) {
	return p.ChargeType
}

func (p *ClusterNodeItem) GetStatus() (v string) {
	return p.Status
}

func (p *ClusterNodeItem) GetErrorMessage() (v string) {
	return p.ErrorMessage
}

func (p *ClusterNodeItem) GetType() (v string) {
	return p.Type
}
func (p *ClusterNodeItem) SetId(val string) {
	p.Id = val
}
func (p *ClusterNodeItem) SetName(val string) {
	p.Name = val
}
func (p *ClusterNodeItem) SetNodeName(val string) {
	p.NodeName = val
}
func (p *ClusterNodeItem) SetRole(val string) {
	p.Role = val
}
func (p *ClusterNodeItem) SetNodePoolId(val string) {
	p.NodePoolId = val
}
func (p *ClusterNodeItem) SetNodePoolName(val string) {
	p.NodePoolName = val
}
func (p *ClusterNodeItem) SetInstanceType(val *InstanceType) {
	p.InstanceType = val
}
func (p *ClusterNodeItem) SetResourceStatistics(val *ResourceStatistics) {
	p.ResourceStatistics = val
}
func (p *ClusterNodeItem) SetZone(val *iaas.Zone) {
	p.Zone = val
}
func (p *ClusterNodeItem) SetInstance(val *iaas.Instance) {
	p.Instance = val
}
func (p *ClusterNodeItem) SetPublicAddress(val string) {
	p.PublicAddress = val
}
func (p *ClusterNodeItem) SetPrivateAddress(val string) {
	p.PrivateAddress = val
}
func (p *ClusterNodeItem) SetChargeType(val string) {
	p.ChargeType = val
}
func (p *ClusterNodeItem) SetStatus(val string) {
	p.Status = val
}
func (p *ClusterNodeItem) SetErrorMessage(val string) {
	p.ErrorMessage = val
}
func (p *ClusterNodeItem) SetType(val string) {
	p.Type = val
}

var fieldIDToName_ClusterNodeItem = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "NodeName",
	4:  "Role",
	5:  "NodePoolId",
	6:  "NodePoolName",
	7:  "InstanceType",
	8:  "ResourceStatistics",
	9:  "Zone",
	10: "Instance",
	11: "PublicAddress",
	12: "PrivateAddress",
	13: "ChargeType",
	14: "Status",
	15: "ErrorMessage",
	16: "Type",
}

func (p *ClusterNodeItem) IsSetNodeName() bool {
	return p.NodeName != ClusterNodeItem_NodeName_DEFAULT
}

func (p *ClusterNodeItem) IsSetInstanceType() bool {
	return p.InstanceType != nil
}

func (p *ClusterNodeItem) IsSetResourceStatistics() bool {
	return p.ResourceStatistics != nil
}

func (p *ClusterNodeItem) IsSetZone() bool {
	return p.Zone != nil
}

func (p *ClusterNodeItem) IsSetInstance() bool {
	return p.Instance != nil
}

func (p *ClusterNodeItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetRole bool = false
	var issetNodePoolId bool = false
	var issetNodePoolName bool = false
	var issetInstanceType bool = false
	var issetResourceStatistics bool = false
	var issetZone bool = false
	var issetInstance bool = false
	var issetPublicAddress bool = false
	var issetPrivateAddress bool = false
	var issetChargeType bool = false
	var issetStatus bool = false
	var issetErrorMessage bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRole = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodePoolId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodePoolName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetResourceStatistics = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetZone = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstance = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPublicAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivateAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetChargeType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetRole {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNodePoolId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNodePoolName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetInstanceType {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetResourceStatistics {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetZone {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetInstance {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPublicAddress {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetPrivateAddress {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetChargeType {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetErrorMessage {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 16
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterNodeItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterNodeItem[fieldId]))
}

func (p *ClusterNodeItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeName = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Role = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodePoolId = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodePoolName = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField7(iprot thrift.TProtocol) error {
	p.InstanceType = NewInstanceType()
	if err := p.InstanceType.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeItem) ReadField8(iprot thrift.TProtocol) error {
	p.ResourceStatistics = NewResourceStatistics()
	if err := p.ResourceStatistics.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeItem) ReadField9(iprot thrift.TProtocol) error {
	p.Zone = iaas.NewZone()
	if err := p.Zone.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeItem) ReadField10(iprot thrift.TProtocol) error {
	p.Instance = iaas.NewInstance()
	if err := p.Instance.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ClusterNodeItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PublicAddress = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PrivateAddress = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *ClusterNodeItem) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ClusterNodeItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterNodeItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterNodeItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeName() {
		if err = oprot.WriteFieldBegin("NodeName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.NodeName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Role", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Role); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodePoolId", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodePoolId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodePoolName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodePoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceType", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InstanceType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ResourceStatistics", thrift.STRUCT, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ResourceStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Zone", thrift.STRUCT, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Zone.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Instance", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Instance.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PublicAddress", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PublicAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PrivateAddress", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PrivateAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChargeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorMessage", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ErrorMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ClusterNodeItem) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ClusterNodeItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterNodeItem(%+v)", *p)
}

func (p *ClusterNodeItem) DeepEqual(ano *ClusterNodeItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.NodeName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Role) {
		return false
	}
	if !p.Field5DeepEqual(ano.NodePoolId) {
		return false
	}
	if !p.Field6DeepEqual(ano.NodePoolName) {
		return false
	}
	if !p.Field7DeepEqual(ano.InstanceType) {
		return false
	}
	if !p.Field8DeepEqual(ano.ResourceStatistics) {
		return false
	}
	if !p.Field9DeepEqual(ano.Zone) {
		return false
	}
	if !p.Field10DeepEqual(ano.Instance) {
		return false
	}
	if !p.Field11DeepEqual(ano.PublicAddress) {
		return false
	}
	if !p.Field12DeepEqual(ano.PrivateAddress) {
		return false
	}
	if !p.Field13DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field14DeepEqual(ano.Status) {
		return false
	}
	if !p.Field15DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field16DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *ClusterNodeItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.NodeName, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Role, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.NodePoolId, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.NodePoolName, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field7DeepEqual(src *InstanceType) bool {

	if !p.InstanceType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field8DeepEqual(src *ResourceStatistics) bool {

	if !p.ResourceStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field9DeepEqual(src *iaas.Zone) bool {

	if !p.Zone.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field10DeepEqual(src *iaas.Instance) bool {

	if !p.Instance.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field11DeepEqual(src string) bool {

	if strings.Compare(p.PublicAddress, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field12DeepEqual(src string) bool {

	if strings.Compare(p.PrivateAddress, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field13DeepEqual(src string) bool {

	if strings.Compare(p.ChargeType, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field14DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field15DeepEqual(src string) bool {

	if strings.Compare(p.ErrorMessage, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterNodeItem) Field16DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}

type ListNodesResponse struct {
	Items []*ClusterNodeItem `thrift:"Items,1,required" json:"Items"`
	Total int32              `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base         `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodesResponse() *ListNodesResponse {
	return &ListNodesResponse{}
}

func (p *ListNodesResponse) GetItems() (v []*ClusterNodeItem) {
	return p.Items
}

func (p *ListNodesResponse) GetTotal() (v int32) {
	return p.Total
}

var ListNodesResponse_Base_DEFAULT *base.Base

func (p *ListNodesResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodesResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodesResponse) SetItems(val []*ClusterNodeItem) {
	p.Items = val
}
func (p *ListNodesResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListNodesResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodesResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListNodesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodesResponse[fieldId]))
}

func (p *ListNodesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ClusterNodeItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewClusterNodeItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListNodesResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodesResponse(%+v)", *p)
}

func (p *ListNodesResponse) DeepEqual(ano *ListNodesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodesResponse) Field1DeepEqual(src []*ClusterNodeItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNodesResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListNodesResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AddNodesRequest struct {
	ClusterId  string             `thrift:"ClusterId,1,required" validate:"required"`
	NodeConfig *ClusterNodeConfig `thrift:"NodeConfig,2,required" validate:"required"`
	Top        *base.TopParam     `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base         `thrift:"Base,255" json:"Base,omitempty"`
}

func NewAddNodesRequest() *AddNodesRequest {
	return &AddNodesRequest{}
}

func (p *AddNodesRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var AddNodesRequest_NodeConfig_DEFAULT *ClusterNodeConfig

func (p *AddNodesRequest) GetNodeConfig() (v *ClusterNodeConfig) {
	if !p.IsSetNodeConfig() {
		return AddNodesRequest_NodeConfig_DEFAULT
	}
	return p.NodeConfig
}

var AddNodesRequest_Top_DEFAULT *base.TopParam

func (p *AddNodesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return AddNodesRequest_Top_DEFAULT
	}
	return p.Top
}

var AddNodesRequest_Base_DEFAULT *base.Base

func (p *AddNodesRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddNodesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *AddNodesRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *AddNodesRequest) SetNodeConfig(val *ClusterNodeConfig) {
	p.NodeConfig = val
}
func (p *AddNodesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *AddNodesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_AddNodesRequest = map[int16]string{
	1:   "ClusterId",
	2:   "NodeConfig",
	254: "Top",
	255: "Base",
}

func (p *AddNodesRequest) IsSetNodeConfig() bool {
	return p.NodeConfig != nil
}

func (p *AddNodesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *AddNodesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddNodesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNodeConfig bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeConfig = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNodeConfig {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddNodesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_AddNodesRequest[fieldId]))
}

func (p *AddNodesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *AddNodesRequest) ReadField2(iprot thrift.TProtocol) error {
	p.NodeConfig = NewClusterNodeConfig()
	if err := p.NodeConfig.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddNodesRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddNodesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddNodesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNodesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddNodesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddNodesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeConfig", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NodeConfig.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddNodesRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *AddNodesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AddNodesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddNodesRequest(%+v)", *p)
}

func (p *AddNodesRequest) DeepEqual(ano *AddNodesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NodeConfig) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AddNodesRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *AddNodesRequest) Field2DeepEqual(src *ClusterNodeConfig) bool {

	if !p.NodeConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AddNodesRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AddNodesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AddNodesResponse struct {
	Ids  []string   `thrift:"Ids,1,required" validate:"required"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewAddNodesResponse() *AddNodesResponse {
	return &AddNodesResponse{}
}

func (p *AddNodesResponse) GetIds() (v []string) {
	return p.Ids
}

var AddNodesResponse_Base_DEFAULT *base.Base

func (p *AddNodesResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddNodesResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *AddNodesResponse) SetIds(val []string) {
	p.Ids = val
}
func (p *AddNodesResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_AddNodesResponse = map[int16]string{
	1:   "Ids",
	255: "Base",
}

func (p *AddNodesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddNodesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIds {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddNodesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_AddNodesResponse[fieldId]))
}

func (p *AddNodesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ids = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Ids = append(p.Ids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AddNodesResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddNodesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNodesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddNodesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddNodesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AddNodesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddNodesResponse(%+v)", *p)
}

func (p *AddNodesResponse) DeepEqual(ano *AddNodesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AddNodesResponse) Field1DeepEqual(src []string) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *AddNodesResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNodeRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required"`
	Id        *string        `thrift:"Id,2" json:"Id,omitempty"`
	NodeIp    *string        `thrift:"NodeIp,3" json:"NodeIp,omitempty"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNodeRequest() *GetNodeRequest {
	return &GetNodeRequest{}
}

func (p *GetNodeRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var GetNodeRequest_Id_DEFAULT string

func (p *GetNodeRequest) GetId() (v string) {
	if !p.IsSetId() {
		return GetNodeRequest_Id_DEFAULT
	}
	return *p.Id
}

var GetNodeRequest_NodeIp_DEFAULT string

func (p *GetNodeRequest) GetNodeIp() (v string) {
	if !p.IsSetNodeIp() {
		return GetNodeRequest_NodeIp_DEFAULT
	}
	return *p.NodeIp
}

var GetNodeRequest_Top_DEFAULT *base.TopParam

func (p *GetNodeRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetNodeRequest_Top_DEFAULT
	}
	return p.Top
}

var GetNodeRequest_Base_DEFAULT *base.Base

func (p *GetNodeRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNodeRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNodeRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetNodeRequest) SetId(val *string) {
	p.Id = val
}
func (p *GetNodeRequest) SetNodeIp(val *string) {
	p.NodeIp = val
}
func (p *GetNodeRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetNodeRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNodeRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "NodeIp",
	254: "Top",
	255: "Base",
}

func (p *GetNodeRequest) IsSetId() bool {
	return p.Id != nil
}

func (p *GetNodeRequest) IsSetNodeIp() bool {
	return p.NodeIp != nil
}

func (p *GetNodeRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetNodeRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNodeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNodeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNodeRequest[fieldId]))
}

func (p *GetNodeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetNodeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *GetNodeRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeIp = &v
	}
	return nil
}

func (p *GetNodeRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNodeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNodeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeIp() {
		if err = oprot.WriteFieldBegin("NodeIp", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NodeIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNodeRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetNodeRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNodeRequest(%+v)", *p)
}

func (p *GetNodeRequest) DeepEqual(ano *GetNodeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.NodeIp) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNodeRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeRequest) Field2DeepEqual(src *string) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Id, *src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeRequest) Field3DeepEqual(src *string) bool {

	if p.NodeIp == src {
		return true
	} else if p.NodeIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NodeIp, *src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetClusterNodeResource struct {
	TotalCpu            string `thrift:"TotalCpu,1,required" json:"TotalCpu"`
	UsedCpu             string `thrift:"UsedCpu,2,required" json:"UsedCpu"`
	FreeCpu             string `thrift:"FreeCpu,3,required" json:"FreeCpu"`
	UnSchedulableCpu    string `thrift:"UnSchedulableCpu,4,required" json:"UnSchedulableCpu"`
	TotalMemory         string `thrift:"TotalMemory,5,required" json:"TotalMemory"`
	UsedMemory          string `thrift:"UsedMemory,6,required" json:"UsedMemory"`
	FreeMemory          string `thrift:"FreeMemory,7,required" json:"FreeMemory"`
	UnSchedulableMemory string `thrift:"UnSchedulableMemory,8,required" json:"UnSchedulableMemory"`
	TotalGpu            string `thrift:"TotalGpu,9,required" json:"TotalGpu"`
	UsedGpu             string `thrift:"UsedGpu,10,required" json:"UsedGpu"`
	FreeGpu             string `thrift:"FreeGpu,11,required" json:"FreeGpu"`
	UnSchedulableGpu    string `thrift:"UnSchedulableGpu,12,required" json:"UnSchedulableGpu"`
	TotalDisk           string `thrift:"TotalDisk,13,required" json:"TotalDisk"`
	FreeDisk            string `thrift:"FreeDisk,14,required" json:"FreeDisk"`
	UsedDisk            string `thrift:"UsedDisk,15,required" json:"UsedDisk"`
}

func NewGetClusterNodeResource() *GetClusterNodeResource {
	return &GetClusterNodeResource{}
}

func (p *GetClusterNodeResource) GetTotalCpu() (v string) {
	return p.TotalCpu
}

func (p *GetClusterNodeResource) GetUsedCpu() (v string) {
	return p.UsedCpu
}

func (p *GetClusterNodeResource) GetFreeCpu() (v string) {
	return p.FreeCpu
}

func (p *GetClusterNodeResource) GetUnSchedulableCpu() (v string) {
	return p.UnSchedulableCpu
}

func (p *GetClusterNodeResource) GetTotalMemory() (v string) {
	return p.TotalMemory
}

func (p *GetClusterNodeResource) GetUsedMemory() (v string) {
	return p.UsedMemory
}

func (p *GetClusterNodeResource) GetFreeMemory() (v string) {
	return p.FreeMemory
}

func (p *GetClusterNodeResource) GetUnSchedulableMemory() (v string) {
	return p.UnSchedulableMemory
}

func (p *GetClusterNodeResource) GetTotalGpu() (v string) {
	return p.TotalGpu
}

func (p *GetClusterNodeResource) GetUsedGpu() (v string) {
	return p.UsedGpu
}

func (p *GetClusterNodeResource) GetFreeGpu() (v string) {
	return p.FreeGpu
}

func (p *GetClusterNodeResource) GetUnSchedulableGpu() (v string) {
	return p.UnSchedulableGpu
}

func (p *GetClusterNodeResource) GetTotalDisk() (v string) {
	return p.TotalDisk
}

func (p *GetClusterNodeResource) GetFreeDisk() (v string) {
	return p.FreeDisk
}

func (p *GetClusterNodeResource) GetUsedDisk() (v string) {
	return p.UsedDisk
}
func (p *GetClusterNodeResource) SetTotalCpu(val string) {
	p.TotalCpu = val
}
func (p *GetClusterNodeResource) SetUsedCpu(val string) {
	p.UsedCpu = val
}
func (p *GetClusterNodeResource) SetFreeCpu(val string) {
	p.FreeCpu = val
}
func (p *GetClusterNodeResource) SetUnSchedulableCpu(val string) {
	p.UnSchedulableCpu = val
}
func (p *GetClusterNodeResource) SetTotalMemory(val string) {
	p.TotalMemory = val
}
func (p *GetClusterNodeResource) SetUsedMemory(val string) {
	p.UsedMemory = val
}
func (p *GetClusterNodeResource) SetFreeMemory(val string) {
	p.FreeMemory = val
}
func (p *GetClusterNodeResource) SetUnSchedulableMemory(val string) {
	p.UnSchedulableMemory = val
}
func (p *GetClusterNodeResource) SetTotalGpu(val string) {
	p.TotalGpu = val
}
func (p *GetClusterNodeResource) SetUsedGpu(val string) {
	p.UsedGpu = val
}
func (p *GetClusterNodeResource) SetFreeGpu(val string) {
	p.FreeGpu = val
}
func (p *GetClusterNodeResource) SetUnSchedulableGpu(val string) {
	p.UnSchedulableGpu = val
}
func (p *GetClusterNodeResource) SetTotalDisk(val string) {
	p.TotalDisk = val
}
func (p *GetClusterNodeResource) SetFreeDisk(val string) {
	p.FreeDisk = val
}
func (p *GetClusterNodeResource) SetUsedDisk(val string) {
	p.UsedDisk = val
}

var fieldIDToName_GetClusterNodeResource = map[int16]string{
	1:  "TotalCpu",
	2:  "UsedCpu",
	3:  "FreeCpu",
	4:  "UnSchedulableCpu",
	5:  "TotalMemory",
	6:  "UsedMemory",
	7:  "FreeMemory",
	8:  "UnSchedulableMemory",
	9:  "TotalGpu",
	10: "UsedGpu",
	11: "FreeGpu",
	12: "UnSchedulableGpu",
	13: "TotalDisk",
	14: "FreeDisk",
	15: "UsedDisk",
}

func (p *GetClusterNodeResource) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCpu bool = false
	var issetUsedCpu bool = false
	var issetFreeCpu bool = false
	var issetUnSchedulableCpu bool = false
	var issetTotalMemory bool = false
	var issetUsedMemory bool = false
	var issetFreeMemory bool = false
	var issetUnSchedulableMemory bool = false
	var issetTotalGpu bool = false
	var issetUsedGpu bool = false
	var issetFreeGpu bool = false
	var issetUnSchedulableGpu bool = false
	var issetTotalDisk bool = false
	var issetFreeDisk bool = false
	var issetUsedDisk bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnSchedulableCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnSchedulableMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnSchedulableGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalDisk = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeDisk = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedDisk = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCpu {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUsedCpu {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFreeCpu {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUnSchedulableCpu {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTotalMemory {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUsedMemory {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetFreeMemory {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetUnSchedulableMemory {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetTotalGpu {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetUsedGpu {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetFreeGpu {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetUnSchedulableGpu {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetTotalDisk {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetFreeDisk {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetUsedDisk {
		fieldId = 15
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterNodeResource[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterNodeResource[fieldId]))
}

func (p *GetClusterNodeResource) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalCpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedCpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeCpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnSchedulableCpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalMemory = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedMemory = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeMemory = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnSchedulableMemory = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalGpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedGpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeGpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnSchedulableGpu = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalDisk = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeDisk = v
	}
	return nil
}

func (p *GetClusterNodeResource) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedDisk = v
	}
	return nil
}

func (p *GetClusterNodeResource) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterNodeResource"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCpu", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedCpu", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeCpu", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnSchedulableCpu", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnSchedulableCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalMemory", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedMemory", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeMemory", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnSchedulableMemory", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnSchedulableMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalGpu", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedGpu", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeGpu", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnSchedulableGpu", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnSchedulableGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalDisk", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalDisk); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeDisk", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeDisk); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetClusterNodeResource) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedDisk", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedDisk); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetClusterNodeResource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterNodeResource(%+v)", *p)
}

func (p *GetClusterNodeResource) DeepEqual(ano *GetClusterNodeResource) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCpu) {
		return false
	}
	if !p.Field2DeepEqual(ano.UsedCpu) {
		return false
	}
	if !p.Field3DeepEqual(ano.FreeCpu) {
		return false
	}
	if !p.Field4DeepEqual(ano.UnSchedulableCpu) {
		return false
	}
	if !p.Field5DeepEqual(ano.TotalMemory) {
		return false
	}
	if !p.Field6DeepEqual(ano.UsedMemory) {
		return false
	}
	if !p.Field7DeepEqual(ano.FreeMemory) {
		return false
	}
	if !p.Field8DeepEqual(ano.UnSchedulableMemory) {
		return false
	}
	if !p.Field9DeepEqual(ano.TotalGpu) {
		return false
	}
	if !p.Field10DeepEqual(ano.UsedGpu) {
		return false
	}
	if !p.Field11DeepEqual(ano.FreeGpu) {
		return false
	}
	if !p.Field12DeepEqual(ano.UnSchedulableGpu) {
		return false
	}
	if !p.Field13DeepEqual(ano.TotalDisk) {
		return false
	}
	if !p.Field14DeepEqual(ano.FreeDisk) {
		return false
	}
	if !p.Field15DeepEqual(ano.UsedDisk) {
		return false
	}
	return true
}

func (p *GetClusterNodeResource) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TotalCpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UsedCpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field3DeepEqual(src string) bool {

	if strings.Compare(p.FreeCpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field4DeepEqual(src string) bool {

	if strings.Compare(p.UnSchedulableCpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TotalMemory, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UsedMemory, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field7DeepEqual(src string) bool {

	if strings.Compare(p.FreeMemory, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field8DeepEqual(src string) bool {

	if strings.Compare(p.UnSchedulableMemory, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field9DeepEqual(src string) bool {

	if strings.Compare(p.TotalGpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field10DeepEqual(src string) bool {

	if strings.Compare(p.UsedGpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field11DeepEqual(src string) bool {

	if strings.Compare(p.FreeGpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field12DeepEqual(src string) bool {

	if strings.Compare(p.UnSchedulableGpu, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field13DeepEqual(src string) bool {

	if strings.Compare(p.TotalDisk, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field14DeepEqual(src string) bool {

	if strings.Compare(p.FreeDisk, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterNodeResource) Field15DeepEqual(src string) bool {

	if strings.Compare(p.UsedDisk, src) != 0 {
		return false
	}
	return true
}

type GetNodeResponse struct {
	Id             string                  `thrift:"Id,1,required" json:"Id"`
	Name           string                  `thrift:"Name,2,required" json:"Name"`
	NodeName       string                  `thrift:"NodeName,3" json:"NodeName,omitempty"`
	NodePoolId     string                  `thrift:"NodePoolId,4,required" json:"NodePoolId"`
	NodePoolName   string                  `thrift:"NodePoolName,5,required" json:"NodePoolName"`
	Role           string                  `thrift:"Role,6,required" json:"Role"`
	Zone           *iaas.Zone              `thrift:"Zone,7,required" json:"Zone"`
	Subnet         *iaas.Subnet            `thrift:"Subnet,8,required" json:"Subnet"`
	Instance       *iaas.Instance          `thrift:"Instance,9,required" json:"Instance"`
	InstanceType   *InstanceType           `thrift:"InstanceType,10,required" json:"InstanceType"`
	ChargeType     string                  `thrift:"ChargeType,11,required" json:"ChargeType"`
	SecurityGroups []*iaas.SecurityGroup   `thrift:"SecurityGroups,12,required" json:"SecurityGroups"`
	Resource       *GetClusterNodeResource `thrift:"Resource,13,required" json:"Resource"`
	System         *iaas.Image             `thrift:"System,14,required" json:"System"`
	Kubernetes     *Kubernetes             `thrift:"Kubernetes,15,required" json:"Kubernetes"`
	CreateTime     string                  `thrift:"CreateTime,16,required" json:"CreateTime"`
	PublicAddress  string                  `thrift:"PublicAddress,17,required" json:"PublicAddress"`
	PrivateAddress string                  `thrift:"PrivateAddress,18,required" json:"PrivateAddress"`
	Labels         []*helper.Label         `thrift:"Labels,19,required" validate:"k8sLabel"`
	Taints         []*helper.Taint         `thrift:"Taints,20,required" json:"Taints"`
	Status         string                  `thrift:"Status,21,required" json:"Status"`
	ErrorMessage   *string                 `thrift:"ErrorMessage,22" json:"ErrorMessage,omitempty"`
	Type           string                  `thrift:"Type,23,required" json:"Type"`
	Base           *base.Base              `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNodeResponse() *GetNodeResponse {
	return &GetNodeResponse{

		NodeName: "",
	}
}

func (p *GetNodeResponse) GetId() (v string) {
	return p.Id
}

func (p *GetNodeResponse) GetName() (v string) {
	return p.Name
}

var GetNodeResponse_NodeName_DEFAULT string = ""

func (p *GetNodeResponse) GetNodeName() (v string) {
	if !p.IsSetNodeName() {
		return GetNodeResponse_NodeName_DEFAULT
	}
	return p.NodeName
}

func (p *GetNodeResponse) GetNodePoolId() (v string) {
	return p.NodePoolId
}

func (p *GetNodeResponse) GetNodePoolName() (v string) {
	return p.NodePoolName
}

func (p *GetNodeResponse) GetRole() (v string) {
	return p.Role
}

var GetNodeResponse_Zone_DEFAULT *iaas.Zone

func (p *GetNodeResponse) GetZone() (v *iaas.Zone) {
	if !p.IsSetZone() {
		return GetNodeResponse_Zone_DEFAULT
	}
	return p.Zone
}

var GetNodeResponse_Subnet_DEFAULT *iaas.Subnet

func (p *GetNodeResponse) GetSubnet() (v *iaas.Subnet) {
	if !p.IsSetSubnet() {
		return GetNodeResponse_Subnet_DEFAULT
	}
	return p.Subnet
}

var GetNodeResponse_Instance_DEFAULT *iaas.Instance

func (p *GetNodeResponse) GetInstance() (v *iaas.Instance) {
	if !p.IsSetInstance() {
		return GetNodeResponse_Instance_DEFAULT
	}
	return p.Instance
}

var GetNodeResponse_InstanceType_DEFAULT *InstanceType

func (p *GetNodeResponse) GetInstanceType() (v *InstanceType) {
	if !p.IsSetInstanceType() {
		return GetNodeResponse_InstanceType_DEFAULT
	}
	return p.InstanceType
}

func (p *GetNodeResponse) GetChargeType() (v string) {
	return p.ChargeType
}

func (p *GetNodeResponse) GetSecurityGroups() (v []*iaas.SecurityGroup) {
	return p.SecurityGroups
}

var GetNodeResponse_Resource_DEFAULT *GetClusterNodeResource

func (p *GetNodeResponse) GetResource() (v *GetClusterNodeResource) {
	if !p.IsSetResource() {
		return GetNodeResponse_Resource_DEFAULT
	}
	return p.Resource
}

var GetNodeResponse_System_DEFAULT *iaas.Image

func (p *GetNodeResponse) GetSystem() (v *iaas.Image) {
	if !p.IsSetSystem() {
		return GetNodeResponse_System_DEFAULT
	}
	return p.System
}

var GetNodeResponse_Kubernetes_DEFAULT *Kubernetes

func (p *GetNodeResponse) GetKubernetes() (v *Kubernetes) {
	if !p.IsSetKubernetes() {
		return GetNodeResponse_Kubernetes_DEFAULT
	}
	return p.Kubernetes
}

func (p *GetNodeResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetNodeResponse) GetPublicAddress() (v string) {
	return p.PublicAddress
}

func (p *GetNodeResponse) GetPrivateAddress() (v string) {
	return p.PrivateAddress
}

func (p *GetNodeResponse) GetLabels() (v []*helper.Label) {
	return p.Labels
}

func (p *GetNodeResponse) GetTaints() (v []*helper.Taint) {
	return p.Taints
}

func (p *GetNodeResponse) GetStatus() (v string) {
	return p.Status
}

var GetNodeResponse_ErrorMessage_DEFAULT string

func (p *GetNodeResponse) GetErrorMessage() (v string) {
	if !p.IsSetErrorMessage() {
		return GetNodeResponse_ErrorMessage_DEFAULT
	}
	return *p.ErrorMessage
}

func (p *GetNodeResponse) GetType() (v string) {
	return p.Type
}

var GetNodeResponse_Base_DEFAULT *base.Base

func (p *GetNodeResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNodeResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNodeResponse) SetId(val string) {
	p.Id = val
}
func (p *GetNodeResponse) SetName(val string) {
	p.Name = val
}
func (p *GetNodeResponse) SetNodeName(val string) {
	p.NodeName = val
}
func (p *GetNodeResponse) SetNodePoolId(val string) {
	p.NodePoolId = val
}
func (p *GetNodeResponse) SetNodePoolName(val string) {
	p.NodePoolName = val
}
func (p *GetNodeResponse) SetRole(val string) {
	p.Role = val
}
func (p *GetNodeResponse) SetZone(val *iaas.Zone) {
	p.Zone = val
}
func (p *GetNodeResponse) SetSubnet(val *iaas.Subnet) {
	p.Subnet = val
}
func (p *GetNodeResponse) SetInstance(val *iaas.Instance) {
	p.Instance = val
}
func (p *GetNodeResponse) SetInstanceType(val *InstanceType) {
	p.InstanceType = val
}
func (p *GetNodeResponse) SetChargeType(val string) {
	p.ChargeType = val
}
func (p *GetNodeResponse) SetSecurityGroups(val []*iaas.SecurityGroup) {
	p.SecurityGroups = val
}
func (p *GetNodeResponse) SetResource(val *GetClusterNodeResource) {
	p.Resource = val
}
func (p *GetNodeResponse) SetSystem(val *iaas.Image) {
	p.System = val
}
func (p *GetNodeResponse) SetKubernetes(val *Kubernetes) {
	p.Kubernetes = val
}
func (p *GetNodeResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetNodeResponse) SetPublicAddress(val string) {
	p.PublicAddress = val
}
func (p *GetNodeResponse) SetPrivateAddress(val string) {
	p.PrivateAddress = val
}
func (p *GetNodeResponse) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *GetNodeResponse) SetTaints(val []*helper.Taint) {
	p.Taints = val
}
func (p *GetNodeResponse) SetStatus(val string) {
	p.Status = val
}
func (p *GetNodeResponse) SetErrorMessage(val *string) {
	p.ErrorMessage = val
}
func (p *GetNodeResponse) SetType(val string) {
	p.Type = val
}
func (p *GetNodeResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNodeResponse = map[int16]string{
	1:   "Id",
	2:   "Name",
	3:   "NodeName",
	4:   "NodePoolId",
	5:   "NodePoolName",
	6:   "Role",
	7:   "Zone",
	8:   "Subnet",
	9:   "Instance",
	10:  "InstanceType",
	11:  "ChargeType",
	12:  "SecurityGroups",
	13:  "Resource",
	14:  "System",
	15:  "Kubernetes",
	16:  "CreateTime",
	17:  "PublicAddress",
	18:  "PrivateAddress",
	19:  "Labels",
	20:  "Taints",
	21:  "Status",
	22:  "ErrorMessage",
	23:  "Type",
	255: "Base",
}

func (p *GetNodeResponse) IsSetNodeName() bool {
	return p.NodeName != GetNodeResponse_NodeName_DEFAULT
}

func (p *GetNodeResponse) IsSetZone() bool {
	return p.Zone != nil
}

func (p *GetNodeResponse) IsSetSubnet() bool {
	return p.Subnet != nil
}

func (p *GetNodeResponse) IsSetInstance() bool {
	return p.Instance != nil
}

func (p *GetNodeResponse) IsSetInstanceType() bool {
	return p.InstanceType != nil
}

func (p *GetNodeResponse) IsSetResource() bool {
	return p.Resource != nil
}

func (p *GetNodeResponse) IsSetSystem() bool {
	return p.System != nil
}

func (p *GetNodeResponse) IsSetKubernetes() bool {
	return p.Kubernetes != nil
}

func (p *GetNodeResponse) IsSetErrorMessage() bool {
	return p.ErrorMessage != nil
}

func (p *GetNodeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNodeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetNodePoolId bool = false
	var issetNodePoolName bool = false
	var issetRole bool = false
	var issetZone bool = false
	var issetSubnet bool = false
	var issetInstance bool = false
	var issetInstanceType bool = false
	var issetChargeType bool = false
	var issetSecurityGroups bool = false
	var issetResource bool = false
	var issetSystem bool = false
	var issetKubernetes bool = false
	var issetCreateTime bool = false
	var issetPublicAddress bool = false
	var issetPrivateAddress bool = false
	var issetLabels bool = false
	var issetTaints bool = false
	var issetStatus bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodePoolId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodePoolName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetRole = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetZone = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSubnet = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstance = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetChargeType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecurityGroups = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetResource = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetSystem = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetKubernetes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetPublicAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivateAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaints = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNodePoolId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNodePoolName {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetRole {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetZone {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSubnet {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetInstance {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetInstanceType {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetChargeType {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetSecurityGroups {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetResource {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetSystem {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetKubernetes {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetPublicAddress {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetPrivateAddress {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetTaints {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 23
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNodeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNodeResponse[fieldId]))
}

func (p *GetNodeResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeName = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodePoolId = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodePoolName = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Role = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField7(iprot thrift.TProtocol) error {
	p.Zone = iaas.NewZone()
	if err := p.Zone.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField8(iprot thrift.TProtocol) error {
	p.Subnet = iaas.NewSubnet()
	if err := p.Subnet.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField9(iprot thrift.TProtocol) error {
	p.Instance = iaas.NewInstance()
	if err := p.Instance.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField10(iprot thrift.TProtocol) error {
	p.InstanceType = NewInstanceType()
	if err := p.InstanceType.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityGroups = make([]*iaas.SecurityGroup, 0, size)
	for i := 0; i < size; i++ {
		_elem := iaas.NewSecurityGroup()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SecurityGroups = append(p.SecurityGroups, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField13(iprot thrift.TProtocol) error {
	p.Resource = NewGetClusterNodeResource()
	if err := p.Resource.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField14(iprot thrift.TProtocol) error {
	p.System = iaas.NewImage()
	if err := p.System.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField15(iprot thrift.TProtocol) error {
	p.Kubernetes = NewKubernetes()
	if err := p.Kubernetes.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PublicAddress = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PrivateAddress = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Taints = make([]*helper.Taint, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewTaint()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Taints = append(p.Taints, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorMessage = &v
	}
	return nil
}

func (p *GetNodeResponse) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *GetNodeResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNodeResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNodeResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeName() {
		if err = oprot.WriteFieldBegin("NodeName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.NodeName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNodeResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodePoolId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodePoolId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetNodeResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodePoolName", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodePoolName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetNodeResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Role", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Role); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetNodeResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Zone", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Zone.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetNodeResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Subnet", thrift.STRUCT, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Subnet.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetNodeResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Instance", thrift.STRUCT, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Instance.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetNodeResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceType", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InstanceType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetNodeResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChargeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetNodeResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SecurityGroups", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SecurityGroups)); err != nil {
		return err
	}
	for _, v := range p.SecurityGroups {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetNodeResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Resource", thrift.STRUCT, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resource.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetNodeResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("System", thrift.STRUCT, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.System.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetNodeResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kubernetes", thrift.STRUCT, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Kubernetes.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetNodeResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetNodeResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PublicAddress", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PublicAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetNodeResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PrivateAddress", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PrivateAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetNodeResponse) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GetNodeResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Taints", thrift.LIST, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Taints)); err != nil {
		return err
	}
	for _, v := range p.Taints {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *GetNodeResponse) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *GetNodeResponse) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMessage() {
		if err = oprot.WriteFieldBegin("ErrorMessage", thrift.STRING, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *GetNodeResponse) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *GetNodeResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNodeResponse(%+v)", *p)
}

func (p *GetNodeResponse) DeepEqual(ano *GetNodeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.NodeName) {
		return false
	}
	if !p.Field4DeepEqual(ano.NodePoolId) {
		return false
	}
	if !p.Field5DeepEqual(ano.NodePoolName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Role) {
		return false
	}
	if !p.Field7DeepEqual(ano.Zone) {
		return false
	}
	if !p.Field8DeepEqual(ano.Subnet) {
		return false
	}
	if !p.Field9DeepEqual(ano.Instance) {
		return false
	}
	if !p.Field10DeepEqual(ano.InstanceType) {
		return false
	}
	if !p.Field11DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field12DeepEqual(ano.SecurityGroups) {
		return false
	}
	if !p.Field13DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field14DeepEqual(ano.System) {
		return false
	}
	if !p.Field15DeepEqual(ano.Kubernetes) {
		return false
	}
	if !p.Field16DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field17DeepEqual(ano.PublicAddress) {
		return false
	}
	if !p.Field18DeepEqual(ano.PrivateAddress) {
		return false
	}
	if !p.Field19DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field20DeepEqual(ano.Taints) {
		return false
	}
	if !p.Field21DeepEqual(ano.Status) {
		return false
	}
	if !p.Field22DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field23DeepEqual(ano.Type) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNodeResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.NodeName, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.NodePoolId, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.NodePoolName, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Role, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field7DeepEqual(src *iaas.Zone) bool {

	if !p.Zone.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field8DeepEqual(src *iaas.Subnet) bool {

	if !p.Subnet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field9DeepEqual(src *iaas.Instance) bool {

	if !p.Instance.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field10DeepEqual(src *InstanceType) bool {

	if !p.InstanceType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field11DeepEqual(src string) bool {

	if strings.Compare(p.ChargeType, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field12DeepEqual(src []*iaas.SecurityGroup) bool {

	if len(p.SecurityGroups) != len(src) {
		return false
	}
	for i, v := range p.SecurityGroups {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetNodeResponse) Field13DeepEqual(src *GetClusterNodeResource) bool {

	if !p.Resource.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field14DeepEqual(src *iaas.Image) bool {

	if !p.System.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field15DeepEqual(src *Kubernetes) bool {

	if !p.Kubernetes.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field16DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field17DeepEqual(src string) bool {

	if strings.Compare(p.PublicAddress, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field18DeepEqual(src string) bool {

	if strings.Compare(p.PrivateAddress, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field19DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetNodeResponse) Field20DeepEqual(src []*helper.Taint) bool {

	if len(p.Taints) != len(src) {
		return false
	}
	for i, v := range p.Taints {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetNodeResponse) Field21DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field22DeepEqual(src *string) bool {

	if p.ErrorMessage == src {
		return true
	} else if p.ErrorMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field23DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodeResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteNodesRequest struct {
	ClusterId                string         `thrift:"ClusterId,1,required" validate:"required"`
	Ids                      []string       `thrift:"Ids,2" json:"Ids,omitempty"`
	CascadingDeleteResources []string       `thrift:"CascadingDeleteResources,3" json:"CascadingDeleteResources,omitempty"`
	Top                      *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base                     *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewDeleteNodesRequest() *DeleteNodesRequest {
	return &DeleteNodesRequest{}
}

func (p *DeleteNodesRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var DeleteNodesRequest_Ids_DEFAULT []string

func (p *DeleteNodesRequest) GetIds() (v []string) {
	if !p.IsSetIds() {
		return DeleteNodesRequest_Ids_DEFAULT
	}
	return p.Ids
}

var DeleteNodesRequest_CascadingDeleteResources_DEFAULT []string

func (p *DeleteNodesRequest) GetCascadingDeleteResources() (v []string) {
	if !p.IsSetCascadingDeleteResources() {
		return DeleteNodesRequest_CascadingDeleteResources_DEFAULT
	}
	return p.CascadingDeleteResources
}

var DeleteNodesRequest_Top_DEFAULT *base.TopParam

func (p *DeleteNodesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return DeleteNodesRequest_Top_DEFAULT
	}
	return p.Top
}

var DeleteNodesRequest_Base_DEFAULT *base.Base

func (p *DeleteNodesRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return DeleteNodesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteNodesRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *DeleteNodesRequest) SetIds(val []string) {
	p.Ids = val
}
func (p *DeleteNodesRequest) SetCascadingDeleteResources(val []string) {
	p.CascadingDeleteResources = val
}
func (p *DeleteNodesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *DeleteNodesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteNodesRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Ids",
	3:   "CascadingDeleteResources",
	254: "Top",
	255: "Base",
}

func (p *DeleteNodesRequest) IsSetIds() bool {
	return p.Ids != nil
}

func (p *DeleteNodesRequest) IsSetCascadingDeleteResources() bool {
	return p.CascadingDeleteResources != nil
}

func (p *DeleteNodesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *DeleteNodesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteNodesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteNodesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeleteNodesRequest[fieldId]))
}

func (p *DeleteNodesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *DeleteNodesRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ids = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Ids = append(p.Ids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodesRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CascadingDeleteResources = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CascadingDeleteResources = append(p.CascadingDeleteResources, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodesRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNodesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteNodesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIds() {
		if err = oprot.WriteFieldBegin("Ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
			return err
		}
		for _, v := range p.Ids {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteNodesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCascadingDeleteResources() {
		if err = oprot.WriteFieldBegin("CascadingDeleteResources", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CascadingDeleteResources)); err != nil {
			return err
		}
		for _, v := range p.CascadingDeleteResources {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DeleteNodesRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *DeleteNodesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteNodesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNodesRequest(%+v)", *p)
}

func (p *DeleteNodesRequest) DeepEqual(ano *DeleteNodesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Ids) {
		return false
	}
	if !p.Field3DeepEqual(ano.CascadingDeleteResources) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteNodesRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteNodesRequest) Field2DeepEqual(src []string) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *DeleteNodesRequest) Field3DeepEqual(src []string) bool {

	if len(p.CascadingDeleteResources) != len(src) {
		return false
	}
	for i, v := range p.CascadingDeleteResources {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *DeleteNodesRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DeleteNodesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteNodesResponse struct {
}

func NewDeleteNodesResponse() *DeleteNodesResponse {
	return &DeleteNodesResponse{}
}

var fieldIDToName_DeleteNodesResponse = map[int16]string{}

func (p *DeleteNodesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteNodesResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteNodesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNodesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNodesResponse(%+v)", *p)
}

func (p *DeleteNodesResponse) DeepEqual(ano *DeleteNodesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ListNodeLabelsRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required"`
	Id        *string        `thrift:"Id,2" json:"Id,omitempty"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodeLabelsRequest() *ListNodeLabelsRequest {
	return &ListNodeLabelsRequest{}
}

func (p *ListNodeLabelsRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListNodeLabelsRequest_Id_DEFAULT string

func (p *ListNodeLabelsRequest) GetId() (v string) {
	if !p.IsSetId() {
		return ListNodeLabelsRequest_Id_DEFAULT
	}
	return *p.Id
}

var ListNodeLabelsRequest_Top_DEFAULT *base.TopParam

func (p *ListNodeLabelsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNodeLabelsRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNodeLabelsRequest_Base_DEFAULT *base.Base

func (p *ListNodeLabelsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodeLabelsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodeLabelsRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNodeLabelsRequest) SetId(val *string) {
	p.Id = val
}
func (p *ListNodeLabelsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNodeLabelsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodeLabelsRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	254: "Top",
	255: "Base",
}

func (p *ListNodeLabelsRequest) IsSetId() bool {
	return p.Id != nil
}

func (p *ListNodeLabelsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNodeLabelsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodeLabelsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodeLabelsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodeLabelsRequest[fieldId]))
}

func (p *ListNodeLabelsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNodeLabelsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *ListNodeLabelsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeLabelsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeLabelsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeLabelsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodeLabelsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodeLabelsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodeLabelsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNodeLabelsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodeLabelsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodeLabelsRequest(%+v)", *p)
}

func (p *ListNodeLabelsRequest) DeepEqual(ano *ListNodeLabelsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodeLabelsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodeLabelsRequest) Field2DeepEqual(src *string) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Id, *src) != 0 {
		return false
	}
	return true
}
func (p *ListNodeLabelsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodeLabelsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodeLabelsResponse struct {
	Items []*helper.Label `thrift:"Items,1,required" json:"Items"`
	Base  *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodeLabelsResponse() *ListNodeLabelsResponse {
	return &ListNodeLabelsResponse{}
}

func (p *ListNodeLabelsResponse) GetItems() (v []*helper.Label) {
	return p.Items
}

var ListNodeLabelsResponse_Base_DEFAULT *base.Base

func (p *ListNodeLabelsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodeLabelsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodeLabelsResponse) SetItems(val []*helper.Label) {
	p.Items = val
}
func (p *ListNodeLabelsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodeLabelsResponse = map[int16]string{
	1:   "Items",
	255: "Base",
}

func (p *ListNodeLabelsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodeLabelsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodeLabelsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodeLabelsResponse[fieldId]))
}

func (p *ListNodeLabelsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeLabelsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeLabelsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeLabelsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodeLabelsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodeLabelsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodeLabelsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodeLabelsResponse(%+v)", *p)
}

func (p *ListNodeLabelsResponse) DeepEqual(ano *ListNodeLabelsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodeLabelsResponse) Field1DeepEqual(src []*helper.Label) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNodeLabelsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNodeRequest struct {
	ClusterId string          `thrift:"ClusterId,1,required" validate:"required"`
	Id        string          `thrift:"Id,2,required" validate:"required"`
	Labels    []*helper.Label `thrift:"Labels,3" validate:"k8sLabel"`
	Taints    []*helper.Taint `thrift:"Taints,4" json:"Taints,omitempty"`
	Online    *bool           `thrift:"Online,5" json:"Online,omitempty"`
	Cordon    *bool           `thrift:"Cordon,6" json:"Cordon,omitempty"`
	Top       *base.TopParam  `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNodeRequest() *UpdateNodeRequest {
	return &UpdateNodeRequest{}
}

func (p *UpdateNodeRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *UpdateNodeRequest) GetId() (v string) {
	return p.Id
}

var UpdateNodeRequest_Labels_DEFAULT []*helper.Label

func (p *UpdateNodeRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return UpdateNodeRequest_Labels_DEFAULT
	}
	return p.Labels
}

var UpdateNodeRequest_Taints_DEFAULT []*helper.Taint

func (p *UpdateNodeRequest) GetTaints() (v []*helper.Taint) {
	if !p.IsSetTaints() {
		return UpdateNodeRequest_Taints_DEFAULT
	}
	return p.Taints
}

var UpdateNodeRequest_Online_DEFAULT bool

func (p *UpdateNodeRequest) GetOnline() (v bool) {
	if !p.IsSetOnline() {
		return UpdateNodeRequest_Online_DEFAULT
	}
	return *p.Online
}

var UpdateNodeRequest_Cordon_DEFAULT bool

func (p *UpdateNodeRequest) GetCordon() (v bool) {
	if !p.IsSetCordon() {
		return UpdateNodeRequest_Cordon_DEFAULT
	}
	return *p.Cordon
}

var UpdateNodeRequest_Top_DEFAULT *base.TopParam

func (p *UpdateNodeRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateNodeRequest_Top_DEFAULT
	}
	return p.Top
}

var UpdateNodeRequest_Base_DEFAULT *base.Base

func (p *UpdateNodeRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNodeRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNodeRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *UpdateNodeRequest) SetId(val string) {
	p.Id = val
}
func (p *UpdateNodeRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *UpdateNodeRequest) SetTaints(val []*helper.Taint) {
	p.Taints = val
}
func (p *UpdateNodeRequest) SetOnline(val *bool) {
	p.Online = val
}
func (p *UpdateNodeRequest) SetCordon(val *bool) {
	p.Cordon = val
}
func (p *UpdateNodeRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpdateNodeRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNodeRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "Labels",
	4:   "Taints",
	5:   "Online",
	6:   "Cordon",
	254: "Top",
	255: "Base",
}

func (p *UpdateNodeRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *UpdateNodeRequest) IsSetTaints() bool {
	return p.Taints != nil
}

func (p *UpdateNodeRequest) IsSetOnline() bool {
	return p.Online != nil
}

func (p *UpdateNodeRequest) IsSetCordon() bool {
	return p.Cordon != nil
}

func (p *UpdateNodeRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateNodeRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNodeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNodeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNodeRequest[fieldId]))
}

func (p *UpdateNodeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Taints = make([]*helper.Taint, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewTaint()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Taints = append(p.Taints, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Online = &v
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Cordon = &v
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodeRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNodeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaints() {
		if err = oprot.WriteFieldBegin("Taints", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Taints)); err != nil {
			return err
		}
		for _, v := range p.Taints {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOnline() {
		if err = oprot.WriteFieldBegin("Online", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Online); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCordon() {
		if err = oprot.WriteFieldBegin("Cordon", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Cordon); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpdateNodeRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNodeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNodeRequest(%+v)", *p)
}

func (p *UpdateNodeRequest) DeepEqual(ano *UpdateNodeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.Taints) {
		return false
	}
	if !p.Field5DeepEqual(ano.Online) {
		return false
	}
	if !p.Field6DeepEqual(ano.Cordon) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNodeRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodeRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodeRequest) Field3DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateNodeRequest) Field4DeepEqual(src []*helper.Taint) bool {

	if len(p.Taints) != len(src) {
		return false
	}
	for i, v := range p.Taints {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateNodeRequest) Field5DeepEqual(src *bool) bool {

	if p.Online == src {
		return true
	} else if p.Online == nil || src == nil {
		return false
	}
	if *p.Online != *src {
		return false
	}
	return true
}
func (p *UpdateNodeRequest) Field6DeepEqual(src *bool) bool {

	if p.Cordon == src {
		return true
	} else if p.Cordon == nil || src == nil {
		return false
	}
	if *p.Cordon != *src {
		return false
	}
	return true
}
func (p *UpdateNodeRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNodeRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNodeResponse struct {
	Id   string     `thrift:"Id,1,required" json:"Id"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNodeResponse() *UpdateNodeResponse {
	return &UpdateNodeResponse{}
}

func (p *UpdateNodeResponse) GetId() (v string) {
	return p.Id
}

var UpdateNodeResponse_Base_DEFAULT *base.Base

func (p *UpdateNodeResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNodeResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNodeResponse) SetId(val string) {
	p.Id = val
}
func (p *UpdateNodeResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNodeResponse = map[int16]string{
	1:   "Id",
	255: "Base",
}

func (p *UpdateNodeResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNodeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNodeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNodeResponse[fieldId]))
}

func (p *UpdateNodeResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateNodeResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNodeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNodeResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNodeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNodeResponse(%+v)", *p)
}

func (p *UpdateNodeResponse) DeepEqual(ano *UpdateNodeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNodeResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodeResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeletePodItem struct {
	Namepace string `thrift:"Namepace,1,required" json:"Namepace"`
	Name     string `thrift:"Name,2,required" json:"Name"`
}

func NewDeletePodItem() *DeletePodItem {
	return &DeletePodItem{}
}

func (p *DeletePodItem) GetNamepace() (v string) {
	return p.Namepace
}

func (p *DeletePodItem) GetName() (v string) {
	return p.Name
}
func (p *DeletePodItem) SetNamepace(val string) {
	p.Namepace = val
}
func (p *DeletePodItem) SetName(val string) {
	p.Name = val
}

var fieldIDToName_DeletePodItem = map[int16]string{
	1: "Namepace",
	2: "Name",
}

func (p *DeletePodItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamepace bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamepace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamepace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePodItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeletePodItem[fieldId]))
}

func (p *DeletePodItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namepace = v
	}
	return nil
}

func (p *DeletePodItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *DeletePodItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePodItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePodItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namepace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namepace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePodItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeletePodItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePodItem(%+v)", *p)
}

func (p *DeletePodItem) DeepEqual(ano *DeletePodItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namepace) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *DeletePodItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namepace, src) != 0 {
		return false
	}
	return true
}
func (p *DeletePodItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type Rule struct {
	Type      string `thrift:"Type,1,required" json:"Type"`
	Condition string `thrift:"Condition,2,required" json:"Condition"`
}

func NewRule() *Rule {
	return &Rule{}
}

func (p *Rule) GetType() (v string) {
	return p.Type
}

func (p *Rule) GetCondition() (v string) {
	return p.Condition
}
func (p *Rule) SetType(val string) {
	p.Type = val
}
func (p *Rule) SetCondition(val string) {
	p.Condition = val
}

var fieldIDToName_Rule = map[int16]string{
	1: "Type",
	2: "Condition",
}

func (p *Rule) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	var issetCondition bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCondition = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCondition {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Rule[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Rule[fieldId]))
}

func (p *Rule) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *Rule) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Condition = v
	}
	return nil
}

func (p *Rule) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Rule"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Rule) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Rule) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Condition", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Condition); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Rule) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rule(%+v)", *p)
}

func (p *Rule) DeepEqual(ano *Rule) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Condition) {
		return false
	}
	return true
}

func (p *Rule) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *Rule) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Condition, src) != 0 {
		return false
	}
	return true
}

type GetClusterAutoScalingRuleRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterAutoScalingRuleRequest() *GetClusterAutoScalingRuleRequest {
	return &GetClusterAutoScalingRuleRequest{}
}

func (p *GetClusterAutoScalingRuleRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var GetClusterAutoScalingRuleRequest_Top_DEFAULT *base.TopParam

func (p *GetClusterAutoScalingRuleRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetClusterAutoScalingRuleRequest_Top_DEFAULT
	}
	return p.Top
}

var GetClusterAutoScalingRuleRequest_Base_DEFAULT *base.Base

func (p *GetClusterAutoScalingRuleRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterAutoScalingRuleRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterAutoScalingRuleRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetClusterAutoScalingRuleRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetClusterAutoScalingRuleRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterAutoScalingRuleRequest = map[int16]string{
	1:   "ClusterId",
	254: "Top",
	255: "Base",
}

func (p *GetClusterAutoScalingRuleRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetClusterAutoScalingRuleRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterAutoScalingRuleRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterAutoScalingRuleRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterAutoScalingRuleRequest[fieldId]))
}

func (p *GetClusterAutoScalingRuleRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterAutoScalingRuleRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterAutoScalingRuleRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterAutoScalingRuleRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterAutoScalingRuleRequest(%+v)", *p)
}

func (p *GetClusterAutoScalingRuleRequest) DeepEqual(ano *GetClusterAutoScalingRuleRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterAutoScalingRuleRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetClusterAutoScalingRuleResponse struct {
	ClusterId                     string     `thrift:"ClusterId,1,required" json:"ClusterId"`
	ClusterName                   string     `thrift:"ClusterName,2,required" json:"ClusterName"`
	Expander                      string     `thrift:"Expander,3,required" json:"Expander"`
	EnableScaleDown               bool       `thrift:"EnableScaleDown,4,required" json:"EnableScaleDown"`
	ScaleDownUtilizationThreshold int32      `thrift:"ScaleDownUtilizationThreshold,5,required" json:"ScaleDownUtilizationThreshold"`
	ScaleDownUnneededTime         int32      `thrift:"ScaleDownUnneededTime,6,required" json:"ScaleDownUnneededTime"`
	ScaleDownDelayAfterAdd        int32      `thrift:"ScaleDownDelayAfterAdd,7,required" json:"ScaleDownDelayAfterAdd"`
	ScaleDownDelayAfterFailure    int32      `thrift:"ScaleDownDelayAfterFailure,8,required" json:"ScaleDownDelayAfterFailure"`
	MaxEmptyBulkDelete            int32      `thrift:"MaxEmptyBulkDelete,9,required" json:"MaxEmptyBulkDelete"`
	SkipNodesWithLocalStorage     bool       `thrift:"SkipNodesWithLocalStorage,10,required" json:"SkipNodesWithLocalStorage"`
	SkipNodesWithSystemPods       bool       `thrift:"SkipNodesWithSystemPods,11,required" json:"SkipNodesWithSystemPods"`
	Base                          *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterAutoScalingRuleResponse() *GetClusterAutoScalingRuleResponse {
	return &GetClusterAutoScalingRuleResponse{}
}

func (p *GetClusterAutoScalingRuleResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetClusterAutoScalingRuleResponse) GetClusterName() (v string) {
	return p.ClusterName
}

func (p *GetClusterAutoScalingRuleResponse) GetExpander() (v string) {
	return p.Expander
}

func (p *GetClusterAutoScalingRuleResponse) GetEnableScaleDown() (v bool) {
	return p.EnableScaleDown
}

func (p *GetClusterAutoScalingRuleResponse) GetScaleDownUtilizationThreshold() (v int32) {
	return p.ScaleDownUtilizationThreshold
}

func (p *GetClusterAutoScalingRuleResponse) GetScaleDownUnneededTime() (v int32) {
	return p.ScaleDownUnneededTime
}

func (p *GetClusterAutoScalingRuleResponse) GetScaleDownDelayAfterAdd() (v int32) {
	return p.ScaleDownDelayAfterAdd
}

func (p *GetClusterAutoScalingRuleResponse) GetScaleDownDelayAfterFailure() (v int32) {
	return p.ScaleDownDelayAfterFailure
}

func (p *GetClusterAutoScalingRuleResponse) GetMaxEmptyBulkDelete() (v int32) {
	return p.MaxEmptyBulkDelete
}

func (p *GetClusterAutoScalingRuleResponse) GetSkipNodesWithLocalStorage() (v bool) {
	return p.SkipNodesWithLocalStorage
}

func (p *GetClusterAutoScalingRuleResponse) GetSkipNodesWithSystemPods() (v bool) {
	return p.SkipNodesWithSystemPods
}

var GetClusterAutoScalingRuleResponse_Base_DEFAULT *base.Base

func (p *GetClusterAutoScalingRuleResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterAutoScalingRuleResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterAutoScalingRuleResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetClusterAutoScalingRuleResponse) SetClusterName(val string) {
	p.ClusterName = val
}
func (p *GetClusterAutoScalingRuleResponse) SetExpander(val string) {
	p.Expander = val
}
func (p *GetClusterAutoScalingRuleResponse) SetEnableScaleDown(val bool) {
	p.EnableScaleDown = val
}
func (p *GetClusterAutoScalingRuleResponse) SetScaleDownUtilizationThreshold(val int32) {
	p.ScaleDownUtilizationThreshold = val
}
func (p *GetClusterAutoScalingRuleResponse) SetScaleDownUnneededTime(val int32) {
	p.ScaleDownUnneededTime = val
}
func (p *GetClusterAutoScalingRuleResponse) SetScaleDownDelayAfterAdd(val int32) {
	p.ScaleDownDelayAfterAdd = val
}
func (p *GetClusterAutoScalingRuleResponse) SetScaleDownDelayAfterFailure(val int32) {
	p.ScaleDownDelayAfterFailure = val
}
func (p *GetClusterAutoScalingRuleResponse) SetMaxEmptyBulkDelete(val int32) {
	p.MaxEmptyBulkDelete = val
}
func (p *GetClusterAutoScalingRuleResponse) SetSkipNodesWithLocalStorage(val bool) {
	p.SkipNodesWithLocalStorage = val
}
func (p *GetClusterAutoScalingRuleResponse) SetSkipNodesWithSystemPods(val bool) {
	p.SkipNodesWithSystemPods = val
}
func (p *GetClusterAutoScalingRuleResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterAutoScalingRuleResponse = map[int16]string{
	1:   "ClusterId",
	2:   "ClusterName",
	3:   "Expander",
	4:   "EnableScaleDown",
	5:   "ScaleDownUtilizationThreshold",
	6:   "ScaleDownUnneededTime",
	7:   "ScaleDownDelayAfterAdd",
	8:   "ScaleDownDelayAfterFailure",
	9:   "MaxEmptyBulkDelete",
	10:  "SkipNodesWithLocalStorage",
	11:  "SkipNodesWithSystemPods",
	255: "Base",
}

func (p *GetClusterAutoScalingRuleResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterAutoScalingRuleResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetClusterName bool = false
	var issetExpander bool = false
	var issetEnableScaleDown bool = false
	var issetScaleDownUtilizationThreshold bool = false
	var issetScaleDownUnneededTime bool = false
	var issetScaleDownDelayAfterAdd bool = false
	var issetScaleDownDelayAfterFailure bool = false
	var issetMaxEmptyBulkDelete bool = false
	var issetSkipNodesWithLocalStorage bool = false
	var issetSkipNodesWithSystemPods bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetExpander = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableScaleDown = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetScaleDownUtilizationThreshold = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetScaleDownUnneededTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetScaleDownDelayAfterAdd = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetScaleDownDelayAfterFailure = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetMaxEmptyBulkDelete = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetSkipNodesWithLocalStorage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetSkipNodesWithSystemPods = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetClusterName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetExpander {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetEnableScaleDown {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetScaleDownUtilizationThreshold {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetScaleDownUnneededTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetScaleDownDelayAfterAdd {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetScaleDownDelayAfterFailure {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetMaxEmptyBulkDelete {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetSkipNodesWithLocalStorage {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetSkipNodesWithSystemPods {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterAutoScalingRuleResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterAutoScalingRuleResponse[fieldId]))
}

func (p *GetClusterAutoScalingRuleResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterName = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Expander = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableScaleDown = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownUtilizationThreshold = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownUnneededTime = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownDelayAfterAdd = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownDelayAfterFailure = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MaxEmptyBulkDelete = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.SkipNodesWithLocalStorage = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.SkipNodesWithSystemPods = v
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterAutoScalingRuleResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterAutoScalingRuleResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Expander", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Expander); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnableScaleDown", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableScaleDown); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScaleDownUtilizationThreshold", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ScaleDownUtilizationThreshold); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScaleDownUnneededTime", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ScaleDownUnneededTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScaleDownDelayAfterAdd", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ScaleDownDelayAfterAdd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ScaleDownDelayAfterFailure", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ScaleDownDelayAfterFailure); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MaxEmptyBulkDelete", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.MaxEmptyBulkDelete); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SkipNodesWithLocalStorage", thrift.BOOL, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.SkipNodesWithLocalStorage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SkipNodesWithSystemPods", thrift.BOOL, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.SkipNodesWithSystemPods); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterAutoScalingRuleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterAutoScalingRuleResponse(%+v)", *p)
}

func (p *GetClusterAutoScalingRuleResponse) DeepEqual(ano *GetClusterAutoScalingRuleResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ClusterName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Expander) {
		return false
	}
	if !p.Field4DeepEqual(ano.EnableScaleDown) {
		return false
	}
	if !p.Field5DeepEqual(ano.ScaleDownUtilizationThreshold) {
		return false
	}
	if !p.Field6DeepEqual(ano.ScaleDownUnneededTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.ScaleDownDelayAfterAdd) {
		return false
	}
	if !p.Field8DeepEqual(ano.ScaleDownDelayAfterFailure) {
		return false
	}
	if !p.Field9DeepEqual(ano.MaxEmptyBulkDelete) {
		return false
	}
	if !p.Field10DeepEqual(ano.SkipNodesWithLocalStorage) {
		return false
	}
	if !p.Field11DeepEqual(ano.SkipNodesWithSystemPods) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterAutoScalingRuleResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ClusterName, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Expander, src) != 0 {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field4DeepEqual(src bool) bool {

	if p.EnableScaleDown != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field5DeepEqual(src int32) bool {

	if p.ScaleDownUtilizationThreshold != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field6DeepEqual(src int32) bool {

	if p.ScaleDownUnneededTime != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field7DeepEqual(src int32) bool {

	if p.ScaleDownDelayAfterAdd != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field8DeepEqual(src int32) bool {

	if p.ScaleDownDelayAfterFailure != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field9DeepEqual(src int32) bool {

	if p.MaxEmptyBulkDelete != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field10DeepEqual(src bool) bool {

	if p.SkipNodesWithLocalStorage != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field11DeepEqual(src bool) bool {

	if p.SkipNodesWithSystemPods != src {
		return false
	}
	return true
}
func (p *GetClusterAutoScalingRuleResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateClusterAutoScalingRuleRequest struct {
	ClusterId                     string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	Expander                      *string        `thrift:"Expander,2" json:"Expander,omitempty"`
	EnableScaleDown               *bool          `thrift:"EnableScaleDown,3" json:"EnableScaleDown,omitempty"`
	ScaleDownUtilizationThreshold *int32         `thrift:"ScaleDownUtilizationThreshold,4" json:"ScaleDownUtilizationThreshold,omitempty"`
	ScaleDownUnneededTime         *int32         `thrift:"ScaleDownUnneededTime,5" json:"ScaleDownUnneededTime,omitempty"`
	ScaleDownDelayAfterAdd        *int32         `thrift:"ScaleDownDelayAfterAdd,6" json:"ScaleDownDelayAfterAdd,omitempty"`
	ScaleDownDelayAfterFailure    *int32         `thrift:"ScaleDownDelayAfterFailure,7" json:"ScaleDownDelayAfterFailure,omitempty"`
	MaxEmptyBulkDelete            *int32         `thrift:"MaxEmptyBulkDelete,8" json:"MaxEmptyBulkDelete,omitempty"`
	SkipNodesWithLocalStorage     *bool          `thrift:"SkipNodesWithLocalStorage,9" json:"SkipNodesWithLocalStorage,omitempty"`
	SkipNodesWithSystemPods       *bool          `thrift:"SkipNodesWithSystemPods,10" json:"SkipNodesWithSystemPods,omitempty"`
	Top                           *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base                          *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateClusterAutoScalingRuleRequest() *UpdateClusterAutoScalingRuleRequest {
	return &UpdateClusterAutoScalingRuleRequest{}
}

func (p *UpdateClusterAutoScalingRuleRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var UpdateClusterAutoScalingRuleRequest_Expander_DEFAULT string

func (p *UpdateClusterAutoScalingRuleRequest) GetExpander() (v string) {
	if !p.IsSetExpander() {
		return UpdateClusterAutoScalingRuleRequest_Expander_DEFAULT
	}
	return *p.Expander
}

var UpdateClusterAutoScalingRuleRequest_EnableScaleDown_DEFAULT bool

func (p *UpdateClusterAutoScalingRuleRequest) GetEnableScaleDown() (v bool) {
	if !p.IsSetEnableScaleDown() {
		return UpdateClusterAutoScalingRuleRequest_EnableScaleDown_DEFAULT
	}
	return *p.EnableScaleDown
}

var UpdateClusterAutoScalingRuleRequest_ScaleDownUtilizationThreshold_DEFAULT int32

func (p *UpdateClusterAutoScalingRuleRequest) GetScaleDownUtilizationThreshold() (v int32) {
	if !p.IsSetScaleDownUtilizationThreshold() {
		return UpdateClusterAutoScalingRuleRequest_ScaleDownUtilizationThreshold_DEFAULT
	}
	return *p.ScaleDownUtilizationThreshold
}

var UpdateClusterAutoScalingRuleRequest_ScaleDownUnneededTime_DEFAULT int32

func (p *UpdateClusterAutoScalingRuleRequest) GetScaleDownUnneededTime() (v int32) {
	if !p.IsSetScaleDownUnneededTime() {
		return UpdateClusterAutoScalingRuleRequest_ScaleDownUnneededTime_DEFAULT
	}
	return *p.ScaleDownUnneededTime
}

var UpdateClusterAutoScalingRuleRequest_ScaleDownDelayAfterAdd_DEFAULT int32

func (p *UpdateClusterAutoScalingRuleRequest) GetScaleDownDelayAfterAdd() (v int32) {
	if !p.IsSetScaleDownDelayAfterAdd() {
		return UpdateClusterAutoScalingRuleRequest_ScaleDownDelayAfterAdd_DEFAULT
	}
	return *p.ScaleDownDelayAfterAdd
}

var UpdateClusterAutoScalingRuleRequest_ScaleDownDelayAfterFailure_DEFAULT int32

func (p *UpdateClusterAutoScalingRuleRequest) GetScaleDownDelayAfterFailure() (v int32) {
	if !p.IsSetScaleDownDelayAfterFailure() {
		return UpdateClusterAutoScalingRuleRequest_ScaleDownDelayAfterFailure_DEFAULT
	}
	return *p.ScaleDownDelayAfterFailure
}

var UpdateClusterAutoScalingRuleRequest_MaxEmptyBulkDelete_DEFAULT int32

func (p *UpdateClusterAutoScalingRuleRequest) GetMaxEmptyBulkDelete() (v int32) {
	if !p.IsSetMaxEmptyBulkDelete() {
		return UpdateClusterAutoScalingRuleRequest_MaxEmptyBulkDelete_DEFAULT
	}
	return *p.MaxEmptyBulkDelete
}

var UpdateClusterAutoScalingRuleRequest_SkipNodesWithLocalStorage_DEFAULT bool

func (p *UpdateClusterAutoScalingRuleRequest) GetSkipNodesWithLocalStorage() (v bool) {
	if !p.IsSetSkipNodesWithLocalStorage() {
		return UpdateClusterAutoScalingRuleRequest_SkipNodesWithLocalStorage_DEFAULT
	}
	return *p.SkipNodesWithLocalStorage
}

var UpdateClusterAutoScalingRuleRequest_SkipNodesWithSystemPods_DEFAULT bool

func (p *UpdateClusterAutoScalingRuleRequest) GetSkipNodesWithSystemPods() (v bool) {
	if !p.IsSetSkipNodesWithSystemPods() {
		return UpdateClusterAutoScalingRuleRequest_SkipNodesWithSystemPods_DEFAULT
	}
	return *p.SkipNodesWithSystemPods
}

var UpdateClusterAutoScalingRuleRequest_Top_DEFAULT *base.TopParam

func (p *UpdateClusterAutoScalingRuleRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateClusterAutoScalingRuleRequest_Top_DEFAULT
	}
	return p.Top
}

var UpdateClusterAutoScalingRuleRequest_Base_DEFAULT *base.Base

func (p *UpdateClusterAutoScalingRuleRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateClusterAutoScalingRuleRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateClusterAutoScalingRuleRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetExpander(val *string) {
	p.Expander = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetEnableScaleDown(val *bool) {
	p.EnableScaleDown = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetScaleDownUtilizationThreshold(val *int32) {
	p.ScaleDownUtilizationThreshold = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetScaleDownUnneededTime(val *int32) {
	p.ScaleDownUnneededTime = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetScaleDownDelayAfterAdd(val *int32) {
	p.ScaleDownDelayAfterAdd = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetScaleDownDelayAfterFailure(val *int32) {
	p.ScaleDownDelayAfterFailure = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetMaxEmptyBulkDelete(val *int32) {
	p.MaxEmptyBulkDelete = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetSkipNodesWithLocalStorage(val *bool) {
	p.SkipNodesWithLocalStorage = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetSkipNodesWithSystemPods(val *bool) {
	p.SkipNodesWithSystemPods = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpdateClusterAutoScalingRuleRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateClusterAutoScalingRuleRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Expander",
	3:   "EnableScaleDown",
	4:   "ScaleDownUtilizationThreshold",
	5:   "ScaleDownUnneededTime",
	6:   "ScaleDownDelayAfterAdd",
	7:   "ScaleDownDelayAfterFailure",
	8:   "MaxEmptyBulkDelete",
	9:   "SkipNodesWithLocalStorage",
	10:  "SkipNodesWithSystemPods",
	254: "Top",
	255: "Base",
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetExpander() bool {
	return p.Expander != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetEnableScaleDown() bool {
	return p.EnableScaleDown != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetScaleDownUtilizationThreshold() bool {
	return p.ScaleDownUtilizationThreshold != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetScaleDownUnneededTime() bool {
	return p.ScaleDownUnneededTime != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetScaleDownDelayAfterAdd() bool {
	return p.ScaleDownDelayAfterAdd != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetScaleDownDelayAfterFailure() bool {
	return p.ScaleDownDelayAfterFailure != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetMaxEmptyBulkDelete() bool {
	return p.MaxEmptyBulkDelete != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetSkipNodesWithLocalStorage() bool {
	return p.SkipNodesWithLocalStorage != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetSkipNodesWithSystemPods() bool {
	return p.SkipNodesWithSystemPods != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateClusterAutoScalingRuleRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateClusterAutoScalingRuleRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateClusterAutoScalingRuleRequest[fieldId]))
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Expander = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableScaleDown = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownUtilizationThreshold = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownUnneededTime = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownDelayAfterAdd = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ScaleDownDelayAfterFailure = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MaxEmptyBulkDelete = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.SkipNodesWithLocalStorage = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.SkipNodesWithSystemPods = &v
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateClusterAutoScalingRuleRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpander() {
		if err = oprot.WriteFieldBegin("Expander", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Expander); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableScaleDown() {
		if err = oprot.WriteFieldBegin("EnableScaleDown", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableScaleDown); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetScaleDownUtilizationThreshold() {
		if err = oprot.WriteFieldBegin("ScaleDownUtilizationThreshold", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ScaleDownUtilizationThreshold); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetScaleDownUnneededTime() {
		if err = oprot.WriteFieldBegin("ScaleDownUnneededTime", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ScaleDownUnneededTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetScaleDownDelayAfterAdd() {
		if err = oprot.WriteFieldBegin("ScaleDownDelayAfterAdd", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ScaleDownDelayAfterAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetScaleDownDelayAfterFailure() {
		if err = oprot.WriteFieldBegin("ScaleDownDelayAfterFailure", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ScaleDownDelayAfterFailure); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxEmptyBulkDelete() {
		if err = oprot.WriteFieldBegin("MaxEmptyBulkDelete", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxEmptyBulkDelete); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipNodesWithLocalStorage() {
		if err = oprot.WriteFieldBegin("SkipNodesWithLocalStorage", thrift.BOOL, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipNodesWithLocalStorage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipNodesWithSystemPods() {
		if err = oprot.WriteFieldBegin("SkipNodesWithSystemPods", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipNodesWithSystemPods); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateClusterAutoScalingRuleRequest(%+v)", *p)
}

func (p *UpdateClusterAutoScalingRuleRequest) DeepEqual(ano *UpdateClusterAutoScalingRuleRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Expander) {
		return false
	}
	if !p.Field3DeepEqual(ano.EnableScaleDown) {
		return false
	}
	if !p.Field4DeepEqual(ano.ScaleDownUtilizationThreshold) {
		return false
	}
	if !p.Field5DeepEqual(ano.ScaleDownUnneededTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.ScaleDownDelayAfterAdd) {
		return false
	}
	if !p.Field7DeepEqual(ano.ScaleDownDelayAfterFailure) {
		return false
	}
	if !p.Field8DeepEqual(ano.MaxEmptyBulkDelete) {
		return false
	}
	if !p.Field9DeepEqual(ano.SkipNodesWithLocalStorage) {
		return false
	}
	if !p.Field10DeepEqual(ano.SkipNodesWithSystemPods) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateClusterAutoScalingRuleRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field2DeepEqual(src *string) bool {

	if p.Expander == src {
		return true
	} else if p.Expander == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Expander, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field3DeepEqual(src *bool) bool {

	if p.EnableScaleDown == src {
		return true
	} else if p.EnableScaleDown == nil || src == nil {
		return false
	}
	if *p.EnableScaleDown != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field4DeepEqual(src *int32) bool {

	if p.ScaleDownUtilizationThreshold == src {
		return true
	} else if p.ScaleDownUtilizationThreshold == nil || src == nil {
		return false
	}
	if *p.ScaleDownUtilizationThreshold != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field5DeepEqual(src *int32) bool {

	if p.ScaleDownUnneededTime == src {
		return true
	} else if p.ScaleDownUnneededTime == nil || src == nil {
		return false
	}
	if *p.ScaleDownUnneededTime != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field6DeepEqual(src *int32) bool {

	if p.ScaleDownDelayAfterAdd == src {
		return true
	} else if p.ScaleDownDelayAfterAdd == nil || src == nil {
		return false
	}
	if *p.ScaleDownDelayAfterAdd != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field7DeepEqual(src *int32) bool {

	if p.ScaleDownDelayAfterFailure == src {
		return true
	} else if p.ScaleDownDelayAfterFailure == nil || src == nil {
		return false
	}
	if *p.ScaleDownDelayAfterFailure != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field8DeepEqual(src *int32) bool {

	if p.MaxEmptyBulkDelete == src {
		return true
	} else if p.MaxEmptyBulkDelete == nil || src == nil {
		return false
	}
	if *p.MaxEmptyBulkDelete != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field9DeepEqual(src *bool) bool {

	if p.SkipNodesWithLocalStorage == src {
		return true
	} else if p.SkipNodesWithLocalStorage == nil || src == nil {
		return false
	}
	if *p.SkipNodesWithLocalStorage != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field10DeepEqual(src *bool) bool {

	if p.SkipNodesWithSystemPods == src {
		return true
	} else if p.SkipNodesWithSystemPods == nil || src == nil {
		return false
	}
	if *p.SkipNodesWithSystemPods != *src {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateClusterAutoScalingRuleRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateClusterAutoScalingRuleResponse struct {
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateClusterAutoScalingRuleResponse() *UpdateClusterAutoScalingRuleResponse {
	return &UpdateClusterAutoScalingRuleResponse{}
}

var UpdateClusterAutoScalingRuleResponse_Base_DEFAULT *base.Base

func (p *UpdateClusterAutoScalingRuleResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateClusterAutoScalingRuleResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateClusterAutoScalingRuleResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateClusterAutoScalingRuleResponse = map[int16]string{
	255: "Base",
}

func (p *UpdateClusterAutoScalingRuleResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateClusterAutoScalingRuleResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateClusterAutoScalingRuleResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateClusterAutoScalingRuleResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateClusterAutoScalingRuleResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateClusterAutoScalingRuleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateClusterAutoScalingRuleResponse(%+v)", *p)
}

func (p *UpdateClusterAutoScalingRuleResponse) DeepEqual(ano *UpdateClusterAutoScalingRuleResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateClusterAutoScalingRuleResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ScaleUpNodePoolRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Id        string         `thrift:"Id,2,required" json:"Id"`
	Amount    int32          `thrift:"Amount,3,required" json:"Amount"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewScaleUpNodePoolRequest() *ScaleUpNodePoolRequest {
	return &ScaleUpNodePoolRequest{}
}

func (p *ScaleUpNodePoolRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *ScaleUpNodePoolRequest) GetId() (v string) {
	return p.Id
}

func (p *ScaleUpNodePoolRequest) GetAmount() (v int32) {
	return p.Amount
}

var ScaleUpNodePoolRequest_Top_DEFAULT *base.TopParam

func (p *ScaleUpNodePoolRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ScaleUpNodePoolRequest_Top_DEFAULT
	}
	return p.Top
}

var ScaleUpNodePoolRequest_Base_DEFAULT *base.Base

func (p *ScaleUpNodePoolRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ScaleUpNodePoolRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ScaleUpNodePoolRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ScaleUpNodePoolRequest) SetId(val string) {
	p.Id = val
}
func (p *ScaleUpNodePoolRequest) SetAmount(val int32) {
	p.Amount = val
}
func (p *ScaleUpNodePoolRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ScaleUpNodePoolRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ScaleUpNodePoolRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "Amount",
	254: "Top",
	255: "Base",
}

func (p *ScaleUpNodePoolRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ScaleUpNodePoolRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ScaleUpNodePoolRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetAmount bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAmount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAmount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScaleUpNodePoolRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ScaleUpNodePoolRequest[fieldId]))
}

func (p *ScaleUpNodePoolRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ScaleUpNodePoolRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ScaleUpNodePoolRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Amount = v
	}
	return nil
}

func (p *ScaleUpNodePoolRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ScaleUpNodePoolRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ScaleUpNodePoolRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleUpNodePoolRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScaleUpNodePoolRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScaleUpNodePoolRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScaleUpNodePoolRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Amount", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Amount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScaleUpNodePoolRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ScaleUpNodePoolRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ScaleUpNodePoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScaleUpNodePoolRequest(%+v)", *p)
}

func (p *ScaleUpNodePoolRequest) DeepEqual(ano *ScaleUpNodePoolRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ScaleUpNodePoolRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ScaleUpNodePoolRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ScaleUpNodePoolRequest) Field3DeepEqual(src int32) bool {

	if p.Amount != src {
		return false
	}
	return true
}
func (p *ScaleUpNodePoolRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScaleUpNodePoolRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ScaleUpNodePoolResponse struct {
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewScaleUpNodePoolResponse() *ScaleUpNodePoolResponse {
	return &ScaleUpNodePoolResponse{}
}

var ScaleUpNodePoolResponse_Base_DEFAULT *base.Base

func (p *ScaleUpNodePoolResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ScaleUpNodePoolResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ScaleUpNodePoolResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ScaleUpNodePoolResponse = map[int16]string{
	255: "Base",
}

func (p *ScaleUpNodePoolResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ScaleUpNodePoolResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScaleUpNodePoolResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScaleUpNodePoolResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ScaleUpNodePoolResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleUpNodePoolResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScaleUpNodePoolResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ScaleUpNodePoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScaleUpNodePoolResponse(%+v)", *p)
}

func (p *ScaleUpNodePoolResponse) DeepEqual(ano *ScaleUpNodePoolResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ScaleUpNodePoolResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ScaleDownNodePoolRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Id        string         `thrift:"Id,2,required" json:"Id"`
	NodeIds   []string       `thrift:"NodeIds,3,required" json:"NodeIds"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewScaleDownNodePoolRequest() *ScaleDownNodePoolRequest {
	return &ScaleDownNodePoolRequest{}
}

func (p *ScaleDownNodePoolRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *ScaleDownNodePoolRequest) GetId() (v string) {
	return p.Id
}

func (p *ScaleDownNodePoolRequest) GetNodeIds() (v []string) {
	return p.NodeIds
}

var ScaleDownNodePoolRequest_Top_DEFAULT *base.TopParam

func (p *ScaleDownNodePoolRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ScaleDownNodePoolRequest_Top_DEFAULT
	}
	return p.Top
}

var ScaleDownNodePoolRequest_Base_DEFAULT *base.Base

func (p *ScaleDownNodePoolRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ScaleDownNodePoolRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ScaleDownNodePoolRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ScaleDownNodePoolRequest) SetId(val string) {
	p.Id = val
}
func (p *ScaleDownNodePoolRequest) SetNodeIds(val []string) {
	p.NodeIds = val
}
func (p *ScaleDownNodePoolRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ScaleDownNodePoolRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ScaleDownNodePoolRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "NodeIds",
	254: "Top",
	255: "Base",
}

func (p *ScaleDownNodePoolRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ScaleDownNodePoolRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ScaleDownNodePoolRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetNodeIds bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeIds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNodeIds {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScaleDownNodePoolRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ScaleDownNodePoolRequest[fieldId]))
}

func (p *ScaleDownNodePoolRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ScaleDownNodePoolRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ScaleDownNodePoolRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.NodeIds = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.NodeIds = append(p.NodeIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ScaleDownNodePoolRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ScaleDownNodePoolRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ScaleDownNodePoolRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleDownNodePoolRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScaleDownNodePoolRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScaleDownNodePoolRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ScaleDownNodePoolRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeIds", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.NodeIds)); err != nil {
		return err
	}
	for _, v := range p.NodeIds {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScaleDownNodePoolRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ScaleDownNodePoolRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ScaleDownNodePoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScaleDownNodePoolRequest(%+v)", *p)
}

func (p *ScaleDownNodePoolRequest) DeepEqual(ano *ScaleDownNodePoolRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.NodeIds) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ScaleDownNodePoolRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ScaleDownNodePoolRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ScaleDownNodePoolRequest) Field3DeepEqual(src []string) bool {

	if len(p.NodeIds) != len(src) {
		return false
	}
	for i, v := range p.NodeIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ScaleDownNodePoolRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ScaleDownNodePoolRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ScaleDownNodePoolResponse struct {
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewScaleDownNodePoolResponse() *ScaleDownNodePoolResponse {
	return &ScaleDownNodePoolResponse{}
}

var ScaleDownNodePoolResponse_Base_DEFAULT *base.Base

func (p *ScaleDownNodePoolResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ScaleDownNodePoolResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ScaleDownNodePoolResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ScaleDownNodePoolResponse = map[int16]string{
	255: "Base",
}

func (p *ScaleDownNodePoolResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ScaleDownNodePoolResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScaleDownNodePoolResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScaleDownNodePoolResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ScaleDownNodePoolResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleDownNodePoolResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScaleDownNodePoolResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ScaleDownNodePoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScaleDownNodePoolResponse(%+v)", *p)
}

func (p *ScaleDownNodePoolResponse) DeepEqual(ano *ScaleDownNodePoolResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ScaleDownNodePoolResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NodePoolNodeAutoscaling struct {
	Enable      bool   `thrift:"Enable,1" json:"Enable,omitempty"`
	MinReplicas *int32 `thrift:"MinReplicas,2" json:"MinReplicas,omitempty"`
	MaxReplicas *int32 `thrift:"MaxReplicas,3" json:"MaxReplicas,omitempty"`
	Priority    *int32 `thrift:"Priority,4" json:"Priority,omitempty"`
}

func NewNodePoolNodeAutoscaling() *NodePoolNodeAutoscaling {
	return &NodePoolNodeAutoscaling{

		Enable: false,
	}
}

var NodePoolNodeAutoscaling_Enable_DEFAULT bool = false

func (p *NodePoolNodeAutoscaling) GetEnable() (v bool) {
	if !p.IsSetEnable() {
		return NodePoolNodeAutoscaling_Enable_DEFAULT
	}
	return p.Enable
}

var NodePoolNodeAutoscaling_MinReplicas_DEFAULT int32

func (p *NodePoolNodeAutoscaling) GetMinReplicas() (v int32) {
	if !p.IsSetMinReplicas() {
		return NodePoolNodeAutoscaling_MinReplicas_DEFAULT
	}
	return *p.MinReplicas
}

var NodePoolNodeAutoscaling_MaxReplicas_DEFAULT int32

func (p *NodePoolNodeAutoscaling) GetMaxReplicas() (v int32) {
	if !p.IsSetMaxReplicas() {
		return NodePoolNodeAutoscaling_MaxReplicas_DEFAULT
	}
	return *p.MaxReplicas
}

var NodePoolNodeAutoscaling_Priority_DEFAULT int32

func (p *NodePoolNodeAutoscaling) GetPriority() (v int32) {
	if !p.IsSetPriority() {
		return NodePoolNodeAutoscaling_Priority_DEFAULT
	}
	return *p.Priority
}
func (p *NodePoolNodeAutoscaling) SetEnable(val bool) {
	p.Enable = val
}
func (p *NodePoolNodeAutoscaling) SetMinReplicas(val *int32) {
	p.MinReplicas = val
}
func (p *NodePoolNodeAutoscaling) SetMaxReplicas(val *int32) {
	p.MaxReplicas = val
}
func (p *NodePoolNodeAutoscaling) SetPriority(val *int32) {
	p.Priority = val
}

var fieldIDToName_NodePoolNodeAutoscaling = map[int16]string{
	1: "Enable",
	2: "MinReplicas",
	3: "MaxReplicas",
	4: "Priority",
}

func (p *NodePoolNodeAutoscaling) IsSetEnable() bool {
	return p.Enable != NodePoolNodeAutoscaling_Enable_DEFAULT
}

func (p *NodePoolNodeAutoscaling) IsSetMinReplicas() bool {
	return p.MinReplicas != nil
}

func (p *NodePoolNodeAutoscaling) IsSetMaxReplicas() bool {
	return p.MaxReplicas != nil
}

func (p *NodePoolNodeAutoscaling) IsSetPriority() bool {
	return p.Priority != nil
}

func (p *NodePoolNodeAutoscaling) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodePoolNodeAutoscaling[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NodePoolNodeAutoscaling) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Enable = v
	}
	return nil
}

func (p *NodePoolNodeAutoscaling) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MinReplicas = &v
	}
	return nil
}

func (p *NodePoolNodeAutoscaling) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.MaxReplicas = &v
	}
	return nil
}

func (p *NodePoolNodeAutoscaling) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Priority = &v
	}
	return nil
}

func (p *NodePoolNodeAutoscaling) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePoolNodeAutoscaling"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodePoolNodeAutoscaling) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnable() {
		if err = oprot.WriteFieldBegin("Enable", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Enable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodePoolNodeAutoscaling) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinReplicas() {
		if err = oprot.WriteFieldBegin("MinReplicas", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MinReplicas); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodePoolNodeAutoscaling) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxReplicas() {
		if err = oprot.WriteFieldBegin("MaxReplicas", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxReplicas); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodePoolNodeAutoscaling) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPriority() {
		if err = oprot.WriteFieldBegin("Priority", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Priority); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodePoolNodeAutoscaling) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodePoolNodeAutoscaling(%+v)", *p)
}

func (p *NodePoolNodeAutoscaling) DeepEqual(ano *NodePoolNodeAutoscaling) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Enable) {
		return false
	}
	if !p.Field2DeepEqual(ano.MinReplicas) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxReplicas) {
		return false
	}
	if !p.Field4DeepEqual(ano.Priority) {
		return false
	}
	return true
}

func (p *NodePoolNodeAutoscaling) Field1DeepEqual(src bool) bool {

	if p.Enable != src {
		return false
	}
	return true
}
func (p *NodePoolNodeAutoscaling) Field2DeepEqual(src *int32) bool {

	if p.MinReplicas == src {
		return true
	} else if p.MinReplicas == nil || src == nil {
		return false
	}
	if *p.MinReplicas != *src {
		return false
	}
	return true
}
func (p *NodePoolNodeAutoscaling) Field3DeepEqual(src *int32) bool {

	if p.MaxReplicas == src {
		return true
	} else if p.MaxReplicas == nil || src == nil {
		return false
	}
	if *p.MaxReplicas != *src {
		return false
	}
	return true
}
func (p *NodePoolNodeAutoscaling) Field4DeepEqual(src *int32) bool {

	if p.Priority == src {
		return true
	} else if p.Priority == nil || src == nil {
		return false
	}
	if *p.Priority != *src {
		return false
	}
	return true
}

type ListNodePoolsFilter struct {
	Ids               []string `thrift:"Ids,1" json:"Ids,omitempty"`
	Names             []string `thrift:"Names,2" json:"Names,omitempty"`
	Statuses          []string `thrift:"Statuses,3" json:"Statuses,omitempty"`
	EnableAutoScaling *bool    `thrift:"EnableAutoScaling,4" json:"EnableAutoScaling,omitempty"`
}

func NewListNodePoolsFilter() *ListNodePoolsFilter {
	return &ListNodePoolsFilter{}
}

var ListNodePoolsFilter_Ids_DEFAULT []string

func (p *ListNodePoolsFilter) GetIds() (v []string) {
	if !p.IsSetIds() {
		return ListNodePoolsFilter_Ids_DEFAULT
	}
	return p.Ids
}

var ListNodePoolsFilter_Names_DEFAULT []string

func (p *ListNodePoolsFilter) GetNames() (v []string) {
	if !p.IsSetNames() {
		return ListNodePoolsFilter_Names_DEFAULT
	}
	return p.Names
}

var ListNodePoolsFilter_Statuses_DEFAULT []string

func (p *ListNodePoolsFilter) GetStatuses() (v []string) {
	if !p.IsSetStatuses() {
		return ListNodePoolsFilter_Statuses_DEFAULT
	}
	return p.Statuses
}

var ListNodePoolsFilter_EnableAutoScaling_DEFAULT bool

func (p *ListNodePoolsFilter) GetEnableAutoScaling() (v bool) {
	if !p.IsSetEnableAutoScaling() {
		return ListNodePoolsFilter_EnableAutoScaling_DEFAULT
	}
	return *p.EnableAutoScaling
}
func (p *ListNodePoolsFilter) SetIds(val []string) {
	p.Ids = val
}
func (p *ListNodePoolsFilter) SetNames(val []string) {
	p.Names = val
}
func (p *ListNodePoolsFilter) SetStatuses(val []string) {
	p.Statuses = val
}
func (p *ListNodePoolsFilter) SetEnableAutoScaling(val *bool) {
	p.EnableAutoScaling = val
}

var fieldIDToName_ListNodePoolsFilter = map[int16]string{
	1: "Ids",
	2: "Names",
	3: "Statuses",
	4: "EnableAutoScaling",
}

func (p *ListNodePoolsFilter) IsSetIds() bool {
	return p.Ids != nil
}

func (p *ListNodePoolsFilter) IsSetNames() bool {
	return p.Names != nil
}

func (p *ListNodePoolsFilter) IsSetStatuses() bool {
	return p.Statuses != nil
}

func (p *ListNodePoolsFilter) IsSetEnableAutoScaling() bool {
	return p.EnableAutoScaling != nil
}

func (p *ListNodePoolsFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolsFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListNodePoolsFilter) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ids = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Ids = append(p.Ids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsFilter) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Names = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Names = append(p.Names, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsFilter) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Statuses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Statuses = append(p.Statuses, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsFilter) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableAutoScaling = &v
	}
	return nil
}

func (p *ListNodePoolsFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolsFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolsFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIds() {
		if err = oprot.WriteFieldBegin("Ids", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
			return err
		}
		for _, v := range p.Ids {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolsFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNames() {
		if err = oprot.WriteFieldBegin("Names", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Names)); err != nil {
			return err
		}
		for _, v := range p.Names {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolsFilter) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatuses() {
		if err = oprot.WriteFieldBegin("Statuses", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Statuses)); err != nil {
			return err
		}
		for _, v := range p.Statuses {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNodePoolsFilter) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableAutoScaling() {
		if err = oprot.WriteFieldBegin("EnableAutoScaling", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableAutoScaling); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListNodePoolsFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolsFilter(%+v)", *p)
}

func (p *ListNodePoolsFilter) DeepEqual(ano *ListNodePoolsFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	if !p.Field2DeepEqual(ano.Names) {
		return false
	}
	if !p.Field3DeepEqual(ano.Statuses) {
		return false
	}
	if !p.Field4DeepEqual(ano.EnableAutoScaling) {
		return false
	}
	return true
}

func (p *ListNodePoolsFilter) Field1DeepEqual(src []string) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListNodePoolsFilter) Field2DeepEqual(src []string) bool {

	if len(p.Names) != len(src) {
		return false
	}
	for i, v := range p.Names {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListNodePoolsFilter) Field3DeepEqual(src []string) bool {

	if len(p.Statuses) != len(src) {
		return false
	}
	for i, v := range p.Statuses {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListNodePoolsFilter) Field4DeepEqual(src *bool) bool {

	if p.EnableAutoScaling == src {
		return true
	} else if p.EnableAutoScaling == nil || src == nil {
		return false
	}
	if *p.EnableAutoScaling != *src {
		return false
	}
	return true
}

type ListNodePoolsRequest struct {
	ClusterId  string               `thrift:"ClusterId,1,required" validate:"required"`
	PageNumber int32                `thrift:"PageNumber,2" json:"PageNumber" default:"1"`
	PageSize   int32                `thrift:"PageSize,3" json:"PageSize" default:"100"`
	Filter     *ListNodePoolsFilter `thrift:"Filter,4" json:"Filter,omitempty"`
	Top        *base.TopParam       `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base           `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodePoolsRequest() *ListNodePoolsRequest {
	return &ListNodePoolsRequest{

		PageNumber: 1,
		PageSize:   100,
	}
}

func (p *ListNodePoolsRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListNodePoolsRequest_PageNumber_DEFAULT int32 = 1

func (p *ListNodePoolsRequest) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListNodePoolsRequest_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListNodePoolsRequest_PageSize_DEFAULT int32 = 100

func (p *ListNodePoolsRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListNodePoolsRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListNodePoolsRequest_Filter_DEFAULT *ListNodePoolsFilter

func (p *ListNodePoolsRequest) GetFilter() (v *ListNodePoolsFilter) {
	if !p.IsSetFilter() {
		return ListNodePoolsRequest_Filter_DEFAULT
	}
	return p.Filter
}

var ListNodePoolsRequest_Top_DEFAULT *base.TopParam

func (p *ListNodePoolsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNodePoolsRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNodePoolsRequest_Base_DEFAULT *base.Base

func (p *ListNodePoolsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodePoolsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodePoolsRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNodePoolsRequest) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListNodePoolsRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListNodePoolsRequest) SetFilter(val *ListNodePoolsFilter) {
	p.Filter = val
}
func (p *ListNodePoolsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNodePoolsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodePoolsRequest = map[int16]string{
	1:   "ClusterId",
	2:   "PageNumber",
	3:   "PageSize",
	4:   "Filter",
	254: "Top",
	255: "Base",
}

func (p *ListNodePoolsRequest) IsSetPageNumber() bool {
	return p.PageNumber != ListNodePoolsRequest_PageNumber_DEFAULT
}

func (p *ListNodePoolsRequest) IsSetPageSize() bool {
	return p.PageSize != ListNodePoolsRequest_PageSize_DEFAULT
}

func (p *ListNodePoolsRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListNodePoolsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNodePoolsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodePoolsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodePoolsRequest[fieldId]))
}

func (p *ListNodePoolsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNodePoolsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListNodePoolsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListNodePoolsRequest) ReadField4(iprot thrift.TProtocol) error {
	p.Filter = NewListNodePoolsFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNodePoolsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListNodePoolsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNodePoolsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodePoolsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolsRequest(%+v)", *p)
}

func (p *ListNodePoolsRequest) DeepEqual(ano *ListNodePoolsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodePoolsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodePoolsRequest) Field2DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListNodePoolsRequest) Field3DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListNodePoolsRequest) Field4DeepEqual(src *ListNodePoolsFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodePoolsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodePoolsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NodePoolItem struct {
	Id                  string                   `thrift:"Id,1,required" json:"Id"`
	Name                string                   `thrift:"Name,2,required" json:"Name"`
	NodeAutoscaling     *NodePoolNodeAutoscaling `thrift:"NodeAutoscaling,3,required" json:"NodeAutoscaling"`
	ChargeType          string                   `thrift:"ChargeType,4,required" validate:"required,oneof=PostPaid"`
	Image               *iaas.Image              `thrift:"Image,5,required" json:"Image"`
	InstanceType        *InstanceType            `thrift:"InstanceType,6,required" json:"InstanceType"`
	TotalNode           int32                    `thrift:"TotalNode,7,required" json:"TotalNode"`
	AvailableNodeAmount int32                    `thrift:"AvailableNodeAmount,8,required" json:"AvailableNodeAmount"`
	Status              string                   `thrift:"Status,9,required" json:"Status"`
	ErrorMessage        string                   `thrift:"ErrorMessage,10,required" json:"ErrorMessage"`
	EnableFullSync      bool                     `thrift:"EnableFullSync,11,required" json:"EnableFullSync"`
}

func NewNodePoolItem() *NodePoolItem {
	return &NodePoolItem{}
}

func (p *NodePoolItem) GetId() (v string) {
	return p.Id
}

func (p *NodePoolItem) GetName() (v string) {
	return p.Name
}

var NodePoolItem_NodeAutoscaling_DEFAULT *NodePoolNodeAutoscaling

func (p *NodePoolItem) GetNodeAutoscaling() (v *NodePoolNodeAutoscaling) {
	if !p.IsSetNodeAutoscaling() {
		return NodePoolItem_NodeAutoscaling_DEFAULT
	}
	return p.NodeAutoscaling
}

func (p *NodePoolItem) GetChargeType() (v string) {
	return p.ChargeType
}

var NodePoolItem_Image_DEFAULT *iaas.Image

func (p *NodePoolItem) GetImage() (v *iaas.Image) {
	if !p.IsSetImage() {
		return NodePoolItem_Image_DEFAULT
	}
	return p.Image
}

var NodePoolItem_InstanceType_DEFAULT *InstanceType

func (p *NodePoolItem) GetInstanceType() (v *InstanceType) {
	if !p.IsSetInstanceType() {
		return NodePoolItem_InstanceType_DEFAULT
	}
	return p.InstanceType
}

func (p *NodePoolItem) GetTotalNode() (v int32) {
	return p.TotalNode
}

func (p *NodePoolItem) GetAvailableNodeAmount() (v int32) {
	return p.AvailableNodeAmount
}

func (p *NodePoolItem) GetStatus() (v string) {
	return p.Status
}

func (p *NodePoolItem) GetErrorMessage() (v string) {
	return p.ErrorMessage
}

func (p *NodePoolItem) GetEnableFullSync() (v bool) {
	return p.EnableFullSync
}
func (p *NodePoolItem) SetId(val string) {
	p.Id = val
}
func (p *NodePoolItem) SetName(val string) {
	p.Name = val
}
func (p *NodePoolItem) SetNodeAutoscaling(val *NodePoolNodeAutoscaling) {
	p.NodeAutoscaling = val
}
func (p *NodePoolItem) SetChargeType(val string) {
	p.ChargeType = val
}
func (p *NodePoolItem) SetImage(val *iaas.Image) {
	p.Image = val
}
func (p *NodePoolItem) SetInstanceType(val *InstanceType) {
	p.InstanceType = val
}
func (p *NodePoolItem) SetTotalNode(val int32) {
	p.TotalNode = val
}
func (p *NodePoolItem) SetAvailableNodeAmount(val int32) {
	p.AvailableNodeAmount = val
}
func (p *NodePoolItem) SetStatus(val string) {
	p.Status = val
}
func (p *NodePoolItem) SetErrorMessage(val string) {
	p.ErrorMessage = val
}
func (p *NodePoolItem) SetEnableFullSync(val bool) {
	p.EnableFullSync = val
}

var fieldIDToName_NodePoolItem = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "NodeAutoscaling",
	4:  "ChargeType",
	5:  "Image",
	6:  "InstanceType",
	7:  "TotalNode",
	8:  "AvailableNodeAmount",
	9:  "Status",
	10: "ErrorMessage",
	11: "EnableFullSync",
}

func (p *NodePoolItem) IsSetNodeAutoscaling() bool {
	return p.NodeAutoscaling != nil
}

func (p *NodePoolItem) IsSetImage() bool {
	return p.Image != nil
}

func (p *NodePoolItem) IsSetInstanceType() bool {
	return p.InstanceType != nil
}

func (p *NodePoolItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetNodeAutoscaling bool = false
	var issetChargeType bool = false
	var issetImage bool = false
	var issetInstanceType bool = false
	var issetTotalNode bool = false
	var issetAvailableNodeAmount bool = false
	var issetStatus bool = false
	var issetErrorMessage bool = false
	var issetEnableFullSync bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeAutoscaling = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetChargeType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalNode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvailableNodeAmount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableFullSync = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNodeAutoscaling {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetChargeType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetInstanceType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTotalNode {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetAvailableNodeAmount {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetErrorMessage {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetEnableFullSync {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodePoolItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodePoolItem[fieldId]))
}

func (p *NodePoolItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *NodePoolItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *NodePoolItem) ReadField3(iprot thrift.TProtocol) error {
	p.NodeAutoscaling = NewNodePoolNodeAutoscaling()
	if err := p.NodeAutoscaling.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = v
	}
	return nil
}

func (p *NodePoolItem) ReadField5(iprot thrift.TProtocol) error {
	p.Image = iaas.NewImage()
	if err := p.Image.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolItem) ReadField6(iprot thrift.TProtocol) error {
	p.InstanceType = NewInstanceType()
	if err := p.InstanceType.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalNode = v
	}
	return nil
}

func (p *NodePoolItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AvailableNodeAmount = v
	}
	return nil
}

func (p *NodePoolItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *NodePoolItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *NodePoolItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableFullSync = v
	}
	return nil
}

func (p *NodePoolItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePoolItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodePoolItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodePoolItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodePoolItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeAutoscaling", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NodeAutoscaling.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodePoolItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChargeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodePoolItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Image", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Image.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NodePoolItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceType", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InstanceType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NodePoolItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalNode", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalNode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NodePoolItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvailableNodeAmount", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AvailableNodeAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NodePoolItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NodePoolItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorMessage", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ErrorMessage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NodePoolItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnableFullSync", thrift.BOOL, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableFullSync); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NodePoolItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodePoolItem(%+v)", *p)
}

func (p *NodePoolItem) DeepEqual(ano *NodePoolItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.NodeAutoscaling) {
		return false
	}
	if !p.Field4DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field5DeepEqual(ano.Image) {
		return false
	}
	if !p.Field6DeepEqual(ano.InstanceType) {
		return false
	}
	if !p.Field7DeepEqual(ano.TotalNode) {
		return false
	}
	if !p.Field8DeepEqual(ano.AvailableNodeAmount) {
		return false
	}
	if !p.Field9DeepEqual(ano.Status) {
		return false
	}
	if !p.Field10DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field11DeepEqual(ano.EnableFullSync) {
		return false
	}
	return true
}

func (p *NodePoolItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolItem) Field3DeepEqual(src *NodePoolNodeAutoscaling) bool {

	if !p.NodeAutoscaling.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ChargeType, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolItem) Field5DeepEqual(src *iaas.Image) bool {

	if !p.Image.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolItem) Field6DeepEqual(src *InstanceType) bool {

	if !p.InstanceType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolItem) Field7DeepEqual(src int32) bool {

	if p.TotalNode != src {
		return false
	}
	return true
}
func (p *NodePoolItem) Field8DeepEqual(src int32) bool {

	if p.AvailableNodeAmount != src {
		return false
	}
	return true
}
func (p *NodePoolItem) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolItem) Field10DeepEqual(src string) bool {

	if strings.Compare(p.ErrorMessage, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolItem) Field11DeepEqual(src bool) bool {

	if p.EnableFullSync != src {
		return false
	}
	return true
}

type ListNodePoolsResponse struct {
	Items []*NodePoolItem `thrift:"Items,1,required" json:"Items"`
	Total int32           `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodePoolsResponse() *ListNodePoolsResponse {
	return &ListNodePoolsResponse{}
}

func (p *ListNodePoolsResponse) GetItems() (v []*NodePoolItem) {
	return p.Items
}

func (p *ListNodePoolsResponse) GetTotal() (v int32) {
	return p.Total
}

var ListNodePoolsResponse_Base_DEFAULT *base.Base

func (p *ListNodePoolsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodePoolsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodePoolsResponse) SetItems(val []*NodePoolItem) {
	p.Items = val
}
func (p *ListNodePoolsResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListNodePoolsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodePoolsResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListNodePoolsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodePoolsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodePoolsResponse[fieldId]))
}

func (p *ListNodePoolsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*NodePoolItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodePoolItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListNodePoolsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodePoolsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolsResponse(%+v)", *p)
}

func (p *ListNodePoolsResponse) DeepEqual(ano *ListNodePoolsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodePoolsResponse) Field1DeepEqual(src []*NodePoolItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNodePoolsResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListNodePoolsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NodePoolNodeConfig struct {
	ZoneId             *string         `thrift:"ZoneId,1" json:"ZoneId,omitempty"`
	SubnetId           *string         `thrift:"SubnetId,2" json:"SubnetId,omitempty"`
	InstanceTypeId     string          `thrift:"InstanceTypeId,3,required" validate:"required"`
	ImageId            string          `thrift:"ImageId,4" json:"ImageId" validate:"oneof=Velinux-VKE" default:"Velinux-VKE"`
	RootVolume         *Volume         `thrift:"RootVolume,5,required" validate:"required"`
	DataVolumes        []*Volume       `thrift:"DataVolumes,6" json:"DataVolumes,omitempty"`
	Login              *Login          `thrift:"Login,7,required" validate:"required"`
	SecurityGroups     []string        `thrift:"SecurityGroups,8,required" validate:"gt=0"`
	Labels             []*helper.Label `thrift:"Labels,9" validate:"k8sLabel"`
	Taints             []*helper.Taint `thrift:"Taints,10" json:"Taints,omitempty"`
	Cordon             bool            `thrift:"Cordon,11" json:"Cordon,omitempty"`
	PreScript          *string         `thrift:"PreScript,12" json:"PreScript,omitempty"`
	PostScript         *string         `thrift:"PostScript,13" json:"PostScript,omitempty"`
	SecurityStrategies []string        `thrift:"SecurityStrategies,14" json:"SecurityStrategies,omitempty"`
	NamePrefix         *string         `thrift:"NamePrefix,15" json:"NamePrefix,omitempty"`
	Amount             *int32          `thrift:"Amount,16" json:"Amount,omitempty"`
	SubnetIds          []string        `thrift:"SubnetIds,17" json:"SubnetIds,omitempty"`
}

func NewNodePoolNodeConfig() *NodePoolNodeConfig {
	return &NodePoolNodeConfig{

		ImageId: "Velinux-VKE",
		Cordon:  false,
	}
}

var NodePoolNodeConfig_ZoneId_DEFAULT string

func (p *NodePoolNodeConfig) GetZoneId() (v string) {
	if !p.IsSetZoneId() {
		return NodePoolNodeConfig_ZoneId_DEFAULT
	}
	return *p.ZoneId
}

var NodePoolNodeConfig_SubnetId_DEFAULT string

func (p *NodePoolNodeConfig) GetSubnetId() (v string) {
	if !p.IsSetSubnetId() {
		return NodePoolNodeConfig_SubnetId_DEFAULT
	}
	return *p.SubnetId
}

func (p *NodePoolNodeConfig) GetInstanceTypeId() (v string) {
	return p.InstanceTypeId
}

var NodePoolNodeConfig_ImageId_DEFAULT string = "Velinux-VKE"

func (p *NodePoolNodeConfig) GetImageId() (v string) {
	if !p.IsSetImageId() {
		return NodePoolNodeConfig_ImageId_DEFAULT
	}
	return p.ImageId
}

var NodePoolNodeConfig_RootVolume_DEFAULT *Volume

func (p *NodePoolNodeConfig) GetRootVolume() (v *Volume) {
	if !p.IsSetRootVolume() {
		return NodePoolNodeConfig_RootVolume_DEFAULT
	}
	return p.RootVolume
}

var NodePoolNodeConfig_DataVolumes_DEFAULT []*Volume

func (p *NodePoolNodeConfig) GetDataVolumes() (v []*Volume) {
	if !p.IsSetDataVolumes() {
		return NodePoolNodeConfig_DataVolumes_DEFAULT
	}
	return p.DataVolumes
}

var NodePoolNodeConfig_Login_DEFAULT *Login

func (p *NodePoolNodeConfig) GetLogin() (v *Login) {
	if !p.IsSetLogin() {
		return NodePoolNodeConfig_Login_DEFAULT
	}
	return p.Login
}

func (p *NodePoolNodeConfig) GetSecurityGroups() (v []string) {
	return p.SecurityGroups
}

var NodePoolNodeConfig_Labels_DEFAULT []*helper.Label

func (p *NodePoolNodeConfig) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return NodePoolNodeConfig_Labels_DEFAULT
	}
	return p.Labels
}

var NodePoolNodeConfig_Taints_DEFAULT []*helper.Taint

func (p *NodePoolNodeConfig) GetTaints() (v []*helper.Taint) {
	if !p.IsSetTaints() {
		return NodePoolNodeConfig_Taints_DEFAULT
	}
	return p.Taints
}

var NodePoolNodeConfig_Cordon_DEFAULT bool = false

func (p *NodePoolNodeConfig) GetCordon() (v bool) {
	if !p.IsSetCordon() {
		return NodePoolNodeConfig_Cordon_DEFAULT
	}
	return p.Cordon
}

var NodePoolNodeConfig_PreScript_DEFAULT string

func (p *NodePoolNodeConfig) GetPreScript() (v string) {
	if !p.IsSetPreScript() {
		return NodePoolNodeConfig_PreScript_DEFAULT
	}
	return *p.PreScript
}

var NodePoolNodeConfig_PostScript_DEFAULT string

func (p *NodePoolNodeConfig) GetPostScript() (v string) {
	if !p.IsSetPostScript() {
		return NodePoolNodeConfig_PostScript_DEFAULT
	}
	return *p.PostScript
}

var NodePoolNodeConfig_SecurityStrategies_DEFAULT []string

func (p *NodePoolNodeConfig) GetSecurityStrategies() (v []string) {
	if !p.IsSetSecurityStrategies() {
		return NodePoolNodeConfig_SecurityStrategies_DEFAULT
	}
	return p.SecurityStrategies
}

var NodePoolNodeConfig_NamePrefix_DEFAULT string

func (p *NodePoolNodeConfig) GetNamePrefix() (v string) {
	if !p.IsSetNamePrefix() {
		return NodePoolNodeConfig_NamePrefix_DEFAULT
	}
	return *p.NamePrefix
}

var NodePoolNodeConfig_Amount_DEFAULT int32

func (p *NodePoolNodeConfig) GetAmount() (v int32) {
	if !p.IsSetAmount() {
		return NodePoolNodeConfig_Amount_DEFAULT
	}
	return *p.Amount
}

var NodePoolNodeConfig_SubnetIds_DEFAULT []string

func (p *NodePoolNodeConfig) GetSubnetIds() (v []string) {
	if !p.IsSetSubnetIds() {
		return NodePoolNodeConfig_SubnetIds_DEFAULT
	}
	return p.SubnetIds
}
func (p *NodePoolNodeConfig) SetZoneId(val *string) {
	p.ZoneId = val
}
func (p *NodePoolNodeConfig) SetSubnetId(val *string) {
	p.SubnetId = val
}
func (p *NodePoolNodeConfig) SetInstanceTypeId(val string) {
	p.InstanceTypeId = val
}
func (p *NodePoolNodeConfig) SetImageId(val string) {
	p.ImageId = val
}
func (p *NodePoolNodeConfig) SetRootVolume(val *Volume) {
	p.RootVolume = val
}
func (p *NodePoolNodeConfig) SetDataVolumes(val []*Volume) {
	p.DataVolumes = val
}
func (p *NodePoolNodeConfig) SetLogin(val *Login) {
	p.Login = val
}
func (p *NodePoolNodeConfig) SetSecurityGroups(val []string) {
	p.SecurityGroups = val
}
func (p *NodePoolNodeConfig) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *NodePoolNodeConfig) SetTaints(val []*helper.Taint) {
	p.Taints = val
}
func (p *NodePoolNodeConfig) SetCordon(val bool) {
	p.Cordon = val
}
func (p *NodePoolNodeConfig) SetPreScript(val *string) {
	p.PreScript = val
}
func (p *NodePoolNodeConfig) SetPostScript(val *string) {
	p.PostScript = val
}
func (p *NodePoolNodeConfig) SetSecurityStrategies(val []string) {
	p.SecurityStrategies = val
}
func (p *NodePoolNodeConfig) SetNamePrefix(val *string) {
	p.NamePrefix = val
}
func (p *NodePoolNodeConfig) SetAmount(val *int32) {
	p.Amount = val
}
func (p *NodePoolNodeConfig) SetSubnetIds(val []string) {
	p.SubnetIds = val
}

var fieldIDToName_NodePoolNodeConfig = map[int16]string{
	1:  "ZoneId",
	2:  "SubnetId",
	3:  "InstanceTypeId",
	4:  "ImageId",
	5:  "RootVolume",
	6:  "DataVolumes",
	7:  "Login",
	8:  "SecurityGroups",
	9:  "Labels",
	10: "Taints",
	11: "Cordon",
	12: "PreScript",
	13: "PostScript",
	14: "SecurityStrategies",
	15: "NamePrefix",
	16: "Amount",
	17: "SubnetIds",
}

func (p *NodePoolNodeConfig) IsSetZoneId() bool {
	return p.ZoneId != nil
}

func (p *NodePoolNodeConfig) IsSetSubnetId() bool {
	return p.SubnetId != nil
}

func (p *NodePoolNodeConfig) IsSetImageId() bool {
	return p.ImageId != NodePoolNodeConfig_ImageId_DEFAULT
}

func (p *NodePoolNodeConfig) IsSetRootVolume() bool {
	return p.RootVolume != nil
}

func (p *NodePoolNodeConfig) IsSetDataVolumes() bool {
	return p.DataVolumes != nil
}

func (p *NodePoolNodeConfig) IsSetLogin() bool {
	return p.Login != nil
}

func (p *NodePoolNodeConfig) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *NodePoolNodeConfig) IsSetTaints() bool {
	return p.Taints != nil
}

func (p *NodePoolNodeConfig) IsSetCordon() bool {
	return p.Cordon != NodePoolNodeConfig_Cordon_DEFAULT
}

func (p *NodePoolNodeConfig) IsSetPreScript() bool {
	return p.PreScript != nil
}

func (p *NodePoolNodeConfig) IsSetPostScript() bool {
	return p.PostScript != nil
}

func (p *NodePoolNodeConfig) IsSetSecurityStrategies() bool {
	return p.SecurityStrategies != nil
}

func (p *NodePoolNodeConfig) IsSetNamePrefix() bool {
	return p.NamePrefix != nil
}

func (p *NodePoolNodeConfig) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *NodePoolNodeConfig) IsSetSubnetIds() bool {
	return p.SubnetIds != nil
}

func (p *NodePoolNodeConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInstanceTypeId bool = false
	var issetRootVolume bool = false
	var issetLogin bool = false
	var issetSecurityGroups bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceTypeId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRootVolume = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogin = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecurityGroups = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInstanceTypeId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRootVolume {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetLogin {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSecurityGroups {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodePoolNodeConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodePoolNodeConfig[fieldId]))
}

func (p *NodePoolNodeConfig) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ZoneId = &v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubnetId = &v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.InstanceTypeId = v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ImageId = v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField5(iprot thrift.TProtocol) error {
	p.RootVolume = NewVolume()
	if err := p.RootVolume.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DataVolumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.DataVolumes = append(p.DataVolumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField7(iprot thrift.TProtocol) error {
	p.Login = NewLogin()
	if err := p.Login.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityGroups = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SecurityGroups = append(p.SecurityGroups, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Taints = make([]*helper.Taint, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewTaint()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Taints = append(p.Taints, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Cordon = v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PreScript = &v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostScript = &v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityStrategies = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SecurityStrategies = append(p.SecurityStrategies, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NamePrefix = &v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Amount = &v
	}
	return nil
}

func (p *NodePoolNodeConfig) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SubnetIds = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SubnetIds = append(p.SubnetIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNodeConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePoolNodeConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetZoneId() {
		if err = oprot.WriteFieldBegin("ZoneId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ZoneId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnetId() {
		if err = oprot.WriteFieldBegin("SubnetId", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SubnetId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceTypeId", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InstanceTypeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageId() {
		if err = oprot.WriteFieldBegin("ImageId", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ImageId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RootVolume", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RootVolume.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataVolumes() {
		if err = oprot.WriteFieldBegin("DataVolumes", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DataVolumes)); err != nil {
			return err
		}
		for _, v := range p.DataVolumes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Login", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Login.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SecurityGroups", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SecurityGroups)); err != nil {
		return err
	}
	for _, v := range p.SecurityGroups {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaints() {
		if err = oprot.WriteFieldBegin("Taints", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Taints)); err != nil {
			return err
		}
		for _, v := range p.Taints {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCordon() {
		if err = oprot.WriteFieldBegin("Cordon", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.Cordon); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreScript() {
		if err = oprot.WriteFieldBegin("PreScript", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PreScript); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPostScript() {
		if err = oprot.WriteFieldBegin("PostScript", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PostScript); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecurityStrategies() {
		if err = oprot.WriteFieldBegin("SecurityStrategies", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SecurityStrategies)); err != nil {
			return err
		}
		for _, v := range p.SecurityStrategies {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamePrefix() {
		if err = oprot.WriteFieldBegin("NamePrefix", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NamePrefix); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err = oprot.WriteFieldBegin("Amount", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Amount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *NodePoolNodeConfig) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnetIds() {
		if err = oprot.WriteFieldBegin("SubnetIds", thrift.LIST, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SubnetIds)); err != nil {
			return err
		}
		for _, v := range p.SubnetIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *NodePoolNodeConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodePoolNodeConfig(%+v)", *p)
}

func (p *NodePoolNodeConfig) DeepEqual(ano *NodePoolNodeConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ZoneId) {
		return false
	}
	if !p.Field2DeepEqual(ano.SubnetId) {
		return false
	}
	if !p.Field3DeepEqual(ano.InstanceTypeId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ImageId) {
		return false
	}
	if !p.Field5DeepEqual(ano.RootVolume) {
		return false
	}
	if !p.Field6DeepEqual(ano.DataVolumes) {
		return false
	}
	if !p.Field7DeepEqual(ano.Login) {
		return false
	}
	if !p.Field8DeepEqual(ano.SecurityGroups) {
		return false
	}
	if !p.Field9DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field10DeepEqual(ano.Taints) {
		return false
	}
	if !p.Field11DeepEqual(ano.Cordon) {
		return false
	}
	if !p.Field12DeepEqual(ano.PreScript) {
		return false
	}
	if !p.Field13DeepEqual(ano.PostScript) {
		return false
	}
	if !p.Field14DeepEqual(ano.SecurityStrategies) {
		return false
	}
	if !p.Field15DeepEqual(ano.NamePrefix) {
		return false
	}
	if !p.Field16DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field17DeepEqual(ano.SubnetIds) {
		return false
	}
	return true
}

func (p *NodePoolNodeConfig) Field1DeepEqual(src *string) bool {

	if p.ZoneId == src {
		return true
	} else if p.ZoneId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ZoneId, *src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field2DeepEqual(src *string) bool {

	if p.SubnetId == src {
		return true
	} else if p.SubnetId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SubnetId, *src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field3DeepEqual(src string) bool {

	if strings.Compare(p.InstanceTypeId, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ImageId, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field5DeepEqual(src *Volume) bool {

	if !p.RootVolume.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field6DeepEqual(src []*Volume) bool {

	if len(p.DataVolumes) != len(src) {
		return false
	}
	for i, v := range p.DataVolumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNodeConfig) Field7DeepEqual(src *Login) bool {

	if !p.Login.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field8DeepEqual(src []string) bool {

	if len(p.SecurityGroups) != len(src) {
		return false
	}
	for i, v := range p.SecurityGroups {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *NodePoolNodeConfig) Field9DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNodeConfig) Field10DeepEqual(src []*helper.Taint) bool {

	if len(p.Taints) != len(src) {
		return false
	}
	for i, v := range p.Taints {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNodeConfig) Field11DeepEqual(src bool) bool {

	if p.Cordon != src {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field12DeepEqual(src *string) bool {

	if p.PreScript == src {
		return true
	} else if p.PreScript == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PreScript, *src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field13DeepEqual(src *string) bool {

	if p.PostScript == src {
		return true
	} else if p.PostScript == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PostScript, *src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field14DeepEqual(src []string) bool {

	if len(p.SecurityStrategies) != len(src) {
		return false
	}
	for i, v := range p.SecurityStrategies {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *NodePoolNodeConfig) Field15DeepEqual(src *string) bool {

	if p.NamePrefix == src {
		return true
	} else if p.NamePrefix == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NamePrefix, *src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field16DeepEqual(src *int32) bool {

	if p.Amount == src {
		return true
	} else if p.Amount == nil || src == nil {
		return false
	}
	if *p.Amount != *src {
		return false
	}
	return true
}
func (p *NodePoolNodeConfig) Field17DeepEqual(src []string) bool {

	if len(p.SubnetIds) != len(src) {
		return false
	}
	for i, v := range p.SubnetIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type NodePoolNode struct {
	Region         *iaas.Region          `thrift:"Region,1,required" json:"Region"`
	Zone           *iaas.Zone            `thrift:"Zone,2" json:"Zone,omitempty"`
	Vpc            *iaas.Vpc             `thrift:"Vpc,3,required" json:"Vpc"`
	Subnet         *iaas.Subnet          `thrift:"Subnet,4" json:"Subnet,omitempty"`
	InstanceType   *InstanceType         `thrift:"InstanceType,5,required" json:"InstanceType"`
	Image          *iaas.Image           `thrift:"Image,6,required" json:"Image"`
	RootVolume     *Volume               `thrift:"RootVolume,7,required" json:"RootVolume"`
	DataVolumes    []*Volume             `thrift:"DataVolumes,8,required" json:"DataVolumes"`
	Login          *Login                `thrift:"Login,9,required" json:"Login"`
	SecurityGroups []*iaas.SecurityGroup `thrift:"SecurityGroups,10,required" json:"SecurityGroups"`
	Labels         []*helper.Label       `thrift:"Labels,11,required" validate:"k8sLabel"`
	Taints         []*helper.Taint       `thrift:"Taints,12,required" json:"Taints"`
	Zones          []*iaas.Zone          `thrift:"Zones,13" json:"Zones,omitempty"`
	Subnets        []*iaas.Subnet        `thrift:"Subnets,14" json:"Subnets,omitempty"`
}

func NewNodePoolNode() *NodePoolNode {
	return &NodePoolNode{}
}

var NodePoolNode_Region_DEFAULT *iaas.Region

func (p *NodePoolNode) GetRegion() (v *iaas.Region) {
	if !p.IsSetRegion() {
		return NodePoolNode_Region_DEFAULT
	}
	return p.Region
}

var NodePoolNode_Zone_DEFAULT *iaas.Zone

func (p *NodePoolNode) GetZone() (v *iaas.Zone) {
	if !p.IsSetZone() {
		return NodePoolNode_Zone_DEFAULT
	}
	return p.Zone
}

var NodePoolNode_Vpc_DEFAULT *iaas.Vpc

func (p *NodePoolNode) GetVpc() (v *iaas.Vpc) {
	if !p.IsSetVpc() {
		return NodePoolNode_Vpc_DEFAULT
	}
	return p.Vpc
}

var NodePoolNode_Subnet_DEFAULT *iaas.Subnet

func (p *NodePoolNode) GetSubnet() (v *iaas.Subnet) {
	if !p.IsSetSubnet() {
		return NodePoolNode_Subnet_DEFAULT
	}
	return p.Subnet
}

var NodePoolNode_InstanceType_DEFAULT *InstanceType

func (p *NodePoolNode) GetInstanceType() (v *InstanceType) {
	if !p.IsSetInstanceType() {
		return NodePoolNode_InstanceType_DEFAULT
	}
	return p.InstanceType
}

var NodePoolNode_Image_DEFAULT *iaas.Image

func (p *NodePoolNode) GetImage() (v *iaas.Image) {
	if !p.IsSetImage() {
		return NodePoolNode_Image_DEFAULT
	}
	return p.Image
}

var NodePoolNode_RootVolume_DEFAULT *Volume

func (p *NodePoolNode) GetRootVolume() (v *Volume) {
	if !p.IsSetRootVolume() {
		return NodePoolNode_RootVolume_DEFAULT
	}
	return p.RootVolume
}

func (p *NodePoolNode) GetDataVolumes() (v []*Volume) {
	return p.DataVolumes
}

var NodePoolNode_Login_DEFAULT *Login

func (p *NodePoolNode) GetLogin() (v *Login) {
	if !p.IsSetLogin() {
		return NodePoolNode_Login_DEFAULT
	}
	return p.Login
}

func (p *NodePoolNode) GetSecurityGroups() (v []*iaas.SecurityGroup) {
	return p.SecurityGroups
}

func (p *NodePoolNode) GetLabels() (v []*helper.Label) {
	return p.Labels
}

func (p *NodePoolNode) GetTaints() (v []*helper.Taint) {
	return p.Taints
}

var NodePoolNode_Zones_DEFAULT []*iaas.Zone

func (p *NodePoolNode) GetZones() (v []*iaas.Zone) {
	if !p.IsSetZones() {
		return NodePoolNode_Zones_DEFAULT
	}
	return p.Zones
}

var NodePoolNode_Subnets_DEFAULT []*iaas.Subnet

func (p *NodePoolNode) GetSubnets() (v []*iaas.Subnet) {
	if !p.IsSetSubnets() {
		return NodePoolNode_Subnets_DEFAULT
	}
	return p.Subnets
}
func (p *NodePoolNode) SetRegion(val *iaas.Region) {
	p.Region = val
}
func (p *NodePoolNode) SetZone(val *iaas.Zone) {
	p.Zone = val
}
func (p *NodePoolNode) SetVpc(val *iaas.Vpc) {
	p.Vpc = val
}
func (p *NodePoolNode) SetSubnet(val *iaas.Subnet) {
	p.Subnet = val
}
func (p *NodePoolNode) SetInstanceType(val *InstanceType) {
	p.InstanceType = val
}
func (p *NodePoolNode) SetImage(val *iaas.Image) {
	p.Image = val
}
func (p *NodePoolNode) SetRootVolume(val *Volume) {
	p.RootVolume = val
}
func (p *NodePoolNode) SetDataVolumes(val []*Volume) {
	p.DataVolumes = val
}
func (p *NodePoolNode) SetLogin(val *Login) {
	p.Login = val
}
func (p *NodePoolNode) SetSecurityGroups(val []*iaas.SecurityGroup) {
	p.SecurityGroups = val
}
func (p *NodePoolNode) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *NodePoolNode) SetTaints(val []*helper.Taint) {
	p.Taints = val
}
func (p *NodePoolNode) SetZones(val []*iaas.Zone) {
	p.Zones = val
}
func (p *NodePoolNode) SetSubnets(val []*iaas.Subnet) {
	p.Subnets = val
}

var fieldIDToName_NodePoolNode = map[int16]string{
	1:  "Region",
	2:  "Zone",
	3:  "Vpc",
	4:  "Subnet",
	5:  "InstanceType",
	6:  "Image",
	7:  "RootVolume",
	8:  "DataVolumes",
	9:  "Login",
	10: "SecurityGroups",
	11: "Labels",
	12: "Taints",
	13: "Zones",
	14: "Subnets",
}

func (p *NodePoolNode) IsSetRegion() bool {
	return p.Region != nil
}

func (p *NodePoolNode) IsSetZone() bool {
	return p.Zone != nil
}

func (p *NodePoolNode) IsSetVpc() bool {
	return p.Vpc != nil
}

func (p *NodePoolNode) IsSetSubnet() bool {
	return p.Subnet != nil
}

func (p *NodePoolNode) IsSetInstanceType() bool {
	return p.InstanceType != nil
}

func (p *NodePoolNode) IsSetImage() bool {
	return p.Image != nil
}

func (p *NodePoolNode) IsSetRootVolume() bool {
	return p.RootVolume != nil
}

func (p *NodePoolNode) IsSetLogin() bool {
	return p.Login != nil
}

func (p *NodePoolNode) IsSetZones() bool {
	return p.Zones != nil
}

func (p *NodePoolNode) IsSetSubnets() bool {
	return p.Subnets != nil
}

func (p *NodePoolNode) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRegion bool = false
	var issetVpc bool = false
	var issetInstanceType bool = false
	var issetImage bool = false
	var issetRootVolume bool = false
	var issetDataVolumes bool = false
	var issetLogin bool = false
	var issetSecurityGroups bool = false
	var issetLabels bool = false
	var issetTaints bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRegion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpc = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetRootVolume = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetDataVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetLogin = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecurityGroups = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaints = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRegion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVpc {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetInstanceType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetRootVolume {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetDataVolumes {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetLogin {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetSecurityGroups {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetTaints {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodePoolNode[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodePoolNode[fieldId]))
}

func (p *NodePoolNode) ReadField1(iprot thrift.TProtocol) error {
	p.Region = iaas.NewRegion()
	if err := p.Region.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField2(iprot thrift.TProtocol) error {
	p.Zone = iaas.NewZone()
	if err := p.Zone.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField3(iprot thrift.TProtocol) error {
	p.Vpc = iaas.NewVpc()
	if err := p.Vpc.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField4(iprot thrift.TProtocol) error {
	p.Subnet = iaas.NewSubnet()
	if err := p.Subnet.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField5(iprot thrift.TProtocol) error {
	p.InstanceType = NewInstanceType()
	if err := p.InstanceType.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField6(iprot thrift.TProtocol) error {
	p.Image = iaas.NewImage()
	if err := p.Image.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField7(iprot thrift.TProtocol) error {
	p.RootVolume = NewVolume()
	if err := p.RootVolume.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DataVolumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.DataVolumes = append(p.DataVolumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField9(iprot thrift.TProtocol) error {
	p.Login = NewLogin()
	if err := p.Login.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityGroups = make([]*iaas.SecurityGroup, 0, size)
	for i := 0; i < size; i++ {
		_elem := iaas.NewSecurityGroup()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SecurityGroups = append(p.SecurityGroups, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Taints = make([]*helper.Taint, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewTaint()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Taints = append(p.Taints, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Zones = make([]*iaas.Zone, 0, size)
	for i := 0; i < size; i++ {
		_elem := iaas.NewZone()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Zones = append(p.Zones, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Subnets = make([]*iaas.Subnet, 0, size)
	for i := 0; i < size; i++ {
		_elem := iaas.NewSubnet()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Subnets = append(p.Subnets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolNode) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePoolNode"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodePoolNode) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Region", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Region.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodePoolNode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetZone() {
		if err = oprot.WriteFieldBegin("Zone", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Zone.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodePoolNode) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Vpc", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Vpc.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodePoolNode) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnet() {
		if err = oprot.WriteFieldBegin("Subnet", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Subnet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodePoolNode) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceType", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InstanceType.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NodePoolNode) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Image", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Image.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NodePoolNode) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RootVolume", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.RootVolume.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NodePoolNode) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DataVolumes", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DataVolumes)); err != nil {
		return err
	}
	for _, v := range p.DataVolumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NodePoolNode) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Login", thrift.STRUCT, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Login.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NodePoolNode) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SecurityGroups", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SecurityGroups)); err != nil {
		return err
	}
	for _, v := range p.SecurityGroups {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NodePoolNode) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NodePoolNode) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Taints", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Taints)); err != nil {
		return err
	}
	for _, v := range p.Taints {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *NodePoolNode) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetZones() {
		if err = oprot.WriteFieldBegin("Zones", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Zones)); err != nil {
			return err
		}
		for _, v := range p.Zones {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *NodePoolNode) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnets() {
		if err = oprot.WriteFieldBegin("Subnets", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Subnets)); err != nil {
			return err
		}
		for _, v := range p.Subnets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *NodePoolNode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodePoolNode(%+v)", *p)
}

func (p *NodePoolNode) DeepEqual(ano *NodePoolNode) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Region) {
		return false
	}
	if !p.Field2DeepEqual(ano.Zone) {
		return false
	}
	if !p.Field3DeepEqual(ano.Vpc) {
		return false
	}
	if !p.Field4DeepEqual(ano.Subnet) {
		return false
	}
	if !p.Field5DeepEqual(ano.InstanceType) {
		return false
	}
	if !p.Field6DeepEqual(ano.Image) {
		return false
	}
	if !p.Field7DeepEqual(ano.RootVolume) {
		return false
	}
	if !p.Field8DeepEqual(ano.DataVolumes) {
		return false
	}
	if !p.Field9DeepEqual(ano.Login) {
		return false
	}
	if !p.Field10DeepEqual(ano.SecurityGroups) {
		return false
	}
	if !p.Field11DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field12DeepEqual(ano.Taints) {
		return false
	}
	if !p.Field13DeepEqual(ano.Zones) {
		return false
	}
	if !p.Field14DeepEqual(ano.Subnets) {
		return false
	}
	return true
}

func (p *NodePoolNode) Field1DeepEqual(src *iaas.Region) bool {

	if !p.Region.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field2DeepEqual(src *iaas.Zone) bool {

	if !p.Zone.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field3DeepEqual(src *iaas.Vpc) bool {

	if !p.Vpc.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field4DeepEqual(src *iaas.Subnet) bool {

	if !p.Subnet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field5DeepEqual(src *InstanceType) bool {

	if !p.InstanceType.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field6DeepEqual(src *iaas.Image) bool {

	if !p.Image.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field7DeepEqual(src *Volume) bool {

	if !p.RootVolume.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field8DeepEqual(src []*Volume) bool {

	if len(p.DataVolumes) != len(src) {
		return false
	}
	for i, v := range p.DataVolumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNode) Field9DeepEqual(src *Login) bool {

	if !p.Login.DeepEqual(src) {
		return false
	}
	return true
}
func (p *NodePoolNode) Field10DeepEqual(src []*iaas.SecurityGroup) bool {

	if len(p.SecurityGroups) != len(src) {
		return false
	}
	for i, v := range p.SecurityGroups {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNode) Field11DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNode) Field12DeepEqual(src []*helper.Taint) bool {

	if len(p.Taints) != len(src) {
		return false
	}
	for i, v := range p.Taints {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNode) Field13DeepEqual(src []*iaas.Zone) bool {

	if len(p.Zones) != len(src) {
		return false
	}
	for i, v := range p.Zones {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodePoolNode) Field14DeepEqual(src []*iaas.Subnet) bool {

	if len(p.Subnets) != len(src) {
		return false
	}
	for i, v := range p.Subnets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateNodePoolRequest struct {
	ClusterId       string                   `thrift:"ClusterId,1,required" validate:"required"`
	Name            string                   `thrift:"Name,2,required" validate:"required,k8sAlias"`
	ChargeType      *string                  `thrift:"ChargeType,3" json:"ChargeType" validate:"oneof=PostPaid" default:"PostPaid"`
	NodeAutoscaling *NodePoolNodeAutoscaling `thrift:"NodeAutoscaling,4" json:"NodeAutoscaling,omitempty"`
	NodeTemplate    *NodePoolNodeConfig      `thrift:"NodeTemplate,5,required" validate:"required"`
	Top             *base.TopParam           `thrift:"Top,254,required" json:"Top"`
	Base            *base.Base               `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCreateNodePoolRequest() *CreateNodePoolRequest {
	return &CreateNodePoolRequest{}
}

func (p *CreateNodePoolRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateNodePoolRequest) GetName() (v string) {
	return p.Name
}

var CreateNodePoolRequest_ChargeType_DEFAULT string

func (p *CreateNodePoolRequest) GetChargeType() (v string) {
	if !p.IsSetChargeType() {
		return CreateNodePoolRequest_ChargeType_DEFAULT
	}
	return *p.ChargeType
}

var CreateNodePoolRequest_NodeAutoscaling_DEFAULT *NodePoolNodeAutoscaling

func (p *CreateNodePoolRequest) GetNodeAutoscaling() (v *NodePoolNodeAutoscaling) {
	if !p.IsSetNodeAutoscaling() {
		return CreateNodePoolRequest_NodeAutoscaling_DEFAULT
	}
	return p.NodeAutoscaling
}

var CreateNodePoolRequest_NodeTemplate_DEFAULT *NodePoolNodeConfig

func (p *CreateNodePoolRequest) GetNodeTemplate() (v *NodePoolNodeConfig) {
	if !p.IsSetNodeTemplate() {
		return CreateNodePoolRequest_NodeTemplate_DEFAULT
	}
	return p.NodeTemplate
}

var CreateNodePoolRequest_Top_DEFAULT *base.TopParam

func (p *CreateNodePoolRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateNodePoolRequest_Top_DEFAULT
	}
	return p.Top
}

var CreateNodePoolRequest_Base_DEFAULT *base.Base

func (p *CreateNodePoolRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateNodePoolRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateNodePoolRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateNodePoolRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateNodePoolRequest) SetChargeType(val *string) {
	p.ChargeType = val
}
func (p *CreateNodePoolRequest) SetNodeAutoscaling(val *NodePoolNodeAutoscaling) {
	p.NodeAutoscaling = val
}
func (p *CreateNodePoolRequest) SetNodeTemplate(val *NodePoolNodeConfig) {
	p.NodeTemplate = val
}
func (p *CreateNodePoolRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *CreateNodePoolRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateNodePoolRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	3:   "ChargeType",
	4:   "NodeAutoscaling",
	5:   "NodeTemplate",
	254: "Top",
	255: "Base",
}

func (p *CreateNodePoolRequest) IsSetChargeType() bool {
	return p.ChargeType != nil
}

func (p *CreateNodePoolRequest) IsSetNodeAutoscaling() bool {
	return p.NodeAutoscaling != nil
}

func (p *CreateNodePoolRequest) IsSetNodeTemplate() bool {
	return p.NodeTemplate != nil
}

func (p *CreateNodePoolRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateNodePoolRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateNodePoolRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetNodeTemplate bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeTemplate = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNodeTemplate {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateNodePoolRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateNodePoolRequest[fieldId]))
}

func (p *CreateNodePoolRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateNodePoolRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateNodePoolRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = &v
	}
	return nil
}

func (p *CreateNodePoolRequest) ReadField4(iprot thrift.TProtocol) error {
	p.NodeAutoscaling = NewNodePoolNodeAutoscaling()
	if err := p.NodeAutoscaling.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNodePoolRequest) ReadField5(iprot thrift.TProtocol) error {
	p.NodeTemplate = NewNodePoolNodeConfig()
	if err := p.NodeTemplate.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNodePoolRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNodePoolRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNodePoolRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNodePoolRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetChargeType() {
		if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChargeType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAutoscaling() {
		if err = oprot.WriteFieldBegin("NodeAutoscaling", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAutoscaling.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeTemplate", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NodeTemplate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *CreateNodePoolRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateNodePoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNodePoolRequest(%+v)", *p)
}

func (p *CreateNodePoolRequest) DeepEqual(ano *CreateNodePoolRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field4DeepEqual(ano.NodeAutoscaling) {
		return false
	}
	if !p.Field5DeepEqual(ano.NodeTemplate) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateNodePoolRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateNodePoolRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateNodePoolRequest) Field3DeepEqual(src *string) bool {

	if p.ChargeType == src {
		return true
	} else if p.ChargeType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChargeType, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateNodePoolRequest) Field4DeepEqual(src *NodePoolNodeAutoscaling) bool {

	if !p.NodeAutoscaling.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateNodePoolRequest) Field5DeepEqual(src *NodePoolNodeConfig) bool {

	if !p.NodeTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateNodePoolRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateNodePoolRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateNodePoolResponse struct {
	Id   string     `thrift:"Id,1,required" json:"Id"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCreateNodePoolResponse() *CreateNodePoolResponse {
	return &CreateNodePoolResponse{}
}

func (p *CreateNodePoolResponse) GetId() (v string) {
	return p.Id
}

var CreateNodePoolResponse_Base_DEFAULT *base.Base

func (p *CreateNodePoolResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateNodePoolResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateNodePoolResponse) SetId(val string) {
	p.Id = val
}
func (p *CreateNodePoolResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateNodePoolResponse = map[int16]string{
	1:   "Id",
	255: "Base",
}

func (p *CreateNodePoolResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateNodePoolResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateNodePoolResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateNodePoolResponse[fieldId]))
}

func (p *CreateNodePoolResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *CreateNodePoolResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNodePoolResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNodePoolResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateNodePoolResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateNodePoolResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateNodePoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNodePoolResponse(%+v)", *p)
}

func (p *CreateNodePoolResponse) DeepEqual(ano *CreateNodePoolResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateNodePoolResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *CreateNodePoolResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNodePoolRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required"`
	Id        string         `thrift:"Id,2,required" validate:"required"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNodePoolRequest() *GetNodePoolRequest {
	return &GetNodePoolRequest{}
}

func (p *GetNodePoolRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetNodePoolRequest) GetId() (v string) {
	return p.Id
}

var GetNodePoolRequest_Top_DEFAULT *base.TopParam

func (p *GetNodePoolRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetNodePoolRequest_Top_DEFAULT
	}
	return p.Top
}

var GetNodePoolRequest_Base_DEFAULT *base.Base

func (p *GetNodePoolRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNodePoolRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNodePoolRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetNodePoolRequest) SetId(val string) {
	p.Id = val
}
func (p *GetNodePoolRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetNodePoolRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNodePoolRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	254: "Top",
	255: "Base",
}

func (p *GetNodePoolRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetNodePoolRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNodePoolRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNodePoolRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNodePoolRequest[fieldId]))
}

func (p *GetNodePoolRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetNodePoolRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetNodePoolRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodePoolRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodePoolRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodePoolRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNodePoolRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNodePoolRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNodePoolRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetNodePoolRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNodePoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNodePoolRequest(%+v)", *p)
}

func (p *GetNodePoolRequest) DeepEqual(ano *GetNodePoolRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNodePoolRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodePoolRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NodePoolResource struct {
	TotalCpu            string     `thrift:"TotalCpu,1,required" json:"TotalCpu"`
	UsedCpu             string     `thrift:"UsedCpu,2,required" json:"UsedCpu"`
	FreeCpu             string     `thrift:"FreeCpu,3,required" json:"FreeCpu"`
	UnSchedulableCpu    string     `thrift:"UnSchedulableCpu,4,required" json:"UnSchedulableCpu"`
	TotalMemory         string     `thrift:"TotalMemory,5,required" json:"TotalMemory"`
	UsedMemory          string     `thrift:"UsedMemory,6,required" json:"UsedMemory"`
	FreeMemory          string     `thrift:"FreeMemory,7,required" json:"FreeMemory"`
	UnSchedulableMemory string     `thrift:"UnSchedulableMemory,8,required" json:"UnSchedulableMemory"`
	TotalGpu            string     `thrift:"TotalGpu,9,required" json:"TotalGpu"`
	UsedGpu             string     `thrift:"UsedGpu,10,required" json:"UsedGpu"`
	FreeGpu             string     `thrift:"FreeGpu,11,required" json:"FreeGpu"`
	UnSchedulableGpu    string     `thrift:"UnSchedulableGpu,12,required" json:"UnSchedulableGpu"`
	TotalNode           int32      `thrift:"TotalNode,13,required" json:"TotalNode"`
	AvailableNodeAmount int32      `thrift:"AvailableNodeAmount,14,required" json:"AvailableNodeAmount"`
	ErrorNode           int32      `thrift:"ErrorNode,15,required" json:"ErrorNode"`
	OtherNode           int32      `thrift:"OtherNode,16,required" json:"OtherNode"`
	Base                *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewNodePoolResource() *NodePoolResource {
	return &NodePoolResource{}
}

func (p *NodePoolResource) GetTotalCpu() (v string) {
	return p.TotalCpu
}

func (p *NodePoolResource) GetUsedCpu() (v string) {
	return p.UsedCpu
}

func (p *NodePoolResource) GetFreeCpu() (v string) {
	return p.FreeCpu
}

func (p *NodePoolResource) GetUnSchedulableCpu() (v string) {
	return p.UnSchedulableCpu
}

func (p *NodePoolResource) GetTotalMemory() (v string) {
	return p.TotalMemory
}

func (p *NodePoolResource) GetUsedMemory() (v string) {
	return p.UsedMemory
}

func (p *NodePoolResource) GetFreeMemory() (v string) {
	return p.FreeMemory
}

func (p *NodePoolResource) GetUnSchedulableMemory() (v string) {
	return p.UnSchedulableMemory
}

func (p *NodePoolResource) GetTotalGpu() (v string) {
	return p.TotalGpu
}

func (p *NodePoolResource) GetUsedGpu() (v string) {
	return p.UsedGpu
}

func (p *NodePoolResource) GetFreeGpu() (v string) {
	return p.FreeGpu
}

func (p *NodePoolResource) GetUnSchedulableGpu() (v string) {
	return p.UnSchedulableGpu
}

func (p *NodePoolResource) GetTotalNode() (v int32) {
	return p.TotalNode
}

func (p *NodePoolResource) GetAvailableNodeAmount() (v int32) {
	return p.AvailableNodeAmount
}

func (p *NodePoolResource) GetErrorNode() (v int32) {
	return p.ErrorNode
}

func (p *NodePoolResource) GetOtherNode() (v int32) {
	return p.OtherNode
}

var NodePoolResource_Base_DEFAULT *base.Base

func (p *NodePoolResource) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return NodePoolResource_Base_DEFAULT
	}
	return p.Base
}
func (p *NodePoolResource) SetTotalCpu(val string) {
	p.TotalCpu = val
}
func (p *NodePoolResource) SetUsedCpu(val string) {
	p.UsedCpu = val
}
func (p *NodePoolResource) SetFreeCpu(val string) {
	p.FreeCpu = val
}
func (p *NodePoolResource) SetUnSchedulableCpu(val string) {
	p.UnSchedulableCpu = val
}
func (p *NodePoolResource) SetTotalMemory(val string) {
	p.TotalMemory = val
}
func (p *NodePoolResource) SetUsedMemory(val string) {
	p.UsedMemory = val
}
func (p *NodePoolResource) SetFreeMemory(val string) {
	p.FreeMemory = val
}
func (p *NodePoolResource) SetUnSchedulableMemory(val string) {
	p.UnSchedulableMemory = val
}
func (p *NodePoolResource) SetTotalGpu(val string) {
	p.TotalGpu = val
}
func (p *NodePoolResource) SetUsedGpu(val string) {
	p.UsedGpu = val
}
func (p *NodePoolResource) SetFreeGpu(val string) {
	p.FreeGpu = val
}
func (p *NodePoolResource) SetUnSchedulableGpu(val string) {
	p.UnSchedulableGpu = val
}
func (p *NodePoolResource) SetTotalNode(val int32) {
	p.TotalNode = val
}
func (p *NodePoolResource) SetAvailableNodeAmount(val int32) {
	p.AvailableNodeAmount = val
}
func (p *NodePoolResource) SetErrorNode(val int32) {
	p.ErrorNode = val
}
func (p *NodePoolResource) SetOtherNode(val int32) {
	p.OtherNode = val
}
func (p *NodePoolResource) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_NodePoolResource = map[int16]string{
	1:   "TotalCpu",
	2:   "UsedCpu",
	3:   "FreeCpu",
	4:   "UnSchedulableCpu",
	5:   "TotalMemory",
	6:   "UsedMemory",
	7:   "FreeMemory",
	8:   "UnSchedulableMemory",
	9:   "TotalGpu",
	10:  "UsedGpu",
	11:  "FreeGpu",
	12:  "UnSchedulableGpu",
	13:  "TotalNode",
	14:  "AvailableNodeAmount",
	15:  "ErrorNode",
	16:  "OtherNode",
	255: "Base",
}

func (p *NodePoolResource) IsSetBase() bool {
	return p.Base != nil
}

func (p *NodePoolResource) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCpu bool = false
	var issetUsedCpu bool = false
	var issetFreeCpu bool = false
	var issetUnSchedulableCpu bool = false
	var issetTotalMemory bool = false
	var issetUsedMemory bool = false
	var issetFreeMemory bool = false
	var issetUnSchedulableMemory bool = false
	var issetTotalGpu bool = false
	var issetUsedGpu bool = false
	var issetFreeGpu bool = false
	var issetUnSchedulableGpu bool = false
	var issetTotalNode bool = false
	var issetAvailableNodeAmount bool = false
	var issetErrorNode bool = false
	var issetOtherNode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnSchedulableCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnSchedulableMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetFreeGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnSchedulableGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalNode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvailableNodeAmount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorNode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetOtherNode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCpu {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUsedCpu {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFreeCpu {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUnSchedulableCpu {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTotalMemory {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUsedMemory {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetFreeMemory {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetUnSchedulableMemory {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetTotalGpu {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetUsedGpu {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetFreeGpu {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetUnSchedulableGpu {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetTotalNode {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetAvailableNodeAmount {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetErrorNode {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetOtherNode {
		fieldId = 16
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodePoolResource[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodePoolResource[fieldId]))
}

func (p *NodePoolResource) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalCpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedCpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeCpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnSchedulableCpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalMemory = v
	}
	return nil
}

func (p *NodePoolResource) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedMemory = v
	}
	return nil
}

func (p *NodePoolResource) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeMemory = v
	}
	return nil
}

func (p *NodePoolResource) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnSchedulableMemory = v
	}
	return nil
}

func (p *NodePoolResource) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalGpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedGpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FreeGpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UnSchedulableGpu = v
	}
	return nil
}

func (p *NodePoolResource) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalNode = v
	}
	return nil
}

func (p *NodePoolResource) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AvailableNodeAmount = v
	}
	return nil
}

func (p *NodePoolResource) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ErrorNode = v
	}
	return nil
}

func (p *NodePoolResource) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.OtherNode = v
	}
	return nil
}

func (p *NodePoolResource) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NodePoolResource) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePoolResource"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodePoolResource) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCpu", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodePoolResource) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedCpu", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodePoolResource) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeCpu", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodePoolResource) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnSchedulableCpu", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnSchedulableCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodePoolResource) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalMemory", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NodePoolResource) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedMemory", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NodePoolResource) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeMemory", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NodePoolResource) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnSchedulableMemory", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnSchedulableMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NodePoolResource) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalGpu", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NodePoolResource) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedGpu", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NodePoolResource) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FreeGpu", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FreeGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NodePoolResource) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnSchedulableGpu", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UnSchedulableGpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *NodePoolResource) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalNode", thrift.I32, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalNode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *NodePoolResource) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvailableNodeAmount", thrift.I32, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AvailableNodeAmount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *NodePoolResource) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorNode", thrift.I32, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ErrorNode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *NodePoolResource) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OtherNode", thrift.I32, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OtherNode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *NodePoolResource) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *NodePoolResource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodePoolResource(%+v)", *p)
}

func (p *NodePoolResource) DeepEqual(ano *NodePoolResource) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCpu) {
		return false
	}
	if !p.Field2DeepEqual(ano.UsedCpu) {
		return false
	}
	if !p.Field3DeepEqual(ano.FreeCpu) {
		return false
	}
	if !p.Field4DeepEqual(ano.UnSchedulableCpu) {
		return false
	}
	if !p.Field5DeepEqual(ano.TotalMemory) {
		return false
	}
	if !p.Field6DeepEqual(ano.UsedMemory) {
		return false
	}
	if !p.Field7DeepEqual(ano.FreeMemory) {
		return false
	}
	if !p.Field8DeepEqual(ano.UnSchedulableMemory) {
		return false
	}
	if !p.Field9DeepEqual(ano.TotalGpu) {
		return false
	}
	if !p.Field10DeepEqual(ano.UsedGpu) {
		return false
	}
	if !p.Field11DeepEqual(ano.FreeGpu) {
		return false
	}
	if !p.Field12DeepEqual(ano.UnSchedulableGpu) {
		return false
	}
	if !p.Field13DeepEqual(ano.TotalNode) {
		return false
	}
	if !p.Field14DeepEqual(ano.AvailableNodeAmount) {
		return false
	}
	if !p.Field15DeepEqual(ano.ErrorNode) {
		return false
	}
	if !p.Field16DeepEqual(ano.OtherNode) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *NodePoolResource) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TotalCpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UsedCpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field3DeepEqual(src string) bool {

	if strings.Compare(p.FreeCpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field4DeepEqual(src string) bool {

	if strings.Compare(p.UnSchedulableCpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TotalMemory, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UsedMemory, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field7DeepEqual(src string) bool {

	if strings.Compare(p.FreeMemory, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field8DeepEqual(src string) bool {

	if strings.Compare(p.UnSchedulableMemory, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field9DeepEqual(src string) bool {

	if strings.Compare(p.TotalGpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field10DeepEqual(src string) bool {

	if strings.Compare(p.UsedGpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field11DeepEqual(src string) bool {

	if strings.Compare(p.FreeGpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field12DeepEqual(src string) bool {

	if strings.Compare(p.UnSchedulableGpu, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolResource) Field13DeepEqual(src int32) bool {

	if p.TotalNode != src {
		return false
	}
	return true
}
func (p *NodePoolResource) Field14DeepEqual(src int32) bool {

	if p.AvailableNodeAmount != src {
		return false
	}
	return true
}
func (p *NodePoolResource) Field15DeepEqual(src int32) bool {

	if p.ErrorNode != src {
		return false
	}
	return true
}
func (p *NodePoolResource) Field16DeepEqual(src int32) bool {

	if p.OtherNode != src {
		return false
	}
	return true
}
func (p *NodePoolResource) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNodePoolResponse struct {
	Id              string                   `thrift:"Id,1,required" json:"Id"`
	Name            string                   `thrift:"Name,2,required" json:"Name"`
	ClusterId       string                   `thrift:"ClusterId,3,required" json:"ClusterId"`
	ChargeType      string                   `thrift:"ChargeType,4,required" validate:"required,oneof=PostPaid"`
	Resource        *NodePoolResource        `thrift:"Resource,5,required" json:"Resource"`
	NodeAutoscaling *NodePoolNodeAutoscaling `thrift:"NodeAutoscaling,6,required" json:"NodeAutoscaling"`
	NodeTemplate    *NodePoolNode            `thrift:"NodeTemplate,7,required" json:"NodeTemplate"`
	Status          string                   `thrift:"Status,8,required" json:"Status"`
	EnableFullSync  bool                     `thrift:"EnableFullSync,9,required" json:"EnableFullSync"`
	Base            *base.Base               `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNodePoolResponse() *GetNodePoolResponse {
	return &GetNodePoolResponse{}
}

func (p *GetNodePoolResponse) GetId() (v string) {
	return p.Id
}

func (p *GetNodePoolResponse) GetName() (v string) {
	return p.Name
}

func (p *GetNodePoolResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetNodePoolResponse) GetChargeType() (v string) {
	return p.ChargeType
}

var GetNodePoolResponse_Resource_DEFAULT *NodePoolResource

func (p *GetNodePoolResponse) GetResource() (v *NodePoolResource) {
	if !p.IsSetResource() {
		return GetNodePoolResponse_Resource_DEFAULT
	}
	return p.Resource
}

var GetNodePoolResponse_NodeAutoscaling_DEFAULT *NodePoolNodeAutoscaling

func (p *GetNodePoolResponse) GetNodeAutoscaling() (v *NodePoolNodeAutoscaling) {
	if !p.IsSetNodeAutoscaling() {
		return GetNodePoolResponse_NodeAutoscaling_DEFAULT
	}
	return p.NodeAutoscaling
}

var GetNodePoolResponse_NodeTemplate_DEFAULT *NodePoolNode

func (p *GetNodePoolResponse) GetNodeTemplate() (v *NodePoolNode) {
	if !p.IsSetNodeTemplate() {
		return GetNodePoolResponse_NodeTemplate_DEFAULT
	}
	return p.NodeTemplate
}

func (p *GetNodePoolResponse) GetStatus() (v string) {
	return p.Status
}

func (p *GetNodePoolResponse) GetEnableFullSync() (v bool) {
	return p.EnableFullSync
}

var GetNodePoolResponse_Base_DEFAULT *base.Base

func (p *GetNodePoolResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNodePoolResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNodePoolResponse) SetId(val string) {
	p.Id = val
}
func (p *GetNodePoolResponse) SetName(val string) {
	p.Name = val
}
func (p *GetNodePoolResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetNodePoolResponse) SetChargeType(val string) {
	p.ChargeType = val
}
func (p *GetNodePoolResponse) SetResource(val *NodePoolResource) {
	p.Resource = val
}
func (p *GetNodePoolResponse) SetNodeAutoscaling(val *NodePoolNodeAutoscaling) {
	p.NodeAutoscaling = val
}
func (p *GetNodePoolResponse) SetNodeTemplate(val *NodePoolNode) {
	p.NodeTemplate = val
}
func (p *GetNodePoolResponse) SetStatus(val string) {
	p.Status = val
}
func (p *GetNodePoolResponse) SetEnableFullSync(val bool) {
	p.EnableFullSync = val
}
func (p *GetNodePoolResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNodePoolResponse = map[int16]string{
	1:   "Id",
	2:   "Name",
	3:   "ClusterId",
	4:   "ChargeType",
	5:   "Resource",
	6:   "NodeAutoscaling",
	7:   "NodeTemplate",
	8:   "Status",
	9:   "EnableFullSync",
	255: "Base",
}

func (p *GetNodePoolResponse) IsSetResource() bool {
	return p.Resource != nil
}

func (p *GetNodePoolResponse) IsSetNodeAutoscaling() bool {
	return p.NodeAutoscaling != nil
}

func (p *GetNodePoolResponse) IsSetNodeTemplate() bool {
	return p.NodeTemplate != nil
}

func (p *GetNodePoolResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNodePoolResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetClusterId bool = false
	var issetChargeType bool = false
	var issetResource bool = false
	var issetNodeAutoscaling bool = false
	var issetNodeTemplate bool = false
	var issetStatus bool = false
	var issetEnableFullSync bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetChargeType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetResource = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeAutoscaling = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeTemplate = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnableFullSync = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetClusterId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetChargeType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetResource {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNodeAutoscaling {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetNodeTemplate {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetEnableFullSync {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNodePoolResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNodePoolResponse[fieldId]))
}

func (p *GetNodePoolResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChargeType = v
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField5(iprot thrift.TProtocol) error {
	p.Resource = NewNodePoolResource()
	if err := p.Resource.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField6(iprot thrift.TProtocol) error {
	p.NodeAutoscaling = NewNodePoolNodeAutoscaling()
	if err := p.NodeAutoscaling.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField7(iprot thrift.TProtocol) error {
	p.NodeTemplate = NewNodePoolNode()
	if err := p.NodeTemplate.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableFullSync = v
	}
	return nil
}

func (p *GetNodePoolResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNodePoolResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodePoolResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChargeType", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChargeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Resource", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Resource.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeAutoscaling", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NodeAutoscaling.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeTemplate", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NodeTemplate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EnableFullSync", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.EnableFullSync); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetNodePoolResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNodePoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNodePoolResponse(%+v)", *p)
}

func (p *GetNodePoolResponse) DeepEqual(ano *GetNodePoolResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field4DeepEqual(ano.ChargeType) {
		return false
	}
	if !p.Field5DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field6DeepEqual(ano.NodeAutoscaling) {
		return false
	}
	if !p.Field7DeepEqual(ano.NodeTemplate) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	if !p.Field9DeepEqual(ano.EnableFullSync) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNodePoolResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ChargeType, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field5DeepEqual(src *NodePoolResource) bool {

	if !p.Resource.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field6DeepEqual(src *NodePoolNodeAutoscaling) bool {

	if !p.NodeAutoscaling.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field7DeepEqual(src *NodePoolNode) bool {

	if !p.NodeTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field9DeepEqual(src bool) bool {

	if p.EnableFullSync != src {
		return false
	}
	return true
}
func (p *GetNodePoolResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNodePoolRequest struct {
	ClusterId       string                   `thrift:"ClusterId,1,required" validate:"required"`
	Id              string                   `thrift:"Id,2,required" validate:"required"`
	Name            *string                  `thrift:"Name,3" json:"Name,omitempty"`
	Amount          *int32                   `thrift:"Amount,4" json:"Amount,omitempty"`
	NodeAutoscaling *NodePoolNodeAutoscaling `thrift:"NodeAutoscaling,5" json:"NodeAutoscaling,omitempty"`
	Labels          []*helper.Label          `thrift:"Labels,6" validate:"k8sLabel"`
	Taints          []*helper.Taint          `thrift:"Taints,7" json:"Taints,omitempty"`
	EnableFullSync  *bool                    `thrift:"EnableFullSync,8" json:"EnableFullSync,omitempty"`
	Top             *base.TopParam           `thrift:"Top,254,required" json:"Top"`
	Base            *base.Base               `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNodePoolRequest() *UpdateNodePoolRequest {
	return &UpdateNodePoolRequest{}
}

func (p *UpdateNodePoolRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *UpdateNodePoolRequest) GetId() (v string) {
	return p.Id
}

var UpdateNodePoolRequest_Name_DEFAULT string

func (p *UpdateNodePoolRequest) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateNodePoolRequest_Name_DEFAULT
	}
	return *p.Name
}

var UpdateNodePoolRequest_Amount_DEFAULT int32

func (p *UpdateNodePoolRequest) GetAmount() (v int32) {
	if !p.IsSetAmount() {
		return UpdateNodePoolRequest_Amount_DEFAULT
	}
	return *p.Amount
}

var UpdateNodePoolRequest_NodeAutoscaling_DEFAULT *NodePoolNodeAutoscaling

func (p *UpdateNodePoolRequest) GetNodeAutoscaling() (v *NodePoolNodeAutoscaling) {
	if !p.IsSetNodeAutoscaling() {
		return UpdateNodePoolRequest_NodeAutoscaling_DEFAULT
	}
	return p.NodeAutoscaling
}

var UpdateNodePoolRequest_Labels_DEFAULT []*helper.Label

func (p *UpdateNodePoolRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return UpdateNodePoolRequest_Labels_DEFAULT
	}
	return p.Labels
}

var UpdateNodePoolRequest_Taints_DEFAULT []*helper.Taint

func (p *UpdateNodePoolRequest) GetTaints() (v []*helper.Taint) {
	if !p.IsSetTaints() {
		return UpdateNodePoolRequest_Taints_DEFAULT
	}
	return p.Taints
}

var UpdateNodePoolRequest_EnableFullSync_DEFAULT bool

func (p *UpdateNodePoolRequest) GetEnableFullSync() (v bool) {
	if !p.IsSetEnableFullSync() {
		return UpdateNodePoolRequest_EnableFullSync_DEFAULT
	}
	return *p.EnableFullSync
}

var UpdateNodePoolRequest_Top_DEFAULT *base.TopParam

func (p *UpdateNodePoolRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateNodePoolRequest_Top_DEFAULT
	}
	return p.Top
}

var UpdateNodePoolRequest_Base_DEFAULT *base.Base

func (p *UpdateNodePoolRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNodePoolRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNodePoolRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *UpdateNodePoolRequest) SetId(val string) {
	p.Id = val
}
func (p *UpdateNodePoolRequest) SetName(val *string) {
	p.Name = val
}
func (p *UpdateNodePoolRequest) SetAmount(val *int32) {
	p.Amount = val
}
func (p *UpdateNodePoolRequest) SetNodeAutoscaling(val *NodePoolNodeAutoscaling) {
	p.NodeAutoscaling = val
}
func (p *UpdateNodePoolRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *UpdateNodePoolRequest) SetTaints(val []*helper.Taint) {
	p.Taints = val
}
func (p *UpdateNodePoolRequest) SetEnableFullSync(val *bool) {
	p.EnableFullSync = val
}
func (p *UpdateNodePoolRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpdateNodePoolRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNodePoolRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "Name",
	4:   "Amount",
	5:   "NodeAutoscaling",
	6:   "Labels",
	7:   "Taints",
	8:   "EnableFullSync",
	254: "Top",
	255: "Base",
}

func (p *UpdateNodePoolRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateNodePoolRequest) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *UpdateNodePoolRequest) IsSetNodeAutoscaling() bool {
	return p.NodeAutoscaling != nil
}

func (p *UpdateNodePoolRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *UpdateNodePoolRequest) IsSetTaints() bool {
	return p.Taints != nil
}

func (p *UpdateNodePoolRequest) IsSetEnableFullSync() bool {
	return p.EnableFullSync != nil
}

func (p *UpdateNodePoolRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateNodePoolRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNodePoolRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNodePoolRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNodePoolRequest[fieldId]))
}

func (p *UpdateNodePoolRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Amount = &v
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField5(iprot thrift.TProtocol) error {
	p.NodeAutoscaling = NewNodePoolNodeAutoscaling()
	if err := p.NodeAutoscaling.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Taints = make([]*helper.Taint, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewTaint()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Taints = append(p.Taints, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.EnableFullSync = &v
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodePoolRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodePoolRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNodePoolRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAmount() {
		if err = oprot.WriteFieldBegin("Amount", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Amount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAutoscaling() {
		if err = oprot.WriteFieldBegin("NodeAutoscaling", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAutoscaling.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaints() {
		if err = oprot.WriteFieldBegin("Taints", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Taints)); err != nil {
			return err
		}
		for _, v := range p.Taints {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableFullSync() {
		if err = oprot.WriteFieldBegin("EnableFullSync", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EnableFullSync); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNodePoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNodePoolRequest(%+v)", *p)
}

func (p *UpdateNodePoolRequest) DeepEqual(ano *UpdateNodePoolRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Amount) {
		return false
	}
	if !p.Field5DeepEqual(ano.NodeAutoscaling) {
		return false
	}
	if !p.Field6DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field7DeepEqual(ano.Taints) {
		return false
	}
	if !p.Field8DeepEqual(ano.EnableFullSync) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNodePoolRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field4DeepEqual(src *int32) bool {

	if p.Amount == src {
		return true
	} else if p.Amount == nil || src == nil {
		return false
	}
	if *p.Amount != *src {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field5DeepEqual(src *NodePoolNodeAutoscaling) bool {

	if !p.NodeAutoscaling.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field6DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateNodePoolRequest) Field7DeepEqual(src []*helper.Taint) bool {

	if len(p.Taints) != len(src) {
		return false
	}
	for i, v := range p.Taints {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateNodePoolRequest) Field8DeepEqual(src *bool) bool {

	if p.EnableFullSync == src {
		return true
	} else if p.EnableFullSync == nil || src == nil {
		return false
	}
	if *p.EnableFullSync != *src {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNodePoolRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNodePoolResponse struct {
	Id   string     `thrift:"Id,1,required" validate:"required"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNodePoolResponse() *UpdateNodePoolResponse {
	return &UpdateNodePoolResponse{}
}

func (p *UpdateNodePoolResponse) GetId() (v string) {
	return p.Id
}

var UpdateNodePoolResponse_Base_DEFAULT *base.Base

func (p *UpdateNodePoolResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNodePoolResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNodePoolResponse) SetId(val string) {
	p.Id = val
}
func (p *UpdateNodePoolResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNodePoolResponse = map[int16]string{
	1:   "Id",
	255: "Base",
}

func (p *UpdateNodePoolResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNodePoolResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNodePoolResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNodePoolResponse[fieldId]))
}

func (p *UpdateNodePoolResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *UpdateNodePoolResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNodePoolResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNodePoolResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNodePoolResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNodePoolResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNodePoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNodePoolResponse(%+v)", *p)
}

func (p *UpdateNodePoolResponse) DeepEqual(ano *UpdateNodePoolResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNodePoolResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNodePoolResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteNodePoolRequest struct {
	ClusterId             string         `thrift:"ClusterId,1,required" validate:"required"`
	Id                    string         `thrift:"Id,2,required" validate:"required"`
	SyncDeleteEcsInstance *bool          `thrift:"SyncDeleteEcsInstance,3" json:"SyncDeleteEcsInstance,omitempty"`
	Top                   *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base                  *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewDeleteNodePoolRequest() *DeleteNodePoolRequest {
	return &DeleteNodePoolRequest{}
}

func (p *DeleteNodePoolRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *DeleteNodePoolRequest) GetId() (v string) {
	return p.Id
}

var DeleteNodePoolRequest_SyncDeleteEcsInstance_DEFAULT bool

func (p *DeleteNodePoolRequest) GetSyncDeleteEcsInstance() (v bool) {
	if !p.IsSetSyncDeleteEcsInstance() {
		return DeleteNodePoolRequest_SyncDeleteEcsInstance_DEFAULT
	}
	return *p.SyncDeleteEcsInstance
}

var DeleteNodePoolRequest_Top_DEFAULT *base.TopParam

func (p *DeleteNodePoolRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return DeleteNodePoolRequest_Top_DEFAULT
	}
	return p.Top
}

var DeleteNodePoolRequest_Base_DEFAULT *base.Base

func (p *DeleteNodePoolRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return DeleteNodePoolRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteNodePoolRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *DeleteNodePoolRequest) SetId(val string) {
	p.Id = val
}
func (p *DeleteNodePoolRequest) SetSyncDeleteEcsInstance(val *bool) {
	p.SyncDeleteEcsInstance = val
}
func (p *DeleteNodePoolRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *DeleteNodePoolRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteNodePoolRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "SyncDeleteEcsInstance",
	254: "Top",
	255: "Base",
}

func (p *DeleteNodePoolRequest) IsSetSyncDeleteEcsInstance() bool {
	return p.SyncDeleteEcsInstance != nil
}

func (p *DeleteNodePoolRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *DeleteNodePoolRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteNodePoolRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteNodePoolRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeleteNodePoolRequest[fieldId]))
}

func (p *DeleteNodePoolRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *DeleteNodePoolRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *DeleteNodePoolRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.SyncDeleteEcsInstance = &v
	}
	return nil
}

func (p *DeleteNodePoolRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodePoolRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodePoolRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodePoolRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNodePoolRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteNodePoolRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteNodePoolRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSyncDeleteEcsInstance() {
		if err = oprot.WriteFieldBegin("SyncDeleteEcsInstance", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SyncDeleteEcsInstance); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DeleteNodePoolRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *DeleteNodePoolRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteNodePoolRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNodePoolRequest(%+v)", *p)
}

func (p *DeleteNodePoolRequest) DeepEqual(ano *DeleteNodePoolRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.SyncDeleteEcsInstance) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteNodePoolRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteNodePoolRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteNodePoolRequest) Field3DeepEqual(src *bool) bool {

	if p.SyncDeleteEcsInstance == src {
		return true
	} else if p.SyncDeleteEcsInstance == nil || src == nil {
		return false
	}
	if *p.SyncDeleteEcsInstance != *src {
		return false
	}
	return true
}
func (p *DeleteNodePoolRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DeleteNodePoolRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteNodePoolResponse struct {
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewDeleteNodePoolResponse() *DeleteNodePoolResponse {
	return &DeleteNodePoolResponse{}
}

var DeleteNodePoolResponse_Base_DEFAULT *base.Base

func (p *DeleteNodePoolResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return DeleteNodePoolResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteNodePoolResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteNodePoolResponse = map[int16]string{
	255: "Base",
}

func (p *DeleteNodePoolResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteNodePoolResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteNodePoolResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteNodePoolResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNodePoolResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodePoolResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNodePoolResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteNodePoolResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNodePoolResponse(%+v)", *p)
}

func (p *DeleteNodePoolResponse) DeepEqual(ano *DeleteNodePoolResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteNodePoolResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodePoolScalingRecordsFilter struct {
	StartTime *string `thrift:"StartTime,1" json:"StartTime,omitempty"`
	EndTime   *string `thrift:"EndTime,2" json:"EndTime,omitempty"`
}

func NewListNodePoolScalingRecordsFilter() *ListNodePoolScalingRecordsFilter {
	return &ListNodePoolScalingRecordsFilter{}
}

var ListNodePoolScalingRecordsFilter_StartTime_DEFAULT string

func (p *ListNodePoolScalingRecordsFilter) GetStartTime() (v string) {
	if !p.IsSetStartTime() {
		return ListNodePoolScalingRecordsFilter_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ListNodePoolScalingRecordsFilter_EndTime_DEFAULT string

func (p *ListNodePoolScalingRecordsFilter) GetEndTime() (v string) {
	if !p.IsSetEndTime() {
		return ListNodePoolScalingRecordsFilter_EndTime_DEFAULT
	}
	return *p.EndTime
}
func (p *ListNodePoolScalingRecordsFilter) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *ListNodePoolScalingRecordsFilter) SetEndTime(val *string) {
	p.EndTime = val
}

var fieldIDToName_ListNodePoolScalingRecordsFilter = map[int16]string{
	1: "StartTime",
	2: "EndTime",
}

func (p *ListNodePoolScalingRecordsFilter) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ListNodePoolScalingRecordsFilter) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *ListNodePoolScalingRecordsFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolScalingRecordsFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsFilter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsFilter) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolScalingRecordsFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("EndTime", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolScalingRecordsFilter(%+v)", *p)
}

func (p *ListNodePoolScalingRecordsFilter) DeepEqual(ano *ListNodePoolScalingRecordsFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndTime) {
		return false
	}
	return true
}

func (p *ListNodePoolScalingRecordsFilter) Field1DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsFilter) Field2DeepEqual(src *string) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndTime, *src) != 0 {
		return false
	}
	return true
}

type ListNodePoolScalingRecordsRequest struct {
	ClusterId  string                            `thrift:"ClusterId,1,required" validate:"required"`
	Id         string                            `thrift:"Id,2,required" validate:"required"`
	PageNumber int32                             `thrift:"PageNumber,3" json:"PageNumber" default:"1"`
	PageSize   int32                             `thrift:"PageSize,4" json:"PageSize" default:"100"`
	Filter     *ListNodePoolScalingRecordsFilter `thrift:"Filter,5" json:"Filter,omitempty"`
	Top        *base.TopParam                    `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base                        `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodePoolScalingRecordsRequest() *ListNodePoolScalingRecordsRequest {
	return &ListNodePoolScalingRecordsRequest{

		PageNumber: 1,
		PageSize:   100,
	}
}

func (p *ListNodePoolScalingRecordsRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *ListNodePoolScalingRecordsRequest) GetId() (v string) {
	return p.Id
}

var ListNodePoolScalingRecordsRequest_PageNumber_DEFAULT int32 = 1

func (p *ListNodePoolScalingRecordsRequest) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListNodePoolScalingRecordsRequest_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListNodePoolScalingRecordsRequest_PageSize_DEFAULT int32 = 100

func (p *ListNodePoolScalingRecordsRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListNodePoolScalingRecordsRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListNodePoolScalingRecordsRequest_Filter_DEFAULT *ListNodePoolScalingRecordsFilter

func (p *ListNodePoolScalingRecordsRequest) GetFilter() (v *ListNodePoolScalingRecordsFilter) {
	if !p.IsSetFilter() {
		return ListNodePoolScalingRecordsRequest_Filter_DEFAULT
	}
	return p.Filter
}

var ListNodePoolScalingRecordsRequest_Top_DEFAULT *base.TopParam

func (p *ListNodePoolScalingRecordsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNodePoolScalingRecordsRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNodePoolScalingRecordsRequest_Base_DEFAULT *base.Base

func (p *ListNodePoolScalingRecordsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodePoolScalingRecordsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodePoolScalingRecordsRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNodePoolScalingRecordsRequest) SetId(val string) {
	p.Id = val
}
func (p *ListNodePoolScalingRecordsRequest) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListNodePoolScalingRecordsRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListNodePoolScalingRecordsRequest) SetFilter(val *ListNodePoolScalingRecordsFilter) {
	p.Filter = val
}
func (p *ListNodePoolScalingRecordsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNodePoolScalingRecordsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodePoolScalingRecordsRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "PageNumber",
	4:   "PageSize",
	5:   "Filter",
	254: "Top",
	255: "Base",
}

func (p *ListNodePoolScalingRecordsRequest) IsSetPageNumber() bool {
	return p.PageNumber != ListNodePoolScalingRecordsRequest_PageNumber_DEFAULT
}

func (p *ListNodePoolScalingRecordsRequest) IsSetPageSize() bool {
	return p.PageSize != ListNodePoolScalingRecordsRequest_PageSize_DEFAULT
}

func (p *ListNodePoolScalingRecordsRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListNodePoolScalingRecordsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNodePoolScalingRecordsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodePoolScalingRecordsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolScalingRecordsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodePoolScalingRecordsRequest[fieldId]))
}

func (p *ListNodePoolScalingRecordsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) ReadField5(iprot thrift.TProtocol) error {
	p.Filter = NewListNodePoolScalingRecordsFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolScalingRecordsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolScalingRecordsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolScalingRecordsRequest(%+v)", *p)
}

func (p *ListNodePoolScalingRecordsRequest) DeepEqual(ano *ListNodePoolScalingRecordsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field5DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodePoolScalingRecordsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsRequest) Field3DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsRequest) Field4DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsRequest) Field5DeepEqual(src *ListNodePoolScalingRecordsFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NodePoolScalingRecord struct {
	Id           string  `thrift:"Id,1,required" json:"Id"`
	Type         string  `thrift:"Type,2,required" json:"Type"`
	Replica      int32   `thrift:"Replica,3,required" json:"Replica"`
	Detail       string  `thrift:"Detail,4,required" json:"Detail"`
	FailedReason string  `thrift:"FailedReason,5,required" json:"FailedReason"`
	StartTime    string  `thrift:"StartTime,6,required" json:"StartTime"`
	EndTime      *string `thrift:"EndTime,7" json:"EndTime,omitempty"`
	Status       string  `thrift:"Status,8,required" json:"Status"`
}

func NewNodePoolScalingRecord() *NodePoolScalingRecord {
	return &NodePoolScalingRecord{}
}

func (p *NodePoolScalingRecord) GetId() (v string) {
	return p.Id
}

func (p *NodePoolScalingRecord) GetType() (v string) {
	return p.Type
}

func (p *NodePoolScalingRecord) GetReplica() (v int32) {
	return p.Replica
}

func (p *NodePoolScalingRecord) GetDetail() (v string) {
	return p.Detail
}

func (p *NodePoolScalingRecord) GetFailedReason() (v string) {
	return p.FailedReason
}

func (p *NodePoolScalingRecord) GetStartTime() (v string) {
	return p.StartTime
}

var NodePoolScalingRecord_EndTime_DEFAULT string

func (p *NodePoolScalingRecord) GetEndTime() (v string) {
	if !p.IsSetEndTime() {
		return NodePoolScalingRecord_EndTime_DEFAULT
	}
	return *p.EndTime
}

func (p *NodePoolScalingRecord) GetStatus() (v string) {
	return p.Status
}
func (p *NodePoolScalingRecord) SetId(val string) {
	p.Id = val
}
func (p *NodePoolScalingRecord) SetType(val string) {
	p.Type = val
}
func (p *NodePoolScalingRecord) SetReplica(val int32) {
	p.Replica = val
}
func (p *NodePoolScalingRecord) SetDetail(val string) {
	p.Detail = val
}
func (p *NodePoolScalingRecord) SetFailedReason(val string) {
	p.FailedReason = val
}
func (p *NodePoolScalingRecord) SetStartTime(val string) {
	p.StartTime = val
}
func (p *NodePoolScalingRecord) SetEndTime(val *string) {
	p.EndTime = val
}
func (p *NodePoolScalingRecord) SetStatus(val string) {
	p.Status = val
}

var fieldIDToName_NodePoolScalingRecord = map[int16]string{
	1: "Id",
	2: "Type",
	3: "Replica",
	4: "Detail",
	5: "FailedReason",
	6: "StartTime",
	7: "EndTime",
	8: "Status",
}

func (p *NodePoolScalingRecord) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *NodePoolScalingRecord) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetType bool = false
	var issetReplica bool = false
	var issetDetail bool = false
	var issetFailedReason bool = false
	var issetStartTime bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetReplica = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDetail = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailedReason = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetReplica {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDetail {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetFailedReason {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodePoolScalingRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodePoolScalingRecord[fieldId]))
}

func (p *NodePoolScalingRecord) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Replica = v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Detail = v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FailedReason = v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EndTime = &v
	}
	return nil
}

func (p *NodePoolScalingRecord) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *NodePoolScalingRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodePoolScalingRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Replica", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Replica); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Detail", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Detail); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FailedReason", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FailedReason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("EndTime", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NodePoolScalingRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NodePoolScalingRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodePoolScalingRecord(%+v)", *p)
}

func (p *NodePoolScalingRecord) DeepEqual(ano *NodePoolScalingRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Type) {
		return false
	}
	if !p.Field3DeepEqual(ano.Replica) {
		return false
	}
	if !p.Field4DeepEqual(ano.Detail) {
		return false
	}
	if !p.Field5DeepEqual(ano.FailedReason) {
		return false
	}
	if !p.Field6DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *NodePoolScalingRecord) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field3DeepEqual(src int32) bool {

	if p.Replica != src {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Detail, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field5DeepEqual(src string) bool {

	if strings.Compare(p.FailedReason, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field6DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field7DeepEqual(src *string) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndTime, *src) != 0 {
		return false
	}
	return true
}
func (p *NodePoolScalingRecord) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}

type ListNodePoolScalingRecordsResponse struct {
	Items []*NodePoolScalingRecord `thrift:"Items,1,required" json:"Items"`
	Total int32                    `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base               `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodePoolScalingRecordsResponse() *ListNodePoolScalingRecordsResponse {
	return &ListNodePoolScalingRecordsResponse{}
}

func (p *ListNodePoolScalingRecordsResponse) GetItems() (v []*NodePoolScalingRecord) {
	return p.Items
}

func (p *ListNodePoolScalingRecordsResponse) GetTotal() (v int32) {
	return p.Total
}

var ListNodePoolScalingRecordsResponse_Base_DEFAULT *base.Base

func (p *ListNodePoolScalingRecordsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodePoolScalingRecordsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodePoolScalingRecordsResponse) SetItems(val []*NodePoolScalingRecord) {
	p.Items = val
}
func (p *ListNodePoolScalingRecordsResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListNodePoolScalingRecordsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodePoolScalingRecordsResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListNodePoolScalingRecordsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodePoolScalingRecordsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolScalingRecordsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodePoolScalingRecordsResponse[fieldId]))
}

func (p *ListNodePoolScalingRecordsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*NodePoolScalingRecord, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodePoolScalingRecord()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolScalingRecordsResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListNodePoolScalingRecordsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolScalingRecordsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolScalingRecordsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodePoolScalingRecordsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolScalingRecordsResponse(%+v)", *p)
}

func (p *ListNodePoolScalingRecordsResponse) DeepEqual(ano *ListNodePoolScalingRecordsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodePoolScalingRecordsResponse) Field1DeepEqual(src []*NodePoolScalingRecord) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNodePoolScalingRecordsResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListNodePoolScalingRecordsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodePoolNodesRequest struct {
	ClusterId  string           `thrift:"ClusterId,1,required" validate:"required"`
	Id         string           `thrift:"Id,2,required" validate:"required"`
	PageNumber int32            `thrift:"PageNumber,3" json:"PageNumber" default:"1"`
	PageSize   int32            `thrift:"PageSize,4" json:"PageSize" default:"100"`
	Filter     *ListNodesFilter `thrift:"Filter,5" json:"Filter,omitempty"`
	Top        *base.TopParam   `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base       `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodePoolNodesRequest() *ListNodePoolNodesRequest {
	return &ListNodePoolNodesRequest{

		PageNumber: 1,
		PageSize:   100,
	}
}

func (p *ListNodePoolNodesRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *ListNodePoolNodesRequest) GetId() (v string) {
	return p.Id
}

var ListNodePoolNodesRequest_PageNumber_DEFAULT int32 = 1

func (p *ListNodePoolNodesRequest) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListNodePoolNodesRequest_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListNodePoolNodesRequest_PageSize_DEFAULT int32 = 100

func (p *ListNodePoolNodesRequest) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListNodePoolNodesRequest_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListNodePoolNodesRequest_Filter_DEFAULT *ListNodesFilter

func (p *ListNodePoolNodesRequest) GetFilter() (v *ListNodesFilter) {
	if !p.IsSetFilter() {
		return ListNodePoolNodesRequest_Filter_DEFAULT
	}
	return p.Filter
}

var ListNodePoolNodesRequest_Top_DEFAULT *base.TopParam

func (p *ListNodePoolNodesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNodePoolNodesRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNodePoolNodesRequest_Base_DEFAULT *base.Base

func (p *ListNodePoolNodesRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodePoolNodesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodePoolNodesRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNodePoolNodesRequest) SetId(val string) {
	p.Id = val
}
func (p *ListNodePoolNodesRequest) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListNodePoolNodesRequest) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListNodePoolNodesRequest) SetFilter(val *ListNodesFilter) {
	p.Filter = val
}
func (p *ListNodePoolNodesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNodePoolNodesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodePoolNodesRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Id",
	3:   "PageNumber",
	4:   "PageSize",
	5:   "Filter",
	254: "Top",
	255: "Base",
}

func (p *ListNodePoolNodesRequest) IsSetPageNumber() bool {
	return p.PageNumber != ListNodePoolNodesRequest_PageNumber_DEFAULT
}

func (p *ListNodePoolNodesRequest) IsSetPageSize() bool {
	return p.PageSize != ListNodePoolNodesRequest_PageSize_DEFAULT
}

func (p *ListNodePoolNodesRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListNodePoolNodesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNodePoolNodesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodePoolNodesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolNodesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodePoolNodesRequest[fieldId]))
}

func (p *ListNodePoolNodesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNodePoolNodesRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ListNodePoolNodesRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListNodePoolNodesRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListNodePoolNodesRequest) ReadField5(iprot thrift.TProtocol) error {
	p.Filter = NewListNodesFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolNodesRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolNodesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolNodesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolNodesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodePoolNodesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolNodesRequest(%+v)", *p)
}

func (p *ListNodePoolNodesRequest) DeepEqual(ano *ListNodePoolNodesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field5DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodePoolNodesRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodePoolNodesRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodePoolNodesRequest) Field3DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListNodePoolNodesRequest) Field4DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListNodePoolNodesRequest) Field5DeepEqual(src *ListNodesFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodePoolNodesRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodePoolNodesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodePoolNodesResponse struct {
	Items []*ClusterNodeItem `thrift:"Items,1,required" json:"Items"`
	Total int32              `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base         `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodePoolNodesResponse() *ListNodePoolNodesResponse {
	return &ListNodePoolNodesResponse{}
}

func (p *ListNodePoolNodesResponse) GetItems() (v []*ClusterNodeItem) {
	return p.Items
}

func (p *ListNodePoolNodesResponse) GetTotal() (v int32) {
	return p.Total
}

var ListNodePoolNodesResponse_Base_DEFAULT *base.Base

func (p *ListNodePoolNodesResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodePoolNodesResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodePoolNodesResponse) SetItems(val []*ClusterNodeItem) {
	p.Items = val
}
func (p *ListNodePoolNodesResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListNodePoolNodesResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodePoolNodesResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListNodePoolNodesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodePoolNodesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodePoolNodesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodePoolNodesResponse[fieldId]))
}

func (p *ListNodePoolNodesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ClusterNodeItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewClusterNodeItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolNodesResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListNodePoolNodesResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodePoolNodesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolNodesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodePoolNodesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodePoolNodesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNodePoolNodesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodePoolNodesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodePoolNodesResponse(%+v)", *p)
}

func (p *ListNodePoolNodesResponse) DeepEqual(ano *ListNodePoolNodesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodePoolNodesResponse) Field1DeepEqual(src []*ClusterNodeItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNodePoolNodesResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListNodePoolNodesResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NamespaceQuotaConfig struct {
	CpuRequest     *string `thrift:"CpuRequest,1" json:"CpuRequest,omitempty"`
	CpuLimit       *string `thrift:"CpuLimit,2" json:"CpuLimit,omitempty"`
	MemoryRequest  *string `thrift:"MemoryRequest,3" json:"MemoryRequest,omitempty"`
	MemoryLimit    *string `thrift:"MemoryLimit,4" json:"MemoryLimit,omitempty"`
	GpuRequest     *string `thrift:"GpuRequest,5" json:"GpuRequest,omitempty"`
	StorageRequest *string `thrift:"StorageRequest,6" json:"StorageRequest,omitempty"`
	PvcLimit       *int32  `thrift:"PvcLimit,7" json:"PvcLimit,omitempty"`
	ConfigMapLimit *int32  `thrift:"ConfigMapLimit,8" json:"ConfigMapLimit,omitempty"`
	SecretLimit    *int32  `thrift:"SecretLimit,9" json:"SecretLimit,omitempty"`
	ServiceLimit   *int32  `thrift:"ServiceLimit,10" json:"ServiceLimit,omitempty"`
	PodLimit       *int32  `thrift:"PodLimit,11" json:"PodLimit,omitempty"`
}

func NewNamespaceQuotaConfig() *NamespaceQuotaConfig {
	return &NamespaceQuotaConfig{}
}

var NamespaceQuotaConfig_CpuRequest_DEFAULT string

func (p *NamespaceQuotaConfig) GetCpuRequest() (v string) {
	if !p.IsSetCpuRequest() {
		return NamespaceQuotaConfig_CpuRequest_DEFAULT
	}
	return *p.CpuRequest
}

var NamespaceQuotaConfig_CpuLimit_DEFAULT string

func (p *NamespaceQuotaConfig) GetCpuLimit() (v string) {
	if !p.IsSetCpuLimit() {
		return NamespaceQuotaConfig_CpuLimit_DEFAULT
	}
	return *p.CpuLimit
}

var NamespaceQuotaConfig_MemoryRequest_DEFAULT string

func (p *NamespaceQuotaConfig) GetMemoryRequest() (v string) {
	if !p.IsSetMemoryRequest() {
		return NamespaceQuotaConfig_MemoryRequest_DEFAULT
	}
	return *p.MemoryRequest
}

var NamespaceQuotaConfig_MemoryLimit_DEFAULT string

func (p *NamespaceQuotaConfig) GetMemoryLimit() (v string) {
	if !p.IsSetMemoryLimit() {
		return NamespaceQuotaConfig_MemoryLimit_DEFAULT
	}
	return *p.MemoryLimit
}

var NamespaceQuotaConfig_GpuRequest_DEFAULT string

func (p *NamespaceQuotaConfig) GetGpuRequest() (v string) {
	if !p.IsSetGpuRequest() {
		return NamespaceQuotaConfig_GpuRequest_DEFAULT
	}
	return *p.GpuRequest
}

var NamespaceQuotaConfig_StorageRequest_DEFAULT string

func (p *NamespaceQuotaConfig) GetStorageRequest() (v string) {
	if !p.IsSetStorageRequest() {
		return NamespaceQuotaConfig_StorageRequest_DEFAULT
	}
	return *p.StorageRequest
}

var NamespaceQuotaConfig_PvcLimit_DEFAULT int32

func (p *NamespaceQuotaConfig) GetPvcLimit() (v int32) {
	if !p.IsSetPvcLimit() {
		return NamespaceQuotaConfig_PvcLimit_DEFAULT
	}
	return *p.PvcLimit
}

var NamespaceQuotaConfig_ConfigMapLimit_DEFAULT int32

func (p *NamespaceQuotaConfig) GetConfigMapLimit() (v int32) {
	if !p.IsSetConfigMapLimit() {
		return NamespaceQuotaConfig_ConfigMapLimit_DEFAULT
	}
	return *p.ConfigMapLimit
}

var NamespaceQuotaConfig_SecretLimit_DEFAULT int32

func (p *NamespaceQuotaConfig) GetSecretLimit() (v int32) {
	if !p.IsSetSecretLimit() {
		return NamespaceQuotaConfig_SecretLimit_DEFAULT
	}
	return *p.SecretLimit
}

var NamespaceQuotaConfig_ServiceLimit_DEFAULT int32

func (p *NamespaceQuotaConfig) GetServiceLimit() (v int32) {
	if !p.IsSetServiceLimit() {
		return NamespaceQuotaConfig_ServiceLimit_DEFAULT
	}
	return *p.ServiceLimit
}

var NamespaceQuotaConfig_PodLimit_DEFAULT int32

func (p *NamespaceQuotaConfig) GetPodLimit() (v int32) {
	if !p.IsSetPodLimit() {
		return NamespaceQuotaConfig_PodLimit_DEFAULT
	}
	return *p.PodLimit
}
func (p *NamespaceQuotaConfig) SetCpuRequest(val *string) {
	p.CpuRequest = val
}
func (p *NamespaceQuotaConfig) SetCpuLimit(val *string) {
	p.CpuLimit = val
}
func (p *NamespaceQuotaConfig) SetMemoryRequest(val *string) {
	p.MemoryRequest = val
}
func (p *NamespaceQuotaConfig) SetMemoryLimit(val *string) {
	p.MemoryLimit = val
}
func (p *NamespaceQuotaConfig) SetGpuRequest(val *string) {
	p.GpuRequest = val
}
func (p *NamespaceQuotaConfig) SetStorageRequest(val *string) {
	p.StorageRequest = val
}
func (p *NamespaceQuotaConfig) SetPvcLimit(val *int32) {
	p.PvcLimit = val
}
func (p *NamespaceQuotaConfig) SetConfigMapLimit(val *int32) {
	p.ConfigMapLimit = val
}
func (p *NamespaceQuotaConfig) SetSecretLimit(val *int32) {
	p.SecretLimit = val
}
func (p *NamespaceQuotaConfig) SetServiceLimit(val *int32) {
	p.ServiceLimit = val
}
func (p *NamespaceQuotaConfig) SetPodLimit(val *int32) {
	p.PodLimit = val
}

var fieldIDToName_NamespaceQuotaConfig = map[int16]string{
	1:  "CpuRequest",
	2:  "CpuLimit",
	3:  "MemoryRequest",
	4:  "MemoryLimit",
	5:  "GpuRequest",
	6:  "StorageRequest",
	7:  "PvcLimit",
	8:  "ConfigMapLimit",
	9:  "SecretLimit",
	10: "ServiceLimit",
	11: "PodLimit",
}

func (p *NamespaceQuotaConfig) IsSetCpuRequest() bool {
	return p.CpuRequest != nil
}

func (p *NamespaceQuotaConfig) IsSetCpuLimit() bool {
	return p.CpuLimit != nil
}

func (p *NamespaceQuotaConfig) IsSetMemoryRequest() bool {
	return p.MemoryRequest != nil
}

func (p *NamespaceQuotaConfig) IsSetMemoryLimit() bool {
	return p.MemoryLimit != nil
}

func (p *NamespaceQuotaConfig) IsSetGpuRequest() bool {
	return p.GpuRequest != nil
}

func (p *NamespaceQuotaConfig) IsSetStorageRequest() bool {
	return p.StorageRequest != nil
}

func (p *NamespaceQuotaConfig) IsSetPvcLimit() bool {
	return p.PvcLimit != nil
}

func (p *NamespaceQuotaConfig) IsSetConfigMapLimit() bool {
	return p.ConfigMapLimit != nil
}

func (p *NamespaceQuotaConfig) IsSetSecretLimit() bool {
	return p.SecretLimit != nil
}

func (p *NamespaceQuotaConfig) IsSetServiceLimit() bool {
	return p.ServiceLimit != nil
}

func (p *NamespaceQuotaConfig) IsSetPodLimit() bool {
	return p.PodLimit != nil
}

func (p *NamespaceQuotaConfig) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NamespaceQuotaConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NamespaceQuotaConfig) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuRequest = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryRequest = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GpuRequest = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StorageRequest = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PvcLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ConfigMapLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SecretLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ServiceLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PodLimit = &v
	}
	return nil
}

func (p *NamespaceQuotaConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NamespaceQuotaConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuRequest() {
		if err = oprot.WriteFieldBegin("CpuRequest", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLimit() {
		if err = oprot.WriteFieldBegin("CpuLimit", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryRequest() {
		if err = oprot.WriteFieldBegin("MemoryRequest", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryLimit() {
		if err = oprot.WriteFieldBegin("MemoryLimit", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGpuRequest() {
		if err = oprot.WriteFieldBegin("GpuRequest", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GpuRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageRequest() {
		if err = oprot.WriteFieldBegin("StorageRequest", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPvcLimit() {
		if err = oprot.WriteFieldBegin("PvcLimit", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PvcLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigMapLimit() {
		if err = oprot.WriteFieldBegin("ConfigMapLimit", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConfigMapLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretLimit() {
		if err = oprot.WriteFieldBegin("SecretLimit", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SecretLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceLimit() {
		if err = oprot.WriteFieldBegin("ServiceLimit", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ServiceLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodLimit() {
		if err = oprot.WriteFieldBegin("PodLimit", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PodLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NamespaceQuotaConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NamespaceQuotaConfig(%+v)", *p)
}

func (p *NamespaceQuotaConfig) DeepEqual(ano *NamespaceQuotaConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CpuRequest) {
		return false
	}
	if !p.Field2DeepEqual(ano.CpuLimit) {
		return false
	}
	if !p.Field3DeepEqual(ano.MemoryRequest) {
		return false
	}
	if !p.Field4DeepEqual(ano.MemoryLimit) {
		return false
	}
	if !p.Field5DeepEqual(ano.GpuRequest) {
		return false
	}
	if !p.Field6DeepEqual(ano.StorageRequest) {
		return false
	}
	if !p.Field7DeepEqual(ano.PvcLimit) {
		return false
	}
	if !p.Field8DeepEqual(ano.ConfigMapLimit) {
		return false
	}
	if !p.Field9DeepEqual(ano.SecretLimit) {
		return false
	}
	if !p.Field10DeepEqual(ano.ServiceLimit) {
		return false
	}
	if !p.Field11DeepEqual(ano.PodLimit) {
		return false
	}
	return true
}

func (p *NamespaceQuotaConfig) Field1DeepEqual(src *string) bool {

	if p.CpuRequest == src {
		return true
	} else if p.CpuRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field2DeepEqual(src *string) bool {

	if p.CpuLimit == src {
		return true
	} else if p.CpuLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field3DeepEqual(src *string) bool {

	if p.MemoryRequest == src {
		return true
	} else if p.MemoryRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field4DeepEqual(src *string) bool {

	if p.MemoryLimit == src {
		return true
	} else if p.MemoryLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field5DeepEqual(src *string) bool {

	if p.GpuRequest == src {
		return true
	} else if p.GpuRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GpuRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field6DeepEqual(src *string) bool {

	if p.StorageRequest == src {
		return true
	} else if p.StorageRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field7DeepEqual(src *int32) bool {

	if p.PvcLimit == src {
		return true
	} else if p.PvcLimit == nil || src == nil {
		return false
	}
	if *p.PvcLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field8DeepEqual(src *int32) bool {

	if p.ConfigMapLimit == src {
		return true
	} else if p.ConfigMapLimit == nil || src == nil {
		return false
	}
	if *p.ConfigMapLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field9DeepEqual(src *int32) bool {

	if p.SecretLimit == src {
		return true
	} else if p.SecretLimit == nil || src == nil {
		return false
	}
	if *p.SecretLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field10DeepEqual(src *int32) bool {

	if p.ServiceLimit == src {
		return true
	} else if p.ServiceLimit == nil || src == nil {
		return false
	}
	if *p.ServiceLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuotaConfig) Field11DeepEqual(src *int32) bool {

	if p.PodLimit == src {
		return true
	} else if p.PodLimit == nil || src == nil {
		return false
	}
	if *p.PodLimit != *src {
		return false
	}
	return true
}

type NamespaceQuota struct {
	CpuRequest         *string `thrift:"CpuRequest,1" json:"CpuRequest,omitempty"`
	CpuRequestUsed     *string `thrift:"CpuRequestUsed,2" json:"CpuRequestUsed,omitempty"`
	CpuLimit           *string `thrift:"CpuLimit,3" json:"CpuLimit,omitempty"`
	CpuLimitUsed       *string `thrift:"CpuLimitUsed,4" json:"CpuLimitUsed,omitempty"`
	MemoryRequest      *string `thrift:"MemoryRequest,5" json:"MemoryRequest,omitempty"`
	MemoryRequestUsed  *string `thrift:"MemoryRequestUsed,6" json:"MemoryRequestUsed,omitempty"`
	MemoryLimit        *string `thrift:"MemoryLimit,7" json:"MemoryLimit,omitempty"`
	MemoryLimitUsed    *string `thrift:"MemoryLimitUsed,8" json:"MemoryLimitUsed,omitempty"`
	GpuRequest         *string `thrift:"GpuRequest,9" json:"GpuRequest,omitempty"`
	GpuRequestUsed     *string `thrift:"GpuRequestUsed,10" json:"GpuRequestUsed,omitempty"`
	StorageRequest     *string `thrift:"StorageRequest,11" json:"StorageRequest,omitempty"`
	StorageRequestUsed *string `thrift:"StorageRequestUsed,12" json:"StorageRequestUsed,omitempty"`
	PvcLimit           *int32  `thrift:"PvcLimit,13" json:"PvcLimit,omitempty"`
	PvcLimitUsed       *int32  `thrift:"PvcLimitUsed,14" json:"PvcLimitUsed,omitempty"`
	ConfigMapLimit     *int32  `thrift:"ConfigMapLimit,15" json:"ConfigMapLimit,omitempty"`
	ConfigMapLimitUsed *int32  `thrift:"ConfigMapLimitUsed,16" json:"ConfigMapLimitUsed,omitempty"`
	SecretLimit        *int32  `thrift:"SecretLimit,17" json:"SecretLimit,omitempty"`
	SecretLimitUsed    *int32  `thrift:"SecretLimitUsed,18" json:"SecretLimitUsed,omitempty"`
	ServiceLimit       *int32  `thrift:"ServiceLimit,19" json:"ServiceLimit,omitempty"`
	ServiceLimitUsed   *int32  `thrift:"ServiceLimitUsed,20" json:"ServiceLimitUsed,omitempty"`
	PodLimit           *int32  `thrift:"PodLimit,21" json:"PodLimit,omitempty"`
	PodLimitUsed       *int32  `thrift:"PodLimitUsed,22" json:"PodLimitUsed,omitempty"`
	Namespace          string  `thrift:"Namespace,23,required" json:"Namespace"`
	Name               string  `thrift:"Name,24,required" json:"Name"`
}

func NewNamespaceQuota() *NamespaceQuota {
	return &NamespaceQuota{}
}

var NamespaceQuota_CpuRequest_DEFAULT string

func (p *NamespaceQuota) GetCpuRequest() (v string) {
	if !p.IsSetCpuRequest() {
		return NamespaceQuota_CpuRequest_DEFAULT
	}
	return *p.CpuRequest
}

var NamespaceQuota_CpuRequestUsed_DEFAULT string

func (p *NamespaceQuota) GetCpuRequestUsed() (v string) {
	if !p.IsSetCpuRequestUsed() {
		return NamespaceQuota_CpuRequestUsed_DEFAULT
	}
	return *p.CpuRequestUsed
}

var NamespaceQuota_CpuLimit_DEFAULT string

func (p *NamespaceQuota) GetCpuLimit() (v string) {
	if !p.IsSetCpuLimit() {
		return NamespaceQuota_CpuLimit_DEFAULT
	}
	return *p.CpuLimit
}

var NamespaceQuota_CpuLimitUsed_DEFAULT string

func (p *NamespaceQuota) GetCpuLimitUsed() (v string) {
	if !p.IsSetCpuLimitUsed() {
		return NamespaceQuota_CpuLimitUsed_DEFAULT
	}
	return *p.CpuLimitUsed
}

var NamespaceQuota_MemoryRequest_DEFAULT string

func (p *NamespaceQuota) GetMemoryRequest() (v string) {
	if !p.IsSetMemoryRequest() {
		return NamespaceQuota_MemoryRequest_DEFAULT
	}
	return *p.MemoryRequest
}

var NamespaceQuota_MemoryRequestUsed_DEFAULT string

func (p *NamespaceQuota) GetMemoryRequestUsed() (v string) {
	if !p.IsSetMemoryRequestUsed() {
		return NamespaceQuota_MemoryRequestUsed_DEFAULT
	}
	return *p.MemoryRequestUsed
}

var NamespaceQuota_MemoryLimit_DEFAULT string

func (p *NamespaceQuota) GetMemoryLimit() (v string) {
	if !p.IsSetMemoryLimit() {
		return NamespaceQuota_MemoryLimit_DEFAULT
	}
	return *p.MemoryLimit
}

var NamespaceQuota_MemoryLimitUsed_DEFAULT string

func (p *NamespaceQuota) GetMemoryLimitUsed() (v string) {
	if !p.IsSetMemoryLimitUsed() {
		return NamespaceQuota_MemoryLimitUsed_DEFAULT
	}
	return *p.MemoryLimitUsed
}

var NamespaceQuota_GpuRequest_DEFAULT string

func (p *NamespaceQuota) GetGpuRequest() (v string) {
	if !p.IsSetGpuRequest() {
		return NamespaceQuota_GpuRequest_DEFAULT
	}
	return *p.GpuRequest
}

var NamespaceQuota_GpuRequestUsed_DEFAULT string

func (p *NamespaceQuota) GetGpuRequestUsed() (v string) {
	if !p.IsSetGpuRequestUsed() {
		return NamespaceQuota_GpuRequestUsed_DEFAULT
	}
	return *p.GpuRequestUsed
}

var NamespaceQuota_StorageRequest_DEFAULT string

func (p *NamespaceQuota) GetStorageRequest() (v string) {
	if !p.IsSetStorageRequest() {
		return NamespaceQuota_StorageRequest_DEFAULT
	}
	return *p.StorageRequest
}

var NamespaceQuota_StorageRequestUsed_DEFAULT string

func (p *NamespaceQuota) GetStorageRequestUsed() (v string) {
	if !p.IsSetStorageRequestUsed() {
		return NamespaceQuota_StorageRequestUsed_DEFAULT
	}
	return *p.StorageRequestUsed
}

var NamespaceQuota_PvcLimit_DEFAULT int32

func (p *NamespaceQuota) GetPvcLimit() (v int32) {
	if !p.IsSetPvcLimit() {
		return NamespaceQuota_PvcLimit_DEFAULT
	}
	return *p.PvcLimit
}

var NamespaceQuota_PvcLimitUsed_DEFAULT int32

func (p *NamespaceQuota) GetPvcLimitUsed() (v int32) {
	if !p.IsSetPvcLimitUsed() {
		return NamespaceQuota_PvcLimitUsed_DEFAULT
	}
	return *p.PvcLimitUsed
}

var NamespaceQuota_ConfigMapLimit_DEFAULT int32

func (p *NamespaceQuota) GetConfigMapLimit() (v int32) {
	if !p.IsSetConfigMapLimit() {
		return NamespaceQuota_ConfigMapLimit_DEFAULT
	}
	return *p.ConfigMapLimit
}

var NamespaceQuota_ConfigMapLimitUsed_DEFAULT int32

func (p *NamespaceQuota) GetConfigMapLimitUsed() (v int32) {
	if !p.IsSetConfigMapLimitUsed() {
		return NamespaceQuota_ConfigMapLimitUsed_DEFAULT
	}
	return *p.ConfigMapLimitUsed
}

var NamespaceQuota_SecretLimit_DEFAULT int32

func (p *NamespaceQuota) GetSecretLimit() (v int32) {
	if !p.IsSetSecretLimit() {
		return NamespaceQuota_SecretLimit_DEFAULT
	}
	return *p.SecretLimit
}

var NamespaceQuota_SecretLimitUsed_DEFAULT int32

func (p *NamespaceQuota) GetSecretLimitUsed() (v int32) {
	if !p.IsSetSecretLimitUsed() {
		return NamespaceQuota_SecretLimitUsed_DEFAULT
	}
	return *p.SecretLimitUsed
}

var NamespaceQuota_ServiceLimit_DEFAULT int32

func (p *NamespaceQuota) GetServiceLimit() (v int32) {
	if !p.IsSetServiceLimit() {
		return NamespaceQuota_ServiceLimit_DEFAULT
	}
	return *p.ServiceLimit
}

var NamespaceQuota_ServiceLimitUsed_DEFAULT int32

func (p *NamespaceQuota) GetServiceLimitUsed() (v int32) {
	if !p.IsSetServiceLimitUsed() {
		return NamespaceQuota_ServiceLimitUsed_DEFAULT
	}
	return *p.ServiceLimitUsed
}

var NamespaceQuota_PodLimit_DEFAULT int32

func (p *NamespaceQuota) GetPodLimit() (v int32) {
	if !p.IsSetPodLimit() {
		return NamespaceQuota_PodLimit_DEFAULT
	}
	return *p.PodLimit
}

var NamespaceQuota_PodLimitUsed_DEFAULT int32

func (p *NamespaceQuota) GetPodLimitUsed() (v int32) {
	if !p.IsSetPodLimitUsed() {
		return NamespaceQuota_PodLimitUsed_DEFAULT
	}
	return *p.PodLimitUsed
}

func (p *NamespaceQuota) GetNamespace() (v string) {
	return p.Namespace
}

func (p *NamespaceQuota) GetName() (v string) {
	return p.Name
}
func (p *NamespaceQuota) SetCpuRequest(val *string) {
	p.CpuRequest = val
}
func (p *NamespaceQuota) SetCpuRequestUsed(val *string) {
	p.CpuRequestUsed = val
}
func (p *NamespaceQuota) SetCpuLimit(val *string) {
	p.CpuLimit = val
}
func (p *NamespaceQuota) SetCpuLimitUsed(val *string) {
	p.CpuLimitUsed = val
}
func (p *NamespaceQuota) SetMemoryRequest(val *string) {
	p.MemoryRequest = val
}
func (p *NamespaceQuota) SetMemoryRequestUsed(val *string) {
	p.MemoryRequestUsed = val
}
func (p *NamespaceQuota) SetMemoryLimit(val *string) {
	p.MemoryLimit = val
}
func (p *NamespaceQuota) SetMemoryLimitUsed(val *string) {
	p.MemoryLimitUsed = val
}
func (p *NamespaceQuota) SetGpuRequest(val *string) {
	p.GpuRequest = val
}
func (p *NamespaceQuota) SetGpuRequestUsed(val *string) {
	p.GpuRequestUsed = val
}
func (p *NamespaceQuota) SetStorageRequest(val *string) {
	p.StorageRequest = val
}
func (p *NamespaceQuota) SetStorageRequestUsed(val *string) {
	p.StorageRequestUsed = val
}
func (p *NamespaceQuota) SetPvcLimit(val *int32) {
	p.PvcLimit = val
}
func (p *NamespaceQuota) SetPvcLimitUsed(val *int32) {
	p.PvcLimitUsed = val
}
func (p *NamespaceQuota) SetConfigMapLimit(val *int32) {
	p.ConfigMapLimit = val
}
func (p *NamespaceQuota) SetConfigMapLimitUsed(val *int32) {
	p.ConfigMapLimitUsed = val
}
func (p *NamespaceQuota) SetSecretLimit(val *int32) {
	p.SecretLimit = val
}
func (p *NamespaceQuota) SetSecretLimitUsed(val *int32) {
	p.SecretLimitUsed = val
}
func (p *NamespaceQuota) SetServiceLimit(val *int32) {
	p.ServiceLimit = val
}
func (p *NamespaceQuota) SetServiceLimitUsed(val *int32) {
	p.ServiceLimitUsed = val
}
func (p *NamespaceQuota) SetPodLimit(val *int32) {
	p.PodLimit = val
}
func (p *NamespaceQuota) SetPodLimitUsed(val *int32) {
	p.PodLimitUsed = val
}
func (p *NamespaceQuota) SetNamespace(val string) {
	p.Namespace = val
}
func (p *NamespaceQuota) SetName(val string) {
	p.Name = val
}

var fieldIDToName_NamespaceQuota = map[int16]string{
	1:  "CpuRequest",
	2:  "CpuRequestUsed",
	3:  "CpuLimit",
	4:  "CpuLimitUsed",
	5:  "MemoryRequest",
	6:  "MemoryRequestUsed",
	7:  "MemoryLimit",
	8:  "MemoryLimitUsed",
	9:  "GpuRequest",
	10: "GpuRequestUsed",
	11: "StorageRequest",
	12: "StorageRequestUsed",
	13: "PvcLimit",
	14: "PvcLimitUsed",
	15: "ConfigMapLimit",
	16: "ConfigMapLimitUsed",
	17: "SecretLimit",
	18: "SecretLimitUsed",
	19: "ServiceLimit",
	20: "ServiceLimitUsed",
	21: "PodLimit",
	22: "PodLimitUsed",
	23: "Namespace",
	24: "Name",
}

func (p *NamespaceQuota) IsSetCpuRequest() bool {
	return p.CpuRequest != nil
}

func (p *NamespaceQuota) IsSetCpuRequestUsed() bool {
	return p.CpuRequestUsed != nil
}

func (p *NamespaceQuota) IsSetCpuLimit() bool {
	return p.CpuLimit != nil
}

func (p *NamespaceQuota) IsSetCpuLimitUsed() bool {
	return p.CpuLimitUsed != nil
}

func (p *NamespaceQuota) IsSetMemoryRequest() bool {
	return p.MemoryRequest != nil
}

func (p *NamespaceQuota) IsSetMemoryRequestUsed() bool {
	return p.MemoryRequestUsed != nil
}

func (p *NamespaceQuota) IsSetMemoryLimit() bool {
	return p.MemoryLimit != nil
}

func (p *NamespaceQuota) IsSetMemoryLimitUsed() bool {
	return p.MemoryLimitUsed != nil
}

func (p *NamespaceQuota) IsSetGpuRequest() bool {
	return p.GpuRequest != nil
}

func (p *NamespaceQuota) IsSetGpuRequestUsed() bool {
	return p.GpuRequestUsed != nil
}

func (p *NamespaceQuota) IsSetStorageRequest() bool {
	return p.StorageRequest != nil
}

func (p *NamespaceQuota) IsSetStorageRequestUsed() bool {
	return p.StorageRequestUsed != nil
}

func (p *NamespaceQuota) IsSetPvcLimit() bool {
	return p.PvcLimit != nil
}

func (p *NamespaceQuota) IsSetPvcLimitUsed() bool {
	return p.PvcLimitUsed != nil
}

func (p *NamespaceQuota) IsSetConfigMapLimit() bool {
	return p.ConfigMapLimit != nil
}

func (p *NamespaceQuota) IsSetConfigMapLimitUsed() bool {
	return p.ConfigMapLimitUsed != nil
}

func (p *NamespaceQuota) IsSetSecretLimit() bool {
	return p.SecretLimit != nil
}

func (p *NamespaceQuota) IsSetSecretLimitUsed() bool {
	return p.SecretLimitUsed != nil
}

func (p *NamespaceQuota) IsSetServiceLimit() bool {
	return p.ServiceLimit != nil
}

func (p *NamespaceQuota) IsSetServiceLimitUsed() bool {
	return p.ServiceLimitUsed != nil
}

func (p *NamespaceQuota) IsSetPodLimit() bool {
	return p.PodLimit != nil
}

func (p *NamespaceQuota) IsSetPodLimitUsed() bool {
	return p.PodLimitUsed != nil
}

func (p *NamespaceQuota) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 24
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NamespaceQuota[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NamespaceQuota[fieldId]))
}

func (p *NamespaceQuota) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuRequest = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuRequestUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryRequest = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryRequestUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GpuRequest = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GpuRequestUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StorageRequest = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StorageRequestUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PvcLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PvcLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ConfigMapLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ConfigMapLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SecretLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SecretLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ServiceLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ServiceLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PodLimit = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PodLimitUsed = &v
	}
	return nil
}

func (p *NamespaceQuota) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *NamespaceQuota) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *NamespaceQuota) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NamespaceQuota"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NamespaceQuota) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuRequest() {
		if err = oprot.WriteFieldBegin("CpuRequest", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NamespaceQuota) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuRequestUsed() {
		if err = oprot.WriteFieldBegin("CpuRequestUsed", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuRequestUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NamespaceQuota) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLimit() {
		if err = oprot.WriteFieldBegin("CpuLimit", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NamespaceQuota) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLimitUsed() {
		if err = oprot.WriteFieldBegin("CpuLimitUsed", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NamespaceQuota) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryRequest() {
		if err = oprot.WriteFieldBegin("MemoryRequest", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NamespaceQuota) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryRequestUsed() {
		if err = oprot.WriteFieldBegin("MemoryRequestUsed", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryRequestUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NamespaceQuota) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryLimit() {
		if err = oprot.WriteFieldBegin("MemoryLimit", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NamespaceQuota) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryLimitUsed() {
		if err = oprot.WriteFieldBegin("MemoryLimitUsed", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NamespaceQuota) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetGpuRequest() {
		if err = oprot.WriteFieldBegin("GpuRequest", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GpuRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NamespaceQuota) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetGpuRequestUsed() {
		if err = oprot.WriteFieldBegin("GpuRequestUsed", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.GpuRequestUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NamespaceQuota) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageRequest() {
		if err = oprot.WriteFieldBegin("StorageRequest", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NamespaceQuota) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageRequestUsed() {
		if err = oprot.WriteFieldBegin("StorageRequestUsed", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageRequestUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *NamespaceQuota) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPvcLimit() {
		if err = oprot.WriteFieldBegin("PvcLimit", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PvcLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *NamespaceQuota) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetPvcLimitUsed() {
		if err = oprot.WriteFieldBegin("PvcLimitUsed", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PvcLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *NamespaceQuota) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigMapLimit() {
		if err = oprot.WriteFieldBegin("ConfigMapLimit", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConfigMapLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *NamespaceQuota) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigMapLimitUsed() {
		if err = oprot.WriteFieldBegin("ConfigMapLimitUsed", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ConfigMapLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *NamespaceQuota) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretLimit() {
		if err = oprot.WriteFieldBegin("SecretLimit", thrift.I32, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SecretLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *NamespaceQuota) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretLimitUsed() {
		if err = oprot.WriteFieldBegin("SecretLimitUsed", thrift.I32, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SecretLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *NamespaceQuota) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceLimit() {
		if err = oprot.WriteFieldBegin("ServiceLimit", thrift.I32, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ServiceLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *NamespaceQuota) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceLimitUsed() {
		if err = oprot.WriteFieldBegin("ServiceLimitUsed", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ServiceLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *NamespaceQuota) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodLimit() {
		if err = oprot.WriteFieldBegin("PodLimit", thrift.I32, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PodLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *NamespaceQuota) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodLimitUsed() {
		if err = oprot.WriteFieldBegin("PodLimitUsed", thrift.I32, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PodLimitUsed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *NamespaceQuota) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *NamespaceQuota) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *NamespaceQuota) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NamespaceQuota(%+v)", *p)
}

func (p *NamespaceQuota) DeepEqual(ano *NamespaceQuota) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CpuRequest) {
		return false
	}
	if !p.Field2DeepEqual(ano.CpuRequestUsed) {
		return false
	}
	if !p.Field3DeepEqual(ano.CpuLimit) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpuLimitUsed) {
		return false
	}
	if !p.Field5DeepEqual(ano.MemoryRequest) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemoryRequestUsed) {
		return false
	}
	if !p.Field7DeepEqual(ano.MemoryLimit) {
		return false
	}
	if !p.Field8DeepEqual(ano.MemoryLimitUsed) {
		return false
	}
	if !p.Field9DeepEqual(ano.GpuRequest) {
		return false
	}
	if !p.Field10DeepEqual(ano.GpuRequestUsed) {
		return false
	}
	if !p.Field11DeepEqual(ano.StorageRequest) {
		return false
	}
	if !p.Field12DeepEqual(ano.StorageRequestUsed) {
		return false
	}
	if !p.Field13DeepEqual(ano.PvcLimit) {
		return false
	}
	if !p.Field14DeepEqual(ano.PvcLimitUsed) {
		return false
	}
	if !p.Field15DeepEqual(ano.ConfigMapLimit) {
		return false
	}
	if !p.Field16DeepEqual(ano.ConfigMapLimitUsed) {
		return false
	}
	if !p.Field17DeepEqual(ano.SecretLimit) {
		return false
	}
	if !p.Field18DeepEqual(ano.SecretLimitUsed) {
		return false
	}
	if !p.Field19DeepEqual(ano.ServiceLimit) {
		return false
	}
	if !p.Field20DeepEqual(ano.ServiceLimitUsed) {
		return false
	}
	if !p.Field21DeepEqual(ano.PodLimit) {
		return false
	}
	if !p.Field22DeepEqual(ano.PodLimitUsed) {
		return false
	}
	if !p.Field23DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field24DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *NamespaceQuota) Field1DeepEqual(src *string) bool {

	if p.CpuRequest == src {
		return true
	} else if p.CpuRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field2DeepEqual(src *string) bool {

	if p.CpuRequestUsed == src {
		return true
	} else if p.CpuRequestUsed == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuRequestUsed, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field3DeepEqual(src *string) bool {

	if p.CpuLimit == src {
		return true
	} else if p.CpuLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field4DeepEqual(src *string) bool {

	if p.CpuLimitUsed == src {
		return true
	} else if p.CpuLimitUsed == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuLimitUsed, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field5DeepEqual(src *string) bool {

	if p.MemoryRequest == src {
		return true
	} else if p.MemoryRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field6DeepEqual(src *string) bool {

	if p.MemoryRequestUsed == src {
		return true
	} else if p.MemoryRequestUsed == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryRequestUsed, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field7DeepEqual(src *string) bool {

	if p.MemoryLimit == src {
		return true
	} else if p.MemoryLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field8DeepEqual(src *string) bool {

	if p.MemoryLimitUsed == src {
		return true
	} else if p.MemoryLimitUsed == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryLimitUsed, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field9DeepEqual(src *string) bool {

	if p.GpuRequest == src {
		return true
	} else if p.GpuRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GpuRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field10DeepEqual(src *string) bool {

	if p.GpuRequestUsed == src {
		return true
	} else if p.GpuRequestUsed == nil || src == nil {
		return false
	}
	if strings.Compare(*p.GpuRequestUsed, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field11DeepEqual(src *string) bool {

	if p.StorageRequest == src {
		return true
	} else if p.StorageRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field12DeepEqual(src *string) bool {

	if p.StorageRequestUsed == src {
		return true
	} else if p.StorageRequestUsed == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageRequestUsed, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field13DeepEqual(src *int32) bool {

	if p.PvcLimit == src {
		return true
	} else if p.PvcLimit == nil || src == nil {
		return false
	}
	if *p.PvcLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field14DeepEqual(src *int32) bool {

	if p.PvcLimitUsed == src {
		return true
	} else if p.PvcLimitUsed == nil || src == nil {
		return false
	}
	if *p.PvcLimitUsed != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field15DeepEqual(src *int32) bool {

	if p.ConfigMapLimit == src {
		return true
	} else if p.ConfigMapLimit == nil || src == nil {
		return false
	}
	if *p.ConfigMapLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field16DeepEqual(src *int32) bool {

	if p.ConfigMapLimitUsed == src {
		return true
	} else if p.ConfigMapLimitUsed == nil || src == nil {
		return false
	}
	if *p.ConfigMapLimitUsed != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field17DeepEqual(src *int32) bool {

	if p.SecretLimit == src {
		return true
	} else if p.SecretLimit == nil || src == nil {
		return false
	}
	if *p.SecretLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field18DeepEqual(src *int32) bool {

	if p.SecretLimitUsed == src {
		return true
	} else if p.SecretLimitUsed == nil || src == nil {
		return false
	}
	if *p.SecretLimitUsed != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field19DeepEqual(src *int32) bool {

	if p.ServiceLimit == src {
		return true
	} else if p.ServiceLimit == nil || src == nil {
		return false
	}
	if *p.ServiceLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field20DeepEqual(src *int32) bool {

	if p.ServiceLimitUsed == src {
		return true
	} else if p.ServiceLimitUsed == nil || src == nil {
		return false
	}
	if *p.ServiceLimitUsed != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field21DeepEqual(src *int32) bool {

	if p.PodLimit == src {
		return true
	} else if p.PodLimit == nil || src == nil {
		return false
	}
	if *p.PodLimit != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field22DeepEqual(src *int32) bool {

	if p.PodLimitUsed == src {
		return true
	} else if p.PodLimitUsed == nil || src == nil {
		return false
	}
	if *p.PodLimitUsed != *src {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field23DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceQuota) Field24DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type NamespaceLimit struct {
	CpuRequest       *string `thrift:"CpuRequest,1" json:"CpuRequest,omitempty"`
	CpuLimit         *string `thrift:"CpuLimit,2" json:"CpuLimit,omitempty"`
	MemoryRequest    *string `thrift:"MemoryRequest,3" json:"MemoryRequest,omitempty"`
	MemoryLimit      *string `thrift:"MemoryLimit,4" json:"MemoryLimit,omitempty"`
	CpuMaximum       *string `thrift:"CpuMaximum,5" json:"CpuMaximum,omitempty"`
	CpuMinimum       *string `thrift:"CpuMinimum,6" json:"CpuMinimum,omitempty"`
	MemoryMaximum    *string `thrift:"MemoryMaximum,7" json:"MemoryMaximum,omitempty"`
	MemoryMinimum    *string `thrift:"MemoryMinimum,8" json:"MemoryMinimum,omitempty"`
	PodCpuMaximum    *string `thrift:"PodCpuMaximum,9" json:"PodCpuMaximum,omitempty"`
	PodMemoryMaximum *string `thrift:"PodMemoryMaximum,10" json:"PodMemoryMaximum,omitempty"`
	StorageMaximum   *string `thrift:"StorageMaximum,11" json:"StorageMaximum,omitempty"`
	StorageMinimum   *string `thrift:"StorageMinimum,12" json:"StorageMinimum,omitempty"`
}

func NewNamespaceLimit() *NamespaceLimit {
	return &NamespaceLimit{}
}

var NamespaceLimit_CpuRequest_DEFAULT string

func (p *NamespaceLimit) GetCpuRequest() (v string) {
	if !p.IsSetCpuRequest() {
		return NamespaceLimit_CpuRequest_DEFAULT
	}
	return *p.CpuRequest
}

var NamespaceLimit_CpuLimit_DEFAULT string

func (p *NamespaceLimit) GetCpuLimit() (v string) {
	if !p.IsSetCpuLimit() {
		return NamespaceLimit_CpuLimit_DEFAULT
	}
	return *p.CpuLimit
}

var NamespaceLimit_MemoryRequest_DEFAULT string

func (p *NamespaceLimit) GetMemoryRequest() (v string) {
	if !p.IsSetMemoryRequest() {
		return NamespaceLimit_MemoryRequest_DEFAULT
	}
	return *p.MemoryRequest
}

var NamespaceLimit_MemoryLimit_DEFAULT string

func (p *NamespaceLimit) GetMemoryLimit() (v string) {
	if !p.IsSetMemoryLimit() {
		return NamespaceLimit_MemoryLimit_DEFAULT
	}
	return *p.MemoryLimit
}

var NamespaceLimit_CpuMaximum_DEFAULT string

func (p *NamespaceLimit) GetCpuMaximum() (v string) {
	if !p.IsSetCpuMaximum() {
		return NamespaceLimit_CpuMaximum_DEFAULT
	}
	return *p.CpuMaximum
}

var NamespaceLimit_CpuMinimum_DEFAULT string

func (p *NamespaceLimit) GetCpuMinimum() (v string) {
	if !p.IsSetCpuMinimum() {
		return NamespaceLimit_CpuMinimum_DEFAULT
	}
	return *p.CpuMinimum
}

var NamespaceLimit_MemoryMaximum_DEFAULT string

func (p *NamespaceLimit) GetMemoryMaximum() (v string) {
	if !p.IsSetMemoryMaximum() {
		return NamespaceLimit_MemoryMaximum_DEFAULT
	}
	return *p.MemoryMaximum
}

var NamespaceLimit_MemoryMinimum_DEFAULT string

func (p *NamespaceLimit) GetMemoryMinimum() (v string) {
	if !p.IsSetMemoryMinimum() {
		return NamespaceLimit_MemoryMinimum_DEFAULT
	}
	return *p.MemoryMinimum
}

var NamespaceLimit_PodCpuMaximum_DEFAULT string

func (p *NamespaceLimit) GetPodCpuMaximum() (v string) {
	if !p.IsSetPodCpuMaximum() {
		return NamespaceLimit_PodCpuMaximum_DEFAULT
	}
	return *p.PodCpuMaximum
}

var NamespaceLimit_PodMemoryMaximum_DEFAULT string

func (p *NamespaceLimit) GetPodMemoryMaximum() (v string) {
	if !p.IsSetPodMemoryMaximum() {
		return NamespaceLimit_PodMemoryMaximum_DEFAULT
	}
	return *p.PodMemoryMaximum
}

var NamespaceLimit_StorageMaximum_DEFAULT string

func (p *NamespaceLimit) GetStorageMaximum() (v string) {
	if !p.IsSetStorageMaximum() {
		return NamespaceLimit_StorageMaximum_DEFAULT
	}
	return *p.StorageMaximum
}

var NamespaceLimit_StorageMinimum_DEFAULT string

func (p *NamespaceLimit) GetStorageMinimum() (v string) {
	if !p.IsSetStorageMinimum() {
		return NamespaceLimit_StorageMinimum_DEFAULT
	}
	return *p.StorageMinimum
}
func (p *NamespaceLimit) SetCpuRequest(val *string) {
	p.CpuRequest = val
}
func (p *NamespaceLimit) SetCpuLimit(val *string) {
	p.CpuLimit = val
}
func (p *NamespaceLimit) SetMemoryRequest(val *string) {
	p.MemoryRequest = val
}
func (p *NamespaceLimit) SetMemoryLimit(val *string) {
	p.MemoryLimit = val
}
func (p *NamespaceLimit) SetCpuMaximum(val *string) {
	p.CpuMaximum = val
}
func (p *NamespaceLimit) SetCpuMinimum(val *string) {
	p.CpuMinimum = val
}
func (p *NamespaceLimit) SetMemoryMaximum(val *string) {
	p.MemoryMaximum = val
}
func (p *NamespaceLimit) SetMemoryMinimum(val *string) {
	p.MemoryMinimum = val
}
func (p *NamespaceLimit) SetPodCpuMaximum(val *string) {
	p.PodCpuMaximum = val
}
func (p *NamespaceLimit) SetPodMemoryMaximum(val *string) {
	p.PodMemoryMaximum = val
}
func (p *NamespaceLimit) SetStorageMaximum(val *string) {
	p.StorageMaximum = val
}
func (p *NamespaceLimit) SetStorageMinimum(val *string) {
	p.StorageMinimum = val
}

var fieldIDToName_NamespaceLimit = map[int16]string{
	1:  "CpuRequest",
	2:  "CpuLimit",
	3:  "MemoryRequest",
	4:  "MemoryLimit",
	5:  "CpuMaximum",
	6:  "CpuMinimum",
	7:  "MemoryMaximum",
	8:  "MemoryMinimum",
	9:  "PodCpuMaximum",
	10: "PodMemoryMaximum",
	11: "StorageMaximum",
	12: "StorageMinimum",
}

func (p *NamespaceLimit) IsSetCpuRequest() bool {
	return p.CpuRequest != nil
}

func (p *NamespaceLimit) IsSetCpuLimit() bool {
	return p.CpuLimit != nil
}

func (p *NamespaceLimit) IsSetMemoryRequest() bool {
	return p.MemoryRequest != nil
}

func (p *NamespaceLimit) IsSetMemoryLimit() bool {
	return p.MemoryLimit != nil
}

func (p *NamespaceLimit) IsSetCpuMaximum() bool {
	return p.CpuMaximum != nil
}

func (p *NamespaceLimit) IsSetCpuMinimum() bool {
	return p.CpuMinimum != nil
}

func (p *NamespaceLimit) IsSetMemoryMaximum() bool {
	return p.MemoryMaximum != nil
}

func (p *NamespaceLimit) IsSetMemoryMinimum() bool {
	return p.MemoryMinimum != nil
}

func (p *NamespaceLimit) IsSetPodCpuMaximum() bool {
	return p.PodCpuMaximum != nil
}

func (p *NamespaceLimit) IsSetPodMemoryMaximum() bool {
	return p.PodMemoryMaximum != nil
}

func (p *NamespaceLimit) IsSetStorageMaximum() bool {
	return p.StorageMaximum != nil
}

func (p *NamespaceLimit) IsSetStorageMinimum() bool {
	return p.StorageMinimum != nil
}

func (p *NamespaceLimit) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NamespaceLimit[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NamespaceLimit) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuRequest = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuLimit = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryRequest = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryLimit = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuMaximum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuMinimum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryMaximum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryMinimum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodCpuMaximum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodMemoryMaximum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StorageMaximum = &v
	}
	return nil
}

func (p *NamespaceLimit) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StorageMinimum = &v
	}
	return nil
}

func (p *NamespaceLimit) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NamespaceLimit"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NamespaceLimit) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuRequest() {
		if err = oprot.WriteFieldBegin("CpuRequest", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NamespaceLimit) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLimit() {
		if err = oprot.WriteFieldBegin("CpuLimit", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NamespaceLimit) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryRequest() {
		if err = oprot.WriteFieldBegin("MemoryRequest", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NamespaceLimit) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryLimit() {
		if err = oprot.WriteFieldBegin("MemoryLimit", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NamespaceLimit) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuMaximum() {
		if err = oprot.WriteFieldBegin("CpuMaximum", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuMaximum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NamespaceLimit) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuMinimum() {
		if err = oprot.WriteFieldBegin("CpuMinimum", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CpuMinimum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NamespaceLimit) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryMaximum() {
		if err = oprot.WriteFieldBegin("MemoryMaximum", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryMaximum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NamespaceLimit) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryMinimum() {
		if err = oprot.WriteFieldBegin("MemoryMinimum", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MemoryMinimum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NamespaceLimit) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodCpuMaximum() {
		if err = oprot.WriteFieldBegin("PodCpuMaximum", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PodCpuMaximum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NamespaceLimit) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodMemoryMaximum() {
		if err = oprot.WriteFieldBegin("PodMemoryMaximum", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PodMemoryMaximum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NamespaceLimit) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMaximum() {
		if err = oprot.WriteFieldBegin("StorageMaximum", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageMaximum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NamespaceLimit) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageMinimum() {
		if err = oprot.WriteFieldBegin("StorageMinimum", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StorageMinimum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *NamespaceLimit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NamespaceLimit(%+v)", *p)
}

func (p *NamespaceLimit) DeepEqual(ano *NamespaceLimit) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CpuRequest) {
		return false
	}
	if !p.Field2DeepEqual(ano.CpuLimit) {
		return false
	}
	if !p.Field3DeepEqual(ano.MemoryRequest) {
		return false
	}
	if !p.Field4DeepEqual(ano.MemoryLimit) {
		return false
	}
	if !p.Field5DeepEqual(ano.CpuMaximum) {
		return false
	}
	if !p.Field6DeepEqual(ano.CpuMinimum) {
		return false
	}
	if !p.Field7DeepEqual(ano.MemoryMaximum) {
		return false
	}
	if !p.Field8DeepEqual(ano.MemoryMinimum) {
		return false
	}
	if !p.Field9DeepEqual(ano.PodCpuMaximum) {
		return false
	}
	if !p.Field10DeepEqual(ano.PodMemoryMaximum) {
		return false
	}
	if !p.Field11DeepEqual(ano.StorageMaximum) {
		return false
	}
	if !p.Field12DeepEqual(ano.StorageMinimum) {
		return false
	}
	return true
}

func (p *NamespaceLimit) Field1DeepEqual(src *string) bool {

	if p.CpuRequest == src {
		return true
	} else if p.CpuRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field2DeepEqual(src *string) bool {

	if p.CpuLimit == src {
		return true
	} else if p.CpuLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field3DeepEqual(src *string) bool {

	if p.MemoryRequest == src {
		return true
	} else if p.MemoryRequest == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryRequest, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field4DeepEqual(src *string) bool {

	if p.MemoryLimit == src {
		return true
	} else if p.MemoryLimit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryLimit, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field5DeepEqual(src *string) bool {

	if p.CpuMaximum == src {
		return true
	} else if p.CpuMaximum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuMaximum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field6DeepEqual(src *string) bool {

	if p.CpuMinimum == src {
		return true
	} else if p.CpuMinimum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CpuMinimum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field7DeepEqual(src *string) bool {

	if p.MemoryMaximum == src {
		return true
	} else if p.MemoryMaximum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryMaximum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field8DeepEqual(src *string) bool {

	if p.MemoryMinimum == src {
		return true
	} else if p.MemoryMinimum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MemoryMinimum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field9DeepEqual(src *string) bool {

	if p.PodCpuMaximum == src {
		return true
	} else if p.PodCpuMaximum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PodCpuMaximum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field10DeepEqual(src *string) bool {

	if p.PodMemoryMaximum == src {
		return true
	} else if p.PodMemoryMaximum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PodMemoryMaximum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field11DeepEqual(src *string) bool {

	if p.StorageMaximum == src {
		return true
	} else if p.StorageMaximum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageMaximum, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceLimit) Field12DeepEqual(src *string) bool {

	if p.StorageMinimum == src {
		return true
	} else if p.StorageMinimum == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StorageMinimum, *src) != 0 {
		return false
	}
	return true
}

type ListNamespaceRequest struct {
	ClusterId string              `thrift:"ClusterId,1,required" validate:"required"`
	Start     int32               `thrift:"Start,2" validate:"gte=0"`
	Limit     int32               `thrift:"Limit,3" validate:"gte=0"`
	Filters   map[string][]string `thrift:"Filters,4" json:"Filters,omitempty"`
	Top       *base.TopParam      `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base          `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNamespaceRequest() *ListNamespaceRequest {
	return &ListNamespaceRequest{

		Start: 0,
		Limit: 10,
	}
}

func (p *ListNamespaceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListNamespaceRequest_Start_DEFAULT int32 = 0

func (p *ListNamespaceRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListNamespaceRequest_Start_DEFAULT
	}
	return p.Start
}

var ListNamespaceRequest_Limit_DEFAULT int32 = 10

func (p *ListNamespaceRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListNamespaceRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListNamespaceRequest_Filters_DEFAULT map[string][]string

func (p *ListNamespaceRequest) GetFilters() (v map[string][]string) {
	if !p.IsSetFilters() {
		return ListNamespaceRequest_Filters_DEFAULT
	}
	return p.Filters
}

var ListNamespaceRequest_Top_DEFAULT *base.TopParam

func (p *ListNamespaceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNamespaceRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNamespaceRequest_Base_DEFAULT *base.Base

func (p *ListNamespaceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNamespaceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNamespaceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNamespaceRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListNamespaceRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListNamespaceRequest) SetFilters(val map[string][]string) {
	p.Filters = val
}
func (p *ListNamespaceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNamespaceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNamespaceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Start",
	3:   "Limit",
	4:   "Filters",
	254: "Top",
	255: "Base",
}

func (p *ListNamespaceRequest) IsSetStart() bool {
	return p.Start != ListNamespaceRequest_Start_DEFAULT
}

func (p *ListNamespaceRequest) IsSetLimit() bool {
	return p.Limit != ListNamespaceRequest_Limit_DEFAULT
}

func (p *ListNamespaceRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ListNamespaceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNamespaceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNamespaceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNamespaceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNamespaceRequest[fieldId]))
}

func (p *ListNamespaceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNamespaceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListNamespaceRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListNamespaceRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Filters = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Filters[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNamespaceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNamespaceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNamespaceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNamespaceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNamespaceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNamespaceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNamespaceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNamespaceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("Filters", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Filters)); err != nil {
			return err
		}
		for k, v := range p.Filters {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListNamespaceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNamespaceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNamespaceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNamespaceRequest(%+v)", *p)
}

func (p *ListNamespaceRequest) DeepEqual(ano *ListNamespaceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Start) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNamespaceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNamespaceRequest) Field2DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListNamespaceRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListNamespaceRequest) Field4DeepEqual(src map[string][]string) bool {

	if len(p.Filters) != len(src) {
		return false
	}
	for k, v := range p.Filters {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *ListNamespaceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNamespaceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type NamespaceItem struct {
	Name        string          `thrift:"Name,1,required" validate:"required"`
	Labels      []*helper.Label `thrift:"Labels,2,required" validate:"required"`
	Description *string         `thrift:"Description,3" json:"Description,omitempty"`
	CreateTime  string          `thrift:"CreateTime,4,required" validate:"required"`
	Status      string          `thrift:"Status,5,required" validate:"required"`
}

func NewNamespaceItem() *NamespaceItem {
	return &NamespaceItem{}
}

func (p *NamespaceItem) GetName() (v string) {
	return p.Name
}

func (p *NamespaceItem) GetLabels() (v []*helper.Label) {
	return p.Labels
}

var NamespaceItem_Description_DEFAULT string

func (p *NamespaceItem) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return NamespaceItem_Description_DEFAULT
	}
	return *p.Description
}

func (p *NamespaceItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *NamespaceItem) GetStatus() (v string) {
	return p.Status
}
func (p *NamespaceItem) SetName(val string) {
	p.Name = val
}
func (p *NamespaceItem) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *NamespaceItem) SetDescription(val *string) {
	p.Description = val
}
func (p *NamespaceItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *NamespaceItem) SetStatus(val string) {
	p.Status = val
}

var fieldIDToName_NamespaceItem = map[int16]string{
	1: "Name",
	2: "Labels",
	3: "Description",
	4: "CreateTime",
	5: "Status",
}

func (p *NamespaceItem) IsSetDescription() bool {
	return p.Description != nil
}

func (p *NamespaceItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetLabels bool = false
	var issetCreateTime bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NamespaceItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NamespaceItem[fieldId]))
}

func (p *NamespaceItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *NamespaceItem) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NamespaceItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *NamespaceItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *NamespaceItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *NamespaceItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NamespaceItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NamespaceItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NamespaceItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NamespaceItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NamespaceItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NamespaceItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NamespaceItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NamespaceItem(%+v)", *p)
}

func (p *NamespaceItem) DeepEqual(ano *NamespaceItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *NamespaceItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceItem) Field2DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NamespaceItem) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *NamespaceItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}

type ListNamespaceResponse struct {
	Items      []*NamespaceItem `thrift:"Items,1,required" validate:"required"`
	Total      int32            `thrift:"Total,2,required" validate:"required"`
	IsAllValue bool             `thrift:"IsAllValue,3,required" validate:"required"`
	Base       *base.Base       `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNamespaceResponse() *ListNamespaceResponse {
	return &ListNamespaceResponse{}
}

func (p *ListNamespaceResponse) GetItems() (v []*NamespaceItem) {
	return p.Items
}

func (p *ListNamespaceResponse) GetTotal() (v int32) {
	return p.Total
}

func (p *ListNamespaceResponse) GetIsAllValue() (v bool) {
	return p.IsAllValue
}

var ListNamespaceResponse_Base_DEFAULT *base.Base

func (p *ListNamespaceResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNamespaceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNamespaceResponse) SetItems(val []*NamespaceItem) {
	p.Items = val
}
func (p *ListNamespaceResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListNamespaceResponse) SetIsAllValue(val bool) {
	p.IsAllValue = val
}
func (p *ListNamespaceResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNamespaceResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	3:   "IsAllValue",
	255: "Base",
}

func (p *ListNamespaceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNamespaceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false
	var issetIsAllValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsAllValue = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIsAllValue {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNamespaceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNamespaceResponse[fieldId]))
}

func (p *ListNamespaceResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*NamespaceItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNamespaceItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNamespaceResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListNamespaceResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsAllValue = v
	}
	return nil
}

func (p *ListNamespaceResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNamespaceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNamespaceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNamespaceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNamespaceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListNamespaceResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsAllValue", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsAllValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListNamespaceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNamespaceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNamespaceResponse(%+v)", *p)
}

func (p *ListNamespaceResponse) DeepEqual(ano *ListNamespaceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsAllValue) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNamespaceResponse) Field1DeepEqual(src []*NamespaceItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNamespaceResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListNamespaceResponse) Field3DeepEqual(src bool) bool {

	if p.IsAllValue != src {
		return false
	}
	return true
}
func (p *ListNamespaceResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNamespaceRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required"`
	Name      string         `thrift:"Name,2,required" validate:"required"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNamespaceRequest() *GetNamespaceRequest {
	return &GetNamespaceRequest{}
}

func (p *GetNamespaceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetNamespaceRequest) GetName() (v string) {
	return p.Name
}

var GetNamespaceRequest_Top_DEFAULT *base.TopParam

func (p *GetNamespaceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetNamespaceRequest_Top_DEFAULT
	}
	return p.Top
}

var GetNamespaceRequest_Base_DEFAULT *base.Base

func (p *GetNamespaceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNamespaceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNamespaceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetNamespaceRequest) SetName(val string) {
	p.Name = val
}
func (p *GetNamespaceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetNamespaceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNamespaceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	254: "Top",
	255: "Base",
}

func (p *GetNamespaceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetNamespaceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNamespaceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNamespaceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNamespaceRequest[fieldId]))
}

func (p *GetNamespaceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetNamespaceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetNamespaceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespaceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNamespaceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNamespaceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNamespaceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetNamespaceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNamespaceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNamespaceRequest(%+v)", *p)
}

func (p *GetNamespaceRequest) DeepEqual(ano *GetNamespaceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNamespaceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNamespaceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNamespaceResponse struct {
	Name        string          `thrift:"Name,1,required" validate:"required"`
	Labels      []*helper.Label `thrift:"Labels,2,required" validate:"required"`
	Description *string         `thrift:"Description,3" json:"Description,omitempty"`
	CreateTime  string          `thrift:"CreateTime,4,required" validate:"required"`
	Status      string          `thrift:"Status,5,required" validate:"required"`
	Base        *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNamespaceResponse() *GetNamespaceResponse {
	return &GetNamespaceResponse{}
}

func (p *GetNamespaceResponse) GetName() (v string) {
	return p.Name
}

func (p *GetNamespaceResponse) GetLabels() (v []*helper.Label) {
	return p.Labels
}

var GetNamespaceResponse_Description_DEFAULT string

func (p *GetNamespaceResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetNamespaceResponse_Description_DEFAULT
	}
	return *p.Description
}

func (p *GetNamespaceResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetNamespaceResponse) GetStatus() (v string) {
	return p.Status
}

var GetNamespaceResponse_Base_DEFAULT *base.Base

func (p *GetNamespaceResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNamespaceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNamespaceResponse) SetName(val string) {
	p.Name = val
}
func (p *GetNamespaceResponse) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *GetNamespaceResponse) SetDescription(val *string) {
	p.Description = val
}
func (p *GetNamespaceResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetNamespaceResponse) SetStatus(val string) {
	p.Status = val
}
func (p *GetNamespaceResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNamespaceResponse = map[int16]string{
	1:   "Name",
	2:   "Labels",
	3:   "Description",
	4:   "CreateTime",
	5:   "Status",
	255: "Base",
}

func (p *GetNamespaceResponse) IsSetDescription() bool {
	return p.Description != nil
}

func (p *GetNamespaceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNamespaceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetLabels bool = false
	var issetCreateTime bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNamespaceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNamespaceResponse[fieldId]))
}

func (p *GetNamespaceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetNamespaceResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *GetNamespaceResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetNamespaceResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetNamespaceResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespaceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNamespaceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNamespaceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNamespaceResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNamespaceResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetNamespaceResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetNamespaceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNamespaceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNamespaceResponse(%+v)", *p)
}

func (p *GetNamespaceResponse) DeepEqual(ano *GetNamespaceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNamespaceResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResponse) Field2DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetNamespaceResponse) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateNamespaceRequest struct {
	ClusterId   string          `thrift:"ClusterId,1,required" validate:"required"`
	Name        string          `thrift:"Name,2,required" validate:"required,k8sName"`
	Labels      []*helper.Label `thrift:"Labels,3" validate:"k8sLabel"`
	Description *string         `thrift:"Description,4" json:"Description,omitempty"`
	Top         *base.TopParam  `thrift:"Top,254,required" json:"Top"`
	Base        *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCreateNamespaceRequest() *CreateNamespaceRequest {
	return &CreateNamespaceRequest{}
}

func (p *CreateNamespaceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateNamespaceRequest) GetName() (v string) {
	return p.Name
}

var CreateNamespaceRequest_Labels_DEFAULT []*helper.Label

func (p *CreateNamespaceRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return CreateNamespaceRequest_Labels_DEFAULT
	}
	return p.Labels
}

var CreateNamespaceRequest_Description_DEFAULT string

func (p *CreateNamespaceRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateNamespaceRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateNamespaceRequest_Top_DEFAULT *base.TopParam

func (p *CreateNamespaceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateNamespaceRequest_Top_DEFAULT
	}
	return p.Top
}

var CreateNamespaceRequest_Base_DEFAULT *base.Base

func (p *CreateNamespaceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateNamespaceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateNamespaceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateNamespaceRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateNamespaceRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *CreateNamespaceRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateNamespaceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *CreateNamespaceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateNamespaceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	3:   "Labels",
	4:   "Description",
	254: "Top",
	255: "Base",
}

func (p *CreateNamespaceRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *CreateNamespaceRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateNamespaceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateNamespaceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateNamespaceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateNamespaceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateNamespaceRequest[fieldId]))
}

func (p *CreateNamespaceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateNamespaceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateNamespaceRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateNamespaceRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *CreateNamespaceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNamespaceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNamespaceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNamespaceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateNamespaceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateNamespaceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateNamespaceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateNamespaceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateNamespaceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *CreateNamespaceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateNamespaceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNamespaceRequest(%+v)", *p)
}

func (p *CreateNamespaceRequest) DeepEqual(ano *CreateNamespaceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateNamespaceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateNamespaceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateNamespaceRequest) Field3DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateNamespaceRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateNamespaceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateNamespaceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateNamespaceResponse struct {
	Name string     `thrift:"Name,1,required" validate:"required"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCreateNamespaceResponse() *CreateNamespaceResponse {
	return &CreateNamespaceResponse{}
}

func (p *CreateNamespaceResponse) GetName() (v string) {
	return p.Name
}

var CreateNamespaceResponse_Base_DEFAULT *base.Base

func (p *CreateNamespaceResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateNamespaceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateNamespaceResponse) SetName(val string) {
	p.Name = val
}
func (p *CreateNamespaceResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateNamespaceResponse = map[int16]string{
	1:   "Name",
	255: "Base",
}

func (p *CreateNamespaceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateNamespaceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateNamespaceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateNamespaceResponse[fieldId]))
}

func (p *CreateNamespaceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateNamespaceResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateNamespaceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNamespaceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateNamespaceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateNamespaceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateNamespaceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateNamespaceResponse(%+v)", *p)
}

func (p *CreateNamespaceResponse) DeepEqual(ano *CreateNamespaceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateNamespaceResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateNamespaceResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNamespaceRequest struct {
	ClusterId   string          `thrift:"ClusterId,1,required" validate:"required"`
	Name        string          `thrift:"Name,2,required" validate:"required"`
	Labels      []*helper.Label `thrift:"Labels,3" validate:"k8sLabel"`
	Description *string         `thrift:"Description,4" json:"Description,omitempty"`
	Top         *base.TopParam  `thrift:"Top,254,required" json:"Top"`
	Base        *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNamespaceRequest() *UpdateNamespaceRequest {
	return &UpdateNamespaceRequest{}
}

func (p *UpdateNamespaceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *UpdateNamespaceRequest) GetName() (v string) {
	return p.Name
}

var UpdateNamespaceRequest_Labels_DEFAULT []*helper.Label

func (p *UpdateNamespaceRequest) GetLabels() (v []*helper.Label) {
	if !p.IsSetLabels() {
		return UpdateNamespaceRequest_Labels_DEFAULT
	}
	return p.Labels
}

var UpdateNamespaceRequest_Description_DEFAULT string

func (p *UpdateNamespaceRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdateNamespaceRequest_Description_DEFAULT
	}
	return *p.Description
}

var UpdateNamespaceRequest_Top_DEFAULT *base.TopParam

func (p *UpdateNamespaceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateNamespaceRequest_Top_DEFAULT
	}
	return p.Top
}

var UpdateNamespaceRequest_Base_DEFAULT *base.Base

func (p *UpdateNamespaceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNamespaceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNamespaceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *UpdateNamespaceRequest) SetName(val string) {
	p.Name = val
}
func (p *UpdateNamespaceRequest) SetLabels(val []*helper.Label) {
	p.Labels = val
}
func (p *UpdateNamespaceRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateNamespaceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpdateNamespaceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNamespaceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	3:   "Labels",
	4:   "Description",
	254: "Top",
	255: "Base",
}

func (p *UpdateNamespaceRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *UpdateNamespaceRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateNamespaceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateNamespaceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNamespaceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNamespaceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNamespaceRequest[fieldId]))
}

func (p *UpdateNamespaceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *UpdateNamespaceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UpdateNamespaceRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*helper.Label, 0, size)
	for i := 0; i < size; i++ {
		_elem := helper.NewLabel()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = &v
	}
	return nil
}

func (p *UpdateNamespaceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespaceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNamespaceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNamespaceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateNamespaceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateNamespaceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateNamespaceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpdateNamespaceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNamespaceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNamespaceRequest(%+v)", *p)
}

func (p *UpdateNamespaceRequest) DeepEqual(ano *UpdateNamespaceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNamespaceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceRequest) Field3DeepEqual(src []*helper.Label) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateNamespaceRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNamespaceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNamespaceResponse struct {
	Name string     `thrift:"Name,1,required" validate:"required"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNamespaceResponse() *UpdateNamespaceResponse {
	return &UpdateNamespaceResponse{}
}

func (p *UpdateNamespaceResponse) GetName() (v string) {
	return p.Name
}

var UpdateNamespaceResponse_Base_DEFAULT *base.Base

func (p *UpdateNamespaceResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNamespaceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNamespaceResponse) SetName(val string) {
	p.Name = val
}
func (p *UpdateNamespaceResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNamespaceResponse = map[int16]string{
	1:   "Name",
	255: "Base",
}

func (p *UpdateNamespaceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNamespaceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNamespaceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNamespaceResponse[fieldId]))
}

func (p *UpdateNamespaceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UpdateNamespaceResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespaceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNamespaceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNamespaceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNamespaceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNamespaceResponse(%+v)", *p)
}

func (p *UpdateNamespaceResponse) DeepEqual(ano *UpdateNamespaceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNamespaceResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNamespaceResourceRequest struct {
	ClusterId string                `thrift:"ClusterId,1,required" validate:"required"`
	Name      string                `thrift:"Name,2,required" validate:"required"`
	Quota     *NamespaceQuotaConfig `thrift:"Quota,3" json:"Quota,omitempty"`
	Limit     *NamespaceLimit       `thrift:"Limit,4" json:"Limit,omitempty"`
	Top       *base.TopParam        `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base            `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNamespaceResourceRequest() *UpdateNamespaceResourceRequest {
	return &UpdateNamespaceResourceRequest{}
}

func (p *UpdateNamespaceResourceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *UpdateNamespaceResourceRequest) GetName() (v string) {
	return p.Name
}

var UpdateNamespaceResourceRequest_Quota_DEFAULT *NamespaceQuotaConfig

func (p *UpdateNamespaceResourceRequest) GetQuota() (v *NamespaceQuotaConfig) {
	if !p.IsSetQuota() {
		return UpdateNamespaceResourceRequest_Quota_DEFAULT
	}
	return p.Quota
}

var UpdateNamespaceResourceRequest_Limit_DEFAULT *NamespaceLimit

func (p *UpdateNamespaceResourceRequest) GetLimit() (v *NamespaceLimit) {
	if !p.IsSetLimit() {
		return UpdateNamespaceResourceRequest_Limit_DEFAULT
	}
	return p.Limit
}

var UpdateNamespaceResourceRequest_Top_DEFAULT *base.TopParam

func (p *UpdateNamespaceResourceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateNamespaceResourceRequest_Top_DEFAULT
	}
	return p.Top
}

var UpdateNamespaceResourceRequest_Base_DEFAULT *base.Base

func (p *UpdateNamespaceResourceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNamespaceResourceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNamespaceResourceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *UpdateNamespaceResourceRequest) SetName(val string) {
	p.Name = val
}
func (p *UpdateNamespaceResourceRequest) SetQuota(val *NamespaceQuotaConfig) {
	p.Quota = val
}
func (p *UpdateNamespaceResourceRequest) SetLimit(val *NamespaceLimit) {
	p.Limit = val
}
func (p *UpdateNamespaceResourceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *UpdateNamespaceResourceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNamespaceResourceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	3:   "Quota",
	4:   "Limit",
	254: "Top",
	255: "Base",
}

func (p *UpdateNamespaceResourceRequest) IsSetQuota() bool {
	return p.Quota != nil
}

func (p *UpdateNamespaceResourceRequest) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *UpdateNamespaceResourceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateNamespaceResourceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNamespaceResourceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNamespaceResourceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNamespaceResourceRequest[fieldId]))
}

func (p *UpdateNamespaceResourceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *UpdateNamespaceResourceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UpdateNamespaceResourceRequest) ReadField3(iprot thrift.TProtocol) error {
	p.Quota = NewNamespaceQuotaConfig()
	if err := p.Quota.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceResourceRequest) ReadField4(iprot thrift.TProtocol) error {
	p.Limit = NewNamespaceLimit()
	if err := p.Limit.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceResourceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceResourceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceResourceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespaceResourceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuota() {
		if err = oprot.WriteFieldBegin("Quota", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Quota.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Limit.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNamespaceResourceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNamespaceResourceRequest(%+v)", *p)
}

func (p *UpdateNamespaceResourceRequest) DeepEqual(ano *UpdateNamespaceResourceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Quota) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNamespaceResourceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceResourceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceResourceRequest) Field3DeepEqual(src *NamespaceQuotaConfig) bool {

	if !p.Quota.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNamespaceResourceRequest) Field4DeepEqual(src *NamespaceLimit) bool {

	if !p.Limit.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNamespaceResourceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateNamespaceResourceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateNamespaceResourceResponse struct {
	Name string     `thrift:"Name,1,required" validate:"required"`
	Base *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewUpdateNamespaceResourceResponse() *UpdateNamespaceResourceResponse {
	return &UpdateNamespaceResourceResponse{}
}

func (p *UpdateNamespaceResourceResponse) GetName() (v string) {
	return p.Name
}

var UpdateNamespaceResourceResponse_Base_DEFAULT *base.Base

func (p *UpdateNamespaceResourceResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return UpdateNamespaceResourceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateNamespaceResourceResponse) SetName(val string) {
	p.Name = val
}
func (p *UpdateNamespaceResourceResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateNamespaceResourceResponse = map[int16]string{
	1:   "Name",
	255: "Base",
}

func (p *UpdateNamespaceResourceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateNamespaceResourceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateNamespaceResourceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateNamespaceResourceResponse[fieldId]))
}

func (p *UpdateNamespaceResourceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UpdateNamespaceResourceResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateNamespaceResourceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespaceResourceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateNamespaceResourceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateNamespaceResourceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateNamespaceResourceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateNamespaceResourceResponse(%+v)", *p)
}

func (p *UpdateNamespaceResourceResponse) DeepEqual(ano *UpdateNamespaceResourceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateNamespaceResourceResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateNamespaceResourceResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNamespaceResourceRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required"`
	Name      string         `thrift:"Name,2,required" validate:"required"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNamespaceResourceRequest() *GetNamespaceResourceRequest {
	return &GetNamespaceResourceRequest{}
}

func (p *GetNamespaceResourceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetNamespaceResourceRequest) GetName() (v string) {
	return p.Name
}

var GetNamespaceResourceRequest_Top_DEFAULT *base.TopParam

func (p *GetNamespaceResourceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetNamespaceResourceRequest_Top_DEFAULT
	}
	return p.Top
}

var GetNamespaceResourceRequest_Base_DEFAULT *base.Base

func (p *GetNamespaceResourceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNamespaceResourceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNamespaceResourceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetNamespaceResourceRequest) SetName(val string) {
	p.Name = val
}
func (p *GetNamespaceResourceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetNamespaceResourceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNamespaceResourceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	254: "Top",
	255: "Base",
}

func (p *GetNamespaceResourceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetNamespaceResourceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNamespaceResourceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNamespaceResourceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNamespaceResourceRequest[fieldId]))
}

func (p *GetNamespaceResourceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetNamespaceResourceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetNamespaceResourceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResourceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResourceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespaceResourceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNamespaceResourceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNamespaceResourceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNamespaceResourceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetNamespaceResourceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNamespaceResourceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNamespaceResourceRequest(%+v)", *p)
}

func (p *GetNamespaceResourceRequest) DeepEqual(ano *GetNamespaceResourceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNamespaceResourceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResourceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResourceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNamespaceResourceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetNamespaceResourceResponse struct {
	Name  string          `thrift:"Name,1,required" validate:"required"`
	Quota *NamespaceQuota `thrift:"Quota,2,required" validate:"required"`
	Limit *NamespaceLimit `thrift:"Limit,3,required" validate:"required"`
	Base  *base.Base      `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetNamespaceResourceResponse() *GetNamespaceResourceResponse {
	return &GetNamespaceResourceResponse{}
}

func (p *GetNamespaceResourceResponse) GetName() (v string) {
	return p.Name
}

var GetNamespaceResourceResponse_Quota_DEFAULT *NamespaceQuota

func (p *GetNamespaceResourceResponse) GetQuota() (v *NamespaceQuota) {
	if !p.IsSetQuota() {
		return GetNamespaceResourceResponse_Quota_DEFAULT
	}
	return p.Quota
}

var GetNamespaceResourceResponse_Limit_DEFAULT *NamespaceLimit

func (p *GetNamespaceResourceResponse) GetLimit() (v *NamespaceLimit) {
	if !p.IsSetLimit() {
		return GetNamespaceResourceResponse_Limit_DEFAULT
	}
	return p.Limit
}

var GetNamespaceResourceResponse_Base_DEFAULT *base.Base

func (p *GetNamespaceResourceResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetNamespaceResourceResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetNamespaceResourceResponse) SetName(val string) {
	p.Name = val
}
func (p *GetNamespaceResourceResponse) SetQuota(val *NamespaceQuota) {
	p.Quota = val
}
func (p *GetNamespaceResourceResponse) SetLimit(val *NamespaceLimit) {
	p.Limit = val
}
func (p *GetNamespaceResourceResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetNamespaceResourceResponse = map[int16]string{
	1:   "Name",
	2:   "Quota",
	3:   "Limit",
	255: "Base",
}

func (p *GetNamespaceResourceResponse) IsSetQuota() bool {
	return p.Quota != nil
}

func (p *GetNamespaceResourceResponse) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *GetNamespaceResourceResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetNamespaceResourceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetQuota bool = false
	var issetLimit bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetQuota = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetQuota {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLimit {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetNamespaceResourceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetNamespaceResourceResponse[fieldId]))
}

func (p *GetNamespaceResourceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetNamespaceResourceResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Quota = NewNamespaceQuota()
	if err := p.Quota.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResourceResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Limit = NewNamespaceLimit()
	if err := p.Limit.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResourceResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetNamespaceResourceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespaceResourceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetNamespaceResourceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetNamespaceResourceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Quota", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Quota.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetNamespaceResourceResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Limit", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Limit.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetNamespaceResourceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetNamespaceResourceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetNamespaceResourceResponse(%+v)", *p)
}

func (p *GetNamespaceResourceResponse) DeepEqual(ano *GetNamespaceResourceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Quota) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetNamespaceResourceResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetNamespaceResourceResponse) Field2DeepEqual(src *NamespaceQuota) bool {

	if !p.Quota.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNamespaceResourceResponse) Field3DeepEqual(src *NamespaceLimit) bool {

	if !p.Limit.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetNamespaceResourceResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteNamespaceRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required"`
	Name      string         `thrift:"Name,2,required" validate:"required"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewDeleteNamespaceRequest() *DeleteNamespaceRequest {
	return &DeleteNamespaceRequest{}
}

func (p *DeleteNamespaceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *DeleteNamespaceRequest) GetName() (v string) {
	return p.Name
}

var DeleteNamespaceRequest_Top_DEFAULT *base.TopParam

func (p *DeleteNamespaceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return DeleteNamespaceRequest_Top_DEFAULT
	}
	return p.Top
}

var DeleteNamespaceRequest_Base_DEFAULT *base.Base

func (p *DeleteNamespaceRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return DeleteNamespaceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteNamespaceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *DeleteNamespaceRequest) SetName(val string) {
	p.Name = val
}
func (p *DeleteNamespaceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *DeleteNamespaceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteNamespaceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	254: "Top",
	255: "Base",
}

func (p *DeleteNamespaceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *DeleteNamespaceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteNamespaceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteNamespaceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeleteNamespaceRequest[fieldId]))
}

func (p *DeleteNamespaceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *DeleteNamespaceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *DeleteNamespaceRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNamespaceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteNamespaceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNamespaceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNamespaceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteNamespaceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteNamespaceRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *DeleteNamespaceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteNamespaceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNamespaceRequest(%+v)", *p)
}

func (p *DeleteNamespaceRequest) DeepEqual(ano *DeleteNamespaceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteNamespaceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteNamespaceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteNamespaceRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DeleteNamespaceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteNamespaceResponse struct {
}

func NewDeleteNamespaceResponse() *DeleteNamespaceResponse {
	return &DeleteNamespaceResponse{}
}

var fieldIDToName_DeleteNamespaceResponse = map[int16]string{}

func (p *DeleteNamespaceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteNamespaceResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("DeleteNamespaceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteNamespaceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteNamespaceResponse(%+v)", *p)
}

func (p *DeleteNamespaceResponse) DeepEqual(ano *DeleteNamespaceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type ListResourceQuotaRequest struct {
	ClusterId string              `thrift:"ClusterId,1,required" validate:"required"`
	Start     int32               `thrift:"Start,2" validate:"gte=0"`
	Limit     int32               `thrift:"Limit,3" validate:"gte=0"`
	Filters   map[string][]string `thrift:"Filters,4" json:"Filters,omitempty"`
	Top       *base.TopParam      `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base          `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListResourceQuotaRequest() *ListResourceQuotaRequest {
	return &ListResourceQuotaRequest{

		Start: 0,
		Limit: 10,
	}
}

func (p *ListResourceQuotaRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListResourceQuotaRequest_Start_DEFAULT int32 = 0

func (p *ListResourceQuotaRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListResourceQuotaRequest_Start_DEFAULT
	}
	return p.Start
}

var ListResourceQuotaRequest_Limit_DEFAULT int32 = 10

func (p *ListResourceQuotaRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListResourceQuotaRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListResourceQuotaRequest_Filters_DEFAULT map[string][]string

func (p *ListResourceQuotaRequest) GetFilters() (v map[string][]string) {
	if !p.IsSetFilters() {
		return ListResourceQuotaRequest_Filters_DEFAULT
	}
	return p.Filters
}

var ListResourceQuotaRequest_Top_DEFAULT *base.TopParam

func (p *ListResourceQuotaRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListResourceQuotaRequest_Top_DEFAULT
	}
	return p.Top
}

var ListResourceQuotaRequest_Base_DEFAULT *base.Base

func (p *ListResourceQuotaRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListResourceQuotaRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListResourceQuotaRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListResourceQuotaRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListResourceQuotaRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListResourceQuotaRequest) SetFilters(val map[string][]string) {
	p.Filters = val
}
func (p *ListResourceQuotaRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListResourceQuotaRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListResourceQuotaRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Start",
	3:   "Limit",
	4:   "Filters",
	254: "Top",
	255: "Base",
}

func (p *ListResourceQuotaRequest) IsSetStart() bool {
	return p.Start != ListResourceQuotaRequest_Start_DEFAULT
}

func (p *ListResourceQuotaRequest) IsSetLimit() bool {
	return p.Limit != ListResourceQuotaRequest_Limit_DEFAULT
}

func (p *ListResourceQuotaRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ListResourceQuotaRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListResourceQuotaRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListResourceQuotaRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListResourceQuotaRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListResourceQuotaRequest[fieldId]))
}

func (p *ListResourceQuotaRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListResourceQuotaRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListResourceQuotaRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListResourceQuotaRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Filters = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Filters[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListResourceQuotaRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListResourceQuotaRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListResourceQuotaRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListResourceQuotaRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListResourceQuotaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListResourceQuotaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListResourceQuotaRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListResourceQuotaRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("Filters", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Filters)); err != nil {
			return err
		}
		for k, v := range p.Filters {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListResourceQuotaRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListResourceQuotaRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListResourceQuotaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListResourceQuotaRequest(%+v)", *p)
}

func (p *ListResourceQuotaRequest) DeepEqual(ano *ListResourceQuotaRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Start) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListResourceQuotaRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListResourceQuotaRequest) Field2DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListResourceQuotaRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListResourceQuotaRequest) Field4DeepEqual(src map[string][]string) bool {

	if len(p.Filters) != len(src) {
		return false
	}
	for k, v := range p.Filters {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *ListResourceQuotaRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListResourceQuotaRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListResourceQuotaResponse struct {
	Items []*NamespaceQuota `thrift:"Items,1,required" validate:"required"`
	Total int32             `thrift:"Total,2,required" validate:"required"`
	Base  *base.Base        `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListResourceQuotaResponse() *ListResourceQuotaResponse {
	return &ListResourceQuotaResponse{}
}

func (p *ListResourceQuotaResponse) GetItems() (v []*NamespaceQuota) {
	return p.Items
}

func (p *ListResourceQuotaResponse) GetTotal() (v int32) {
	return p.Total
}

var ListResourceQuotaResponse_Base_DEFAULT *base.Base

func (p *ListResourceQuotaResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListResourceQuotaResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListResourceQuotaResponse) SetItems(val []*NamespaceQuota) {
	p.Items = val
}
func (p *ListResourceQuotaResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListResourceQuotaResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListResourceQuotaResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListResourceQuotaResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListResourceQuotaResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListResourceQuotaResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListResourceQuotaResponse[fieldId]))
}

func (p *ListResourceQuotaResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*NamespaceQuota, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNamespaceQuota()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListResourceQuotaResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListResourceQuotaResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListResourceQuotaResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListResourceQuotaResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListResourceQuotaResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListResourceQuotaResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListResourceQuotaResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListResourceQuotaResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListResourceQuotaResponse(%+v)", *p)
}

func (p *ListResourceQuotaResponse) DeepEqual(ano *ListResourceQuotaResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListResourceQuotaResponse) Field1DeepEqual(src []*NamespaceQuota) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListResourceQuotaResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListResourceQuotaResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CheckCidrConflictRequest struct {
	ClusterType string         `thrift:"ClusterType,1,required" validate:"required,oneof=Managed"`
	VpcId       string         `thrift:"VpcId,2,required" json:"VpcId"`
	PodCidr     string         `thrift:"PodCidr,3,required" json:"PodCidr"`
	ServiceCidr string         `thrift:"ServiceCidr,4,required" json:"ServiceCidr"`
	Top         *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base        *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCheckCidrConflictRequest() *CheckCidrConflictRequest {
	return &CheckCidrConflictRequest{}
}

func (p *CheckCidrConflictRequest) GetClusterType() (v string) {
	return p.ClusterType
}

func (p *CheckCidrConflictRequest) GetVpcId() (v string) {
	return p.VpcId
}

func (p *CheckCidrConflictRequest) GetPodCidr() (v string) {
	return p.PodCidr
}

func (p *CheckCidrConflictRequest) GetServiceCidr() (v string) {
	return p.ServiceCidr
}

var CheckCidrConflictRequest_Top_DEFAULT *base.TopParam

func (p *CheckCidrConflictRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CheckCidrConflictRequest_Top_DEFAULT
	}
	return p.Top
}

var CheckCidrConflictRequest_Base_DEFAULT *base.Base

func (p *CheckCidrConflictRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CheckCidrConflictRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CheckCidrConflictRequest) SetClusterType(val string) {
	p.ClusterType = val
}
func (p *CheckCidrConflictRequest) SetVpcId(val string) {
	p.VpcId = val
}
func (p *CheckCidrConflictRequest) SetPodCidr(val string) {
	p.PodCidr = val
}
func (p *CheckCidrConflictRequest) SetServiceCidr(val string) {
	p.ServiceCidr = val
}
func (p *CheckCidrConflictRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *CheckCidrConflictRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CheckCidrConflictRequest = map[int16]string{
	1:   "ClusterType",
	2:   "VpcId",
	3:   "PodCidr",
	4:   "ServiceCidr",
	254: "Top",
	255: "Base",
}

func (p *CheckCidrConflictRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CheckCidrConflictRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CheckCidrConflictRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterType bool = false
	var issetVpcId bool = false
	var issetPodCidr bool = false
	var issetServiceCidr bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpcId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetServiceCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVpcId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPodCidr {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetServiceCidr {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckCidrConflictRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CheckCidrConflictRequest[fieldId]))
}

func (p *CheckCidrConflictRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterType = v
	}
	return nil
}

func (p *CheckCidrConflictRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VpcId = v
	}
	return nil
}

func (p *CheckCidrConflictRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodCidr = v
	}
	return nil
}

func (p *CheckCidrConflictRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceCidr = v
	}
	return nil
}

func (p *CheckCidrConflictRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckCidrConflictRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckCidrConflictRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckCidrConflictRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckCidrConflictRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckCidrConflictRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VpcId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VpcId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckCidrConflictRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodCidr", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PodCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CheckCidrConflictRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ServiceCidr", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CheckCidrConflictRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *CheckCidrConflictRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckCidrConflictRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckCidrConflictRequest(%+v)", *p)
}

func (p *CheckCidrConflictRequest) DeepEqual(ano *CheckCidrConflictRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterType) {
		return false
	}
	if !p.Field2DeepEqual(ano.VpcId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PodCidr) {
		return false
	}
	if !p.Field4DeepEqual(ano.ServiceCidr) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CheckCidrConflictRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterType, src) != 0 {
		return false
	}
	return true
}
func (p *CheckCidrConflictRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VpcId, src) != 0 {
		return false
	}
	return true
}
func (p *CheckCidrConflictRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.PodCidr, src) != 0 {
		return false
	}
	return true
}
func (p *CheckCidrConflictRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ServiceCidr, src) != 0 {
		return false
	}
	return true
}
func (p *CheckCidrConflictRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CheckCidrConflictRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CheckCidrConflictResponse struct {
	IsConflict   bool       `thrift:"IsConflict,1,required" json:"IsConflict"`
	Reason       string     `thrift:"Reason,2,required" json:"Reason"`
	ConflictType string     `thrift:"ConflictType,3,required" json:"ConflictType"`
	Base         *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewCheckCidrConflictResponse() *CheckCidrConflictResponse {
	return &CheckCidrConflictResponse{}
}

func (p *CheckCidrConflictResponse) GetIsConflict() (v bool) {
	return p.IsConflict
}

func (p *CheckCidrConflictResponse) GetReason() (v string) {
	return p.Reason
}

func (p *CheckCidrConflictResponse) GetConflictType() (v string) {
	return p.ConflictType
}

var CheckCidrConflictResponse_Base_DEFAULT *base.Base

func (p *CheckCidrConflictResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CheckCidrConflictResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *CheckCidrConflictResponse) SetIsConflict(val bool) {
	p.IsConflict = val
}
func (p *CheckCidrConflictResponse) SetReason(val string) {
	p.Reason = val
}
func (p *CheckCidrConflictResponse) SetConflictType(val string) {
	p.ConflictType = val
}
func (p *CheckCidrConflictResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CheckCidrConflictResponse = map[int16]string{
	1:   "IsConflict",
	2:   "Reason",
	3:   "ConflictType",
	255: "Base",
}

func (p *CheckCidrConflictResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *CheckCidrConflictResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetIsConflict bool = false
	var issetReason bool = false
	var issetConflictType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsConflict = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetReason = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetConflictType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetIsConflict {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetReason {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetConflictType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckCidrConflictResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CheckCidrConflictResponse[fieldId]))
}

func (p *CheckCidrConflictResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsConflict = v
	}
	return nil
}

func (p *CheckCidrConflictResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Reason = v
	}
	return nil
}

func (p *CheckCidrConflictResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ConflictType = v
	}
	return nil
}

func (p *CheckCidrConflictResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckCidrConflictResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckCidrConflictResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckCidrConflictResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsConflict", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsConflict); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckCidrConflictResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Reason", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Reason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckCidrConflictResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ConflictType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConflictType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CheckCidrConflictResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckCidrConflictResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckCidrConflictResponse(%+v)", *p)
}

func (p *CheckCidrConflictResponse) DeepEqual(ano *CheckCidrConflictResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsConflict) {
		return false
	}
	if !p.Field2DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConflictType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CheckCidrConflictResponse) Field1DeepEqual(src bool) bool {

	if p.IsConflict != src {
		return false
	}
	return true
}
func (p *CheckCidrConflictResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Reason, src) != 0 {
		return false
	}
	return true
}
func (p *CheckCidrConflictResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ConflictType, src) != 0 {
		return false
	}
	return true
}
func (p *CheckCidrConflictResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RecommendCidrRequest struct {
	ClusterType string         `thrift:"ClusterType,1,required" validate:"required,oneof=Managed"`
	VpcId       string         `thrift:"VpcId,2,required" json:"VpcId"`
	Mask        *int32         `thrift:"Mask,3" json:"Mask,omitempty"`
	Top         *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base        *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewRecommendCidrRequest() *RecommendCidrRequest {
	return &RecommendCidrRequest{}
}

func (p *RecommendCidrRequest) GetClusterType() (v string) {
	return p.ClusterType
}

func (p *RecommendCidrRequest) GetVpcId() (v string) {
	return p.VpcId
}

var RecommendCidrRequest_Mask_DEFAULT int32

func (p *RecommendCidrRequest) GetMask() (v int32) {
	if !p.IsSetMask() {
		return RecommendCidrRequest_Mask_DEFAULT
	}
	return *p.Mask
}

var RecommendCidrRequest_Top_DEFAULT *base.TopParam

func (p *RecommendCidrRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return RecommendCidrRequest_Top_DEFAULT
	}
	return p.Top
}

var RecommendCidrRequest_Base_DEFAULT *base.Base

func (p *RecommendCidrRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return RecommendCidrRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RecommendCidrRequest) SetClusterType(val string) {
	p.ClusterType = val
}
func (p *RecommendCidrRequest) SetVpcId(val string) {
	p.VpcId = val
}
func (p *RecommendCidrRequest) SetMask(val *int32) {
	p.Mask = val
}
func (p *RecommendCidrRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *RecommendCidrRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RecommendCidrRequest = map[int16]string{
	1:   "ClusterType",
	2:   "VpcId",
	3:   "Mask",
	254: "Top",
	255: "Base",
}

func (p *RecommendCidrRequest) IsSetMask() bool {
	return p.Mask != nil
}

func (p *RecommendCidrRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *RecommendCidrRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RecommendCidrRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterType bool = false
	var issetVpcId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpcId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVpcId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecommendCidrRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RecommendCidrRequest[fieldId]))
}

func (p *RecommendCidrRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterType = v
	}
	return nil
}

func (p *RecommendCidrRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VpcId = v
	}
	return nil
}

func (p *RecommendCidrRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Mask = &v
	}
	return nil
}

func (p *RecommendCidrRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RecommendCidrRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RecommendCidrRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RecommendCidrRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecommendCidrRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecommendCidrRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VpcId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VpcId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecommendCidrRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMask() {
		if err = oprot.WriteFieldBegin("Mask", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Mask); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RecommendCidrRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *RecommendCidrRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RecommendCidrRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendCidrRequest(%+v)", *p)
}

func (p *RecommendCidrRequest) DeepEqual(ano *RecommendCidrRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterType) {
		return false
	}
	if !p.Field2DeepEqual(ano.VpcId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Mask) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RecommendCidrRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterType, src) != 0 {
		return false
	}
	return true
}
func (p *RecommendCidrRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VpcId, src) != 0 {
		return false
	}
	return true
}
func (p *RecommendCidrRequest) Field3DeepEqual(src *int32) bool {

	if p.Mask == src {
		return true
	} else if p.Mask == nil || src == nil {
		return false
	}
	if *p.Mask != *src {
		return false
	}
	return true
}
func (p *RecommendCidrRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RecommendCidrRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RecommendCidrResponse struct {
	PodCidr     string     `thrift:"PodCidr,1,required" json:"PodCidr"`
	ServiceCidr string     `thrift:"ServiceCidr,2,required" json:"ServiceCidr"`
	Base        *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewRecommendCidrResponse() *RecommendCidrResponse {
	return &RecommendCidrResponse{}
}

func (p *RecommendCidrResponse) GetPodCidr() (v string) {
	return p.PodCidr
}

func (p *RecommendCidrResponse) GetServiceCidr() (v string) {
	return p.ServiceCidr
}

var RecommendCidrResponse_Base_DEFAULT *base.Base

func (p *RecommendCidrResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return RecommendCidrResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *RecommendCidrResponse) SetPodCidr(val string) {
	p.PodCidr = val
}
func (p *RecommendCidrResponse) SetServiceCidr(val string) {
	p.ServiceCidr = val
}
func (p *RecommendCidrResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RecommendCidrResponse = map[int16]string{
	1:   "PodCidr",
	2:   "ServiceCidr",
	255: "Base",
}

func (p *RecommendCidrResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *RecommendCidrResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPodCidr bool = false
	var issetServiceCidr bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetServiceCidr = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPodCidr {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetServiceCidr {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RecommendCidrResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RecommendCidrResponse[fieldId]))
}

func (p *RecommendCidrResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodCidr = v
	}
	return nil
}

func (p *RecommendCidrResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServiceCidr = v
	}
	return nil
}

func (p *RecommendCidrResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RecommendCidrResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RecommendCidrResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RecommendCidrResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodCidr", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PodCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RecommendCidrResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ServiceCidr", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServiceCidr); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RecommendCidrResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RecommendCidrResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecommendCidrResponse(%+v)", *p)
}

func (p *RecommendCidrResponse) DeepEqual(ano *RecommendCidrResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PodCidr) {
		return false
	}
	if !p.Field2DeepEqual(ano.ServiceCidr) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RecommendCidrResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PodCidr, src) != 0 {
		return false
	}
	return true
}
func (p *RecommendCidrResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ServiceCidr, src) != 0 {
		return false
	}
	return true
}
func (p *RecommendCidrResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AddVciSubnetsRequest struct {
	AccountId  int64          `thrift:"AccountId,1,required" validate:"required,gt=0"`
	ClusterId  string         `thrift:"ClusterId,2,required" validate:"required,k8sName"`
	VciSubnets []string       `thrift:"VciSubnets,3,required" validate:"required,gt=0"`
	Top        *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base       *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewAddVciSubnetsRequest() *AddVciSubnetsRequest {
	return &AddVciSubnetsRequest{}
}

func (p *AddVciSubnetsRequest) GetAccountId() (v int64) {
	return p.AccountId
}

func (p *AddVciSubnetsRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *AddVciSubnetsRequest) GetVciSubnets() (v []string) {
	return p.VciSubnets
}

var AddVciSubnetsRequest_Top_DEFAULT *base.TopParam

func (p *AddVciSubnetsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return AddVciSubnetsRequest_Top_DEFAULT
	}
	return p.Top
}

var AddVciSubnetsRequest_Base_DEFAULT *base.Base

func (p *AddVciSubnetsRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddVciSubnetsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *AddVciSubnetsRequest) SetAccountId(val int64) {
	p.AccountId = val
}
func (p *AddVciSubnetsRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *AddVciSubnetsRequest) SetVciSubnets(val []string) {
	p.VciSubnets = val
}
func (p *AddVciSubnetsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *AddVciSubnetsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_AddVciSubnetsRequest = map[int16]string{
	1:   "AccountId",
	2:   "ClusterId",
	3:   "VciSubnets",
	254: "Top",
	255: "Base",
}

func (p *AddVciSubnetsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *AddVciSubnetsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddVciSubnetsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAccountId bool = false
	var issetClusterId bool = false
	var issetVciSubnets bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAccountId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVciSubnets = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAccountId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetClusterId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVciSubnets {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddVciSubnetsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_AddVciSubnetsRequest[fieldId]))
}

func (p *AddVciSubnetsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.AccountId = v
	}
	return nil
}

func (p *AddVciSubnetsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *AddVciSubnetsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VciSubnets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.VciSubnets = append(p.VciSubnets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AddVciSubnetsRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddVciSubnetsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddVciSubnetsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddVciSubnetsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddVciSubnetsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AccountId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.AccountId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddVciSubnetsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AddVciSubnetsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VciSubnets", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VciSubnets)); err != nil {
		return err
	}
	for _, v := range p.VciSubnets {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AddVciSubnetsRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *AddVciSubnetsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AddVciSubnetsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddVciSubnetsRequest(%+v)", *p)
}

func (p *AddVciSubnetsRequest) DeepEqual(ano *AddVciSubnetsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccountId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field3DeepEqual(ano.VciSubnets) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AddVciSubnetsRequest) Field1DeepEqual(src int64) bool {

	if p.AccountId != src {
		return false
	}
	return true
}
func (p *AddVciSubnetsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *AddVciSubnetsRequest) Field3DeepEqual(src []string) bool {

	if len(p.VciSubnets) != len(src) {
		return false
	}
	for i, v := range p.VciSubnets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *AddVciSubnetsRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AddVciSubnetsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type AddVciSubnetsResponse struct {
	VciSubnets []string   `thrift:"VciSubnets,1,required" json:"VciSubnets"`
	Base       *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewAddVciSubnetsResponse() *AddVciSubnetsResponse {
	return &AddVciSubnetsResponse{}
}

func (p *AddVciSubnetsResponse) GetVciSubnets() (v []string) {
	return p.VciSubnets
}

var AddVciSubnetsResponse_Base_DEFAULT *base.Base

func (p *AddVciSubnetsResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return AddVciSubnetsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *AddVciSubnetsResponse) SetVciSubnets(val []string) {
	p.VciSubnets = val
}
func (p *AddVciSubnetsResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_AddVciSubnetsResponse = map[int16]string{
	1:   "VciSubnets",
	255: "Base",
}

func (p *AddVciSubnetsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddVciSubnetsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVciSubnets bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVciSubnets = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVciSubnets {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AddVciSubnetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_AddVciSubnetsResponse[fieldId]))
}

func (p *AddVciSubnetsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VciSubnets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.VciSubnets = append(p.VciSubnets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AddVciSubnetsResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AddVciSubnetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddVciSubnetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AddVciSubnetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VciSubnets", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VciSubnets)); err != nil {
		return err
	}
	for _, v := range p.VciSubnets {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AddVciSubnetsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *AddVciSubnetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddVciSubnetsResponse(%+v)", *p)
}

func (p *AddVciSubnetsResponse) DeepEqual(ano *AddVciSubnetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VciSubnets) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AddVciSubnetsResponse) Field1DeepEqual(src []string) bool {

	if len(p.VciSubnets) != len(src) {
		return false
	}
	for i, v := range p.VciSubnets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *AddVciSubnetsResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodeZonesRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" validate:"required,k8sName"`
	Top       *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodeZonesRequest() *ListNodeZonesRequest {
	return &ListNodeZonesRequest{}
}

func (p *ListNodeZonesRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListNodeZonesRequest_Top_DEFAULT *base.TopParam

func (p *ListNodeZonesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListNodeZonesRequest_Top_DEFAULT
	}
	return p.Top
}

var ListNodeZonesRequest_Base_DEFAULT *base.Base

func (p *ListNodeZonesRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodeZonesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodeZonesRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListNodeZonesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListNodeZonesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodeZonesRequest = map[int16]string{
	1:   "ClusterId",
	254: "Top",
	255: "Base",
}

func (p *ListNodeZonesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListNodeZonesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodeZonesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodeZonesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListNodeZonesRequest[fieldId]))
}

func (p *ListNodeZonesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListNodeZonesRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeZonesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeZonesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeZonesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodeZonesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodeZonesRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListNodeZonesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodeZonesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodeZonesRequest(%+v)", *p)
}

func (p *ListNodeZonesRequest) DeepEqual(ano *ListNodeZonesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodeZonesRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListNodeZonesRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListNodeZonesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListNodeZonesResponse struct {
	Zones []*iaas.Zone `thrift:"Zones,1" json:"Zones,omitempty"`
	Base  *base.Base   `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListNodeZonesResponse() *ListNodeZonesResponse {
	return &ListNodeZonesResponse{}
}

var ListNodeZonesResponse_Zones_DEFAULT []*iaas.Zone

func (p *ListNodeZonesResponse) GetZones() (v []*iaas.Zone) {
	if !p.IsSetZones() {
		return ListNodeZonesResponse_Zones_DEFAULT
	}
	return p.Zones
}

var ListNodeZonesResponse_Base_DEFAULT *base.Base

func (p *ListNodeZonesResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListNodeZonesResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListNodeZonesResponse) SetZones(val []*iaas.Zone) {
	p.Zones = val
}
func (p *ListNodeZonesResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListNodeZonesResponse = map[int16]string{
	1:   "Zones",
	255: "Base",
}

func (p *ListNodeZonesResponse) IsSetZones() bool {
	return p.Zones != nil
}

func (p *ListNodeZonesResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListNodeZonesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListNodeZonesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListNodeZonesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Zones = make([]*iaas.Zone, 0, size)
	for i := 0; i < size; i++ {
		_elem := iaas.NewZone()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Zones = append(p.Zones, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeZonesResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListNodeZonesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeZonesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListNodeZonesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetZones() {
		if err = oprot.WriteFieldBegin("Zones", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Zones)); err != nil {
			return err
		}
		for _, v := range p.Zones {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListNodeZonesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListNodeZonesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListNodeZonesResponse(%+v)", *p)
}

func (p *ListNodeZonesResponse) DeepEqual(ano *ListNodeZonesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Zones) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListNodeZonesResponse) Field1DeepEqual(src []*iaas.Zone) bool {

	if len(p.Zones) != len(src) {
		return false
	}
	for i, v := range p.Zones {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListNodeZonesResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
