// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package iaascommon

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type NetworkInterface struct {
	NetworkInterfaceId   string   `thrift:"NetworkInterfaceId,1,required" json:"NetworkInterfaceId"`
	NetworkInterfaceName string   `thrift:"NetworkInterfaceName,2,required" json:"NetworkInterfaceName"`
	Type                 string   `thrift:"Type,3,required" json:"Type"`
	MacAddress           string   `thrift:"MacAddress,4,required" json:"MacAddress"`
	Status               string   `thrift:"status,5,required" json:"status"`
	SubnetId             string   `thrift:"SubnetId,6,required" json:"SubnetId"`
	PrimaryIpAddress     string   `thrift:"PrimaryIpAddress,7,required" json:"PrimaryIpAddress"`
	SecurityGroupIds     []string `thrift:"SecurityGroupIds,8,required" json:"SecurityGroupIds"`
	VpcId                string   `thrift:"VpcId,9,required" json:"VpcId"`
	VpcName              string   `thrift:"VpcName,10,required" json:"VpcName"`
	EipAddress           string   `thrift:"EipAddress,11,required" json:"EipAddress"`
}

func NewNetworkInterface() *NetworkInterface {
	return &NetworkInterface{}
}

func (p *NetworkInterface) GetNetworkInterfaceId() (v string) {
	return p.NetworkInterfaceId
}

func (p *NetworkInterface) GetNetworkInterfaceName() (v string) {
	return p.NetworkInterfaceName
}

func (p *NetworkInterface) GetType() (v string) {
	return p.Type
}

func (p *NetworkInterface) GetMacAddress() (v string) {
	return p.MacAddress
}

func (p *NetworkInterface) GetStatus() (v string) {
	return p.Status
}

func (p *NetworkInterface) GetSubnetId() (v string) {
	return p.SubnetId
}

func (p *NetworkInterface) GetPrimaryIpAddress() (v string) {
	return p.PrimaryIpAddress
}

func (p *NetworkInterface) GetSecurityGroupIds() (v []string) {
	return p.SecurityGroupIds
}

func (p *NetworkInterface) GetVpcId() (v string) {
	return p.VpcId
}

func (p *NetworkInterface) GetVpcName() (v string) {
	return p.VpcName
}

func (p *NetworkInterface) GetEipAddress() (v string) {
	return p.EipAddress
}
func (p *NetworkInterface) SetNetworkInterfaceId(val string) {
	p.NetworkInterfaceId = val
}
func (p *NetworkInterface) SetNetworkInterfaceName(val string) {
	p.NetworkInterfaceName = val
}
func (p *NetworkInterface) SetType(val string) {
	p.Type = val
}
func (p *NetworkInterface) SetMacAddress(val string) {
	p.MacAddress = val
}
func (p *NetworkInterface) SetStatus(val string) {
	p.Status = val
}
func (p *NetworkInterface) SetSubnetId(val string) {
	p.SubnetId = val
}
func (p *NetworkInterface) SetPrimaryIpAddress(val string) {
	p.PrimaryIpAddress = val
}
func (p *NetworkInterface) SetSecurityGroupIds(val []string) {
	p.SecurityGroupIds = val
}
func (p *NetworkInterface) SetVpcId(val string) {
	p.VpcId = val
}
func (p *NetworkInterface) SetVpcName(val string) {
	p.VpcName = val
}
func (p *NetworkInterface) SetEipAddress(val string) {
	p.EipAddress = val
}

var fieldIDToName_NetworkInterface = map[int16]string{
	1:  "NetworkInterfaceId",
	2:  "NetworkInterfaceName",
	3:  "Type",
	4:  "MacAddress",
	5:  "status",
	6:  "SubnetId",
	7:  "PrimaryIpAddress",
	8:  "SecurityGroupIds",
	9:  "VpcId",
	10: "VpcName",
	11: "EipAddress",
}

func (p *NetworkInterface) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNetworkInterfaceId bool = false
	var issetNetworkInterfaceName bool = false
	var issetType bool = false
	var issetMacAddress bool = false
	var issetStatus bool = false
	var issetSubnetId bool = false
	var issetPrimaryIpAddress bool = false
	var issetSecurityGroupIds bool = false
	var issetVpcId bool = false
	var issetVpcName bool = false
	var issetEipAddress bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetworkInterfaceId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetworkInterfaceName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetMacAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetSubnetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrimaryIpAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecurityGroupIds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpcId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetVpcName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetEipAddress = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNetworkInterfaceId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNetworkInterfaceName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetMacAddress {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetSubnetId {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetPrimaryIpAddress {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSecurityGroupIds {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetVpcId {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetVpcName {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetEipAddress {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NetworkInterface[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NetworkInterface[fieldId]))
}

func (p *NetworkInterface) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NetworkInterfaceId = v
	}
	return nil
}

func (p *NetworkInterface) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NetworkInterfaceName = v
	}
	return nil
}

func (p *NetworkInterface) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *NetworkInterface) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MacAddress = v
	}
	return nil
}

func (p *NetworkInterface) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *NetworkInterface) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubnetId = v
	}
	return nil
}

func (p *NetworkInterface) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PrimaryIpAddress = v
	}
	return nil
}

func (p *NetworkInterface) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SecurityGroupIds = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.SecurityGroupIds = append(p.SecurityGroupIds, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkInterface) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VpcId = v
	}
	return nil
}

func (p *NetworkInterface) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VpcName = v
	}
	return nil
}

func (p *NetworkInterface) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EipAddress = v
	}
	return nil
}

func (p *NetworkInterface) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NetworkInterface"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NetworkInterface) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetworkInterfaceId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NetworkInterfaceId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NetworkInterface) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetworkInterfaceName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NetworkInterfaceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NetworkInterface) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NetworkInterface) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MacAddress", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MacAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NetworkInterface) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NetworkInterface) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SubnetId", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SubnetId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NetworkInterface) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PrimaryIpAddress", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PrimaryIpAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *NetworkInterface) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SecurityGroupIds", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.SecurityGroupIds)); err != nil {
		return err
	}
	for _, v := range p.SecurityGroupIds {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *NetworkInterface) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VpcId", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VpcId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *NetworkInterface) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VpcName", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VpcName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *NetworkInterface) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("EipAddress", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EipAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *NetworkInterface) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NetworkInterface(%+v)", *p)
}

func (p *NetworkInterface) DeepEqual(ano *NetworkInterface) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.NetworkInterfaceId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NetworkInterfaceName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.MacAddress) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.SubnetId) {
		return false
	}
	if !p.Field7DeepEqual(ano.PrimaryIpAddress) {
		return false
	}
	if !p.Field8DeepEqual(ano.SecurityGroupIds) {
		return false
	}
	if !p.Field9DeepEqual(ano.VpcId) {
		return false
	}
	if !p.Field10DeepEqual(ano.VpcName) {
		return false
	}
	if !p.Field11DeepEqual(ano.EipAddress) {
		return false
	}
	return true
}

func (p *NetworkInterface) Field1DeepEqual(src string) bool {

	if strings.Compare(p.NetworkInterfaceId, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field2DeepEqual(src string) bool {

	if strings.Compare(p.NetworkInterfaceName, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field4DeepEqual(src string) bool {

	if strings.Compare(p.MacAddress, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field6DeepEqual(src string) bool {

	if strings.Compare(p.SubnetId, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field7DeepEqual(src string) bool {

	if strings.Compare(p.PrimaryIpAddress, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field8DeepEqual(src []string) bool {

	if len(p.SecurityGroupIds) != len(src) {
		return false
	}
	for i, v := range p.SecurityGroupIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *NetworkInterface) Field9DeepEqual(src string) bool {

	if strings.Compare(p.VpcId, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field10DeepEqual(src string) bool {

	if strings.Compare(p.VpcName, src) != 0 {
		return false
	}
	return true
}
func (p *NetworkInterface) Field11DeepEqual(src string) bool {

	if strings.Compare(p.EipAddress, src) != 0 {
		return false
	}
	return true
}

type InstanceType struct {
	Id                       string        `thrift:"Id,1,required" json:"Id"`
	InstanceTypeFamily       string        `thrift:"InstanceTypeFamily,2,required" json:"InstanceTypeFamily"`
	Cpu                      int32         `thrift:"Cpu,3,required" json:"Cpu"`
	Mem                      int32         `thrift:"Mem,4,required" json:"Mem"`
	NetMbpsQuota             int32         `thrift:"NetMbpsQuota,5,required" json:"NetMbpsQuota"`
	NetKppsQuota             int32         `thrift:"NetKppsQuota,6,required" json:"NetKppsQuota"`
	NetSessionQuota          int32         `thrift:"NetSessionQuota,7,required" json:"NetSessionQuota"`
	NetworkInterfaceNumQuota int32         `thrift:"NetworkInterfaceNumQuota,8,required" json:"NetworkInterfaceNumQuota"`
	Architecture             string        `thrift:"Architecture,9,required" json:"Architecture"`
	VolumeTypes              []string      `thrift:"VolumeTypes,10,required" json:"VolumeTypes"`
	Gpu                      *GpuInfo      `thrift:"Gpu,11,required" json:"Gpu"`
	Type                     string        `thrift:"Type,12,required" json:"Type"`
	Rdma                     *RdmaMetadata `thrift:"Rdma,13,required" json:"Rdma"`
}

func NewInstanceType() *InstanceType {
	return &InstanceType{}
}

func (p *InstanceType) GetId() (v string) {
	return p.Id
}

func (p *InstanceType) GetInstanceTypeFamily() (v string) {
	return p.InstanceTypeFamily
}

func (p *InstanceType) GetCpu() (v int32) {
	return p.Cpu
}

func (p *InstanceType) GetMem() (v int32) {
	return p.Mem
}

func (p *InstanceType) GetNetMbpsQuota() (v int32) {
	return p.NetMbpsQuota
}

func (p *InstanceType) GetNetKppsQuota() (v int32) {
	return p.NetKppsQuota
}

func (p *InstanceType) GetNetSessionQuota() (v int32) {
	return p.NetSessionQuota
}

func (p *InstanceType) GetNetworkInterfaceNumQuota() (v int32) {
	return p.NetworkInterfaceNumQuota
}

func (p *InstanceType) GetArchitecture() (v string) {
	return p.Architecture
}

func (p *InstanceType) GetVolumeTypes() (v []string) {
	return p.VolumeTypes
}

var InstanceType_Gpu_DEFAULT *GpuInfo

func (p *InstanceType) GetGpu() (v *GpuInfo) {
	if !p.IsSetGpu() {
		return InstanceType_Gpu_DEFAULT
	}
	return p.Gpu
}

func (p *InstanceType) GetType() (v string) {
	return p.Type
}

var InstanceType_Rdma_DEFAULT *RdmaMetadata

func (p *InstanceType) GetRdma() (v *RdmaMetadata) {
	if !p.IsSetRdma() {
		return InstanceType_Rdma_DEFAULT
	}
	return p.Rdma
}
func (p *InstanceType) SetId(val string) {
	p.Id = val
}
func (p *InstanceType) SetInstanceTypeFamily(val string) {
	p.InstanceTypeFamily = val
}
func (p *InstanceType) SetCpu(val int32) {
	p.Cpu = val
}
func (p *InstanceType) SetMem(val int32) {
	p.Mem = val
}
func (p *InstanceType) SetNetMbpsQuota(val int32) {
	p.NetMbpsQuota = val
}
func (p *InstanceType) SetNetKppsQuota(val int32) {
	p.NetKppsQuota = val
}
func (p *InstanceType) SetNetSessionQuota(val int32) {
	p.NetSessionQuota = val
}
func (p *InstanceType) SetNetworkInterfaceNumQuota(val int32) {
	p.NetworkInterfaceNumQuota = val
}
func (p *InstanceType) SetArchitecture(val string) {
	p.Architecture = val
}
func (p *InstanceType) SetVolumeTypes(val []string) {
	p.VolumeTypes = val
}
func (p *InstanceType) SetGpu(val *GpuInfo) {
	p.Gpu = val
}
func (p *InstanceType) SetType(val string) {
	p.Type = val
}
func (p *InstanceType) SetRdma(val *RdmaMetadata) {
	p.Rdma = val
}

var fieldIDToName_InstanceType = map[int16]string{
	1:  "Id",
	2:  "InstanceTypeFamily",
	3:  "Cpu",
	4:  "Mem",
	5:  "NetMbpsQuota",
	6:  "NetKppsQuota",
	7:  "NetSessionQuota",
	8:  "NetworkInterfaceNumQuota",
	9:  "Architecture",
	10: "VolumeTypes",
	11: "Gpu",
	12: "Type",
	13: "Rdma",
}

func (p *InstanceType) IsSetGpu() bool {
	return p.Gpu != nil
}

func (p *InstanceType) IsSetRdma() bool {
	return p.Rdma != nil
}

func (p *InstanceType) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetInstanceTypeFamily bool = false
	var issetCpu bool = false
	var issetMem bool = false
	var issetNetMbpsQuota bool = false
	var issetNetKppsQuota bool = false
	var issetNetSessionQuota bool = false
	var issetNetworkInterfaceNumQuota bool = false
	var issetArchitecture bool = false
	var issetVolumeTypes bool = false
	var issetGpu bool = false
	var issetType bool = false
	var issetRdma bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceTypeFamily = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetMem = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetMbpsQuota = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetKppsQuota = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetSessionQuota = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetNetworkInterfaceNumQuota = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetArchitecture = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumeTypes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetGpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetRdma = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInstanceTypeFamily {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCpu {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetMem {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNetMbpsQuota {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNetKppsQuota {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetNetSessionQuota {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNetworkInterfaceNumQuota {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetArchitecture {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetVolumeTypes {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetGpu {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetRdma {
		fieldId = 13
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InstanceType[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_InstanceType[fieldId]))
}

func (p *InstanceType) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *InstanceType) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.InstanceTypeFamily = v
	}
	return nil
}

func (p *InstanceType) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Cpu = v
	}
	return nil
}

func (p *InstanceType) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Mem = v
	}
	return nil
}

func (p *InstanceType) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NetMbpsQuota = v
	}
	return nil
}

func (p *InstanceType) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NetKppsQuota = v
	}
	return nil
}

func (p *InstanceType) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NetSessionQuota = v
	}
	return nil
}

func (p *InstanceType) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NetworkInterfaceNumQuota = v
	}
	return nil
}

func (p *InstanceType) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Architecture = v
	}
	return nil
}

func (p *InstanceType) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VolumeTypes = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.VolumeTypes = append(p.VolumeTypes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *InstanceType) ReadField11(iprot thrift.TProtocol) error {
	p.Gpu = NewGpuInfo()
	if err := p.Gpu.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InstanceType) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *InstanceType) ReadField13(iprot thrift.TProtocol) error {
	p.Rdma = NewRdmaMetadata()
	if err := p.Rdma.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InstanceType) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InstanceType"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InstanceType) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InstanceType) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceTypeFamily", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.InstanceTypeFamily); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *InstanceType) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Cpu", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Cpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *InstanceType) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mem", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Mem); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *InstanceType) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetMbpsQuota", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NetMbpsQuota); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *InstanceType) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetKppsQuota", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NetKppsQuota); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *InstanceType) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetSessionQuota", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NetSessionQuota); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *InstanceType) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NetworkInterfaceNumQuota", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NetworkInterfaceNumQuota); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *InstanceType) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Architecture", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Architecture); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *InstanceType) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VolumeTypes", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VolumeTypes)); err != nil {
		return err
	}
	for _, v := range p.VolumeTypes {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *InstanceType) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Gpu", thrift.STRUCT, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Gpu.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *InstanceType) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *InstanceType) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Rdma", thrift.STRUCT, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Rdma.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *InstanceType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InstanceType(%+v)", *p)
}

func (p *InstanceType) DeepEqual(ano *InstanceType) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.InstanceTypeFamily) {
		return false
	}
	if !p.Field3DeepEqual(ano.Cpu) {
		return false
	}
	if !p.Field4DeepEqual(ano.Mem) {
		return false
	}
	if !p.Field5DeepEqual(ano.NetMbpsQuota) {
		return false
	}
	if !p.Field6DeepEqual(ano.NetKppsQuota) {
		return false
	}
	if !p.Field7DeepEqual(ano.NetSessionQuota) {
		return false
	}
	if !p.Field8DeepEqual(ano.NetworkInterfaceNumQuota) {
		return false
	}
	if !p.Field9DeepEqual(ano.Architecture) {
		return false
	}
	if !p.Field10DeepEqual(ano.VolumeTypes) {
		return false
	}
	if !p.Field11DeepEqual(ano.Gpu) {
		return false
	}
	if !p.Field12DeepEqual(ano.Type) {
		return false
	}
	if !p.Field13DeepEqual(ano.Rdma) {
		return false
	}
	return true
}

func (p *InstanceType) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field2DeepEqual(src string) bool {

	if strings.Compare(p.InstanceTypeFamily, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field3DeepEqual(src int32) bool {

	if p.Cpu != src {
		return false
	}
	return true
}
func (p *InstanceType) Field4DeepEqual(src int32) bool {

	if p.Mem != src {
		return false
	}
	return true
}
func (p *InstanceType) Field5DeepEqual(src int32) bool {

	if p.NetMbpsQuota != src {
		return false
	}
	return true
}
func (p *InstanceType) Field6DeepEqual(src int32) bool {

	if p.NetKppsQuota != src {
		return false
	}
	return true
}
func (p *InstanceType) Field7DeepEqual(src int32) bool {

	if p.NetSessionQuota != src {
		return false
	}
	return true
}
func (p *InstanceType) Field8DeepEqual(src int32) bool {

	if p.NetworkInterfaceNumQuota != src {
		return false
	}
	return true
}
func (p *InstanceType) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Architecture, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field10DeepEqual(src []string) bool {

	if len(p.VolumeTypes) != len(src) {
		return false
	}
	for i, v := range p.VolumeTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *InstanceType) Field11DeepEqual(src *GpuInfo) bool {

	if !p.Gpu.DeepEqual(src) {
		return false
	}
	return true
}
func (p *InstanceType) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *InstanceType) Field13DeepEqual(src *RdmaMetadata) bool {

	if !p.Rdma.DeepEqual(src) {
		return false
	}
	return true
}

type GpuInfo struct {
	TotalCount int32            `thrift:"TotalCount,1,required" json:"TotalCount"`
	TotalMem   int32            `thrift:"TotalMem,2,required" json:"TotalMem"`
	GpuDevices []*GpuDeviceInfo `thrift:"GpuDevices,3,required" json:"GpuDevices"`
}

func NewGpuInfo() *GpuInfo {
	return &GpuInfo{}
}

func (p *GpuInfo) GetTotalCount() (v int32) {
	return p.TotalCount
}

func (p *GpuInfo) GetTotalMem() (v int32) {
	return p.TotalMem
}

func (p *GpuInfo) GetGpuDevices() (v []*GpuDeviceInfo) {
	return p.GpuDevices
}
func (p *GpuInfo) SetTotalCount(val int32) {
	p.TotalCount = val
}
func (p *GpuInfo) SetTotalMem(val int32) {
	p.TotalMem = val
}
func (p *GpuInfo) SetGpuDevices(val []*GpuDeviceInfo) {
	p.GpuDevices = val
}

var fieldIDToName_GpuInfo = map[int16]string{
	1: "TotalCount",
	2: "TotalMem",
	3: "GpuDevices",
}

func (p *GpuInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCount bool = false
	var issetTotalMem bool = false
	var issetGpuDevices bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalMem = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetGpuDevices = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotalMem {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetGpuDevices {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GpuInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GpuInfo[fieldId]))
}

func (p *GpuInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *GpuInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalMem = v
	}
	return nil
}

func (p *GpuInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.GpuDevices = make([]*GpuDeviceInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewGpuDeviceInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.GpuDevices = append(p.GpuDevices, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GpuInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GpuInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GpuInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCount", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GpuInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalMem", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalMem); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GpuInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GpuDevices", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GpuDevices)); err != nil {
		return err
	}
	for _, v := range p.GpuDevices {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GpuInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GpuInfo(%+v)", *p)
}

func (p *GpuInfo) DeepEqual(ano *GpuInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.TotalMem) {
		return false
	}
	if !p.Field3DeepEqual(ano.GpuDevices) {
		return false
	}
	return true
}

func (p *GpuInfo) Field1DeepEqual(src int32) bool {

	if p.TotalCount != src {
		return false
	}
	return true
}
func (p *GpuInfo) Field2DeepEqual(src int32) bool {

	if p.TotalMem != src {
		return false
	}
	return true
}
func (p *GpuInfo) Field3DeepEqual(src []*GpuDeviceInfo) bool {

	if len(p.GpuDevices) != len(src) {
		return false
	}
	for i, v := range p.GpuDevices {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GpuDeviceInfo struct {
	Model string `thrift:"Model,1,required" json:"Model"`
	Mem   int32  `thrift:"Mem,2,required" json:"Mem"`
	Count int32  `thrift:"Count,3,required" json:"Count"`
}

func NewGpuDeviceInfo() *GpuDeviceInfo {
	return &GpuDeviceInfo{}
}

func (p *GpuDeviceInfo) GetModel() (v string) {
	return p.Model
}

func (p *GpuDeviceInfo) GetMem() (v int32) {
	return p.Mem
}

func (p *GpuDeviceInfo) GetCount() (v int32) {
	return p.Count
}
func (p *GpuDeviceInfo) SetModel(val string) {
	p.Model = val
}
func (p *GpuDeviceInfo) SetMem(val int32) {
	p.Mem = val
}
func (p *GpuDeviceInfo) SetCount(val int32) {
	p.Count = val
}

var fieldIDToName_GpuDeviceInfo = map[int16]string{
	1: "Model",
	2: "Mem",
	3: "Count",
}

func (p *GpuDeviceInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetModel bool = false
	var issetMem bool = false
	var issetCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetModel = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMem = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetModel {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMem {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GpuDeviceInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GpuDeviceInfo[fieldId]))
}

func (p *GpuDeviceInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Model = v
	}
	return nil
}

func (p *GpuDeviceInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Mem = v
	}
	return nil
}

func (p *GpuDeviceInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *GpuDeviceInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GpuDeviceInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GpuDeviceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Model", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Model); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GpuDeviceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Mem", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Mem); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GpuDeviceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Count", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GpuDeviceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GpuDeviceInfo(%+v)", *p)
}

func (p *GpuDeviceInfo) DeepEqual(ano *GpuDeviceInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Model) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mem) {
		return false
	}
	if !p.Field3DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *GpuDeviceInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Model, src) != 0 {
		return false
	}
	return true
}
func (p *GpuDeviceInfo) Field2DeepEqual(src int32) bool {

	if p.Mem != src {
		return false
	}
	return true
}
func (p *GpuDeviceInfo) Field3DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}

type RdmaMetadata struct {
	RdmaEniCount     int32  `thrift:"RdmaEniCount,1,required" json:"RdmaEniCount"`
	RdmaEniBandwidth string `thrift:"RdmaEniBandwidth,2,required" json:"RdmaEniBandwidth"`
}

func NewRdmaMetadata() *RdmaMetadata {
	return &RdmaMetadata{}
}

func (p *RdmaMetadata) GetRdmaEniCount() (v int32) {
	return p.RdmaEniCount
}

func (p *RdmaMetadata) GetRdmaEniBandwidth() (v string) {
	return p.RdmaEniBandwidth
}
func (p *RdmaMetadata) SetRdmaEniCount(val int32) {
	p.RdmaEniCount = val
}
func (p *RdmaMetadata) SetRdmaEniBandwidth(val string) {
	p.RdmaEniBandwidth = val
}

var fieldIDToName_RdmaMetadata = map[int16]string{
	1: "RdmaEniCount",
	2: "RdmaEniBandwidth",
}

func (p *RdmaMetadata) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRdmaEniCount bool = false
	var issetRdmaEniBandwidth bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRdmaEniCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRdmaEniBandwidth = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRdmaEniCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRdmaEniBandwidth {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RdmaMetadata[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RdmaMetadata[fieldId]))
}

func (p *RdmaMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.RdmaEniCount = v
	}
	return nil
}

func (p *RdmaMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RdmaEniBandwidth = v
	}
	return nil
}

func (p *RdmaMetadata) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RdmaMetadata"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RdmaMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RdmaEniCount", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RdmaEniCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RdmaMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RdmaEniBandwidth", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RdmaEniBandwidth); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RdmaMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RdmaMetadata(%+v)", *p)
}

func (p *RdmaMetadata) DeepEqual(ano *RdmaMetadata) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RdmaEniCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.RdmaEniBandwidth) {
		return false
	}
	return true
}

func (p *RdmaMetadata) Field1DeepEqual(src int32) bool {

	if p.RdmaEniCount != src {
		return false
	}
	return true
}
func (p *RdmaMetadata) Field2DeepEqual(src string) bool {

	if strings.Compare(p.RdmaEniBandwidth, src) != 0 {
		return false
	}
	return true
}

type VolumeRes struct {
	VolumeId   string `thrift:"VolumeId,1,required" json:"VolumeId"`
	VolumeName string `thrift:"VolumeName,2,required" json:"VolumeName"`
	VolumeType string `thrift:"VolumeType,3,required" json:"VolumeType"`
	ImageId    string `thrift:"ImageId,4,required" json:"ImageId"`
	Size       string `thrift:"Size,5,required" json:"Size"`
	Kind       string `thrift:"Kind,6,required" json:"Kind"`
	Status     string `thrift:"Status,7,required" json:"Status"`
}

func NewVolumeRes() *VolumeRes {
	return &VolumeRes{}
}

func (p *VolumeRes) GetVolumeId() (v string) {
	return p.VolumeId
}

func (p *VolumeRes) GetVolumeName() (v string) {
	return p.VolumeName
}

func (p *VolumeRes) GetVolumeType() (v string) {
	return p.VolumeType
}

func (p *VolumeRes) GetImageId() (v string) {
	return p.ImageId
}

func (p *VolumeRes) GetSize() (v string) {
	return p.Size
}

func (p *VolumeRes) GetKind() (v string) {
	return p.Kind
}

func (p *VolumeRes) GetStatus() (v string) {
	return p.Status
}
func (p *VolumeRes) SetVolumeId(val string) {
	p.VolumeId = val
}
func (p *VolumeRes) SetVolumeName(val string) {
	p.VolumeName = val
}
func (p *VolumeRes) SetVolumeType(val string) {
	p.VolumeType = val
}
func (p *VolumeRes) SetImageId(val string) {
	p.ImageId = val
}
func (p *VolumeRes) SetSize(val string) {
	p.Size = val
}
func (p *VolumeRes) SetKind(val string) {
	p.Kind = val
}
func (p *VolumeRes) SetStatus(val string) {
	p.Status = val
}

var fieldIDToName_VolumeRes = map[int16]string{
	1: "VolumeId",
	2: "VolumeName",
	3: "VolumeType",
	4: "ImageId",
	5: "Size",
	6: "Kind",
	7: "Status",
}

func (p *VolumeRes) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVolumeId bool = false
	var issetVolumeName bool = false
	var issetVolumeType bool = false
	var issetImageId bool = false
	var issetSize bool = false
	var issetKind bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumeId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumeName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumeType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetImageId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetSize = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVolumeId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVolumeName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVolumeType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetImageId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetSize {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetKind {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VolumeRes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_VolumeRes[fieldId]))
}

func (p *VolumeRes) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VolumeId = v
	}
	return nil
}

func (p *VolumeRes) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VolumeName = v
	}
	return nil
}

func (p *VolumeRes) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VolumeType = v
	}
	return nil
}

func (p *VolumeRes) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ImageId = v
	}
	return nil
}

func (p *VolumeRes) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Size = v
	}
	return nil
}

func (p *VolumeRes) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *VolumeRes) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *VolumeRes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VolumeRes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VolumeRes) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VolumeId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VolumeId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VolumeRes) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VolumeName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VolumeName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VolumeRes) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VolumeType", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VolumeType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VolumeRes) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImageId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ImageId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VolumeRes) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Size", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Size); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VolumeRes) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VolumeRes) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VolumeRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VolumeRes(%+v)", *p)
}

func (p *VolumeRes) DeepEqual(ano *VolumeRes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VolumeId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VolumeName) {
		return false
	}
	if !p.Field3DeepEqual(ano.VolumeType) {
		return false
	}
	if !p.Field4DeepEqual(ano.ImageId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Size) {
		return false
	}
	if !p.Field6DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *VolumeRes) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VolumeId, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeRes) Field2DeepEqual(src string) bool {

	if strings.Compare(p.VolumeName, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeRes) Field3DeepEqual(src string) bool {

	if strings.Compare(p.VolumeType, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeRes) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ImageId, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeRes) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Size, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeRes) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeRes) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}

type Zone struct {
	Id            string   `thrift:"Id,1,required" json:"Id"`
	InstanceTypes []string `thrift:"InstanceTypes,2,required" json:"InstanceTypes"`
	VolumeTypes   []string `thrift:"VolumeTypes,3,required" json:"VolumeTypes"`
}

func NewZone() *Zone {
	return &Zone{}
}

func (p *Zone) GetId() (v string) {
	return p.Id
}

func (p *Zone) GetInstanceTypes() (v []string) {
	return p.InstanceTypes
}

func (p *Zone) GetVolumeTypes() (v []string) {
	return p.VolumeTypes
}
func (p *Zone) SetId(val string) {
	p.Id = val
}
func (p *Zone) SetInstanceTypes(val []string) {
	p.InstanceTypes = val
}
func (p *Zone) SetVolumeTypes(val []string) {
	p.VolumeTypes = val
}

var fieldIDToName_Zone = map[int16]string{
	1: "Id",
	2: "InstanceTypes",
	3: "VolumeTypes",
}

func (p *Zone) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetInstanceTypes bool = false
	var issetVolumeTypes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetInstanceTypes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumeTypes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInstanceTypes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVolumeTypes {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Zone[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Zone[fieldId]))
}

func (p *Zone) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Zone) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.InstanceTypes = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.InstanceTypes = append(p.InstanceTypes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Zone) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VolumeTypes = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.VolumeTypes = append(p.VolumeTypes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Zone) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Zone"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Zone) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Zone) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InstanceTypes", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InstanceTypes)); err != nil {
		return err
	}
	for _, v := range p.InstanceTypes {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Zone) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VolumeTypes", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.VolumeTypes)); err != nil {
		return err
	}
	for _, v := range p.VolumeTypes {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Zone) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Zone(%+v)", *p)
}

func (p *Zone) DeepEqual(ano *Zone) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.InstanceTypes) {
		return false
	}
	if !p.Field3DeepEqual(ano.VolumeTypes) {
		return false
	}
	return true
}

func (p *Zone) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *Zone) Field2DeepEqual(src []string) bool {

	if len(p.InstanceTypes) != len(src) {
		return false
	}
	for i, v := range p.InstanceTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Zone) Field3DeepEqual(src []string) bool {

	if len(p.VolumeTypes) != len(src) {
		return false
	}
	for i, v := range p.VolumeTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
