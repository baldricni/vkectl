// Code generated by Kitex v0.1.0. DO NOT EDIT.

package resourceservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/addon"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/baremachine"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/clb"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/cluster"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/event"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/helper"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/instance"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/network"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/overview"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/quota"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/rbac"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/storage"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/vpc"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetClusterOverview(ctx context.Context, req *overview.GetClusterOverviewRequest, callOptions ...callopt.Option) (r *overview.GetClusterOverviewResponse, err error)
	GetKubeConfig(ctx context.Context, req *cluster.GetKubeConfigRequest, callOptions ...callopt.Option) (r *cluster.GetKubeConfigResponse, err error)
	RevokeKubeConfig(ctx context.Context, req *cluster.RevokeKubeConfigRequest, callOptions ...callopt.Option) (r *cluster.RevokeKubeConfigResponse, err error)
	ListKubeConfig(ctx context.Context, req *cluster.ListKubeConfigRequest, callOptions ...callopt.Option) (r *cluster.ListKubeConfigResponse, err error)
	CreateCluster(ctx context.Context, req *cluster.CreateClusterRequest, callOptions ...callopt.Option) (r *cluster.CreateClusterResponse, err error)
	RegisterCluster(ctx context.Context, req *cluster.RegisterClusterRequest, callOptions ...callopt.Option) (r *cluster.RegisterClusterResponse, err error)
	UpdateCluster(ctx context.Context, req *cluster.UpdateClusterRequest, callOptions ...callopt.Option) (r *cluster.UpdateClusterResponse, err error)
	UpgradeCluster(ctx context.Context, req *cluster.UpgradeClusterRequest, callOptions ...callopt.Option) (r *cluster.UpgradeClusterResponse, err error)
	DeleteCluster(ctx context.Context, req *cluster.DeleteClusterRequest, callOptions ...callopt.Option) (r *cluster.DeleteClusterResponse, err error)
	GetCluster(ctx context.Context, req *cluster.GetClusterRequest, callOptions ...callopt.Option) (r *cluster.GetClusterResponse, err error)
	ListCluster(ctx context.Context, req *cluster.ListClusterRequest, callOptions ...callopt.Option) (r *cluster.ListClusterResponse, err error)
	GetClusterDeployProgress(ctx context.Context, req *cluster.GetClusterDeployProgressRequest, callOptions ...callopt.Option) (r *cluster.GetClusterDeployProgressResponse, err error)
	ListClusterKubernetesVersion(ctx context.Context, req *cluster.ListClusterKubernetesVersionRequest, callOptions ...callopt.Option) (r *cluster.ListClusterKubernetesVersionResponse, err error)
	ListClusterNetworkCidr(ctx context.Context, req *cluster.ListClusterNetworkCidrRequest, callOptions ...callopt.Option) (r *cluster.ListClusterNetworkCidrResponse, err error)
	ListSupportGpuModel(ctx context.Context, req *cluster.ListSupportGpuModelRequest, callOptions ...callopt.Option) (r *cluster.ListSupportGpuModelResponse, err error)
	ListClusterNode(ctx context.Context, req *cluster.ListClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.ListClusterNodeResponse, err error)
	AddClusterNode(ctx context.Context, req *cluster.AddClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.AddClusterNodeResponse, err error)
	GetClusterNode(ctx context.Context, req *cluster.GetClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.GetClusterNodeResponse, err error)
	DeleteClusterNode(ctx context.Context, req *cluster.DeleteClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.DeleteClusterNodeResponse, err error)
	ListClusterNodeLabel(ctx context.Context, req *cluster.ListClusterNodeLabelRequest, callOptions ...callopt.Option) (r *cluster.ListClusterNodeLabelResponse, err error)
	UpdateClusterNode(ctx context.Context, req *cluster.UpdateClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.UpdateClusterNodeResponse, err error)
	GetAutoScalingRule(ctx context.Context, req *cluster.GetAutoScalingRuleRequest, callOptions ...callopt.Option) (r *cluster.GetAutoScalingRuleResponse, err error)
	UpdateAutoScalingRule(ctx context.Context, req *cluster.UpdateAutoScalingRuleRequest, callOptions ...callopt.Option) (r *cluster.UpdateAutoScalingRuleResponse, err error)
	NodePoolScaleUp(ctx context.Context, req *cluster.NodePoolScaleUpRequest, callOptions ...callopt.Option) (r *cluster.NodePoolScaleUpResponse, err error)
	NodePoolScaleDown(ctx context.Context, req *cluster.NodePoolScaleDownRequest, callOptions ...callopt.Option) (r *cluster.NodePoolScaleDownResponse, err error)
	ListNodePool(ctx context.Context, req *cluster.ListNodePoolRequest, callOptions ...callopt.Option) (r *cluster.ListNodePoolResponse, err error)
	CreateNodePool(ctx context.Context, req *cluster.CreateNodePoolRequest, callOptions ...callopt.Option) (r *cluster.CreateNodePoolResponse, err error)
	GetNodePool(ctx context.Context, req *cluster.GetNodePoolRequest, callOptions ...callopt.Option) (r *cluster.GetNodePoolResponse, err error)
	UpdateNodePool(ctx context.Context, req *cluster.UpdateNodePoolRequest, callOptions ...callopt.Option) (r *cluster.UpdateNodePoolResponse, err error)
	DeleteNodePool(ctx context.Context, req *cluster.DeleteNodePoolRequest, callOptions ...callopt.Option) (r *cluster.DeleteNodePoolResponse, err error)
	ListNodePoolScalingRecords(ctx context.Context, req *cluster.ListNodePoolScalingRecordRequest, callOptions ...callopt.Option) (r *cluster.ListNodePoolScalingRecordResponse, err error)
	ListNodePoolNode(ctx context.Context, req *cluster.ListNodePoolNodeRequest, callOptions ...callopt.Option) (r *cluster.ListNodePoolNodeResponse, err error)
	ListNamespace(ctx context.Context, req *cluster.ListNamespaceRequest, callOptions ...callopt.Option) (r *cluster.ListNamespaceResponse, err error)
	CreateNamespace(ctx context.Context, req *cluster.CreateNamespaceRequest, callOptions ...callopt.Option) (r *cluster.CreateNamespaceResponse, err error)
	GetNamespace(ctx context.Context, req *cluster.GetNamespaceRequest, callOptions ...callopt.Option) (r *cluster.GetNamespaceResponse, err error)
	UpdateNamespace(ctx context.Context, req *cluster.UpdateNamespaceRequest, callOptions ...callopt.Option) (r *cluster.UpdateNamespaceResponse, err error)
	UpdateNamespaceResource(ctx context.Context, req *cluster.UpdateNamespaceResourceRequest, callOptions ...callopt.Option) (r *cluster.UpdateNamespaceResourceResponse, err error)
	GetNamespaceResource(ctx context.Context, req *cluster.GetNamespaceResourceRequest, callOptions ...callopt.Option) (r *cluster.GetNamespaceResourceResponse, err error)
	DeleteNamespace(ctx context.Context, req *cluster.DeleteNamespaceRequest, callOptions ...callopt.Option) (r *cluster.DeleteNamespaceResponse, err error)
	ListResourceQuota(ctx context.Context, req *cluster.ListResourceQuotaRequest, callOptions ...callopt.Option) (r *cluster.ListResourceQuotaResponse, err error)
	ListIngressTypes(ctx context.Context, req *network.ListIngressTypeRequest, callOptions ...callopt.Option) (r *network.ListIngressTypeResponse, err error)
	ListIngress(ctx context.Context, req *network.ListIngressRequest, callOptions ...callopt.Option) (r *network.ListIngressResponse, err error)
	CreateIngress(ctx context.Context, req *network.CreateIngressRequest, callOptions ...callopt.Option) (r *network.CreateIngressResponse, err error)
	GetIngress(ctx context.Context, req *network.GetIngressRequest, callOptions ...callopt.Option) (r *network.GetIngressResponse, err error)
	UpdateIngress(ctx context.Context, req *network.UpdateIngressRequest, callOptions ...callopt.Option) (r *network.UpdateIngressResponse, err error)
	DeleteIngress(ctx context.Context, req *network.DeleteIngressRequest, callOptions ...callopt.Option) (r *network.DeleteIngressResponse, err error)
	GetSecretDomains(ctx context.Context, req *network.GetSecretDomainsRequest, callOptions ...callopt.Option) (r *network.GetSecretDomainsResponse, err error)
	ListStorageClass(ctx context.Context, req *storage.ListStorageClassRequest, callOptions ...callopt.Option) (r *storage.ListStorageClassResponse, err error)
	CreateStorageClass(ctx context.Context, req *storage.CreateStorageClassRequest, callOptions ...callopt.Option) (r *storage.CreateStorageClassResponse, err error)
	GetStorageClass(ctx context.Context, req *storage.GetStorageClassRequest, callOptions ...callopt.Option) (r *storage.GetStorageClassResponse, err error)
	DeleteStorageClass(ctx context.Context, req *storage.DeleteStorageClassRequest, callOptions ...callopt.Option) (r *storage.DeleteStorageClassResponse, err error)
	ListPersistentVolume(ctx context.Context, req *storage.ListPersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.ListPersistentVolumeResponse, err error)
	CreatePersistentVolume(ctx context.Context, req *storage.CreatePersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.CreatePersistentVolumeResponse, err error)
	GetPersistentVolume(ctx context.Context, req *storage.GetPersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.GetPersistentVolumeResponse, err error)
	DeletePersistentVolume(ctx context.Context, req *storage.DeletePersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.DeletePersistentVolumeResponse, err error)
	ListPersistentVolumeClaim(ctx context.Context, req *storage.ListPersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.ListPersistentVolumeClaimResponse, err error)
	CreatePersistentVolumeClaim(ctx context.Context, req *storage.CreatePersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.CreatePersistentVolumeClaimResponse, err error)
	GetPersistentVolumeClaim(ctx context.Context, req *storage.GetPersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.GetPersistentVolumeClaimResponse, err error)
	DeletePersistentVolumeClaim(ctx context.Context, req *storage.DeletePersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.DeletePersistentVolumeClaimResponse, err error)
	ListCephCluster(ctx context.Context, req *storage.ListCephClusterRequest, callOptions ...callopt.Option) (r *storage.ListCephClusterResponse, err error)
	ListEvent(ctx context.Context, req *event.ListEventRequest, callOptions ...callopt.Option) (r *event.ListEventResponse, err error)
	ListUserRbacs(ctx context.Context, req *rbac.ListUserRbacRequest, callOptions ...callopt.Option) (r *rbac.ListUserRbacResponse, err error)
	CreateUserRbac(ctx context.Context, req *rbac.CreateUserRbacRequest, callOptions ...callopt.Option) (r *rbac.CreateUserRbacResponse, err error)
	UpdateUserRbac(ctx context.Context, req *rbac.UpdateUserRbacRequest, callOptions ...callopt.Option) (r *rbac.UpdateUserRbacResponse, err error)
	DeleteUserRbac(ctx context.Context, req *rbac.DeleteUserRbacRequest, callOptions ...callopt.Option) (r *rbac.DeleteUserRbacResponse, err error)
	ListCustomRoles(ctx context.Context, req *rbac.ListCustomRolesRequest, callOptions ...callopt.Option) (r *rbac.ListCustomRolesResponse, err error)
	ListSupportedAddons(ctx context.Context, req *addon.ListSupportedAddonRequest, callOptions ...callopt.Option) (r *addon.ListSupportedAddonResponse, err error)
	ListAddons(ctx context.Context, req *addon.ListAddonRequest, callOptions ...callopt.Option) (r *addon.ListAddonResponse, err error)
	InstallAddon(ctx context.Context, req *addon.InstallAddonRequest, callOptions ...callopt.Option) (r *addon.InstallAddonResponse, err error)
	UninstallAddon(ctx context.Context, req *addon.UninstallAddonRequest, callOptions ...callopt.Option) (r *addon.UninstallAddonResponse, err error)
	UpgradeAddon(ctx context.Context, req *addon.UpgradeAddonRequest, callOptions ...callopt.Option) (r *addon.UpgradeAddonResponse, err error)
	GetAddon(ctx context.Context, req *addon.GetAddonRequest, callOptions ...callopt.Option) (r *addon.GetAddonResponse, err error)
	CheckResourceExist(ctx context.Context, req *helper.CheckResourceExistRequest, callOptions ...callopt.Option) (r *helper.CheckResourceExistResponse, err error)
	ListInstances(ctx context.Context, req *instance.ListInstancesRequest, callOptions ...callopt.Option) (r *instance.ListInstancesResponse, err error)
	ListFlavors(ctx context.Context, req *instance.ListFlavorsRequest, callOptions ...callopt.Option) (r *instance.ListFlavorsResponse, err error)
	GetInstanceConsole(ctx context.Context, req *instance.GetInstanceConsoleRequest, callOptions ...callopt.Option) (r *instance.GetInstanceConsoleResponse, err error)
	ListZones(ctx context.Context, req *instance.ListZonesRequest, callOptions ...callopt.Option) (r *instance.ListZonesResponse, err error)
	ListVolumes(ctx context.Context, req *instance.ListVolumesRequest, callOptions ...callopt.Option) (r *instance.ListVolumesResponse, err error)
	ListSubnets(ctx context.Context, req *vpc.ListSubnetsRequest, callOptions ...callopt.Option) (r *vpc.ListSubnetsResponse, err error)
	ListElasticIPPools(ctx context.Context, req *vpc.ListElasticIPPoolsRequest, callOptions ...callopt.Option) (r *vpc.ListElasticIPPoolsResponse, err error)
	ListVpcs(ctx context.Context, req *vpc.ListVpcsRequest, callOptions ...callopt.Option) (r *vpc.ListVpcsResponse, err error)
	ListSecurityGroups(ctx context.Context, req *vpc.ListSecurityGroupsRequest, callOptions ...callopt.Option) (r *vpc.ListSecurityGroupsResponse, err error)
	ListClbs(ctx context.Context, req *clb.ListClbRequest, callOptions ...callopt.Option) (r *clb.ListClbResponse, err error)
	ListQuotas(ctx context.Context, req *quota.ListQuotasRequest, callOptions ...callopt.Option) (r *quota.ListQuotasResponse, err error)
	GetQuota(ctx context.Context, req *quota.GetQuotaRequest, callOptions ...callopt.Option) (r *quota.GetQuotaResponse, err error)
	CreateBareMachine(ctx context.Context, req *baremachine.CreateBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.CreateBareMachineResponse, err error)
	UpdateBareMachine(ctx context.Context, req *baremachine.UpdateBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.UpdateBareMachineResponse, err error)
	DeleteBareMachine(ctx context.Context, req *baremachine.DeleteBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.DeleteBareMachineResponse, err error)
	GetBareMachine(ctx context.Context, req *baremachine.GetBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.GetBareMachineResponse, err error)
	ListBareMachine(ctx context.Context, req *baremachine.ListBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.ListBareMachineResponse, err error)
	GetBareMachineSshPublicKey(ctx context.Context, req *baremachine.GetBareMachineSshPublicKeyRequest, callOptions ...callopt.Option) (r *baremachine.GetBareMachineSshPublicKeyResponse, err error)
	ListBareMachineExpectOs(ctx context.Context, req *baremachine.ListBareMachineExpectOsRequest, callOptions ...callopt.Option) (r *baremachine.ListBareMachineExpectOsResponse, err error)
	GetBareMachineImportExcelTemplate(ctx context.Context, req *baremachine.GetBareMachineImportExcelTemplateRequest, callOptions ...callopt.Option) (r *baremachine.GetBareMachineImportExcelTemplateResponse, err error)
	CheckCidrConflict(ctx context.Context, req *cluster.CheckCidrConflictRequest, callOptions ...callopt.Option) (r *cluster.CheckCidrConflictResponse, err error)
	RecommendCidr(ctx context.Context, req *cluster.RecommendCidrRequest, callOptions ...callopt.Option) (r *cluster.RecommendCidrResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kResourceServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kResourceServiceClient struct {
	*kClient
}

func (p *kResourceServiceClient) GetClusterOverview(ctx context.Context, req *overview.GetClusterOverviewRequest, callOptions ...callopt.Option) (r *overview.GetClusterOverviewResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetClusterOverview(ctx, req)
}

func (p *kResourceServiceClient) GetKubeConfig(ctx context.Context, req *cluster.GetKubeConfigRequest, callOptions ...callopt.Option) (r *cluster.GetKubeConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetKubeConfig(ctx, req)
}

func (p *kResourceServiceClient) RevokeKubeConfig(ctx context.Context, req *cluster.RevokeKubeConfigRequest, callOptions ...callopt.Option) (r *cluster.RevokeKubeConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RevokeKubeConfig(ctx, req)
}

func (p *kResourceServiceClient) ListKubeConfig(ctx context.Context, req *cluster.ListKubeConfigRequest, callOptions ...callopt.Option) (r *cluster.ListKubeConfigResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListKubeConfig(ctx, req)
}

func (p *kResourceServiceClient) CreateCluster(ctx context.Context, req *cluster.CreateClusterRequest, callOptions ...callopt.Option) (r *cluster.CreateClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCluster(ctx, req)
}

func (p *kResourceServiceClient) RegisterCluster(ctx context.Context, req *cluster.RegisterClusterRequest, callOptions ...callopt.Option) (r *cluster.RegisterClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegisterCluster(ctx, req)
}

func (p *kResourceServiceClient) UpdateCluster(ctx context.Context, req *cluster.UpdateClusterRequest, callOptions ...callopt.Option) (r *cluster.UpdateClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCluster(ctx, req)
}

func (p *kResourceServiceClient) UpgradeCluster(ctx context.Context, req *cluster.UpgradeClusterRequest, callOptions ...callopt.Option) (r *cluster.UpgradeClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpgradeCluster(ctx, req)
}

func (p *kResourceServiceClient) DeleteCluster(ctx context.Context, req *cluster.DeleteClusterRequest, callOptions ...callopt.Option) (r *cluster.DeleteClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCluster(ctx, req)
}

func (p *kResourceServiceClient) GetCluster(ctx context.Context, req *cluster.GetClusterRequest, callOptions ...callopt.Option) (r *cluster.GetClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCluster(ctx, req)
}

func (p *kResourceServiceClient) ListCluster(ctx context.Context, req *cluster.ListClusterRequest, callOptions ...callopt.Option) (r *cluster.ListClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCluster(ctx, req)
}

func (p *kResourceServiceClient) GetClusterDeployProgress(ctx context.Context, req *cluster.GetClusterDeployProgressRequest, callOptions ...callopt.Option) (r *cluster.GetClusterDeployProgressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetClusterDeployProgress(ctx, req)
}

func (p *kResourceServiceClient) ListClusterKubernetesVersion(ctx context.Context, req *cluster.ListClusterKubernetesVersionRequest, callOptions ...callopt.Option) (r *cluster.ListClusterKubernetesVersionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListClusterKubernetesVersion(ctx, req)
}

func (p *kResourceServiceClient) ListClusterNetworkCidr(ctx context.Context, req *cluster.ListClusterNetworkCidrRequest, callOptions ...callopt.Option) (r *cluster.ListClusterNetworkCidrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListClusterNetworkCidr(ctx, req)
}

func (p *kResourceServiceClient) ListSupportGpuModel(ctx context.Context, req *cluster.ListSupportGpuModelRequest, callOptions ...callopt.Option) (r *cluster.ListSupportGpuModelResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSupportGpuModel(ctx, req)
}

func (p *kResourceServiceClient) ListClusterNode(ctx context.Context, req *cluster.ListClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.ListClusterNodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListClusterNode(ctx, req)
}

func (p *kResourceServiceClient) AddClusterNode(ctx context.Context, req *cluster.AddClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.AddClusterNodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddClusterNode(ctx, req)
}

func (p *kResourceServiceClient) GetClusterNode(ctx context.Context, req *cluster.GetClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.GetClusterNodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetClusterNode(ctx, req)
}

func (p *kResourceServiceClient) DeleteClusterNode(ctx context.Context, req *cluster.DeleteClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.DeleteClusterNodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteClusterNode(ctx, req)
}

func (p *kResourceServiceClient) ListClusterNodeLabel(ctx context.Context, req *cluster.ListClusterNodeLabelRequest, callOptions ...callopt.Option) (r *cluster.ListClusterNodeLabelResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListClusterNodeLabel(ctx, req)
}

func (p *kResourceServiceClient) UpdateClusterNode(ctx context.Context, req *cluster.UpdateClusterNodeRequest, callOptions ...callopt.Option) (r *cluster.UpdateClusterNodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateClusterNode(ctx, req)
}

func (p *kResourceServiceClient) GetAutoScalingRule(ctx context.Context, req *cluster.GetAutoScalingRuleRequest, callOptions ...callopt.Option) (r *cluster.GetAutoScalingRuleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAutoScalingRule(ctx, req)
}

func (p *kResourceServiceClient) UpdateAutoScalingRule(ctx context.Context, req *cluster.UpdateAutoScalingRuleRequest, callOptions ...callopt.Option) (r *cluster.UpdateAutoScalingRuleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAutoScalingRule(ctx, req)
}

func (p *kResourceServiceClient) NodePoolScaleUp(ctx context.Context, req *cluster.NodePoolScaleUpRequest, callOptions ...callopt.Option) (r *cluster.NodePoolScaleUpResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.NodePoolScaleUp(ctx, req)
}

func (p *kResourceServiceClient) NodePoolScaleDown(ctx context.Context, req *cluster.NodePoolScaleDownRequest, callOptions ...callopt.Option) (r *cluster.NodePoolScaleDownResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.NodePoolScaleDown(ctx, req)
}

func (p *kResourceServiceClient) ListNodePool(ctx context.Context, req *cluster.ListNodePoolRequest, callOptions ...callopt.Option) (r *cluster.ListNodePoolResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListNodePool(ctx, req)
}

func (p *kResourceServiceClient) CreateNodePool(ctx context.Context, req *cluster.CreateNodePoolRequest, callOptions ...callopt.Option) (r *cluster.CreateNodePoolResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateNodePool(ctx, req)
}

func (p *kResourceServiceClient) GetNodePool(ctx context.Context, req *cluster.GetNodePoolRequest, callOptions ...callopt.Option) (r *cluster.GetNodePoolResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetNodePool(ctx, req)
}

func (p *kResourceServiceClient) UpdateNodePool(ctx context.Context, req *cluster.UpdateNodePoolRequest, callOptions ...callopt.Option) (r *cluster.UpdateNodePoolResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateNodePool(ctx, req)
}

func (p *kResourceServiceClient) DeleteNodePool(ctx context.Context, req *cluster.DeleteNodePoolRequest, callOptions ...callopt.Option) (r *cluster.DeleteNodePoolResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteNodePool(ctx, req)
}

func (p *kResourceServiceClient) ListNodePoolScalingRecords(ctx context.Context, req *cluster.ListNodePoolScalingRecordRequest, callOptions ...callopt.Option) (r *cluster.ListNodePoolScalingRecordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListNodePoolScalingRecords(ctx, req)
}

func (p *kResourceServiceClient) ListNodePoolNode(ctx context.Context, req *cluster.ListNodePoolNodeRequest, callOptions ...callopt.Option) (r *cluster.ListNodePoolNodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListNodePoolNode(ctx, req)
}

func (p *kResourceServiceClient) ListNamespace(ctx context.Context, req *cluster.ListNamespaceRequest, callOptions ...callopt.Option) (r *cluster.ListNamespaceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListNamespace(ctx, req)
}

func (p *kResourceServiceClient) CreateNamespace(ctx context.Context, req *cluster.CreateNamespaceRequest, callOptions ...callopt.Option) (r *cluster.CreateNamespaceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateNamespace(ctx, req)
}

func (p *kResourceServiceClient) GetNamespace(ctx context.Context, req *cluster.GetNamespaceRequest, callOptions ...callopt.Option) (r *cluster.GetNamespaceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetNamespace(ctx, req)
}

func (p *kResourceServiceClient) UpdateNamespace(ctx context.Context, req *cluster.UpdateNamespaceRequest, callOptions ...callopt.Option) (r *cluster.UpdateNamespaceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateNamespace(ctx, req)
}

func (p *kResourceServiceClient) UpdateNamespaceResource(ctx context.Context, req *cluster.UpdateNamespaceResourceRequest, callOptions ...callopt.Option) (r *cluster.UpdateNamespaceResourceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateNamespaceResource(ctx, req)
}

func (p *kResourceServiceClient) GetNamespaceResource(ctx context.Context, req *cluster.GetNamespaceResourceRequest, callOptions ...callopt.Option) (r *cluster.GetNamespaceResourceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetNamespaceResource(ctx, req)
}

func (p *kResourceServiceClient) DeleteNamespace(ctx context.Context, req *cluster.DeleteNamespaceRequest, callOptions ...callopt.Option) (r *cluster.DeleteNamespaceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteNamespace(ctx, req)
}

func (p *kResourceServiceClient) ListResourceQuota(ctx context.Context, req *cluster.ListResourceQuotaRequest, callOptions ...callopt.Option) (r *cluster.ListResourceQuotaResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListResourceQuota(ctx, req)
}

func (p *kResourceServiceClient) ListIngressTypes(ctx context.Context, req *network.ListIngressTypeRequest, callOptions ...callopt.Option) (r *network.ListIngressTypeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListIngressTypes(ctx, req)
}

func (p *kResourceServiceClient) ListIngress(ctx context.Context, req *network.ListIngressRequest, callOptions ...callopt.Option) (r *network.ListIngressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListIngress(ctx, req)
}

func (p *kResourceServiceClient) CreateIngress(ctx context.Context, req *network.CreateIngressRequest, callOptions ...callopt.Option) (r *network.CreateIngressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateIngress(ctx, req)
}

func (p *kResourceServiceClient) GetIngress(ctx context.Context, req *network.GetIngressRequest, callOptions ...callopt.Option) (r *network.GetIngressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetIngress(ctx, req)
}

func (p *kResourceServiceClient) UpdateIngress(ctx context.Context, req *network.UpdateIngressRequest, callOptions ...callopt.Option) (r *network.UpdateIngressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateIngress(ctx, req)
}

func (p *kResourceServiceClient) DeleteIngress(ctx context.Context, req *network.DeleteIngressRequest, callOptions ...callopt.Option) (r *network.DeleteIngressResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteIngress(ctx, req)
}

func (p *kResourceServiceClient) GetSecretDomains(ctx context.Context, req *network.GetSecretDomainsRequest, callOptions ...callopt.Option) (r *network.GetSecretDomainsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSecretDomains(ctx, req)
}

func (p *kResourceServiceClient) ListStorageClass(ctx context.Context, req *storage.ListStorageClassRequest, callOptions ...callopt.Option) (r *storage.ListStorageClassResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListStorageClass(ctx, req)
}

func (p *kResourceServiceClient) CreateStorageClass(ctx context.Context, req *storage.CreateStorageClassRequest, callOptions ...callopt.Option) (r *storage.CreateStorageClassResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateStorageClass(ctx, req)
}

func (p *kResourceServiceClient) GetStorageClass(ctx context.Context, req *storage.GetStorageClassRequest, callOptions ...callopt.Option) (r *storage.GetStorageClassResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStorageClass(ctx, req)
}

func (p *kResourceServiceClient) DeleteStorageClass(ctx context.Context, req *storage.DeleteStorageClassRequest, callOptions ...callopt.Option) (r *storage.DeleteStorageClassResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteStorageClass(ctx, req)
}

func (p *kResourceServiceClient) ListPersistentVolume(ctx context.Context, req *storage.ListPersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.ListPersistentVolumeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPersistentVolume(ctx, req)
}

func (p *kResourceServiceClient) CreatePersistentVolume(ctx context.Context, req *storage.CreatePersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.CreatePersistentVolumeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePersistentVolume(ctx, req)
}

func (p *kResourceServiceClient) GetPersistentVolume(ctx context.Context, req *storage.GetPersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.GetPersistentVolumeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPersistentVolume(ctx, req)
}

func (p *kResourceServiceClient) DeletePersistentVolume(ctx context.Context, req *storage.DeletePersistentVolumeRequest, callOptions ...callopt.Option) (r *storage.DeletePersistentVolumeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePersistentVolume(ctx, req)
}

func (p *kResourceServiceClient) ListPersistentVolumeClaim(ctx context.Context, req *storage.ListPersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.ListPersistentVolumeClaimResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPersistentVolumeClaim(ctx, req)
}

func (p *kResourceServiceClient) CreatePersistentVolumeClaim(ctx context.Context, req *storage.CreatePersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.CreatePersistentVolumeClaimResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreatePersistentVolumeClaim(ctx, req)
}

func (p *kResourceServiceClient) GetPersistentVolumeClaim(ctx context.Context, req *storage.GetPersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.GetPersistentVolumeClaimResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPersistentVolumeClaim(ctx, req)
}

func (p *kResourceServiceClient) DeletePersistentVolumeClaim(ctx context.Context, req *storage.DeletePersistentVolumeClaimRequest, callOptions ...callopt.Option) (r *storage.DeletePersistentVolumeClaimResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePersistentVolumeClaim(ctx, req)
}

func (p *kResourceServiceClient) ListCephCluster(ctx context.Context, req *storage.ListCephClusterRequest, callOptions ...callopt.Option) (r *storage.ListCephClusterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCephCluster(ctx, req)
}

func (p *kResourceServiceClient) ListEvent(ctx context.Context, req *event.ListEventRequest, callOptions ...callopt.Option) (r *event.ListEventResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListEvent(ctx, req)
}

func (p *kResourceServiceClient) ListUserRbacs(ctx context.Context, req *rbac.ListUserRbacRequest, callOptions ...callopt.Option) (r *rbac.ListUserRbacResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListUserRbacs(ctx, req)
}

func (p *kResourceServiceClient) CreateUserRbac(ctx context.Context, req *rbac.CreateUserRbacRequest, callOptions ...callopt.Option) (r *rbac.CreateUserRbacResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUserRbac(ctx, req)
}

func (p *kResourceServiceClient) UpdateUserRbac(ctx context.Context, req *rbac.UpdateUserRbacRequest, callOptions ...callopt.Option) (r *rbac.UpdateUserRbacResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUserRbac(ctx, req)
}

func (p *kResourceServiceClient) DeleteUserRbac(ctx context.Context, req *rbac.DeleteUserRbacRequest, callOptions ...callopt.Option) (r *rbac.DeleteUserRbacResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteUserRbac(ctx, req)
}

func (p *kResourceServiceClient) ListCustomRoles(ctx context.Context, req *rbac.ListCustomRolesRequest, callOptions ...callopt.Option) (r *rbac.ListCustomRolesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCustomRoles(ctx, req)
}

func (p *kResourceServiceClient) ListSupportedAddons(ctx context.Context, req *addon.ListSupportedAddonRequest, callOptions ...callopt.Option) (r *addon.ListSupportedAddonResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSupportedAddons(ctx, req)
}

func (p *kResourceServiceClient) ListAddons(ctx context.Context, req *addon.ListAddonRequest, callOptions ...callopt.Option) (r *addon.ListAddonResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListAddons(ctx, req)
}

func (p *kResourceServiceClient) InstallAddon(ctx context.Context, req *addon.InstallAddonRequest, callOptions ...callopt.Option) (r *addon.InstallAddonResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InstallAddon(ctx, req)
}

func (p *kResourceServiceClient) UninstallAddon(ctx context.Context, req *addon.UninstallAddonRequest, callOptions ...callopt.Option) (r *addon.UninstallAddonResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UninstallAddon(ctx, req)
}

func (p *kResourceServiceClient) UpgradeAddon(ctx context.Context, req *addon.UpgradeAddonRequest, callOptions ...callopt.Option) (r *addon.UpgradeAddonResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpgradeAddon(ctx, req)
}

func (p *kResourceServiceClient) GetAddon(ctx context.Context, req *addon.GetAddonRequest, callOptions ...callopt.Option) (r *addon.GetAddonResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAddon(ctx, req)
}

func (p *kResourceServiceClient) CheckResourceExist(ctx context.Context, req *helper.CheckResourceExistRequest, callOptions ...callopt.Option) (r *helper.CheckResourceExistResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckResourceExist(ctx, req)
}

func (p *kResourceServiceClient) ListInstances(ctx context.Context, req *instance.ListInstancesRequest, callOptions ...callopt.Option) (r *instance.ListInstancesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListInstances(ctx, req)
}

func (p *kResourceServiceClient) ListFlavors(ctx context.Context, req *instance.ListFlavorsRequest, callOptions ...callopt.Option) (r *instance.ListFlavorsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListFlavors(ctx, req)
}

func (p *kResourceServiceClient) GetInstanceConsole(ctx context.Context, req *instance.GetInstanceConsoleRequest, callOptions ...callopt.Option) (r *instance.GetInstanceConsoleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetInstanceConsole(ctx, req)
}

func (p *kResourceServiceClient) ListZones(ctx context.Context, req *instance.ListZonesRequest, callOptions ...callopt.Option) (r *instance.ListZonesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListZones(ctx, req)
}

func (p *kResourceServiceClient) ListVolumes(ctx context.Context, req *instance.ListVolumesRequest, callOptions ...callopt.Option) (r *instance.ListVolumesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListVolumes(ctx, req)
}

func (p *kResourceServiceClient) ListSubnets(ctx context.Context, req *vpc.ListSubnetsRequest, callOptions ...callopt.Option) (r *vpc.ListSubnetsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSubnets(ctx, req)
}

func (p *kResourceServiceClient) ListElasticIPPools(ctx context.Context, req *vpc.ListElasticIPPoolsRequest, callOptions ...callopt.Option) (r *vpc.ListElasticIPPoolsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListElasticIPPools(ctx, req)
}

func (p *kResourceServiceClient) ListVpcs(ctx context.Context, req *vpc.ListVpcsRequest, callOptions ...callopt.Option) (r *vpc.ListVpcsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListVpcs(ctx, req)
}

func (p *kResourceServiceClient) ListSecurityGroups(ctx context.Context, req *vpc.ListSecurityGroupsRequest, callOptions ...callopt.Option) (r *vpc.ListSecurityGroupsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSecurityGroups(ctx, req)
}

func (p *kResourceServiceClient) ListClbs(ctx context.Context, req *clb.ListClbRequest, callOptions ...callopt.Option) (r *clb.ListClbResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListClbs(ctx, req)
}

func (p *kResourceServiceClient) ListQuotas(ctx context.Context, req *quota.ListQuotasRequest, callOptions ...callopt.Option) (r *quota.ListQuotasResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListQuotas(ctx, req)
}

func (p *kResourceServiceClient) GetQuota(ctx context.Context, req *quota.GetQuotaRequest, callOptions ...callopt.Option) (r *quota.GetQuotaResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetQuota(ctx, req)
}

func (p *kResourceServiceClient) CreateBareMachine(ctx context.Context, req *baremachine.CreateBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.CreateBareMachineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateBareMachine(ctx, req)
}

func (p *kResourceServiceClient) UpdateBareMachine(ctx context.Context, req *baremachine.UpdateBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.UpdateBareMachineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateBareMachine(ctx, req)
}

func (p *kResourceServiceClient) DeleteBareMachine(ctx context.Context, req *baremachine.DeleteBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.DeleteBareMachineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteBareMachine(ctx, req)
}

func (p *kResourceServiceClient) GetBareMachine(ctx context.Context, req *baremachine.GetBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.GetBareMachineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBareMachine(ctx, req)
}

func (p *kResourceServiceClient) ListBareMachine(ctx context.Context, req *baremachine.ListBareMachineRequest, callOptions ...callopt.Option) (r *baremachine.ListBareMachineResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListBareMachine(ctx, req)
}

func (p *kResourceServiceClient) GetBareMachineSshPublicKey(ctx context.Context, req *baremachine.GetBareMachineSshPublicKeyRequest, callOptions ...callopt.Option) (r *baremachine.GetBareMachineSshPublicKeyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBareMachineSshPublicKey(ctx, req)
}

func (p *kResourceServiceClient) ListBareMachineExpectOs(ctx context.Context, req *baremachine.ListBareMachineExpectOsRequest, callOptions ...callopt.Option) (r *baremachine.ListBareMachineExpectOsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListBareMachineExpectOs(ctx, req)
}

func (p *kResourceServiceClient) GetBareMachineImportExcelTemplate(ctx context.Context, req *baremachine.GetBareMachineImportExcelTemplateRequest, callOptions ...callopt.Option) (r *baremachine.GetBareMachineImportExcelTemplateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetBareMachineImportExcelTemplate(ctx, req)
}

func (p *kResourceServiceClient) CheckCidrConflict(ctx context.Context, req *cluster.CheckCidrConflictRequest, callOptions ...callopt.Option) (r *cluster.CheckCidrConflictResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckCidrConflict(ctx, req)
}

func (p *kResourceServiceClient) RecommendCidr(ctx context.Context, req *cluster.RecommendCidrRequest, callOptions ...callopt.Option) (r *cluster.RecommendCidrResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RecommendCidr(ctx, req)
}
