// Code generated by Kitex v0.1.0. DO NOT EDIT.

package resourceservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/addon"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/baremachine"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/clb"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/cluster"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/event"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/helper"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/instance"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/network"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/overview"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/paastob/productivity/common"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/paastob/vke/resourceserver"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/publicverify"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/quota"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/rbac"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/storage"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/trade"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/vci"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/vpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return resourceServiceServiceInfo
}

var resourceServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ResourceService"
	handlerType := (*resourceserver.ResourceService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetClusterOverview":                kitex.NewMethodInfo(getClusterOverviewHandler, newResourceServiceGetClusterOverviewArgs, newResourceServiceGetClusterOverviewResult, false),
		"GetKubeConfig":                     kitex.NewMethodInfo(getKubeConfigHandler, newResourceServiceGetKubeConfigArgs, newResourceServiceGetKubeConfigResult, false),
		"GetKubeconfig":                     kitex.NewMethodInfo(getKubeconfigHandler, newResourceServiceGetKubeconfigArgs, newResourceServiceGetKubeconfigResult, false),
		"RevokeKubeconfig":                  kitex.NewMethodInfo(revokeKubeconfigHandler, newResourceServiceRevokeKubeconfigArgs, newResourceServiceRevokeKubeconfigResult, false),
		"ListKubeconfigUsers":               kitex.NewMethodInfo(listKubeconfigUsersHandler, newResourceServiceListKubeconfigUsersArgs, newResourceServiceListKubeconfigUsersResult, false),
		"CreateCluster":                     kitex.NewMethodInfo(createClusterHandler, newResourceServiceCreateClusterArgs, newResourceServiceCreateClusterResult, false),
		"RegisterCluster":                   kitex.NewMethodInfo(registerClusterHandler, newResourceServiceRegisterClusterArgs, newResourceServiceRegisterClusterResult, false),
		"UpdateCluster":                     kitex.NewMethodInfo(updateClusterHandler, newResourceServiceUpdateClusterArgs, newResourceServiceUpdateClusterResult, false),
		"UpgradeCluster":                    kitex.NewMethodInfo(upgradeClusterHandler, newResourceServiceUpgradeClusterArgs, newResourceServiceUpgradeClusterResult, false),
		"DeleteCluster":                     kitex.NewMethodInfo(deleteClusterHandler, newResourceServiceDeleteClusterArgs, newResourceServiceDeleteClusterResult, false),
		"GetCluster":                        kitex.NewMethodInfo(getClusterHandler, newResourceServiceGetClusterArgs, newResourceServiceGetClusterResult, false),
		"ListClusters":                      kitex.NewMethodInfo(listClustersHandler, newResourceServiceListClustersArgs, newResourceServiceListClustersResult, false),
		"GetClusterDeployProgress":          kitex.NewMethodInfo(getClusterDeployProgressHandler, newResourceServiceGetClusterDeployProgressArgs, newResourceServiceGetClusterDeployProgressResult, false),
		"ListSupportedKubernetesVersions":   kitex.NewMethodInfo(listSupportedKubernetesVersionsHandler, newResourceServiceListSupportedKubernetesVersionsArgs, newResourceServiceListSupportedKubernetesVersionsResult, false),
		"ListClusterNetworkCidrs":           kitex.NewMethodInfo(listClusterNetworkCidrsHandler, newResourceServiceListClusterNetworkCidrsArgs, newResourceServiceListClusterNetworkCidrsResult, false),
		"ListSupportedGpuModels":            kitex.NewMethodInfo(listSupportedGpuModelsHandler, newResourceServiceListSupportedGpuModelsArgs, newResourceServiceListSupportedGpuModelsResult, false),
		"ListNodes":                         kitex.NewMethodInfo(listNodesHandler, newResourceServiceListNodesArgs, newResourceServiceListNodesResult, false),
		"AddNodes":                          kitex.NewMethodInfo(addNodesHandler, newResourceServiceAddNodesArgs, newResourceServiceAddNodesResult, false),
		"GetNode":                           kitex.NewMethodInfo(getNodeHandler, newResourceServiceGetNodeArgs, newResourceServiceGetNodeResult, false),
		"DeleteNodes":                       kitex.NewMethodInfo(deleteNodesHandler, newResourceServiceDeleteNodesArgs, newResourceServiceDeleteNodesResult, false),
		"ListNodeLabels":                    kitex.NewMethodInfo(listNodeLabelsHandler, newResourceServiceListNodeLabelsArgs, newResourceServiceListNodeLabelsResult, false),
		"UpdateNode":                        kitex.NewMethodInfo(updateNodeHandler, newResourceServiceUpdateNodeArgs, newResourceServiceUpdateNodeResult, false),
		"GetClusterAutoScalingRule":         kitex.NewMethodInfo(getClusterAutoScalingRuleHandler, newResourceServiceGetClusterAutoScalingRuleArgs, newResourceServiceGetClusterAutoScalingRuleResult, false),
		"UpdateClusterAutoScalingRule":      kitex.NewMethodInfo(updateClusterAutoScalingRuleHandler, newResourceServiceUpdateClusterAutoScalingRuleArgs, newResourceServiceUpdateClusterAutoScalingRuleResult, false),
		"ScaleUpNodePool":                   kitex.NewMethodInfo(scaleUpNodePoolHandler, newResourceServiceScaleUpNodePoolArgs, newResourceServiceScaleUpNodePoolResult, false),
		"ScaleDownNodePool":                 kitex.NewMethodInfo(scaleDownNodePoolHandler, newResourceServiceScaleDownNodePoolArgs, newResourceServiceScaleDownNodePoolResult, false),
		"ListNodePools":                     kitex.NewMethodInfo(listNodePoolsHandler, newResourceServiceListNodePoolsArgs, newResourceServiceListNodePoolsResult, false),
		"CreateNodePool":                    kitex.NewMethodInfo(createNodePoolHandler, newResourceServiceCreateNodePoolArgs, newResourceServiceCreateNodePoolResult, false),
		"GetNodePool":                       kitex.NewMethodInfo(getNodePoolHandler, newResourceServiceGetNodePoolArgs, newResourceServiceGetNodePoolResult, false),
		"UpdateNodePool":                    kitex.NewMethodInfo(updateNodePoolHandler, newResourceServiceUpdateNodePoolArgs, newResourceServiceUpdateNodePoolResult, false),
		"DeleteNodePool":                    kitex.NewMethodInfo(deleteNodePoolHandler, newResourceServiceDeleteNodePoolArgs, newResourceServiceDeleteNodePoolResult, false),
		"ListNodePoolScalingRecords":        kitex.NewMethodInfo(listNodePoolScalingRecordsHandler, newResourceServiceListNodePoolScalingRecordsArgs, newResourceServiceListNodePoolScalingRecordsResult, false),
		"ListNodePoolNodes":                 kitex.NewMethodInfo(listNodePoolNodesHandler, newResourceServiceListNodePoolNodesArgs, newResourceServiceListNodePoolNodesResult, false),
		"ListNamespace":                     kitex.NewMethodInfo(listNamespaceHandler, newResourceServiceListNamespaceArgs, newResourceServiceListNamespaceResult, false),
		"CreateNamespace":                   kitex.NewMethodInfo(createNamespaceHandler, newResourceServiceCreateNamespaceArgs, newResourceServiceCreateNamespaceResult, false),
		"GetNamespace":                      kitex.NewMethodInfo(getNamespaceHandler, newResourceServiceGetNamespaceArgs, newResourceServiceGetNamespaceResult, false),
		"UpdateNamespace":                   kitex.NewMethodInfo(updateNamespaceHandler, newResourceServiceUpdateNamespaceArgs, newResourceServiceUpdateNamespaceResult, false),
		"UpdateNamespaceResource":           kitex.NewMethodInfo(updateNamespaceResourceHandler, newResourceServiceUpdateNamespaceResourceArgs, newResourceServiceUpdateNamespaceResourceResult, false),
		"GetNamespaceResource":              kitex.NewMethodInfo(getNamespaceResourceHandler, newResourceServiceGetNamespaceResourceArgs, newResourceServiceGetNamespaceResourceResult, false),
		"DeleteNamespace":                   kitex.NewMethodInfo(deleteNamespaceHandler, newResourceServiceDeleteNamespaceArgs, newResourceServiceDeleteNamespaceResult, false),
		"ListResourceQuota":                 kitex.NewMethodInfo(listResourceQuotaHandler, newResourceServiceListResourceQuotaArgs, newResourceServiceListResourceQuotaResult, false),
		"ListIngressTypes":                  kitex.NewMethodInfo(listIngressTypesHandler, newResourceServiceListIngressTypesArgs, newResourceServiceListIngressTypesResult, false),
		"ListIngress":                       kitex.NewMethodInfo(listIngressHandler, newResourceServiceListIngressArgs, newResourceServiceListIngressResult, false),
		"CreateIngress":                     kitex.NewMethodInfo(createIngressHandler, newResourceServiceCreateIngressArgs, newResourceServiceCreateIngressResult, false),
		"GetIngress":                        kitex.NewMethodInfo(getIngressHandler, newResourceServiceGetIngressArgs, newResourceServiceGetIngressResult, false),
		"UpdateIngress":                     kitex.NewMethodInfo(updateIngressHandler, newResourceServiceUpdateIngressArgs, newResourceServiceUpdateIngressResult, false),
		"DeleteIngress":                     kitex.NewMethodInfo(deleteIngressHandler, newResourceServiceDeleteIngressArgs, newResourceServiceDeleteIngressResult, false),
		"GetSecretDomains":                  kitex.NewMethodInfo(getSecretDomainsHandler, newResourceServiceGetSecretDomainsArgs, newResourceServiceGetSecretDomainsResult, false),
		"ListStorageClass":                  kitex.NewMethodInfo(listStorageClassHandler, newResourceServiceListStorageClassArgs, newResourceServiceListStorageClassResult, false),
		"CreateStorageClass":                kitex.NewMethodInfo(createStorageClassHandler, newResourceServiceCreateStorageClassArgs, newResourceServiceCreateStorageClassResult, false),
		"GetStorageClass":                   kitex.NewMethodInfo(getStorageClassHandler, newResourceServiceGetStorageClassArgs, newResourceServiceGetStorageClassResult, false),
		"DeleteStorageClass":                kitex.NewMethodInfo(deleteStorageClassHandler, newResourceServiceDeleteStorageClassArgs, newResourceServiceDeleteStorageClassResult, false),
		"ListPersistentVolume":              kitex.NewMethodInfo(listPersistentVolumeHandler, newResourceServiceListPersistentVolumeArgs, newResourceServiceListPersistentVolumeResult, false),
		"CreatePersistentVolume":            kitex.NewMethodInfo(createPersistentVolumeHandler, newResourceServiceCreatePersistentVolumeArgs, newResourceServiceCreatePersistentVolumeResult, false),
		"GetPersistentVolume":               kitex.NewMethodInfo(getPersistentVolumeHandler, newResourceServiceGetPersistentVolumeArgs, newResourceServiceGetPersistentVolumeResult, false),
		"DeletePersistentVolume":            kitex.NewMethodInfo(deletePersistentVolumeHandler, newResourceServiceDeletePersistentVolumeArgs, newResourceServiceDeletePersistentVolumeResult, false),
		"ListPersistentVolumeClaim":         kitex.NewMethodInfo(listPersistentVolumeClaimHandler, newResourceServiceListPersistentVolumeClaimArgs, newResourceServiceListPersistentVolumeClaimResult, false),
		"CreatePersistentVolumeClaim":       kitex.NewMethodInfo(createPersistentVolumeClaimHandler, newResourceServiceCreatePersistentVolumeClaimArgs, newResourceServiceCreatePersistentVolumeClaimResult, false),
		"GetPersistentVolumeClaim":          kitex.NewMethodInfo(getPersistentVolumeClaimHandler, newResourceServiceGetPersistentVolumeClaimArgs, newResourceServiceGetPersistentVolumeClaimResult, false),
		"DeletePersistentVolumeClaim":       kitex.NewMethodInfo(deletePersistentVolumeClaimHandler, newResourceServiceDeletePersistentVolumeClaimArgs, newResourceServiceDeletePersistentVolumeClaimResult, false),
		"ListCephCluster":                   kitex.NewMethodInfo(listCephClusterHandler, newResourceServiceListCephClusterArgs, newResourceServiceListCephClusterResult, false),
		"ListEvent":                         kitex.NewMethodInfo(listEventHandler, newResourceServiceListEventArgs, newResourceServiceListEventResult, false),
		"ListUserRbacs":                     kitex.NewMethodInfo(listUserRbacsHandler, newResourceServiceListUserRbacsArgs, newResourceServiceListUserRbacsResult, false),
		"CreateUserRbac":                    kitex.NewMethodInfo(createUserRbacHandler, newResourceServiceCreateUserRbacArgs, newResourceServiceCreateUserRbacResult, false),
		"UpdateUserRbac":                    kitex.NewMethodInfo(updateUserRbacHandler, newResourceServiceUpdateUserRbacArgs, newResourceServiceUpdateUserRbacResult, false),
		"DeleteUserRbac":                    kitex.NewMethodInfo(deleteUserRbacHandler, newResourceServiceDeleteUserRbacArgs, newResourceServiceDeleteUserRbacResult, false),
		"ListCustomRoles":                   kitex.NewMethodInfo(listCustomRolesHandler, newResourceServiceListCustomRolesArgs, newResourceServiceListCustomRolesResult, false),
		"ListSupportedAddons":               kitex.NewMethodInfo(listSupportedAddonsHandler, newResourceServiceListSupportedAddonsArgs, newResourceServiceListSupportedAddonsResult, false),
		"ListAddons":                        kitex.NewMethodInfo(listAddonsHandler, newResourceServiceListAddonsArgs, newResourceServiceListAddonsResult, false),
		"InstallAddons":                     kitex.NewMethodInfo(installAddonsHandler, newResourceServiceInstallAddonsArgs, newResourceServiceInstallAddonsResult, false),
		"ReinstallAddon":                    kitex.NewMethodInfo(reinstallAddonHandler, newResourceServiceReinstallAddonArgs, newResourceServiceReinstallAddonResult, false),
		"UninstallAddons":                   kitex.NewMethodInfo(uninstallAddonsHandler, newResourceServiceUninstallAddonsArgs, newResourceServiceUninstallAddonsResult, false),
		"UpgradeAddon":                      kitex.NewMethodInfo(upgradeAddonHandler, newResourceServiceUpgradeAddonArgs, newResourceServiceUpgradeAddonResult, false),
		"GetAddon":                          kitex.NewMethodInfo(getAddonHandler, newResourceServiceGetAddonArgs, newResourceServiceGetAddonResult, false),
		"CheckResourceExist":                kitex.NewMethodInfo(checkResourceExistHandler, newResourceServiceCheckResourceExistArgs, newResourceServiceCheckResourceExistResult, false),
		"ListInstances":                     kitex.NewMethodInfo(listInstancesHandler, newResourceServiceListInstancesArgs, newResourceServiceListInstancesResult, false),
		"ListFlavors":                       kitex.NewMethodInfo(listFlavorsHandler, newResourceServiceListFlavorsArgs, newResourceServiceListFlavorsResult, false),
		"GetInstanceConsole":                kitex.NewMethodInfo(getInstanceConsoleHandler, newResourceServiceGetInstanceConsoleArgs, newResourceServiceGetInstanceConsoleResult, false),
		"ListZones":                         kitex.NewMethodInfo(listZonesHandler, newResourceServiceListZonesArgs, newResourceServiceListZonesResult, false),
		"ListVolumes":                       kitex.NewMethodInfo(listVolumesHandler, newResourceServiceListVolumesArgs, newResourceServiceListVolumesResult, false),
		"ListKeyPairs":                      kitex.NewMethodInfo(listKeyPairsHandler, newResourceServiceListKeyPairsArgs, newResourceServiceListKeyPairsResult, false),
		"ListSubnets":                       kitex.NewMethodInfo(listSubnetsHandler, newResourceServiceListSubnetsArgs, newResourceServiceListSubnetsResult, false),
		"ListElasticIpPools":                kitex.NewMethodInfo(listElasticIpPoolsHandler, newResourceServiceListElasticIpPoolsArgs, newResourceServiceListElasticIpPoolsResult, false),
		"ListVpcs":                          kitex.NewMethodInfo(listVpcsHandler, newResourceServiceListVpcsArgs, newResourceServiceListVpcsResult, false),
		"ListSecurityGroups":                kitex.NewMethodInfo(listSecurityGroupsHandler, newResourceServiceListSecurityGroupsArgs, newResourceServiceListSecurityGroupsResult, false),
		"ListClbs":                          kitex.NewMethodInfo(listClbsHandler, newResourceServiceListClbsArgs, newResourceServiceListClbsResult, false),
		"ListClbListeners":                  kitex.NewMethodInfo(listClbListenersHandler, newResourceServiceListClbListenersArgs, newResourceServiceListClbListenersResult, false),
		"ListQuotas":                        kitex.NewMethodInfo(listQuotasHandler, newResourceServiceListQuotasArgs, newResourceServiceListQuotasResult, false),
		"GetQuota":                          kitex.NewMethodInfo(getQuotaHandler, newResourceServiceGetQuotaArgs, newResourceServiceGetQuotaResult, false),
		"CreateBareMachine":                 kitex.NewMethodInfo(createBareMachineHandler, newResourceServiceCreateBareMachineArgs, newResourceServiceCreateBareMachineResult, false),
		"UpdateBareMachine":                 kitex.NewMethodInfo(updateBareMachineHandler, newResourceServiceUpdateBareMachineArgs, newResourceServiceUpdateBareMachineResult, false),
		"DeleteBareMachine":                 kitex.NewMethodInfo(deleteBareMachineHandler, newResourceServiceDeleteBareMachineArgs, newResourceServiceDeleteBareMachineResult, false),
		"GetBareMachine":                    kitex.NewMethodInfo(getBareMachineHandler, newResourceServiceGetBareMachineArgs, newResourceServiceGetBareMachineResult, false),
		"ListBareMachine":                   kitex.NewMethodInfo(listBareMachineHandler, newResourceServiceListBareMachineArgs, newResourceServiceListBareMachineResult, false),
		"GetBareMachineSshPublicKey":        kitex.NewMethodInfo(getBareMachineSshPublicKeyHandler, newResourceServiceGetBareMachineSshPublicKeyArgs, newResourceServiceGetBareMachineSshPublicKeyResult, false),
		"ListBareMachineExpectOs":           kitex.NewMethodInfo(listBareMachineExpectOsHandler, newResourceServiceListBareMachineExpectOsArgs, newResourceServiceListBareMachineExpectOsResult, false),
		"GetBareMachineImportExcelTemplate": kitex.NewMethodInfo(getBareMachineImportExcelTemplateHandler, newResourceServiceGetBareMachineImportExcelTemplateArgs, newResourceServiceGetBareMachineImportExcelTemplateResult, false),
		"CheckCidrConflict":                 kitex.NewMethodInfo(checkCidrConflictHandler, newResourceServiceCheckCidrConflictArgs, newResourceServiceCheckCidrConflictResult, false),
		"RecommendCidr":                     kitex.NewMethodInfo(recommendCidrHandler, newResourceServiceRecommendCidrArgs, newResourceServiceRecommendCidrResult, false),
		"AddVciSubnets":                     kitex.NewMethodInfo(addVciSubnetsHandler, newResourceServiceAddVciSubnetsArgs, newResourceServiceAddVciSubnetsResult, false),
		"IsInShortTermWhiteList":            kitex.NewMethodInfo(isInShortTermWhiteListHandler, newResourceServiceIsInShortTermWhiteListArgs, newResourceServiceIsInShortTermWhiteListResult, false),
		"AllowUserPublicTest":               kitex.NewMethodInfo(allowUserPublicTestHandler, newResourceServiceAllowUserPublicTestArgs, newResourceServiceAllowUserPublicTestResult, false),
		"ListVciAvailabilityZones":          kitex.NewMethodInfo(listVciAvailabilityZonesHandler, newResourceServiceListVciAvailabilityZonesArgs, newResourceServiceListVciAvailabilityZonesResult, false),
		"ListNodeZones":                     kitex.NewMethodInfo(listNodeZonesHandler, newResourceServiceListNodeZonesArgs, newResourceServiceListNodeZonesResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "resourceserver",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.1.0",
		Extra:           extra,
	}
	return svcInfo
}

func getClusterOverviewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetClusterOverviewArgs)
	realResult := result.(*resourceserver.ResourceServiceGetClusterOverviewResult)
	success, err := handler.(resourceserver.ResourceService).GetClusterOverview(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetClusterOverviewArgs() interface{} {
	return resourceserver.NewResourceServiceGetClusterOverviewArgs()
}

func newResourceServiceGetClusterOverviewResult() interface{} {
	return resourceserver.NewResourceServiceGetClusterOverviewResult()
}

func getKubeConfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetKubeConfigArgs)
	realResult := result.(*resourceserver.ResourceServiceGetKubeConfigResult)
	success, err := handler.(resourceserver.ResourceService).GetKubeConfig(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetKubeConfigArgs() interface{} {
	return resourceserver.NewResourceServiceGetKubeConfigArgs()
}

func newResourceServiceGetKubeConfigResult() interface{} {
	return resourceserver.NewResourceServiceGetKubeConfigResult()
}

func getKubeconfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetKubeconfigArgs)
	realResult := result.(*resourceserver.ResourceServiceGetKubeconfigResult)
	success, err := handler.(resourceserver.ResourceService).GetKubeconfig(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetKubeconfigArgs() interface{} {
	return resourceserver.NewResourceServiceGetKubeconfigArgs()
}

func newResourceServiceGetKubeconfigResult() interface{} {
	return resourceserver.NewResourceServiceGetKubeconfigResult()
}

func revokeKubeconfigHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceRevokeKubeconfigArgs)
	realResult := result.(*resourceserver.ResourceServiceRevokeKubeconfigResult)
	success, err := handler.(resourceserver.ResourceService).RevokeKubeconfig(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceRevokeKubeconfigArgs() interface{} {
	return resourceserver.NewResourceServiceRevokeKubeconfigArgs()
}

func newResourceServiceRevokeKubeconfigResult() interface{} {
	return resourceserver.NewResourceServiceRevokeKubeconfigResult()
}

func listKubeconfigUsersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListKubeconfigUsersArgs)
	realResult := result.(*resourceserver.ResourceServiceListKubeconfigUsersResult)
	success, err := handler.(resourceserver.ResourceService).ListKubeconfigUsers(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListKubeconfigUsersArgs() interface{} {
	return resourceserver.NewResourceServiceListKubeconfigUsersArgs()
}

func newResourceServiceListKubeconfigUsersResult() interface{} {
	return resourceserver.NewResourceServiceListKubeconfigUsersResult()
}

func createClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateClusterResult)
	success, err := handler.(resourceserver.ResourceService).CreateCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateClusterArgs() interface{} {
	return resourceserver.NewResourceServiceCreateClusterArgs()
}

func newResourceServiceCreateClusterResult() interface{} {
	return resourceserver.NewResourceServiceCreateClusterResult()
}

func registerClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceRegisterClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceRegisterClusterResult)
	success, err := handler.(resourceserver.ResourceService).RegisterCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceRegisterClusterArgs() interface{} {
	return resourceserver.NewResourceServiceRegisterClusterArgs()
}

func newResourceServiceRegisterClusterResult() interface{} {
	return resourceserver.NewResourceServiceRegisterClusterResult()
}

func updateClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateClusterResult)
	success, err := handler.(resourceserver.ResourceService).UpdateCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateClusterArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateClusterArgs()
}

func newResourceServiceUpdateClusterResult() interface{} {
	return resourceserver.NewResourceServiceUpdateClusterResult()
}

func upgradeClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpgradeClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceUpgradeClusterResult)
	success, err := handler.(resourceserver.ResourceService).UpgradeCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpgradeClusterArgs() interface{} {
	return resourceserver.NewResourceServiceUpgradeClusterArgs()
}

func newResourceServiceUpgradeClusterResult() interface{} {
	return resourceserver.NewResourceServiceUpgradeClusterResult()
}

func deleteClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteClusterResult)
	success, err := handler.(resourceserver.ResourceService).DeleteCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteClusterArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteClusterArgs()
}

func newResourceServiceDeleteClusterResult() interface{} {
	return resourceserver.NewResourceServiceDeleteClusterResult()
}

func getClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceGetClusterResult)
	success, err := handler.(resourceserver.ResourceService).GetCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetClusterArgs() interface{} {
	return resourceserver.NewResourceServiceGetClusterArgs()
}

func newResourceServiceGetClusterResult() interface{} {
	return resourceserver.NewResourceServiceGetClusterResult()
}

func listClustersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListClustersArgs)
	realResult := result.(*resourceserver.ResourceServiceListClustersResult)
	success, err := handler.(resourceserver.ResourceService).ListClusters(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListClustersArgs() interface{} {
	return resourceserver.NewResourceServiceListClustersArgs()
}

func newResourceServiceListClustersResult() interface{} {
	return resourceserver.NewResourceServiceListClustersResult()
}

func getClusterDeployProgressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetClusterDeployProgressArgs)
	realResult := result.(*resourceserver.ResourceServiceGetClusterDeployProgressResult)
	success, err := handler.(resourceserver.ResourceService).GetClusterDeployProgress(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetClusterDeployProgressArgs() interface{} {
	return resourceserver.NewResourceServiceGetClusterDeployProgressArgs()
}

func newResourceServiceGetClusterDeployProgressResult() interface{} {
	return resourceserver.NewResourceServiceGetClusterDeployProgressResult()
}

func listSupportedKubernetesVersionsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListSupportedKubernetesVersionsArgs)
	realResult := result.(*resourceserver.ResourceServiceListSupportedKubernetesVersionsResult)
	success, err := handler.(resourceserver.ResourceService).ListSupportedKubernetesVersions(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListSupportedKubernetesVersionsArgs() interface{} {
	return resourceserver.NewResourceServiceListSupportedKubernetesVersionsArgs()
}

func newResourceServiceListSupportedKubernetesVersionsResult() interface{} {
	return resourceserver.NewResourceServiceListSupportedKubernetesVersionsResult()
}

func listClusterNetworkCidrsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListClusterNetworkCidrsArgs)
	realResult := result.(*resourceserver.ResourceServiceListClusterNetworkCidrsResult)
	success, err := handler.(resourceserver.ResourceService).ListClusterNetworkCidrs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListClusterNetworkCidrsArgs() interface{} {
	return resourceserver.NewResourceServiceListClusterNetworkCidrsArgs()
}

func newResourceServiceListClusterNetworkCidrsResult() interface{} {
	return resourceserver.NewResourceServiceListClusterNetworkCidrsResult()
}

func listSupportedGpuModelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListSupportedGpuModelsArgs)
	realResult := result.(*resourceserver.ResourceServiceListSupportedGpuModelsResult)
	success, err := handler.(resourceserver.ResourceService).ListSupportedGpuModels(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListSupportedGpuModelsArgs() interface{} {
	return resourceserver.NewResourceServiceListSupportedGpuModelsArgs()
}

func newResourceServiceListSupportedGpuModelsResult() interface{} {
	return resourceserver.NewResourceServiceListSupportedGpuModelsResult()
}

func listNodesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNodesArgs)
	realResult := result.(*resourceserver.ResourceServiceListNodesResult)
	success, err := handler.(resourceserver.ResourceService).ListNodes(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNodesArgs() interface{} {
	return resourceserver.NewResourceServiceListNodesArgs()
}

func newResourceServiceListNodesResult() interface{} {
	return resourceserver.NewResourceServiceListNodesResult()
}

func addNodesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceAddNodesArgs)
	realResult := result.(*resourceserver.ResourceServiceAddNodesResult)
	success, err := handler.(resourceserver.ResourceService).AddNodes(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceAddNodesArgs() interface{} {
	return resourceserver.NewResourceServiceAddNodesArgs()
}

func newResourceServiceAddNodesResult() interface{} {
	return resourceserver.NewResourceServiceAddNodesResult()
}

func getNodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetNodeArgs)
	realResult := result.(*resourceserver.ResourceServiceGetNodeResult)
	success, err := handler.(resourceserver.ResourceService).GetNode(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetNodeArgs() interface{} {
	return resourceserver.NewResourceServiceGetNodeArgs()
}

func newResourceServiceGetNodeResult() interface{} {
	return resourceserver.NewResourceServiceGetNodeResult()
}

func deleteNodesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteNodesArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteNodesResult)
	success, err := handler.(resourceserver.ResourceService).DeleteNodes(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteNodesArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteNodesArgs()
}

func newResourceServiceDeleteNodesResult() interface{} {
	return resourceserver.NewResourceServiceDeleteNodesResult()
}

func listNodeLabelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNodeLabelsArgs)
	realResult := result.(*resourceserver.ResourceServiceListNodeLabelsResult)
	success, err := handler.(resourceserver.ResourceService).ListNodeLabels(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNodeLabelsArgs() interface{} {
	return resourceserver.NewResourceServiceListNodeLabelsArgs()
}

func newResourceServiceListNodeLabelsResult() interface{} {
	return resourceserver.NewResourceServiceListNodeLabelsResult()
}

func updateNodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateNodeArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateNodeResult)
	success, err := handler.(resourceserver.ResourceService).UpdateNode(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateNodeArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateNodeArgs()
}

func newResourceServiceUpdateNodeResult() interface{} {
	return resourceserver.NewResourceServiceUpdateNodeResult()
}

func getClusterAutoScalingRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetClusterAutoScalingRuleArgs)
	realResult := result.(*resourceserver.ResourceServiceGetClusterAutoScalingRuleResult)
	success, err := handler.(resourceserver.ResourceService).GetClusterAutoScalingRule(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetClusterAutoScalingRuleArgs() interface{} {
	return resourceserver.NewResourceServiceGetClusterAutoScalingRuleArgs()
}

func newResourceServiceGetClusterAutoScalingRuleResult() interface{} {
	return resourceserver.NewResourceServiceGetClusterAutoScalingRuleResult()
}

func updateClusterAutoScalingRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateClusterAutoScalingRuleArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateClusterAutoScalingRuleResult)
	success, err := handler.(resourceserver.ResourceService).UpdateClusterAutoScalingRule(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateClusterAutoScalingRuleArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateClusterAutoScalingRuleArgs()
}

func newResourceServiceUpdateClusterAutoScalingRuleResult() interface{} {
	return resourceserver.NewResourceServiceUpdateClusterAutoScalingRuleResult()
}

func scaleUpNodePoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceScaleUpNodePoolArgs)
	realResult := result.(*resourceserver.ResourceServiceScaleUpNodePoolResult)
	success, err := handler.(resourceserver.ResourceService).ScaleUpNodePool(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceScaleUpNodePoolArgs() interface{} {
	return resourceserver.NewResourceServiceScaleUpNodePoolArgs()
}

func newResourceServiceScaleUpNodePoolResult() interface{} {
	return resourceserver.NewResourceServiceScaleUpNodePoolResult()
}

func scaleDownNodePoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceScaleDownNodePoolArgs)
	realResult := result.(*resourceserver.ResourceServiceScaleDownNodePoolResult)
	success, err := handler.(resourceserver.ResourceService).ScaleDownNodePool(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceScaleDownNodePoolArgs() interface{} {
	return resourceserver.NewResourceServiceScaleDownNodePoolArgs()
}

func newResourceServiceScaleDownNodePoolResult() interface{} {
	return resourceserver.NewResourceServiceScaleDownNodePoolResult()
}

func listNodePoolsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNodePoolsArgs)
	realResult := result.(*resourceserver.ResourceServiceListNodePoolsResult)
	success, err := handler.(resourceserver.ResourceService).ListNodePools(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNodePoolsArgs() interface{} {
	return resourceserver.NewResourceServiceListNodePoolsArgs()
}

func newResourceServiceListNodePoolsResult() interface{} {
	return resourceserver.NewResourceServiceListNodePoolsResult()
}

func createNodePoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateNodePoolArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateNodePoolResult)
	success, err := handler.(resourceserver.ResourceService).CreateNodePool(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateNodePoolArgs() interface{} {
	return resourceserver.NewResourceServiceCreateNodePoolArgs()
}

func newResourceServiceCreateNodePoolResult() interface{} {
	return resourceserver.NewResourceServiceCreateNodePoolResult()
}

func getNodePoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetNodePoolArgs)
	realResult := result.(*resourceserver.ResourceServiceGetNodePoolResult)
	success, err := handler.(resourceserver.ResourceService).GetNodePool(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetNodePoolArgs() interface{} {
	return resourceserver.NewResourceServiceGetNodePoolArgs()
}

func newResourceServiceGetNodePoolResult() interface{} {
	return resourceserver.NewResourceServiceGetNodePoolResult()
}

func updateNodePoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateNodePoolArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateNodePoolResult)
	success, err := handler.(resourceserver.ResourceService).UpdateNodePool(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateNodePoolArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateNodePoolArgs()
}

func newResourceServiceUpdateNodePoolResult() interface{} {
	return resourceserver.NewResourceServiceUpdateNodePoolResult()
}

func deleteNodePoolHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteNodePoolArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteNodePoolResult)
	success, err := handler.(resourceserver.ResourceService).DeleteNodePool(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteNodePoolArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteNodePoolArgs()
}

func newResourceServiceDeleteNodePoolResult() interface{} {
	return resourceserver.NewResourceServiceDeleteNodePoolResult()
}

func listNodePoolScalingRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNodePoolScalingRecordsArgs)
	realResult := result.(*resourceserver.ResourceServiceListNodePoolScalingRecordsResult)
	success, err := handler.(resourceserver.ResourceService).ListNodePoolScalingRecords(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNodePoolScalingRecordsArgs() interface{} {
	return resourceserver.NewResourceServiceListNodePoolScalingRecordsArgs()
}

func newResourceServiceListNodePoolScalingRecordsResult() interface{} {
	return resourceserver.NewResourceServiceListNodePoolScalingRecordsResult()
}

func listNodePoolNodesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNodePoolNodesArgs)
	realResult := result.(*resourceserver.ResourceServiceListNodePoolNodesResult)
	success, err := handler.(resourceserver.ResourceService).ListNodePoolNodes(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNodePoolNodesArgs() interface{} {
	return resourceserver.NewResourceServiceListNodePoolNodesArgs()
}

func newResourceServiceListNodePoolNodesResult() interface{} {
	return resourceserver.NewResourceServiceListNodePoolNodesResult()
}

func listNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNamespaceArgs)
	realResult := result.(*resourceserver.ResourceServiceListNamespaceResult)
	success, err := handler.(resourceserver.ResourceService).ListNamespace(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNamespaceArgs() interface{} {
	return resourceserver.NewResourceServiceListNamespaceArgs()
}

func newResourceServiceListNamespaceResult() interface{} {
	return resourceserver.NewResourceServiceListNamespaceResult()
}

func createNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateNamespaceArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateNamespaceResult)
	success, err := handler.(resourceserver.ResourceService).CreateNamespace(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateNamespaceArgs() interface{} {
	return resourceserver.NewResourceServiceCreateNamespaceArgs()
}

func newResourceServiceCreateNamespaceResult() interface{} {
	return resourceserver.NewResourceServiceCreateNamespaceResult()
}

func getNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetNamespaceArgs)
	realResult := result.(*resourceserver.ResourceServiceGetNamespaceResult)
	success, err := handler.(resourceserver.ResourceService).GetNamespace(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetNamespaceArgs() interface{} {
	return resourceserver.NewResourceServiceGetNamespaceArgs()
}

func newResourceServiceGetNamespaceResult() interface{} {
	return resourceserver.NewResourceServiceGetNamespaceResult()
}

func updateNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateNamespaceArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateNamespaceResult)
	success, err := handler.(resourceserver.ResourceService).UpdateNamespace(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateNamespaceArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateNamespaceArgs()
}

func newResourceServiceUpdateNamespaceResult() interface{} {
	return resourceserver.NewResourceServiceUpdateNamespaceResult()
}

func updateNamespaceResourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateNamespaceResourceArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateNamespaceResourceResult)
	success, err := handler.(resourceserver.ResourceService).UpdateNamespaceResource(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateNamespaceResourceArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateNamespaceResourceArgs()
}

func newResourceServiceUpdateNamespaceResourceResult() interface{} {
	return resourceserver.NewResourceServiceUpdateNamespaceResourceResult()
}

func getNamespaceResourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetNamespaceResourceArgs)
	realResult := result.(*resourceserver.ResourceServiceGetNamespaceResourceResult)
	success, err := handler.(resourceserver.ResourceService).GetNamespaceResource(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetNamespaceResourceArgs() interface{} {
	return resourceserver.NewResourceServiceGetNamespaceResourceArgs()
}

func newResourceServiceGetNamespaceResourceResult() interface{} {
	return resourceserver.NewResourceServiceGetNamespaceResourceResult()
}

func deleteNamespaceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteNamespaceArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteNamespaceResult)
	success, err := handler.(resourceserver.ResourceService).DeleteNamespace(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteNamespaceArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteNamespaceArgs()
}

func newResourceServiceDeleteNamespaceResult() interface{} {
	return resourceserver.NewResourceServiceDeleteNamespaceResult()
}

func listResourceQuotaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListResourceQuotaArgs)
	realResult := result.(*resourceserver.ResourceServiceListResourceQuotaResult)
	success, err := handler.(resourceserver.ResourceService).ListResourceQuota(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListResourceQuotaArgs() interface{} {
	return resourceserver.NewResourceServiceListResourceQuotaArgs()
}

func newResourceServiceListResourceQuotaResult() interface{} {
	return resourceserver.NewResourceServiceListResourceQuotaResult()
}

func listIngressTypesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListIngressTypesArgs)
	realResult := result.(*resourceserver.ResourceServiceListIngressTypesResult)
	success, err := handler.(resourceserver.ResourceService).ListIngressTypes(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListIngressTypesArgs() interface{} {
	return resourceserver.NewResourceServiceListIngressTypesArgs()
}

func newResourceServiceListIngressTypesResult() interface{} {
	return resourceserver.NewResourceServiceListIngressTypesResult()
}

func listIngressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListIngressArgs)
	realResult := result.(*resourceserver.ResourceServiceListIngressResult)
	success, err := handler.(resourceserver.ResourceService).ListIngress(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListIngressArgs() interface{} {
	return resourceserver.NewResourceServiceListIngressArgs()
}

func newResourceServiceListIngressResult() interface{} {
	return resourceserver.NewResourceServiceListIngressResult()
}

func createIngressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateIngressArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateIngressResult)
	success, err := handler.(resourceserver.ResourceService).CreateIngress(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateIngressArgs() interface{} {
	return resourceserver.NewResourceServiceCreateIngressArgs()
}

func newResourceServiceCreateIngressResult() interface{} {
	return resourceserver.NewResourceServiceCreateIngressResult()
}

func getIngressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetIngressArgs)
	realResult := result.(*resourceserver.ResourceServiceGetIngressResult)
	success, err := handler.(resourceserver.ResourceService).GetIngress(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetIngressArgs() interface{} {
	return resourceserver.NewResourceServiceGetIngressArgs()
}

func newResourceServiceGetIngressResult() interface{} {
	return resourceserver.NewResourceServiceGetIngressResult()
}

func updateIngressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateIngressArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateIngressResult)
	success, err := handler.(resourceserver.ResourceService).UpdateIngress(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateIngressArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateIngressArgs()
}

func newResourceServiceUpdateIngressResult() interface{} {
	return resourceserver.NewResourceServiceUpdateIngressResult()
}

func deleteIngressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteIngressArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteIngressResult)
	success, err := handler.(resourceserver.ResourceService).DeleteIngress(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteIngressArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteIngressArgs()
}

func newResourceServiceDeleteIngressResult() interface{} {
	return resourceserver.NewResourceServiceDeleteIngressResult()
}

func getSecretDomainsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetSecretDomainsArgs)
	realResult := result.(*resourceserver.ResourceServiceGetSecretDomainsResult)
	success, err := handler.(resourceserver.ResourceService).GetSecretDomains(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetSecretDomainsArgs() interface{} {
	return resourceserver.NewResourceServiceGetSecretDomainsArgs()
}

func newResourceServiceGetSecretDomainsResult() interface{} {
	return resourceserver.NewResourceServiceGetSecretDomainsResult()
}

func listStorageClassHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListStorageClassArgs)
	realResult := result.(*resourceserver.ResourceServiceListStorageClassResult)
	success, err := handler.(resourceserver.ResourceService).ListStorageClass(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListStorageClassArgs() interface{} {
	return resourceserver.NewResourceServiceListStorageClassArgs()
}

func newResourceServiceListStorageClassResult() interface{} {
	return resourceserver.NewResourceServiceListStorageClassResult()
}

func createStorageClassHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateStorageClassArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateStorageClassResult)
	success, err := handler.(resourceserver.ResourceService).CreateStorageClass(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateStorageClassArgs() interface{} {
	return resourceserver.NewResourceServiceCreateStorageClassArgs()
}

func newResourceServiceCreateStorageClassResult() interface{} {
	return resourceserver.NewResourceServiceCreateStorageClassResult()
}

func getStorageClassHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetStorageClassArgs)
	realResult := result.(*resourceserver.ResourceServiceGetStorageClassResult)
	success, err := handler.(resourceserver.ResourceService).GetStorageClass(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetStorageClassArgs() interface{} {
	return resourceserver.NewResourceServiceGetStorageClassArgs()
}

func newResourceServiceGetStorageClassResult() interface{} {
	return resourceserver.NewResourceServiceGetStorageClassResult()
}

func deleteStorageClassHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteStorageClassArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteStorageClassResult)
	success, err := handler.(resourceserver.ResourceService).DeleteStorageClass(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteStorageClassArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteStorageClassArgs()
}

func newResourceServiceDeleteStorageClassResult() interface{} {
	return resourceserver.NewResourceServiceDeleteStorageClassResult()
}

func listPersistentVolumeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListPersistentVolumeArgs)
	realResult := result.(*resourceserver.ResourceServiceListPersistentVolumeResult)
	success, err := handler.(resourceserver.ResourceService).ListPersistentVolume(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListPersistentVolumeArgs() interface{} {
	return resourceserver.NewResourceServiceListPersistentVolumeArgs()
}

func newResourceServiceListPersistentVolumeResult() interface{} {
	return resourceserver.NewResourceServiceListPersistentVolumeResult()
}

func createPersistentVolumeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreatePersistentVolumeArgs)
	realResult := result.(*resourceserver.ResourceServiceCreatePersistentVolumeResult)
	success, err := handler.(resourceserver.ResourceService).CreatePersistentVolume(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreatePersistentVolumeArgs() interface{} {
	return resourceserver.NewResourceServiceCreatePersistentVolumeArgs()
}

func newResourceServiceCreatePersistentVolumeResult() interface{} {
	return resourceserver.NewResourceServiceCreatePersistentVolumeResult()
}

func getPersistentVolumeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetPersistentVolumeArgs)
	realResult := result.(*resourceserver.ResourceServiceGetPersistentVolumeResult)
	success, err := handler.(resourceserver.ResourceService).GetPersistentVolume(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetPersistentVolumeArgs() interface{} {
	return resourceserver.NewResourceServiceGetPersistentVolumeArgs()
}

func newResourceServiceGetPersistentVolumeResult() interface{} {
	return resourceserver.NewResourceServiceGetPersistentVolumeResult()
}

func deletePersistentVolumeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeletePersistentVolumeArgs)
	realResult := result.(*resourceserver.ResourceServiceDeletePersistentVolumeResult)
	success, err := handler.(resourceserver.ResourceService).DeletePersistentVolume(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeletePersistentVolumeArgs() interface{} {
	return resourceserver.NewResourceServiceDeletePersistentVolumeArgs()
}

func newResourceServiceDeletePersistentVolumeResult() interface{} {
	return resourceserver.NewResourceServiceDeletePersistentVolumeResult()
}

func listPersistentVolumeClaimHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListPersistentVolumeClaimArgs)
	realResult := result.(*resourceserver.ResourceServiceListPersistentVolumeClaimResult)
	success, err := handler.(resourceserver.ResourceService).ListPersistentVolumeClaim(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListPersistentVolumeClaimArgs() interface{} {
	return resourceserver.NewResourceServiceListPersistentVolumeClaimArgs()
}

func newResourceServiceListPersistentVolumeClaimResult() interface{} {
	return resourceserver.NewResourceServiceListPersistentVolumeClaimResult()
}

func createPersistentVolumeClaimHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreatePersistentVolumeClaimArgs)
	realResult := result.(*resourceserver.ResourceServiceCreatePersistentVolumeClaimResult)
	success, err := handler.(resourceserver.ResourceService).CreatePersistentVolumeClaim(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreatePersistentVolumeClaimArgs() interface{} {
	return resourceserver.NewResourceServiceCreatePersistentVolumeClaimArgs()
}

func newResourceServiceCreatePersistentVolumeClaimResult() interface{} {
	return resourceserver.NewResourceServiceCreatePersistentVolumeClaimResult()
}

func getPersistentVolumeClaimHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetPersistentVolumeClaimArgs)
	realResult := result.(*resourceserver.ResourceServiceGetPersistentVolumeClaimResult)
	success, err := handler.(resourceserver.ResourceService).GetPersistentVolumeClaim(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetPersistentVolumeClaimArgs() interface{} {
	return resourceserver.NewResourceServiceGetPersistentVolumeClaimArgs()
}

func newResourceServiceGetPersistentVolumeClaimResult() interface{} {
	return resourceserver.NewResourceServiceGetPersistentVolumeClaimResult()
}

func deletePersistentVolumeClaimHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeletePersistentVolumeClaimArgs)
	realResult := result.(*resourceserver.ResourceServiceDeletePersistentVolumeClaimResult)
	success, err := handler.(resourceserver.ResourceService).DeletePersistentVolumeClaim(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeletePersistentVolumeClaimArgs() interface{} {
	return resourceserver.NewResourceServiceDeletePersistentVolumeClaimArgs()
}

func newResourceServiceDeletePersistentVolumeClaimResult() interface{} {
	return resourceserver.NewResourceServiceDeletePersistentVolumeClaimResult()
}

func listCephClusterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListCephClusterArgs)
	realResult := result.(*resourceserver.ResourceServiceListCephClusterResult)
	success, err := handler.(resourceserver.ResourceService).ListCephCluster(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListCephClusterArgs() interface{} {
	return resourceserver.NewResourceServiceListCephClusterArgs()
}

func newResourceServiceListCephClusterResult() interface{} {
	return resourceserver.NewResourceServiceListCephClusterResult()
}

func listEventHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListEventArgs)
	realResult := result.(*resourceserver.ResourceServiceListEventResult)
	success, err := handler.(resourceserver.ResourceService).ListEvent(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListEventArgs() interface{} {
	return resourceserver.NewResourceServiceListEventArgs()
}

func newResourceServiceListEventResult() interface{} {
	return resourceserver.NewResourceServiceListEventResult()
}

func listUserRbacsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListUserRbacsArgs)
	realResult := result.(*resourceserver.ResourceServiceListUserRbacsResult)
	success, err := handler.(resourceserver.ResourceService).ListUserRbacs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListUserRbacsArgs() interface{} {
	return resourceserver.NewResourceServiceListUserRbacsArgs()
}

func newResourceServiceListUserRbacsResult() interface{} {
	return resourceserver.NewResourceServiceListUserRbacsResult()
}

func createUserRbacHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateUserRbacArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateUserRbacResult)
	success, err := handler.(resourceserver.ResourceService).CreateUserRbac(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateUserRbacArgs() interface{} {
	return resourceserver.NewResourceServiceCreateUserRbacArgs()
}

func newResourceServiceCreateUserRbacResult() interface{} {
	return resourceserver.NewResourceServiceCreateUserRbacResult()
}

func updateUserRbacHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateUserRbacArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateUserRbacResult)
	success, err := handler.(resourceserver.ResourceService).UpdateUserRbac(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateUserRbacArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateUserRbacArgs()
}

func newResourceServiceUpdateUserRbacResult() interface{} {
	return resourceserver.NewResourceServiceUpdateUserRbacResult()
}

func deleteUserRbacHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteUserRbacArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteUserRbacResult)
	success, err := handler.(resourceserver.ResourceService).DeleteUserRbac(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteUserRbacArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteUserRbacArgs()
}

func newResourceServiceDeleteUserRbacResult() interface{} {
	return resourceserver.NewResourceServiceDeleteUserRbacResult()
}

func listCustomRolesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListCustomRolesArgs)
	realResult := result.(*resourceserver.ResourceServiceListCustomRolesResult)
	success, err := handler.(resourceserver.ResourceService).ListCustomRoles(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListCustomRolesArgs() interface{} {
	return resourceserver.NewResourceServiceListCustomRolesArgs()
}

func newResourceServiceListCustomRolesResult() interface{} {
	return resourceserver.NewResourceServiceListCustomRolesResult()
}

func listSupportedAddonsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListSupportedAddonsArgs)
	realResult := result.(*resourceserver.ResourceServiceListSupportedAddonsResult)
	success, err := handler.(resourceserver.ResourceService).ListSupportedAddons(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListSupportedAddonsArgs() interface{} {
	return resourceserver.NewResourceServiceListSupportedAddonsArgs()
}

func newResourceServiceListSupportedAddonsResult() interface{} {
	return resourceserver.NewResourceServiceListSupportedAddonsResult()
}

func listAddonsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListAddonsArgs)
	realResult := result.(*resourceserver.ResourceServiceListAddonsResult)
	success, err := handler.(resourceserver.ResourceService).ListAddons(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListAddonsArgs() interface{} {
	return resourceserver.NewResourceServiceListAddonsArgs()
}

func newResourceServiceListAddonsResult() interface{} {
	return resourceserver.NewResourceServiceListAddonsResult()
}

func installAddonsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceInstallAddonsArgs)
	realResult := result.(*resourceserver.ResourceServiceInstallAddonsResult)
	success, err := handler.(resourceserver.ResourceService).InstallAddons(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceInstallAddonsArgs() interface{} {
	return resourceserver.NewResourceServiceInstallAddonsArgs()
}

func newResourceServiceInstallAddonsResult() interface{} {
	return resourceserver.NewResourceServiceInstallAddonsResult()
}

func reinstallAddonHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceReinstallAddonArgs)
	realResult := result.(*resourceserver.ResourceServiceReinstallAddonResult)
	success, err := handler.(resourceserver.ResourceService).ReinstallAddon(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceReinstallAddonArgs() interface{} {
	return resourceserver.NewResourceServiceReinstallAddonArgs()
}

func newResourceServiceReinstallAddonResult() interface{} {
	return resourceserver.NewResourceServiceReinstallAddonResult()
}

func uninstallAddonsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUninstallAddonsArgs)
	realResult := result.(*resourceserver.ResourceServiceUninstallAddonsResult)
	success, err := handler.(resourceserver.ResourceService).UninstallAddons(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUninstallAddonsArgs() interface{} {
	return resourceserver.NewResourceServiceUninstallAddonsArgs()
}

func newResourceServiceUninstallAddonsResult() interface{} {
	return resourceserver.NewResourceServiceUninstallAddonsResult()
}

func upgradeAddonHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpgradeAddonArgs)
	realResult := result.(*resourceserver.ResourceServiceUpgradeAddonResult)
	success, err := handler.(resourceserver.ResourceService).UpgradeAddon(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpgradeAddonArgs() interface{} {
	return resourceserver.NewResourceServiceUpgradeAddonArgs()
}

func newResourceServiceUpgradeAddonResult() interface{} {
	return resourceserver.NewResourceServiceUpgradeAddonResult()
}

func getAddonHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetAddonArgs)
	realResult := result.(*resourceserver.ResourceServiceGetAddonResult)
	success, err := handler.(resourceserver.ResourceService).GetAddon(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetAddonArgs() interface{} {
	return resourceserver.NewResourceServiceGetAddonArgs()
}

func newResourceServiceGetAddonResult() interface{} {
	return resourceserver.NewResourceServiceGetAddonResult()
}

func checkResourceExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCheckResourceExistArgs)
	realResult := result.(*resourceserver.ResourceServiceCheckResourceExistResult)
	success, err := handler.(resourceserver.ResourceService).CheckResourceExist(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCheckResourceExistArgs() interface{} {
	return resourceserver.NewResourceServiceCheckResourceExistArgs()
}

func newResourceServiceCheckResourceExistResult() interface{} {
	return resourceserver.NewResourceServiceCheckResourceExistResult()
}

func listInstancesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListInstancesArgs)
	realResult := result.(*resourceserver.ResourceServiceListInstancesResult)
	success, err := handler.(resourceserver.ResourceService).ListInstances(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListInstancesArgs() interface{} {
	return resourceserver.NewResourceServiceListInstancesArgs()
}

func newResourceServiceListInstancesResult() interface{} {
	return resourceserver.NewResourceServiceListInstancesResult()
}

func listFlavorsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListFlavorsArgs)
	realResult := result.(*resourceserver.ResourceServiceListFlavorsResult)
	success, err := handler.(resourceserver.ResourceService).ListFlavors(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListFlavorsArgs() interface{} {
	return resourceserver.NewResourceServiceListFlavorsArgs()
}

func newResourceServiceListFlavorsResult() interface{} {
	return resourceserver.NewResourceServiceListFlavorsResult()
}

func getInstanceConsoleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetInstanceConsoleArgs)
	realResult := result.(*resourceserver.ResourceServiceGetInstanceConsoleResult)
	success, err := handler.(resourceserver.ResourceService).GetInstanceConsole(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetInstanceConsoleArgs() interface{} {
	return resourceserver.NewResourceServiceGetInstanceConsoleArgs()
}

func newResourceServiceGetInstanceConsoleResult() interface{} {
	return resourceserver.NewResourceServiceGetInstanceConsoleResult()
}

func listZonesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListZonesArgs)
	realResult := result.(*resourceserver.ResourceServiceListZonesResult)
	success, err := handler.(resourceserver.ResourceService).ListZones(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListZonesArgs() interface{} {
	return resourceserver.NewResourceServiceListZonesArgs()
}

func newResourceServiceListZonesResult() interface{} {
	return resourceserver.NewResourceServiceListZonesResult()
}

func listVolumesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListVolumesArgs)
	realResult := result.(*resourceserver.ResourceServiceListVolumesResult)
	success, err := handler.(resourceserver.ResourceService).ListVolumes(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListVolumesArgs() interface{} {
	return resourceserver.NewResourceServiceListVolumesArgs()
}

func newResourceServiceListVolumesResult() interface{} {
	return resourceserver.NewResourceServiceListVolumesResult()
}

func listKeyPairsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListKeyPairsArgs)
	realResult := result.(*resourceserver.ResourceServiceListKeyPairsResult)
	success, err := handler.(resourceserver.ResourceService).ListKeyPairs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListKeyPairsArgs() interface{} {
	return resourceserver.NewResourceServiceListKeyPairsArgs()
}

func newResourceServiceListKeyPairsResult() interface{} {
	return resourceserver.NewResourceServiceListKeyPairsResult()
}

func listSubnetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListSubnetsArgs)
	realResult := result.(*resourceserver.ResourceServiceListSubnetsResult)
	success, err := handler.(resourceserver.ResourceService).ListSubnets(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListSubnetsArgs() interface{} {
	return resourceserver.NewResourceServiceListSubnetsArgs()
}

func newResourceServiceListSubnetsResult() interface{} {
	return resourceserver.NewResourceServiceListSubnetsResult()
}

func listElasticIpPoolsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListElasticIpPoolsArgs)
	realResult := result.(*resourceserver.ResourceServiceListElasticIpPoolsResult)
	success, err := handler.(resourceserver.ResourceService).ListElasticIpPools(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListElasticIpPoolsArgs() interface{} {
	return resourceserver.NewResourceServiceListElasticIpPoolsArgs()
}

func newResourceServiceListElasticIpPoolsResult() interface{} {
	return resourceserver.NewResourceServiceListElasticIpPoolsResult()
}

func listVpcsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListVpcsArgs)
	realResult := result.(*resourceserver.ResourceServiceListVpcsResult)
	success, err := handler.(resourceserver.ResourceService).ListVpcs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListVpcsArgs() interface{} {
	return resourceserver.NewResourceServiceListVpcsArgs()
}

func newResourceServiceListVpcsResult() interface{} {
	return resourceserver.NewResourceServiceListVpcsResult()
}

func listSecurityGroupsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListSecurityGroupsArgs)
	realResult := result.(*resourceserver.ResourceServiceListSecurityGroupsResult)
	success, err := handler.(resourceserver.ResourceService).ListSecurityGroups(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListSecurityGroupsArgs() interface{} {
	return resourceserver.NewResourceServiceListSecurityGroupsArgs()
}

func newResourceServiceListSecurityGroupsResult() interface{} {
	return resourceserver.NewResourceServiceListSecurityGroupsResult()
}

func listClbsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListClbsArgs)
	realResult := result.(*resourceserver.ResourceServiceListClbsResult)
	success, err := handler.(resourceserver.ResourceService).ListClbs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListClbsArgs() interface{} {
	return resourceserver.NewResourceServiceListClbsArgs()
}

func newResourceServiceListClbsResult() interface{} {
	return resourceserver.NewResourceServiceListClbsResult()
}

func listClbListenersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListClbListenersArgs)
	realResult := result.(*resourceserver.ResourceServiceListClbListenersResult)
	success, err := handler.(resourceserver.ResourceService).ListClbListeners(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListClbListenersArgs() interface{} {
	return resourceserver.NewResourceServiceListClbListenersArgs()
}

func newResourceServiceListClbListenersResult() interface{} {
	return resourceserver.NewResourceServiceListClbListenersResult()
}

func listQuotasHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListQuotasArgs)
	realResult := result.(*resourceserver.ResourceServiceListQuotasResult)
	success, err := handler.(resourceserver.ResourceService).ListQuotas(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListQuotasArgs() interface{} {
	return resourceserver.NewResourceServiceListQuotasArgs()
}

func newResourceServiceListQuotasResult() interface{} {
	return resourceserver.NewResourceServiceListQuotasResult()
}

func getQuotaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetQuotaArgs)
	realResult := result.(*resourceserver.ResourceServiceGetQuotaResult)
	success, err := handler.(resourceserver.ResourceService).GetQuota(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetQuotaArgs() interface{} {
	return resourceserver.NewResourceServiceGetQuotaArgs()
}

func newResourceServiceGetQuotaResult() interface{} {
	return resourceserver.NewResourceServiceGetQuotaResult()
}

func createBareMachineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCreateBareMachineArgs)
	realResult := result.(*resourceserver.ResourceServiceCreateBareMachineResult)
	success, err := handler.(resourceserver.ResourceService).CreateBareMachine(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCreateBareMachineArgs() interface{} {
	return resourceserver.NewResourceServiceCreateBareMachineArgs()
}

func newResourceServiceCreateBareMachineResult() interface{} {
	return resourceserver.NewResourceServiceCreateBareMachineResult()
}

func updateBareMachineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceUpdateBareMachineArgs)
	realResult := result.(*resourceserver.ResourceServiceUpdateBareMachineResult)
	success, err := handler.(resourceserver.ResourceService).UpdateBareMachine(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceUpdateBareMachineArgs() interface{} {
	return resourceserver.NewResourceServiceUpdateBareMachineArgs()
}

func newResourceServiceUpdateBareMachineResult() interface{} {
	return resourceserver.NewResourceServiceUpdateBareMachineResult()
}

func deleteBareMachineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceDeleteBareMachineArgs)
	realResult := result.(*resourceserver.ResourceServiceDeleteBareMachineResult)
	success, err := handler.(resourceserver.ResourceService).DeleteBareMachine(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceDeleteBareMachineArgs() interface{} {
	return resourceserver.NewResourceServiceDeleteBareMachineArgs()
}

func newResourceServiceDeleteBareMachineResult() interface{} {
	return resourceserver.NewResourceServiceDeleteBareMachineResult()
}

func getBareMachineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetBareMachineArgs)
	realResult := result.(*resourceserver.ResourceServiceGetBareMachineResult)
	success, err := handler.(resourceserver.ResourceService).GetBareMachine(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetBareMachineArgs() interface{} {
	return resourceserver.NewResourceServiceGetBareMachineArgs()
}

func newResourceServiceGetBareMachineResult() interface{} {
	return resourceserver.NewResourceServiceGetBareMachineResult()
}

func listBareMachineHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListBareMachineArgs)
	realResult := result.(*resourceserver.ResourceServiceListBareMachineResult)
	success, err := handler.(resourceserver.ResourceService).ListBareMachine(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListBareMachineArgs() interface{} {
	return resourceserver.NewResourceServiceListBareMachineArgs()
}

func newResourceServiceListBareMachineResult() interface{} {
	return resourceserver.NewResourceServiceListBareMachineResult()
}

func getBareMachineSshPublicKeyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetBareMachineSshPublicKeyArgs)
	realResult := result.(*resourceserver.ResourceServiceGetBareMachineSshPublicKeyResult)
	success, err := handler.(resourceserver.ResourceService).GetBareMachineSshPublicKey(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetBareMachineSshPublicKeyArgs() interface{} {
	return resourceserver.NewResourceServiceGetBareMachineSshPublicKeyArgs()
}

func newResourceServiceGetBareMachineSshPublicKeyResult() interface{} {
	return resourceserver.NewResourceServiceGetBareMachineSshPublicKeyResult()
}

func listBareMachineExpectOsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListBareMachineExpectOsArgs)
	realResult := result.(*resourceserver.ResourceServiceListBareMachineExpectOsResult)
	success, err := handler.(resourceserver.ResourceService).ListBareMachineExpectOs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListBareMachineExpectOsArgs() interface{} {
	return resourceserver.NewResourceServiceListBareMachineExpectOsArgs()
}

func newResourceServiceListBareMachineExpectOsResult() interface{} {
	return resourceserver.NewResourceServiceListBareMachineExpectOsResult()
}

func getBareMachineImportExcelTemplateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceGetBareMachineImportExcelTemplateArgs)
	realResult := result.(*resourceserver.ResourceServiceGetBareMachineImportExcelTemplateResult)
	success, err := handler.(resourceserver.ResourceService).GetBareMachineImportExcelTemplate(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceGetBareMachineImportExcelTemplateArgs() interface{} {
	return resourceserver.NewResourceServiceGetBareMachineImportExcelTemplateArgs()
}

func newResourceServiceGetBareMachineImportExcelTemplateResult() interface{} {
	return resourceserver.NewResourceServiceGetBareMachineImportExcelTemplateResult()
}

func checkCidrConflictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceCheckCidrConflictArgs)
	realResult := result.(*resourceserver.ResourceServiceCheckCidrConflictResult)
	success, err := handler.(resourceserver.ResourceService).CheckCidrConflict(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceCheckCidrConflictArgs() interface{} {
	return resourceserver.NewResourceServiceCheckCidrConflictArgs()
}

func newResourceServiceCheckCidrConflictResult() interface{} {
	return resourceserver.NewResourceServiceCheckCidrConflictResult()
}

func recommendCidrHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceRecommendCidrArgs)
	realResult := result.(*resourceserver.ResourceServiceRecommendCidrResult)
	success, err := handler.(resourceserver.ResourceService).RecommendCidr(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceRecommendCidrArgs() interface{} {
	return resourceserver.NewResourceServiceRecommendCidrArgs()
}

func newResourceServiceRecommendCidrResult() interface{} {
	return resourceserver.NewResourceServiceRecommendCidrResult()
}

func addVciSubnetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceAddVciSubnetsArgs)
	realResult := result.(*resourceserver.ResourceServiceAddVciSubnetsResult)
	success, err := handler.(resourceserver.ResourceService).AddVciSubnets(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceAddVciSubnetsArgs() interface{} {
	return resourceserver.NewResourceServiceAddVciSubnetsArgs()
}

func newResourceServiceAddVciSubnetsResult() interface{} {
	return resourceserver.NewResourceServiceAddVciSubnetsResult()
}

func isInShortTermWhiteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceIsInShortTermWhiteListArgs)
	realResult := result.(*resourceserver.ResourceServiceIsInShortTermWhiteListResult)
	success, err := handler.(resourceserver.ResourceService).IsInShortTermWhiteList(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceIsInShortTermWhiteListArgs() interface{} {
	return resourceserver.NewResourceServiceIsInShortTermWhiteListArgs()
}

func newResourceServiceIsInShortTermWhiteListResult() interface{} {
	return resourceserver.NewResourceServiceIsInShortTermWhiteListResult()
}

func allowUserPublicTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceAllowUserPublicTestArgs)
	realResult := result.(*resourceserver.ResourceServiceAllowUserPublicTestResult)
	success, err := handler.(resourceserver.ResourceService).AllowUserPublicTest(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceAllowUserPublicTestArgs() interface{} {
	return resourceserver.NewResourceServiceAllowUserPublicTestArgs()
}

func newResourceServiceAllowUserPublicTestResult() interface{} {
	return resourceserver.NewResourceServiceAllowUserPublicTestResult()
}

func listVciAvailabilityZonesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListVciAvailabilityZonesArgs)
	realResult := result.(*resourceserver.ResourceServiceListVciAvailabilityZonesResult)
	success, err := handler.(resourceserver.ResourceService).ListVciAvailabilityZones(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListVciAvailabilityZonesArgs() interface{} {
	return resourceserver.NewResourceServiceListVciAvailabilityZonesArgs()
}

func newResourceServiceListVciAvailabilityZonesResult() interface{} {
	return resourceserver.NewResourceServiceListVciAvailabilityZonesResult()
}

func listNodeZonesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resourceserver.ResourceServiceListNodeZonesArgs)
	realResult := result.(*resourceserver.ResourceServiceListNodeZonesResult)
	success, err := handler.(resourceserver.ResourceService).ListNodeZones(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newResourceServiceListNodeZonesArgs() interface{} {
	return resourceserver.NewResourceServiceListNodeZonesArgs()
}

func newResourceServiceListNodeZonesResult() interface{} {
	return resourceserver.NewResourceServiceListNodeZonesResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetClusterOverview(ctx context.Context, req *overview.GetClusterOverviewRequest) (r *overview.GetClusterOverviewResponse, err error) {
	var _args resourceserver.ResourceServiceGetClusterOverviewArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetClusterOverviewResult
	if err = p.c.Call(ctx, "GetClusterOverview", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetKubeConfig(ctx context.Context, req *cluster.GetKubeConfigRequest) (r *cluster.GetKubeConfigResponse, err error) {
	var _args resourceserver.ResourceServiceGetKubeConfigArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetKubeConfigResult
	if err = p.c.Call(ctx, "GetKubeConfig", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetKubeconfig(ctx context.Context, req *cluster.GetKubeconfigRequest) (r *cluster.GetKubeconfigResponse, err error) {
	var _args resourceserver.ResourceServiceGetKubeconfigArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetKubeconfigResult
	if err = p.c.Call(ctx, "GetKubeconfig", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RevokeKubeconfig(ctx context.Context, req *cluster.RevokeKubeconfigRequest) (r *cluster.RevokeKubeconfigResponse, err error) {
	var _args resourceserver.ResourceServiceRevokeKubeconfigArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceRevokeKubeconfigResult
	if err = p.c.Call(ctx, "RevokeKubeconfig", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListKubeconfigUsers(ctx context.Context, req *cluster.ListKubeconfigUsersRequest) (r *cluster.ListKubeconfigUsersResponse, err error) {
	var _args resourceserver.ResourceServiceListKubeconfigUsersArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListKubeconfigUsersResult
	if err = p.c.Call(ctx, "ListKubeconfigUsers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCluster(ctx context.Context, req *cluster.CreateClusterRequest) (r *cluster.CreateClusterResponse, err error) {
	var _args resourceserver.ResourceServiceCreateClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateClusterResult
	if err = p.c.Call(ctx, "CreateCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterCluster(ctx context.Context, req *cluster.RegisterClusterRequest) (r *cluster.RegisterClusterResponse, err error) {
	var _args resourceserver.ResourceServiceRegisterClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceRegisterClusterResult
	if err = p.c.Call(ctx, "RegisterCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCluster(ctx context.Context, req *cluster.UpdateClusterRequest) (r *cluster.UpdateClusterResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateClusterResult
	if err = p.c.Call(ctx, "UpdateCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpgradeCluster(ctx context.Context, req *cluster.UpgradeClusterRequest) (r *cluster.UpgradeClusterResponse, err error) {
	var _args resourceserver.ResourceServiceUpgradeClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpgradeClusterResult
	if err = p.c.Call(ctx, "UpgradeCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCluster(ctx context.Context, req *cluster.DeleteClusterRequest) (r *cluster.DeleteClusterResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteClusterResult
	if err = p.c.Call(ctx, "DeleteCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCluster(ctx context.Context, req *cluster.GetClusterRequest) (r *cluster.GetClusterResponse, err error) {
	var _args resourceserver.ResourceServiceGetClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetClusterResult
	if err = p.c.Call(ctx, "GetCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListClusters(ctx context.Context, req *cluster.ListClustersRequest) (r *cluster.ListClustersResponse, err error) {
	var _args resourceserver.ResourceServiceListClustersArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListClustersResult
	if err = p.c.Call(ctx, "ListClusters", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetClusterDeployProgress(ctx context.Context, req *cluster.GetClusterDeployProgressRequest) (r *cluster.GetClusterDeployProgressResponse, err error) {
	var _args resourceserver.ResourceServiceGetClusterDeployProgressArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetClusterDeployProgressResult
	if err = p.c.Call(ctx, "GetClusterDeployProgress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSupportedKubernetesVersions(ctx context.Context, req *cluster.ListSupportedKubernetesVersionsRequest) (r *cluster.ListSupportedKubernetesVersionsResponse, err error) {
	var _args resourceserver.ResourceServiceListSupportedKubernetesVersionsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListSupportedKubernetesVersionsResult
	if err = p.c.Call(ctx, "ListSupportedKubernetesVersions", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListClusterNetworkCidrs(ctx context.Context, req *cluster.ListClusterNetworkCidrsRequest) (r *cluster.ListClusterNetworkCidrsResponse, err error) {
	var _args resourceserver.ResourceServiceListClusterNetworkCidrsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListClusterNetworkCidrsResult
	if err = p.c.Call(ctx, "ListClusterNetworkCidrs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSupportedGpuModels(ctx context.Context, req *cluster.ListSupportedGpuModelsRequest) (r *cluster.ListSupportedGpuModelsResponse, err error) {
	var _args resourceserver.ResourceServiceListSupportedGpuModelsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListSupportedGpuModelsResult
	if err = p.c.Call(ctx, "ListSupportedGpuModels", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodes(ctx context.Context, req *cluster.ListNodesRequest) (r *cluster.ListNodesResponse, err error) {
	var _args resourceserver.ResourceServiceListNodesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNodesResult
	if err = p.c.Call(ctx, "ListNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddNodes(ctx context.Context, req *cluster.AddNodesRequest) (r *cluster.AddNodesResponse, err error) {
	var _args resourceserver.ResourceServiceAddNodesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceAddNodesResult
	if err = p.c.Call(ctx, "AddNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNode(ctx context.Context, req *cluster.GetNodeRequest) (r *cluster.GetNodeResponse, err error) {
	var _args resourceserver.ResourceServiceGetNodeArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetNodeResult
	if err = p.c.Call(ctx, "GetNode", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNodes(ctx context.Context, req *cluster.DeleteNodesRequest) (r *cluster.DeleteNodesResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteNodesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteNodesResult
	if err = p.c.Call(ctx, "DeleteNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodeLabels(ctx context.Context, req *cluster.ListNodeLabelsRequest) (r *cluster.ListNodeLabelsResponse, err error) {
	var _args resourceserver.ResourceServiceListNodeLabelsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNodeLabelsResult
	if err = p.c.Call(ctx, "ListNodeLabels", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNode(ctx context.Context, req *cluster.UpdateNodeRequest) (r *cluster.UpdateNodeResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateNodeArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateNodeResult
	if err = p.c.Call(ctx, "UpdateNode", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetClusterAutoScalingRule(ctx context.Context, req *cluster.GetClusterAutoScalingRuleRequest) (r *cluster.GetClusterAutoScalingRuleResponse, err error) {
	var _args resourceserver.ResourceServiceGetClusterAutoScalingRuleArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetClusterAutoScalingRuleResult
	if err = p.c.Call(ctx, "GetClusterAutoScalingRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateClusterAutoScalingRule(ctx context.Context, req *cluster.UpdateClusterAutoScalingRuleRequest) (r *cluster.UpdateClusterAutoScalingRuleResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateClusterAutoScalingRuleArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateClusterAutoScalingRuleResult
	if err = p.c.Call(ctx, "UpdateClusterAutoScalingRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ScaleUpNodePool(ctx context.Context, req *cluster.ScaleUpNodePoolRequest) (r *cluster.ScaleUpNodePoolResponse, err error) {
	var _args resourceserver.ResourceServiceScaleUpNodePoolArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceScaleUpNodePoolResult
	if err = p.c.Call(ctx, "ScaleUpNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ScaleDownNodePool(ctx context.Context, req *cluster.ScaleDownNodePoolRequest) (r *cluster.ScaleDownNodePoolResponse, err error) {
	var _args resourceserver.ResourceServiceScaleDownNodePoolArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceScaleDownNodePoolResult
	if err = p.c.Call(ctx, "ScaleDownNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodePools(ctx context.Context, req *cluster.ListNodePoolsRequest) (r *cluster.ListNodePoolsResponse, err error) {
	var _args resourceserver.ResourceServiceListNodePoolsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNodePoolsResult
	if err = p.c.Call(ctx, "ListNodePools", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNodePool(ctx context.Context, req *cluster.CreateNodePoolRequest) (r *cluster.CreateNodePoolResponse, err error) {
	var _args resourceserver.ResourceServiceCreateNodePoolArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateNodePoolResult
	if err = p.c.Call(ctx, "CreateNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNodePool(ctx context.Context, req *cluster.GetNodePoolRequest) (r *cluster.GetNodePoolResponse, err error) {
	var _args resourceserver.ResourceServiceGetNodePoolArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetNodePoolResult
	if err = p.c.Call(ctx, "GetNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNodePool(ctx context.Context, req *cluster.UpdateNodePoolRequest) (r *cluster.UpdateNodePoolResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateNodePoolArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateNodePoolResult
	if err = p.c.Call(ctx, "UpdateNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNodePool(ctx context.Context, req *cluster.DeleteNodePoolRequest) (r *cluster.DeleteNodePoolResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteNodePoolArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteNodePoolResult
	if err = p.c.Call(ctx, "DeleteNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodePoolScalingRecords(ctx context.Context, req *cluster.ListNodePoolScalingRecordsRequest) (r *cluster.ListNodePoolScalingRecordsResponse, err error) {
	var _args resourceserver.ResourceServiceListNodePoolScalingRecordsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNodePoolScalingRecordsResult
	if err = p.c.Call(ctx, "ListNodePoolScalingRecords", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodePoolNodes(ctx context.Context, req *cluster.ListNodePoolNodesRequest) (r *cluster.ListNodePoolNodesResponse, err error) {
	var _args resourceserver.ResourceServiceListNodePoolNodesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNodePoolNodesResult
	if err = p.c.Call(ctx, "ListNodePoolNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNamespace(ctx context.Context, req *cluster.ListNamespaceRequest) (r *cluster.ListNamespaceResponse, err error) {
	var _args resourceserver.ResourceServiceListNamespaceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNamespaceResult
	if err = p.c.Call(ctx, "ListNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateNamespace(ctx context.Context, req *cluster.CreateNamespaceRequest) (r *cluster.CreateNamespaceResponse, err error) {
	var _args resourceserver.ResourceServiceCreateNamespaceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateNamespaceResult
	if err = p.c.Call(ctx, "CreateNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNamespace(ctx context.Context, req *cluster.GetNamespaceRequest) (r *cluster.GetNamespaceResponse, err error) {
	var _args resourceserver.ResourceServiceGetNamespaceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetNamespaceResult
	if err = p.c.Call(ctx, "GetNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNamespace(ctx context.Context, req *cluster.UpdateNamespaceRequest) (r *cluster.UpdateNamespaceResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateNamespaceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateNamespaceResult
	if err = p.c.Call(ctx, "UpdateNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNamespaceResource(ctx context.Context, req *cluster.UpdateNamespaceResourceRequest) (r *cluster.UpdateNamespaceResourceResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateNamespaceResourceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateNamespaceResourceResult
	if err = p.c.Call(ctx, "UpdateNamespaceResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetNamespaceResource(ctx context.Context, req *cluster.GetNamespaceResourceRequest) (r *cluster.GetNamespaceResourceResponse, err error) {
	var _args resourceserver.ResourceServiceGetNamespaceResourceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetNamespaceResourceResult
	if err = p.c.Call(ctx, "GetNamespaceResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNamespace(ctx context.Context, req *cluster.DeleteNamespaceRequest) (r *cluster.DeleteNamespaceResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteNamespaceArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteNamespaceResult
	if err = p.c.Call(ctx, "DeleteNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListResourceQuota(ctx context.Context, req *cluster.ListResourceQuotaRequest) (r *cluster.ListResourceQuotaResponse, err error) {
	var _args resourceserver.ResourceServiceListResourceQuotaArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListResourceQuotaResult
	if err = p.c.Call(ctx, "ListResourceQuota", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListIngressTypes(ctx context.Context, req *network.ListIngressTypeRequest) (r *network.ListIngressTypeResponse, err error) {
	var _args resourceserver.ResourceServiceListIngressTypesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListIngressTypesResult
	if err = p.c.Call(ctx, "ListIngressTypes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListIngress(ctx context.Context, req *network.ListIngressRequest) (r *network.ListIngressResponse, err error) {
	var _args resourceserver.ResourceServiceListIngressArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListIngressResult
	if err = p.c.Call(ctx, "ListIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateIngress(ctx context.Context, req *network.CreateIngressRequest) (r *network.CreateIngressResponse, err error) {
	var _args resourceserver.ResourceServiceCreateIngressArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateIngressResult
	if err = p.c.Call(ctx, "CreateIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetIngress(ctx context.Context, req *network.GetIngressRequest) (r *network.GetIngressResponse, err error) {
	var _args resourceserver.ResourceServiceGetIngressArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetIngressResult
	if err = p.c.Call(ctx, "GetIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateIngress(ctx context.Context, req *network.UpdateIngressRequest) (r *network.UpdateIngressResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateIngressArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateIngressResult
	if err = p.c.Call(ctx, "UpdateIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteIngress(ctx context.Context, req *network.DeleteIngressRequest) (r *network.DeleteIngressResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteIngressArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteIngressResult
	if err = p.c.Call(ctx, "DeleteIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSecretDomains(ctx context.Context, req *network.GetSecretDomainsRequest) (r *network.GetSecretDomainsResponse, err error) {
	var _args resourceserver.ResourceServiceGetSecretDomainsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetSecretDomainsResult
	if err = p.c.Call(ctx, "GetSecretDomains", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListStorageClass(ctx context.Context, req *storage.ListStorageClassRequest) (r *storage.ListStorageClassResponse, err error) {
	var _args resourceserver.ResourceServiceListStorageClassArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListStorageClassResult
	if err = p.c.Call(ctx, "ListStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateStorageClass(ctx context.Context, req *storage.CreateStorageClassRequest) (r *storage.CreateStorageClassResponse, err error) {
	var _args resourceserver.ResourceServiceCreateStorageClassArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateStorageClassResult
	if err = p.c.Call(ctx, "CreateStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetStorageClass(ctx context.Context, req *storage.GetStorageClassRequest) (r *storage.GetStorageClassResponse, err error) {
	var _args resourceserver.ResourceServiceGetStorageClassArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetStorageClassResult
	if err = p.c.Call(ctx, "GetStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteStorageClass(ctx context.Context, req *storage.DeleteStorageClassRequest) (r *storage.DeleteStorageClassResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteStorageClassArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteStorageClassResult
	if err = p.c.Call(ctx, "DeleteStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPersistentVolume(ctx context.Context, req *storage.ListPersistentVolumeRequest) (r *storage.ListPersistentVolumeResponse, err error) {
	var _args resourceserver.ResourceServiceListPersistentVolumeArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListPersistentVolumeResult
	if err = p.c.Call(ctx, "ListPersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePersistentVolume(ctx context.Context, req *storage.CreatePersistentVolumeRequest) (r *storage.CreatePersistentVolumeResponse, err error) {
	var _args resourceserver.ResourceServiceCreatePersistentVolumeArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreatePersistentVolumeResult
	if err = p.c.Call(ctx, "CreatePersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPersistentVolume(ctx context.Context, req *storage.GetPersistentVolumeRequest) (r *storage.GetPersistentVolumeResponse, err error) {
	var _args resourceserver.ResourceServiceGetPersistentVolumeArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetPersistentVolumeResult
	if err = p.c.Call(ctx, "GetPersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePersistentVolume(ctx context.Context, req *storage.DeletePersistentVolumeRequest) (r *storage.DeletePersistentVolumeResponse, err error) {
	var _args resourceserver.ResourceServiceDeletePersistentVolumeArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeletePersistentVolumeResult
	if err = p.c.Call(ctx, "DeletePersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPersistentVolumeClaim(ctx context.Context, req *storage.ListPersistentVolumeClaimRequest) (r *storage.ListPersistentVolumeClaimResponse, err error) {
	var _args resourceserver.ResourceServiceListPersistentVolumeClaimArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListPersistentVolumeClaimResult
	if err = p.c.Call(ctx, "ListPersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreatePersistentVolumeClaim(ctx context.Context, req *storage.CreatePersistentVolumeClaimRequest) (r *storage.CreatePersistentVolumeClaimResponse, err error) {
	var _args resourceserver.ResourceServiceCreatePersistentVolumeClaimArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreatePersistentVolumeClaimResult
	if err = p.c.Call(ctx, "CreatePersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPersistentVolumeClaim(ctx context.Context, req *storage.GetPersistentVolumeClaimRequest) (r *storage.GetPersistentVolumeClaimResponse, err error) {
	var _args resourceserver.ResourceServiceGetPersistentVolumeClaimArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetPersistentVolumeClaimResult
	if err = p.c.Call(ctx, "GetPersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePersistentVolumeClaim(ctx context.Context, req *storage.DeletePersistentVolumeClaimRequest) (r *storage.DeletePersistentVolumeClaimResponse, err error) {
	var _args resourceserver.ResourceServiceDeletePersistentVolumeClaimArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeletePersistentVolumeClaimResult
	if err = p.c.Call(ctx, "DeletePersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCephCluster(ctx context.Context, req *storage.ListCephClusterRequest) (r *storage.ListCephClusterResponse, err error) {
	var _args resourceserver.ResourceServiceListCephClusterArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListCephClusterResult
	if err = p.c.Call(ctx, "ListCephCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListEvent(ctx context.Context, req *event.ListEventRequest) (r *event.ListEventResponse, err error) {
	var _args resourceserver.ResourceServiceListEventArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListEventResult
	if err = p.c.Call(ctx, "ListEvent", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListUserRbacs(ctx context.Context, req *rbac.ListUserRbacRequest) (r *rbac.ListUserRbacResponse, err error) {
	var _args resourceserver.ResourceServiceListUserRbacsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListUserRbacsResult
	if err = p.c.Call(ctx, "ListUserRbacs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUserRbac(ctx context.Context, req *rbac.CreateUserRbacRequest) (r *rbac.CreateUserRbacResponse, err error) {
	var _args resourceserver.ResourceServiceCreateUserRbacArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateUserRbacResult
	if err = p.c.Call(ctx, "CreateUserRbac", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserRbac(ctx context.Context, req *rbac.UpdateUserRbacRequest) (r *rbac.UpdateUserRbacResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateUserRbacArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateUserRbacResult
	if err = p.c.Call(ctx, "UpdateUserRbac", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteUserRbac(ctx context.Context, req *rbac.DeleteUserRbacRequest) (r *rbac.DeleteUserRbacResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteUserRbacArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteUserRbacResult
	if err = p.c.Call(ctx, "DeleteUserRbac", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCustomRoles(ctx context.Context, req *rbac.ListCustomRolesRequest) (r *rbac.ListCustomRolesResponse, err error) {
	var _args resourceserver.ResourceServiceListCustomRolesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListCustomRolesResult
	if err = p.c.Call(ctx, "ListCustomRoles", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSupportedAddons(ctx context.Context, req *addon.ListSupportedAddonsRequest) (r *addon.ListSupportedAddonsResponse, err error) {
	var _args resourceserver.ResourceServiceListSupportedAddonsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListSupportedAddonsResult
	if err = p.c.Call(ctx, "ListSupportedAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAddons(ctx context.Context, req *addon.ListAddonsRequest) (r *addon.ListAddonsResponse, err error) {
	var _args resourceserver.ResourceServiceListAddonsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListAddonsResult
	if err = p.c.Call(ctx, "ListAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InstallAddons(ctx context.Context, req *addon.InstallAddonsRequest) (r *addon.InstallAddonsResponse, err error) {
	var _args resourceserver.ResourceServiceInstallAddonsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceInstallAddonsResult
	if err = p.c.Call(ctx, "InstallAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReinstallAddon(ctx context.Context, req *addon.ReinstallAddonRequest) (r *addon.ReinstallAddonResponse, err error) {
	var _args resourceserver.ResourceServiceReinstallAddonArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceReinstallAddonResult
	if err = p.c.Call(ctx, "ReinstallAddon", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UninstallAddons(ctx context.Context, req *addon.UninstallAddonsRequest) (r *addon.UninstallAddonsResponse, err error) {
	var _args resourceserver.ResourceServiceUninstallAddonsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUninstallAddonsResult
	if err = p.c.Call(ctx, "UninstallAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpgradeAddon(ctx context.Context, req *addon.UpgradeAddonRequest) (r *addon.UpgradeAddonResponse, err error) {
	var _args resourceserver.ResourceServiceUpgradeAddonArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpgradeAddonResult
	if err = p.c.Call(ctx, "UpgradeAddon", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAddon(ctx context.Context, req *addon.GetAddonRequest) (r *addon.GetAddonResponse, err error) {
	var _args resourceserver.ResourceServiceGetAddonArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetAddonResult
	if err = p.c.Call(ctx, "GetAddon", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckResourceExist(ctx context.Context, req *helper.CheckResourceExistRequest) (r *helper.CheckResourceExistResponse, err error) {
	var _args resourceserver.ResourceServiceCheckResourceExistArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCheckResourceExistResult
	if err = p.c.Call(ctx, "CheckResourceExist", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListInstances(ctx context.Context, req *instance.ListInstancesRequest) (r *instance.ListInstancesResponse, err error) {
	var _args resourceserver.ResourceServiceListInstancesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListInstancesResult
	if err = p.c.Call(ctx, "ListInstances", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFlavors(ctx context.Context, req *instance.ListFlavorsRequest) (r *instance.ListFlavorsResponse, err error) {
	var _args resourceserver.ResourceServiceListFlavorsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListFlavorsResult
	if err = p.c.Call(ctx, "ListFlavors", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetInstanceConsole(ctx context.Context, req *instance.GetInstanceConsoleRequest) (r *instance.GetInstanceConsoleResponse, err error) {
	var _args resourceserver.ResourceServiceGetInstanceConsoleArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetInstanceConsoleResult
	if err = p.c.Call(ctx, "GetInstanceConsole", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListZones(ctx context.Context, req *instance.ListZonesRequest) (r *instance.ListZonesResponse, err error) {
	var _args resourceserver.ResourceServiceListZonesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListZonesResult
	if err = p.c.Call(ctx, "ListZones", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListVolumes(ctx context.Context, req *instance.ListVolumesRequest) (r *instance.ListVolumesResponse, err error) {
	var _args resourceserver.ResourceServiceListVolumesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListVolumesResult
	if err = p.c.Call(ctx, "ListVolumes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListKeyPairs(ctx context.Context, req *instance.ListKeyPairsRequest) (r *instance.ListKeyPairsResponse, err error) {
	var _args resourceserver.ResourceServiceListKeyPairsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListKeyPairsResult
	if err = p.c.Call(ctx, "ListKeyPairs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSubnets(ctx context.Context, req *vpc.ListSubnetsRequest) (r *vpc.ListSubnetsResponse, err error) {
	var _args resourceserver.ResourceServiceListSubnetsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListSubnetsResult
	if err = p.c.Call(ctx, "ListSubnets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListElasticIpPools(ctx context.Context, req *vpc.ListElasticIpPoolsRequest) (r *vpc.ListElasticIpPoolsResponse, err error) {
	var _args resourceserver.ResourceServiceListElasticIpPoolsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListElasticIpPoolsResult
	if err = p.c.Call(ctx, "ListElasticIpPools", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListVpcs(ctx context.Context, req *vpc.ListVpcsRequest) (r *vpc.ListVpcsResponse, err error) {
	var _args resourceserver.ResourceServiceListVpcsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListVpcsResult
	if err = p.c.Call(ctx, "ListVpcs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSecurityGroups(ctx context.Context, req *vpc.ListSecurityGroupsRequest) (r *vpc.ListSecurityGroupsResponse, err error) {
	var _args resourceserver.ResourceServiceListSecurityGroupsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListSecurityGroupsResult
	if err = p.c.Call(ctx, "ListSecurityGroups", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListClbs(ctx context.Context, req *clb.ListClbsRequest) (r *clb.ListClbsResponse, err error) {
	var _args resourceserver.ResourceServiceListClbsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListClbsResult
	if err = p.c.Call(ctx, "ListClbs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListClbListeners(ctx context.Context, req *clb.ListClbListenersRequest) (r *clb.ListClbListenersResponse, err error) {
	var _args resourceserver.ResourceServiceListClbListenersArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListClbListenersResult
	if err = p.c.Call(ctx, "ListClbListeners", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListQuotas(ctx context.Context, req *quota.ListQuotasRequest) (r *quota.ListQuotasResponse, err error) {
	var _args resourceserver.ResourceServiceListQuotasArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListQuotasResult
	if err = p.c.Call(ctx, "ListQuotas", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetQuota(ctx context.Context, req *quota.GetQuotaRequest) (r *quota.GetQuotaResponse, err error) {
	var _args resourceserver.ResourceServiceGetQuotaArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetQuotaResult
	if err = p.c.Call(ctx, "GetQuota", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateBareMachine(ctx context.Context, req *baremachine.CreateBareMachineRequest) (r *baremachine.CreateBareMachineResponse, err error) {
	var _args resourceserver.ResourceServiceCreateBareMachineArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCreateBareMachineResult
	if err = p.c.Call(ctx, "CreateBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateBareMachine(ctx context.Context, req *baremachine.UpdateBareMachineRequest) (r *baremachine.UpdateBareMachineResponse, err error) {
	var _args resourceserver.ResourceServiceUpdateBareMachineArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceUpdateBareMachineResult
	if err = p.c.Call(ctx, "UpdateBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBareMachine(ctx context.Context, req *baremachine.DeleteBareMachineRequest) (r *baremachine.DeleteBareMachineResponse, err error) {
	var _args resourceserver.ResourceServiceDeleteBareMachineArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceDeleteBareMachineResult
	if err = p.c.Call(ctx, "DeleteBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBareMachine(ctx context.Context, req *baremachine.GetBareMachineRequest) (r *baremachine.GetBareMachineResponse, err error) {
	var _args resourceserver.ResourceServiceGetBareMachineArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetBareMachineResult
	if err = p.c.Call(ctx, "GetBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBareMachine(ctx context.Context, req *baremachine.ListBareMachineRequest) (r *baremachine.ListBareMachineResponse, err error) {
	var _args resourceserver.ResourceServiceListBareMachineArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListBareMachineResult
	if err = p.c.Call(ctx, "ListBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBareMachineSshPublicKey(ctx context.Context, req *baremachine.GetBareMachineSshPublicKeyRequest) (r *baremachine.GetBareMachineSshPublicKeyResponse, err error) {
	var _args resourceserver.ResourceServiceGetBareMachineSshPublicKeyArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetBareMachineSshPublicKeyResult
	if err = p.c.Call(ctx, "GetBareMachineSshPublicKey", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBareMachineExpectOs(ctx context.Context, req *baremachine.ListBareMachineExpectOsRequest) (r *baremachine.ListBareMachineExpectOsResponse, err error) {
	var _args resourceserver.ResourceServiceListBareMachineExpectOsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListBareMachineExpectOsResult
	if err = p.c.Call(ctx, "ListBareMachineExpectOs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBareMachineImportExcelTemplate(ctx context.Context, req *baremachine.GetBareMachineImportExcelTemplateRequest) (r *baremachine.GetBareMachineImportExcelTemplateResponse, err error) {
	var _args resourceserver.ResourceServiceGetBareMachineImportExcelTemplateArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceGetBareMachineImportExcelTemplateResult
	if err = p.c.Call(ctx, "GetBareMachineImportExcelTemplate", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckCidrConflict(ctx context.Context, req *cluster.CheckCidrConflictRequest) (r *cluster.CheckCidrConflictResponse, err error) {
	var _args resourceserver.ResourceServiceCheckCidrConflictArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceCheckCidrConflictResult
	if err = p.c.Call(ctx, "CheckCidrConflict", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RecommendCidr(ctx context.Context, req *cluster.RecommendCidrRequest) (r *cluster.RecommendCidrResponse, err error) {
	var _args resourceserver.ResourceServiceRecommendCidrArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceRecommendCidrResult
	if err = p.c.Call(ctx, "RecommendCidr", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddVciSubnets(ctx context.Context, req *cluster.AddVciSubnetsRequest) (r *cluster.AddVciSubnetsResponse, err error) {
	var _args resourceserver.ResourceServiceAddVciSubnetsArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceAddVciSubnetsResult
	if err = p.c.Call(ctx, "AddVciSubnets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsInShortTermWhiteList(ctx context.Context, req *trade.IsInShortTermWhiteListRequest) (r *trade.IsInShortTermWhiteListResponse, err error) {
	var _args resourceserver.ResourceServiceIsInShortTermWhiteListArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceIsInShortTermWhiteListResult
	if err = p.c.Call(ctx, "IsInShortTermWhiteList", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AllowUserPublicTest(ctx context.Context, req *publicverify.PublicTestAllowedReq) (r *publicverify.PublicTestAllowedResp, err error) {
	var _args resourceserver.ResourceServiceAllowUserPublicTestArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceAllowUserPublicTestResult
	if err = p.c.Call(ctx, "AllowUserPublicTest", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListVciAvailabilityZones(ctx context.Context, req *vci.ListVciAvailabilityZonesRequest) (r *vci.ListVciAvailabilityZonesResponse, err error) {
	var _args resourceserver.ResourceServiceListVciAvailabilityZonesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListVciAvailabilityZonesResult
	if err = p.c.Call(ctx, "ListVciAvailabilityZones", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodeZones(ctx context.Context, req *cluster.ListNodeZonesRequest) (r *cluster.ListNodeZonesResponse, err error) {
	var _args resourceserver.ResourceServiceListNodeZonesArgs
	_args.Req = req
	var _result resourceserver.ResourceServiceListNodeZonesResult
	if err = p.c.Call(ctx, "ListNodeZones", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}
