// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package resourceserver

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/addon"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/baremachine"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/clb"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/cluster"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/event"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/helper"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/instance"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/network"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/overview"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/paastob/productivity/common"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/publicverify"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/quota"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/rbac"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/storage"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/trade"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/vci"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/vpc"
)

type ErrCode int64

const (
	ErrCode_ParamErr           ErrCode = 1
	ErrCode_NetworkErr         ErrCode = 2
	ErrCode_NotFoundErr        ErrCode = 3
	ErrCode_InternalErr        ErrCode = 4
	ErrCode_ConflictErr        ErrCode = 5
	ErrCode_PaymentRequiredErr ErrCode = 6
)

func (p ErrCode) String() string {
	switch p {
	case ErrCode_ParamErr:
		return "ParamErr"
	case ErrCode_NetworkErr:
		return "NetworkErr"
	case ErrCode_NotFoundErr:
		return "NotFoundErr"
	case ErrCode_InternalErr:
		return "InternalErr"
	case ErrCode_ConflictErr:
		return "ConflictErr"
	case ErrCode_PaymentRequiredErr:
		return "PaymentRequiredErr"
	}
	return "<UNSET>"
}

func ErrCodeFromString(s string) (ErrCode, error) {
	switch s {
	case "ParamErr":
		return ErrCode_ParamErr, nil
	case "NetworkErr":
		return ErrCode_NetworkErr, nil
	case "NotFoundErr":
		return ErrCode_NotFoundErr, nil
	case "InternalErr":
		return ErrCode_InternalErr, nil
	case "ConflictErr":
		return ErrCode_ConflictErr, nil
	case "PaymentRequiredErr":
		return ErrCode_PaymentRequiredErr, nil
	}
	return ErrCode(0), fmt.Errorf("not a valid ErrCode string")
}

func ErrCodePtr(v ErrCode) *ErrCode { return &v }

func (p *ErrCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ErrCode(result.Int64)
	return
}

func (p *ErrCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ResourceService interface {
	GetClusterOverview(ctx context.Context, req *overview.GetClusterOverviewRequest) (r *overview.GetClusterOverviewResponse, err error)

	GetKubeConfig(ctx context.Context, req *cluster.GetKubeConfigRequest) (r *cluster.GetKubeConfigResponse, err error)

	GetKubeconfig(ctx context.Context, req *cluster.GetKubeconfigRequest) (r *cluster.GetKubeconfigResponse, err error)

	RevokeKubeconfig(ctx context.Context, req *cluster.RevokeKubeconfigRequest) (r *cluster.RevokeKubeconfigResponse, err error)

	ListKubeconfigUsers(ctx context.Context, req *cluster.ListKubeconfigUsersRequest) (r *cluster.ListKubeconfigUsersResponse, err error)

	CreateCluster(ctx context.Context, req *cluster.CreateClusterRequest) (r *cluster.CreateClusterResponse, err error)

	RegisterCluster(ctx context.Context, req *cluster.RegisterClusterRequest) (r *cluster.RegisterClusterResponse, err error)

	UpdateCluster(ctx context.Context, req *cluster.UpdateClusterRequest) (r *cluster.UpdateClusterResponse, err error)

	UpgradeCluster(ctx context.Context, req *cluster.UpgradeClusterRequest) (r *cluster.UpgradeClusterResponse, err error)

	DeleteCluster(ctx context.Context, req *cluster.DeleteClusterRequest) (r *cluster.DeleteClusterResponse, err error)

	GetCluster(ctx context.Context, req *cluster.GetClusterRequest) (r *cluster.GetClusterResponse, err error)

	ListClusters(ctx context.Context, req *cluster.ListClustersRequest) (r *cluster.ListClustersResponse, err error)

	GetClusterDeployProgress(ctx context.Context, req *cluster.GetClusterDeployProgressRequest) (r *cluster.GetClusterDeployProgressResponse, err error)

	ListSupportedKubernetesVersions(ctx context.Context, req *cluster.ListSupportedKubernetesVersionsRequest) (r *cluster.ListSupportedKubernetesVersionsResponse, err error)

	ListClusterNetworkCidrs(ctx context.Context, req *cluster.ListClusterNetworkCidrsRequest) (r *cluster.ListClusterNetworkCidrsResponse, err error)

	ListSupportedGpuModels(ctx context.Context, req *cluster.ListSupportedGpuModelsRequest) (r *cluster.ListSupportedGpuModelsResponse, err error)

	ListNodes(ctx context.Context, req *cluster.ListNodesRequest) (r *cluster.ListNodesResponse, err error)

	AddNodes(ctx context.Context, req *cluster.AddNodesRequest) (r *cluster.AddNodesResponse, err error)

	GetNode(ctx context.Context, req *cluster.GetNodeRequest) (r *cluster.GetNodeResponse, err error)

	DeleteNodes(ctx context.Context, req *cluster.DeleteNodesRequest) (r *cluster.DeleteNodesResponse, err error)

	ListNodeLabels(ctx context.Context, req *cluster.ListNodeLabelsRequest) (r *cluster.ListNodeLabelsResponse, err error)

	UpdateNode(ctx context.Context, req *cluster.UpdateNodeRequest) (r *cluster.UpdateNodeResponse, err error)

	GetClusterAutoScalingRule(ctx context.Context, req *cluster.GetClusterAutoScalingRuleRequest) (r *cluster.GetClusterAutoScalingRuleResponse, err error)

	UpdateClusterAutoScalingRule(ctx context.Context, req *cluster.UpdateClusterAutoScalingRuleRequest) (r *cluster.UpdateClusterAutoScalingRuleResponse, err error)

	ScaleUpNodePool(ctx context.Context, req *cluster.ScaleUpNodePoolRequest) (r *cluster.ScaleUpNodePoolResponse, err error)

	ScaleDownNodePool(ctx context.Context, req *cluster.ScaleDownNodePoolRequest) (r *cluster.ScaleDownNodePoolResponse, err error)

	ListNodePools(ctx context.Context, req *cluster.ListNodePoolsRequest) (r *cluster.ListNodePoolsResponse, err error)

	CreateNodePool(ctx context.Context, req *cluster.CreateNodePoolRequest) (r *cluster.CreateNodePoolResponse, err error)

	GetNodePool(ctx context.Context, req *cluster.GetNodePoolRequest) (r *cluster.GetNodePoolResponse, err error)

	UpdateNodePool(ctx context.Context, req *cluster.UpdateNodePoolRequest) (r *cluster.UpdateNodePoolResponse, err error)

	DeleteNodePool(ctx context.Context, req *cluster.DeleteNodePoolRequest) (r *cluster.DeleteNodePoolResponse, err error)

	ListNodePoolScalingRecords(ctx context.Context, req *cluster.ListNodePoolScalingRecordsRequest) (r *cluster.ListNodePoolScalingRecordsResponse, err error)

	ListNodePoolNodes(ctx context.Context, req *cluster.ListNodePoolNodesRequest) (r *cluster.ListNodePoolNodesResponse, err error)

	ListNamespace(ctx context.Context, req *cluster.ListNamespaceRequest) (r *cluster.ListNamespaceResponse, err error)

	CreateNamespace(ctx context.Context, req *cluster.CreateNamespaceRequest) (r *cluster.CreateNamespaceResponse, err error)

	GetNamespace(ctx context.Context, req *cluster.GetNamespaceRequest) (r *cluster.GetNamespaceResponse, err error)

	UpdateNamespace(ctx context.Context, req *cluster.UpdateNamespaceRequest) (r *cluster.UpdateNamespaceResponse, err error)

	UpdateNamespaceResource(ctx context.Context, req *cluster.UpdateNamespaceResourceRequest) (r *cluster.UpdateNamespaceResourceResponse, err error)

	GetNamespaceResource(ctx context.Context, req *cluster.GetNamespaceResourceRequest) (r *cluster.GetNamespaceResourceResponse, err error)

	DeleteNamespace(ctx context.Context, req *cluster.DeleteNamespaceRequest) (r *cluster.DeleteNamespaceResponse, err error)

	ListResourceQuota(ctx context.Context, req *cluster.ListResourceQuotaRequest) (r *cluster.ListResourceQuotaResponse, err error)

	ListIngressTypes(ctx context.Context, req *network.ListIngressTypeRequest) (r *network.ListIngressTypeResponse, err error)

	ListIngress(ctx context.Context, req *network.ListIngressRequest) (r *network.ListIngressResponse, err error)

	CreateIngress(ctx context.Context, req *network.CreateIngressRequest) (r *network.CreateIngressResponse, err error)

	GetIngress(ctx context.Context, req *network.GetIngressRequest) (r *network.GetIngressResponse, err error)

	UpdateIngress(ctx context.Context, req *network.UpdateIngressRequest) (r *network.UpdateIngressResponse, err error)

	DeleteIngress(ctx context.Context, req *network.DeleteIngressRequest) (r *network.DeleteIngressResponse, err error)

	GetSecretDomains(ctx context.Context, req *network.GetSecretDomainsRequest) (r *network.GetSecretDomainsResponse, err error)

	ListStorageClass(ctx context.Context, req *storage.ListStorageClassRequest) (r *storage.ListStorageClassResponse, err error)

	CreateStorageClass(ctx context.Context, req *storage.CreateStorageClassRequest) (r *storage.CreateStorageClassResponse, err error)

	GetStorageClass(ctx context.Context, req *storage.GetStorageClassRequest) (r *storage.GetStorageClassResponse, err error)

	DeleteStorageClass(ctx context.Context, req *storage.DeleteStorageClassRequest) (r *storage.DeleteStorageClassResponse, err error)

	ListPersistentVolume(ctx context.Context, req *storage.ListPersistentVolumeRequest) (r *storage.ListPersistentVolumeResponse, err error)

	CreatePersistentVolume(ctx context.Context, req *storage.CreatePersistentVolumeRequest) (r *storage.CreatePersistentVolumeResponse, err error)

	GetPersistentVolume(ctx context.Context, req *storage.GetPersistentVolumeRequest) (r *storage.GetPersistentVolumeResponse, err error)

	DeletePersistentVolume(ctx context.Context, req *storage.DeletePersistentVolumeRequest) (r *storage.DeletePersistentVolumeResponse, err error)

	ListPersistentVolumeClaim(ctx context.Context, req *storage.ListPersistentVolumeClaimRequest) (r *storage.ListPersistentVolumeClaimResponse, err error)

	CreatePersistentVolumeClaim(ctx context.Context, req *storage.CreatePersistentVolumeClaimRequest) (r *storage.CreatePersistentVolumeClaimResponse, err error)

	GetPersistentVolumeClaim(ctx context.Context, req *storage.GetPersistentVolumeClaimRequest) (r *storage.GetPersistentVolumeClaimResponse, err error)

	DeletePersistentVolumeClaim(ctx context.Context, req *storage.DeletePersistentVolumeClaimRequest) (r *storage.DeletePersistentVolumeClaimResponse, err error)

	ListCephCluster(ctx context.Context, req *storage.ListCephClusterRequest) (r *storage.ListCephClusterResponse, err error)

	ListEvent(ctx context.Context, req *event.ListEventRequest) (r *event.ListEventResponse, err error)

	ListUserRbacs(ctx context.Context, req *rbac.ListUserRbacRequest) (r *rbac.ListUserRbacResponse, err error)

	CreateUserRbac(ctx context.Context, req *rbac.CreateUserRbacRequest) (r *rbac.CreateUserRbacResponse, err error)

	UpdateUserRbac(ctx context.Context, req *rbac.UpdateUserRbacRequest) (r *rbac.UpdateUserRbacResponse, err error)

	DeleteUserRbac(ctx context.Context, req *rbac.DeleteUserRbacRequest) (r *rbac.DeleteUserRbacResponse, err error)

	ListCustomRoles(ctx context.Context, req *rbac.ListCustomRolesRequest) (r *rbac.ListCustomRolesResponse, err error)

	ListSupportedAddons(ctx context.Context, req *addon.ListSupportedAddonsRequest) (r *addon.ListSupportedAddonsResponse, err error)

	ListAddons(ctx context.Context, req *addon.ListAddonsRequest) (r *addon.ListAddonsResponse, err error)

	InstallAddons(ctx context.Context, req *addon.InstallAddonsRequest) (r *addon.InstallAddonsResponse, err error)

	ReinstallAddon(ctx context.Context, req *addon.ReinstallAddonRequest) (r *addon.ReinstallAddonResponse, err error)

	UninstallAddons(ctx context.Context, req *addon.UninstallAddonsRequest) (r *addon.UninstallAddonsResponse, err error)

	UpgradeAddon(ctx context.Context, req *addon.UpgradeAddonRequest) (r *addon.UpgradeAddonResponse, err error)

	GetAddon(ctx context.Context, req *addon.GetAddonRequest) (r *addon.GetAddonResponse, err error)

	CheckResourceExist(ctx context.Context, req *helper.CheckResourceExistRequest) (r *helper.CheckResourceExistResponse, err error)

	ListInstances(ctx context.Context, req *instance.ListInstancesRequest) (r *instance.ListInstancesResponse, err error)

	ListFlavors(ctx context.Context, req *instance.ListFlavorsRequest) (r *instance.ListFlavorsResponse, err error)

	GetInstanceConsole(ctx context.Context, req *instance.GetInstanceConsoleRequest) (r *instance.GetInstanceConsoleResponse, err error)

	ListZones(ctx context.Context, req *instance.ListZonesRequest) (r *instance.ListZonesResponse, err error)

	ListVolumes(ctx context.Context, req *instance.ListVolumesRequest) (r *instance.ListVolumesResponse, err error)

	ListKeyPairs(ctx context.Context, req *instance.ListKeyPairsRequest) (r *instance.ListKeyPairsResponse, err error)

	ListSubnets(ctx context.Context, req *vpc.ListSubnetsRequest) (r *vpc.ListSubnetsResponse, err error)

	ListElasticIpPools(ctx context.Context, req *vpc.ListElasticIpPoolsRequest) (r *vpc.ListElasticIpPoolsResponse, err error)

	ListVpcs(ctx context.Context, req *vpc.ListVpcsRequest) (r *vpc.ListVpcsResponse, err error)

	ListSecurityGroups(ctx context.Context, req *vpc.ListSecurityGroupsRequest) (r *vpc.ListSecurityGroupsResponse, err error)

	ListClbs(ctx context.Context, req *clb.ListClbsRequest) (r *clb.ListClbsResponse, err error)

	ListClbListeners(ctx context.Context, req *clb.ListClbListenersRequest) (r *clb.ListClbListenersResponse, err error)

	ListQuotas(ctx context.Context, req *quota.ListQuotasRequest) (r *quota.ListQuotasResponse, err error)

	GetQuota(ctx context.Context, req *quota.GetQuotaRequest) (r *quota.GetQuotaResponse, err error)

	CreateBareMachine(ctx context.Context, req *baremachine.CreateBareMachineRequest) (r *baremachine.CreateBareMachineResponse, err error)

	UpdateBareMachine(ctx context.Context, req *baremachine.UpdateBareMachineRequest) (r *baremachine.UpdateBareMachineResponse, err error)

	DeleteBareMachine(ctx context.Context, req *baremachine.DeleteBareMachineRequest) (r *baremachine.DeleteBareMachineResponse, err error)

	GetBareMachine(ctx context.Context, req *baremachine.GetBareMachineRequest) (r *baremachine.GetBareMachineResponse, err error)

	ListBareMachine(ctx context.Context, req *baremachine.ListBareMachineRequest) (r *baremachine.ListBareMachineResponse, err error)

	GetBareMachineSshPublicKey(ctx context.Context, req *baremachine.GetBareMachineSshPublicKeyRequest) (r *baremachine.GetBareMachineSshPublicKeyResponse, err error)

	ListBareMachineExpectOs(ctx context.Context, req *baremachine.ListBareMachineExpectOsRequest) (r *baremachine.ListBareMachineExpectOsResponse, err error)

	GetBareMachineImportExcelTemplate(ctx context.Context, req *baremachine.GetBareMachineImportExcelTemplateRequest) (r *baremachine.GetBareMachineImportExcelTemplateResponse, err error)

	CheckCidrConflict(ctx context.Context, req *cluster.CheckCidrConflictRequest) (r *cluster.CheckCidrConflictResponse, err error)

	RecommendCidr(ctx context.Context, req *cluster.RecommendCidrRequest) (r *cluster.RecommendCidrResponse, err error)

	AddVciSubnets(ctx context.Context, req *cluster.AddVciSubnetsRequest) (r *cluster.AddVciSubnetsResponse, err error)

	IsInShortTermWhiteList(ctx context.Context, req *trade.IsInShortTermWhiteListRequest) (r *trade.IsInShortTermWhiteListResponse, err error)

	AllowUserPublicTest(ctx context.Context, req *publicverify.PublicTestAllowedReq) (r *publicverify.PublicTestAllowedResp, err error)

	ListVciAvailabilityZones(ctx context.Context, req *vci.ListVciAvailabilityZonesRequest) (r *vci.ListVciAvailabilityZonesResponse, err error)

	ListNodeZones(ctx context.Context, req *cluster.ListNodeZonesRequest) (r *cluster.ListNodeZonesResponse, err error)
}

type ResourceServiceClient struct {
	c thrift.TClient
}

func NewResourceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ResourceServiceClient {
	return &ResourceServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewResourceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ResourceServiceClient {
	return &ResourceServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewResourceServiceClient(c thrift.TClient) *ResourceServiceClient {
	return &ResourceServiceClient{
		c: c,
	}
}

func (p *ResourceServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ResourceServiceClient) GetClusterOverview(ctx context.Context, req *overview.GetClusterOverviewRequest) (r *overview.GetClusterOverviewResponse, err error) {
	var _args ResourceServiceGetClusterOverviewArgs
	_args.Req = req
	var _result ResourceServiceGetClusterOverviewResult
	if err = p.Client_().Call(ctx, "GetClusterOverview", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetKubeConfig(ctx context.Context, req *cluster.GetKubeConfigRequest) (r *cluster.GetKubeConfigResponse, err error) {
	var _args ResourceServiceGetKubeConfigArgs
	_args.Req = req
	var _result ResourceServiceGetKubeConfigResult
	if err = p.Client_().Call(ctx, "GetKubeConfig", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetKubeconfig(ctx context.Context, req *cluster.GetKubeconfigRequest) (r *cluster.GetKubeconfigResponse, err error) {
	var _args ResourceServiceGetKubeconfigArgs
	_args.Req = req
	var _result ResourceServiceGetKubeconfigResult
	if err = p.Client_().Call(ctx, "GetKubeconfig", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) RevokeKubeconfig(ctx context.Context, req *cluster.RevokeKubeconfigRequest) (r *cluster.RevokeKubeconfigResponse, err error) {
	var _args ResourceServiceRevokeKubeconfigArgs
	_args.Req = req
	var _result ResourceServiceRevokeKubeconfigResult
	if err = p.Client_().Call(ctx, "RevokeKubeconfig", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListKubeconfigUsers(ctx context.Context, req *cluster.ListKubeconfigUsersRequest) (r *cluster.ListKubeconfigUsersResponse, err error) {
	var _args ResourceServiceListKubeconfigUsersArgs
	_args.Req = req
	var _result ResourceServiceListKubeconfigUsersResult
	if err = p.Client_().Call(ctx, "ListKubeconfigUsers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateCluster(ctx context.Context, req *cluster.CreateClusterRequest) (r *cluster.CreateClusterResponse, err error) {
	var _args ResourceServiceCreateClusterArgs
	_args.Req = req
	var _result ResourceServiceCreateClusterResult
	if err = p.Client_().Call(ctx, "CreateCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) RegisterCluster(ctx context.Context, req *cluster.RegisterClusterRequest) (r *cluster.RegisterClusterResponse, err error) {
	var _args ResourceServiceRegisterClusterArgs
	_args.Req = req
	var _result ResourceServiceRegisterClusterResult
	if err = p.Client_().Call(ctx, "RegisterCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateCluster(ctx context.Context, req *cluster.UpdateClusterRequest) (r *cluster.UpdateClusterResponse, err error) {
	var _args ResourceServiceUpdateClusterArgs
	_args.Req = req
	var _result ResourceServiceUpdateClusterResult
	if err = p.Client_().Call(ctx, "UpdateCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpgradeCluster(ctx context.Context, req *cluster.UpgradeClusterRequest) (r *cluster.UpgradeClusterResponse, err error) {
	var _args ResourceServiceUpgradeClusterArgs
	_args.Req = req
	var _result ResourceServiceUpgradeClusterResult
	if err = p.Client_().Call(ctx, "UpgradeCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteCluster(ctx context.Context, req *cluster.DeleteClusterRequest) (r *cluster.DeleteClusterResponse, err error) {
	var _args ResourceServiceDeleteClusterArgs
	_args.Req = req
	var _result ResourceServiceDeleteClusterResult
	if err = p.Client_().Call(ctx, "DeleteCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetCluster(ctx context.Context, req *cluster.GetClusterRequest) (r *cluster.GetClusterResponse, err error) {
	var _args ResourceServiceGetClusterArgs
	_args.Req = req
	var _result ResourceServiceGetClusterResult
	if err = p.Client_().Call(ctx, "GetCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListClusters(ctx context.Context, req *cluster.ListClustersRequest) (r *cluster.ListClustersResponse, err error) {
	var _args ResourceServiceListClustersArgs
	_args.Req = req
	var _result ResourceServiceListClustersResult
	if err = p.Client_().Call(ctx, "ListClusters", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetClusterDeployProgress(ctx context.Context, req *cluster.GetClusterDeployProgressRequest) (r *cluster.GetClusterDeployProgressResponse, err error) {
	var _args ResourceServiceGetClusterDeployProgressArgs
	_args.Req = req
	var _result ResourceServiceGetClusterDeployProgressResult
	if err = p.Client_().Call(ctx, "GetClusterDeployProgress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListSupportedKubernetesVersions(ctx context.Context, req *cluster.ListSupportedKubernetesVersionsRequest) (r *cluster.ListSupportedKubernetesVersionsResponse, err error) {
	var _args ResourceServiceListSupportedKubernetesVersionsArgs
	_args.Req = req
	var _result ResourceServiceListSupportedKubernetesVersionsResult
	if err = p.Client_().Call(ctx, "ListSupportedKubernetesVersions", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListClusterNetworkCidrs(ctx context.Context, req *cluster.ListClusterNetworkCidrsRequest) (r *cluster.ListClusterNetworkCidrsResponse, err error) {
	var _args ResourceServiceListClusterNetworkCidrsArgs
	_args.Req = req
	var _result ResourceServiceListClusterNetworkCidrsResult
	if err = p.Client_().Call(ctx, "ListClusterNetworkCidrs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListSupportedGpuModels(ctx context.Context, req *cluster.ListSupportedGpuModelsRequest) (r *cluster.ListSupportedGpuModelsResponse, err error) {
	var _args ResourceServiceListSupportedGpuModelsArgs
	_args.Req = req
	var _result ResourceServiceListSupportedGpuModelsResult
	if err = p.Client_().Call(ctx, "ListSupportedGpuModels", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNodes(ctx context.Context, req *cluster.ListNodesRequest) (r *cluster.ListNodesResponse, err error) {
	var _args ResourceServiceListNodesArgs
	_args.Req = req
	var _result ResourceServiceListNodesResult
	if err = p.Client_().Call(ctx, "ListNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) AddNodes(ctx context.Context, req *cluster.AddNodesRequest) (r *cluster.AddNodesResponse, err error) {
	var _args ResourceServiceAddNodesArgs
	_args.Req = req
	var _result ResourceServiceAddNodesResult
	if err = p.Client_().Call(ctx, "AddNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetNode(ctx context.Context, req *cluster.GetNodeRequest) (r *cluster.GetNodeResponse, err error) {
	var _args ResourceServiceGetNodeArgs
	_args.Req = req
	var _result ResourceServiceGetNodeResult
	if err = p.Client_().Call(ctx, "GetNode", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteNodes(ctx context.Context, req *cluster.DeleteNodesRequest) (r *cluster.DeleteNodesResponse, err error) {
	var _args ResourceServiceDeleteNodesArgs
	_args.Req = req
	var _result ResourceServiceDeleteNodesResult
	if err = p.Client_().Call(ctx, "DeleteNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNodeLabels(ctx context.Context, req *cluster.ListNodeLabelsRequest) (r *cluster.ListNodeLabelsResponse, err error) {
	var _args ResourceServiceListNodeLabelsArgs
	_args.Req = req
	var _result ResourceServiceListNodeLabelsResult
	if err = p.Client_().Call(ctx, "ListNodeLabels", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateNode(ctx context.Context, req *cluster.UpdateNodeRequest) (r *cluster.UpdateNodeResponse, err error) {
	var _args ResourceServiceUpdateNodeArgs
	_args.Req = req
	var _result ResourceServiceUpdateNodeResult
	if err = p.Client_().Call(ctx, "UpdateNode", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetClusterAutoScalingRule(ctx context.Context, req *cluster.GetClusterAutoScalingRuleRequest) (r *cluster.GetClusterAutoScalingRuleResponse, err error) {
	var _args ResourceServiceGetClusterAutoScalingRuleArgs
	_args.Req = req
	var _result ResourceServiceGetClusterAutoScalingRuleResult
	if err = p.Client_().Call(ctx, "GetClusterAutoScalingRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateClusterAutoScalingRule(ctx context.Context, req *cluster.UpdateClusterAutoScalingRuleRequest) (r *cluster.UpdateClusterAutoScalingRuleResponse, err error) {
	var _args ResourceServiceUpdateClusterAutoScalingRuleArgs
	_args.Req = req
	var _result ResourceServiceUpdateClusterAutoScalingRuleResult
	if err = p.Client_().Call(ctx, "UpdateClusterAutoScalingRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ScaleUpNodePool(ctx context.Context, req *cluster.ScaleUpNodePoolRequest) (r *cluster.ScaleUpNodePoolResponse, err error) {
	var _args ResourceServiceScaleUpNodePoolArgs
	_args.Req = req
	var _result ResourceServiceScaleUpNodePoolResult
	if err = p.Client_().Call(ctx, "ScaleUpNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ScaleDownNodePool(ctx context.Context, req *cluster.ScaleDownNodePoolRequest) (r *cluster.ScaleDownNodePoolResponse, err error) {
	var _args ResourceServiceScaleDownNodePoolArgs
	_args.Req = req
	var _result ResourceServiceScaleDownNodePoolResult
	if err = p.Client_().Call(ctx, "ScaleDownNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNodePools(ctx context.Context, req *cluster.ListNodePoolsRequest) (r *cluster.ListNodePoolsResponse, err error) {
	var _args ResourceServiceListNodePoolsArgs
	_args.Req = req
	var _result ResourceServiceListNodePoolsResult
	if err = p.Client_().Call(ctx, "ListNodePools", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateNodePool(ctx context.Context, req *cluster.CreateNodePoolRequest) (r *cluster.CreateNodePoolResponse, err error) {
	var _args ResourceServiceCreateNodePoolArgs
	_args.Req = req
	var _result ResourceServiceCreateNodePoolResult
	if err = p.Client_().Call(ctx, "CreateNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetNodePool(ctx context.Context, req *cluster.GetNodePoolRequest) (r *cluster.GetNodePoolResponse, err error) {
	var _args ResourceServiceGetNodePoolArgs
	_args.Req = req
	var _result ResourceServiceGetNodePoolResult
	if err = p.Client_().Call(ctx, "GetNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateNodePool(ctx context.Context, req *cluster.UpdateNodePoolRequest) (r *cluster.UpdateNodePoolResponse, err error) {
	var _args ResourceServiceUpdateNodePoolArgs
	_args.Req = req
	var _result ResourceServiceUpdateNodePoolResult
	if err = p.Client_().Call(ctx, "UpdateNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteNodePool(ctx context.Context, req *cluster.DeleteNodePoolRequest) (r *cluster.DeleteNodePoolResponse, err error) {
	var _args ResourceServiceDeleteNodePoolArgs
	_args.Req = req
	var _result ResourceServiceDeleteNodePoolResult
	if err = p.Client_().Call(ctx, "DeleteNodePool", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNodePoolScalingRecords(ctx context.Context, req *cluster.ListNodePoolScalingRecordsRequest) (r *cluster.ListNodePoolScalingRecordsResponse, err error) {
	var _args ResourceServiceListNodePoolScalingRecordsArgs
	_args.Req = req
	var _result ResourceServiceListNodePoolScalingRecordsResult
	if err = p.Client_().Call(ctx, "ListNodePoolScalingRecords", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNodePoolNodes(ctx context.Context, req *cluster.ListNodePoolNodesRequest) (r *cluster.ListNodePoolNodesResponse, err error) {
	var _args ResourceServiceListNodePoolNodesArgs
	_args.Req = req
	var _result ResourceServiceListNodePoolNodesResult
	if err = p.Client_().Call(ctx, "ListNodePoolNodes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNamespace(ctx context.Context, req *cluster.ListNamespaceRequest) (r *cluster.ListNamespaceResponse, err error) {
	var _args ResourceServiceListNamespaceArgs
	_args.Req = req
	var _result ResourceServiceListNamespaceResult
	if err = p.Client_().Call(ctx, "ListNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateNamespace(ctx context.Context, req *cluster.CreateNamespaceRequest) (r *cluster.CreateNamespaceResponse, err error) {
	var _args ResourceServiceCreateNamespaceArgs
	_args.Req = req
	var _result ResourceServiceCreateNamespaceResult
	if err = p.Client_().Call(ctx, "CreateNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetNamespace(ctx context.Context, req *cluster.GetNamespaceRequest) (r *cluster.GetNamespaceResponse, err error) {
	var _args ResourceServiceGetNamespaceArgs
	_args.Req = req
	var _result ResourceServiceGetNamespaceResult
	if err = p.Client_().Call(ctx, "GetNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateNamespace(ctx context.Context, req *cluster.UpdateNamespaceRequest) (r *cluster.UpdateNamespaceResponse, err error) {
	var _args ResourceServiceUpdateNamespaceArgs
	_args.Req = req
	var _result ResourceServiceUpdateNamespaceResult
	if err = p.Client_().Call(ctx, "UpdateNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateNamespaceResource(ctx context.Context, req *cluster.UpdateNamespaceResourceRequest) (r *cluster.UpdateNamespaceResourceResponse, err error) {
	var _args ResourceServiceUpdateNamespaceResourceArgs
	_args.Req = req
	var _result ResourceServiceUpdateNamespaceResourceResult
	if err = p.Client_().Call(ctx, "UpdateNamespaceResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetNamespaceResource(ctx context.Context, req *cluster.GetNamespaceResourceRequest) (r *cluster.GetNamespaceResourceResponse, err error) {
	var _args ResourceServiceGetNamespaceResourceArgs
	_args.Req = req
	var _result ResourceServiceGetNamespaceResourceResult
	if err = p.Client_().Call(ctx, "GetNamespaceResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteNamespace(ctx context.Context, req *cluster.DeleteNamespaceRequest) (r *cluster.DeleteNamespaceResponse, err error) {
	var _args ResourceServiceDeleteNamespaceArgs
	_args.Req = req
	var _result ResourceServiceDeleteNamespaceResult
	if err = p.Client_().Call(ctx, "DeleteNamespace", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListResourceQuota(ctx context.Context, req *cluster.ListResourceQuotaRequest) (r *cluster.ListResourceQuotaResponse, err error) {
	var _args ResourceServiceListResourceQuotaArgs
	_args.Req = req
	var _result ResourceServiceListResourceQuotaResult
	if err = p.Client_().Call(ctx, "ListResourceQuota", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListIngressTypes(ctx context.Context, req *network.ListIngressTypeRequest) (r *network.ListIngressTypeResponse, err error) {
	var _args ResourceServiceListIngressTypesArgs
	_args.Req = req
	var _result ResourceServiceListIngressTypesResult
	if err = p.Client_().Call(ctx, "ListIngressTypes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListIngress(ctx context.Context, req *network.ListIngressRequest) (r *network.ListIngressResponse, err error) {
	var _args ResourceServiceListIngressArgs
	_args.Req = req
	var _result ResourceServiceListIngressResult
	if err = p.Client_().Call(ctx, "ListIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateIngress(ctx context.Context, req *network.CreateIngressRequest) (r *network.CreateIngressResponse, err error) {
	var _args ResourceServiceCreateIngressArgs
	_args.Req = req
	var _result ResourceServiceCreateIngressResult
	if err = p.Client_().Call(ctx, "CreateIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetIngress(ctx context.Context, req *network.GetIngressRequest) (r *network.GetIngressResponse, err error) {
	var _args ResourceServiceGetIngressArgs
	_args.Req = req
	var _result ResourceServiceGetIngressResult
	if err = p.Client_().Call(ctx, "GetIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateIngress(ctx context.Context, req *network.UpdateIngressRequest) (r *network.UpdateIngressResponse, err error) {
	var _args ResourceServiceUpdateIngressArgs
	_args.Req = req
	var _result ResourceServiceUpdateIngressResult
	if err = p.Client_().Call(ctx, "UpdateIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteIngress(ctx context.Context, req *network.DeleteIngressRequest) (r *network.DeleteIngressResponse, err error) {
	var _args ResourceServiceDeleteIngressArgs
	_args.Req = req
	var _result ResourceServiceDeleteIngressResult
	if err = p.Client_().Call(ctx, "DeleteIngress", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetSecretDomains(ctx context.Context, req *network.GetSecretDomainsRequest) (r *network.GetSecretDomainsResponse, err error) {
	var _args ResourceServiceGetSecretDomainsArgs
	_args.Req = req
	var _result ResourceServiceGetSecretDomainsResult
	if err = p.Client_().Call(ctx, "GetSecretDomains", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListStorageClass(ctx context.Context, req *storage.ListStorageClassRequest) (r *storage.ListStorageClassResponse, err error) {
	var _args ResourceServiceListStorageClassArgs
	_args.Req = req
	var _result ResourceServiceListStorageClassResult
	if err = p.Client_().Call(ctx, "ListStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateStorageClass(ctx context.Context, req *storage.CreateStorageClassRequest) (r *storage.CreateStorageClassResponse, err error) {
	var _args ResourceServiceCreateStorageClassArgs
	_args.Req = req
	var _result ResourceServiceCreateStorageClassResult
	if err = p.Client_().Call(ctx, "CreateStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetStorageClass(ctx context.Context, req *storage.GetStorageClassRequest) (r *storage.GetStorageClassResponse, err error) {
	var _args ResourceServiceGetStorageClassArgs
	_args.Req = req
	var _result ResourceServiceGetStorageClassResult
	if err = p.Client_().Call(ctx, "GetStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteStorageClass(ctx context.Context, req *storage.DeleteStorageClassRequest) (r *storage.DeleteStorageClassResponse, err error) {
	var _args ResourceServiceDeleteStorageClassArgs
	_args.Req = req
	var _result ResourceServiceDeleteStorageClassResult
	if err = p.Client_().Call(ctx, "DeleteStorageClass", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListPersistentVolume(ctx context.Context, req *storage.ListPersistentVolumeRequest) (r *storage.ListPersistentVolumeResponse, err error) {
	var _args ResourceServiceListPersistentVolumeArgs
	_args.Req = req
	var _result ResourceServiceListPersistentVolumeResult
	if err = p.Client_().Call(ctx, "ListPersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreatePersistentVolume(ctx context.Context, req *storage.CreatePersistentVolumeRequest) (r *storage.CreatePersistentVolumeResponse, err error) {
	var _args ResourceServiceCreatePersistentVolumeArgs
	_args.Req = req
	var _result ResourceServiceCreatePersistentVolumeResult
	if err = p.Client_().Call(ctx, "CreatePersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetPersistentVolume(ctx context.Context, req *storage.GetPersistentVolumeRequest) (r *storage.GetPersistentVolumeResponse, err error) {
	var _args ResourceServiceGetPersistentVolumeArgs
	_args.Req = req
	var _result ResourceServiceGetPersistentVolumeResult
	if err = p.Client_().Call(ctx, "GetPersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeletePersistentVolume(ctx context.Context, req *storage.DeletePersistentVolumeRequest) (r *storage.DeletePersistentVolumeResponse, err error) {
	var _args ResourceServiceDeletePersistentVolumeArgs
	_args.Req = req
	var _result ResourceServiceDeletePersistentVolumeResult
	if err = p.Client_().Call(ctx, "DeletePersistentVolume", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListPersistentVolumeClaim(ctx context.Context, req *storage.ListPersistentVolumeClaimRequest) (r *storage.ListPersistentVolumeClaimResponse, err error) {
	var _args ResourceServiceListPersistentVolumeClaimArgs
	_args.Req = req
	var _result ResourceServiceListPersistentVolumeClaimResult
	if err = p.Client_().Call(ctx, "ListPersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreatePersistentVolumeClaim(ctx context.Context, req *storage.CreatePersistentVolumeClaimRequest) (r *storage.CreatePersistentVolumeClaimResponse, err error) {
	var _args ResourceServiceCreatePersistentVolumeClaimArgs
	_args.Req = req
	var _result ResourceServiceCreatePersistentVolumeClaimResult
	if err = p.Client_().Call(ctx, "CreatePersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetPersistentVolumeClaim(ctx context.Context, req *storage.GetPersistentVolumeClaimRequest) (r *storage.GetPersistentVolumeClaimResponse, err error) {
	var _args ResourceServiceGetPersistentVolumeClaimArgs
	_args.Req = req
	var _result ResourceServiceGetPersistentVolumeClaimResult
	if err = p.Client_().Call(ctx, "GetPersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeletePersistentVolumeClaim(ctx context.Context, req *storage.DeletePersistentVolumeClaimRequest) (r *storage.DeletePersistentVolumeClaimResponse, err error) {
	var _args ResourceServiceDeletePersistentVolumeClaimArgs
	_args.Req = req
	var _result ResourceServiceDeletePersistentVolumeClaimResult
	if err = p.Client_().Call(ctx, "DeletePersistentVolumeClaim", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListCephCluster(ctx context.Context, req *storage.ListCephClusterRequest) (r *storage.ListCephClusterResponse, err error) {
	var _args ResourceServiceListCephClusterArgs
	_args.Req = req
	var _result ResourceServiceListCephClusterResult
	if err = p.Client_().Call(ctx, "ListCephCluster", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListEvent(ctx context.Context, req *event.ListEventRequest) (r *event.ListEventResponse, err error) {
	var _args ResourceServiceListEventArgs
	_args.Req = req
	var _result ResourceServiceListEventResult
	if err = p.Client_().Call(ctx, "ListEvent", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListUserRbacs(ctx context.Context, req *rbac.ListUserRbacRequest) (r *rbac.ListUserRbacResponse, err error) {
	var _args ResourceServiceListUserRbacsArgs
	_args.Req = req
	var _result ResourceServiceListUserRbacsResult
	if err = p.Client_().Call(ctx, "ListUserRbacs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateUserRbac(ctx context.Context, req *rbac.CreateUserRbacRequest) (r *rbac.CreateUserRbacResponse, err error) {
	var _args ResourceServiceCreateUserRbacArgs
	_args.Req = req
	var _result ResourceServiceCreateUserRbacResult
	if err = p.Client_().Call(ctx, "CreateUserRbac", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateUserRbac(ctx context.Context, req *rbac.UpdateUserRbacRequest) (r *rbac.UpdateUserRbacResponse, err error) {
	var _args ResourceServiceUpdateUserRbacArgs
	_args.Req = req
	var _result ResourceServiceUpdateUserRbacResult
	if err = p.Client_().Call(ctx, "UpdateUserRbac", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteUserRbac(ctx context.Context, req *rbac.DeleteUserRbacRequest) (r *rbac.DeleteUserRbacResponse, err error) {
	var _args ResourceServiceDeleteUserRbacArgs
	_args.Req = req
	var _result ResourceServiceDeleteUserRbacResult
	if err = p.Client_().Call(ctx, "DeleteUserRbac", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListCustomRoles(ctx context.Context, req *rbac.ListCustomRolesRequest) (r *rbac.ListCustomRolesResponse, err error) {
	var _args ResourceServiceListCustomRolesArgs
	_args.Req = req
	var _result ResourceServiceListCustomRolesResult
	if err = p.Client_().Call(ctx, "ListCustomRoles", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListSupportedAddons(ctx context.Context, req *addon.ListSupportedAddonsRequest) (r *addon.ListSupportedAddonsResponse, err error) {
	var _args ResourceServiceListSupportedAddonsArgs
	_args.Req = req
	var _result ResourceServiceListSupportedAddonsResult
	if err = p.Client_().Call(ctx, "ListSupportedAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListAddons(ctx context.Context, req *addon.ListAddonsRequest) (r *addon.ListAddonsResponse, err error) {
	var _args ResourceServiceListAddonsArgs
	_args.Req = req
	var _result ResourceServiceListAddonsResult
	if err = p.Client_().Call(ctx, "ListAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) InstallAddons(ctx context.Context, req *addon.InstallAddonsRequest) (r *addon.InstallAddonsResponse, err error) {
	var _args ResourceServiceInstallAddonsArgs
	_args.Req = req
	var _result ResourceServiceInstallAddonsResult
	if err = p.Client_().Call(ctx, "InstallAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ReinstallAddon(ctx context.Context, req *addon.ReinstallAddonRequest) (r *addon.ReinstallAddonResponse, err error) {
	var _args ResourceServiceReinstallAddonArgs
	_args.Req = req
	var _result ResourceServiceReinstallAddonResult
	if err = p.Client_().Call(ctx, "ReinstallAddon", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UninstallAddons(ctx context.Context, req *addon.UninstallAddonsRequest) (r *addon.UninstallAddonsResponse, err error) {
	var _args ResourceServiceUninstallAddonsArgs
	_args.Req = req
	var _result ResourceServiceUninstallAddonsResult
	if err = p.Client_().Call(ctx, "UninstallAddons", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpgradeAddon(ctx context.Context, req *addon.UpgradeAddonRequest) (r *addon.UpgradeAddonResponse, err error) {
	var _args ResourceServiceUpgradeAddonArgs
	_args.Req = req
	var _result ResourceServiceUpgradeAddonResult
	if err = p.Client_().Call(ctx, "UpgradeAddon", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetAddon(ctx context.Context, req *addon.GetAddonRequest) (r *addon.GetAddonResponse, err error) {
	var _args ResourceServiceGetAddonArgs
	_args.Req = req
	var _result ResourceServiceGetAddonResult
	if err = p.Client_().Call(ctx, "GetAddon", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CheckResourceExist(ctx context.Context, req *helper.CheckResourceExistRequest) (r *helper.CheckResourceExistResponse, err error) {
	var _args ResourceServiceCheckResourceExistArgs
	_args.Req = req
	var _result ResourceServiceCheckResourceExistResult
	if err = p.Client_().Call(ctx, "CheckResourceExist", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListInstances(ctx context.Context, req *instance.ListInstancesRequest) (r *instance.ListInstancesResponse, err error) {
	var _args ResourceServiceListInstancesArgs
	_args.Req = req
	var _result ResourceServiceListInstancesResult
	if err = p.Client_().Call(ctx, "ListInstances", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListFlavors(ctx context.Context, req *instance.ListFlavorsRequest) (r *instance.ListFlavorsResponse, err error) {
	var _args ResourceServiceListFlavorsArgs
	_args.Req = req
	var _result ResourceServiceListFlavorsResult
	if err = p.Client_().Call(ctx, "ListFlavors", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetInstanceConsole(ctx context.Context, req *instance.GetInstanceConsoleRequest) (r *instance.GetInstanceConsoleResponse, err error) {
	var _args ResourceServiceGetInstanceConsoleArgs
	_args.Req = req
	var _result ResourceServiceGetInstanceConsoleResult
	if err = p.Client_().Call(ctx, "GetInstanceConsole", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListZones(ctx context.Context, req *instance.ListZonesRequest) (r *instance.ListZonesResponse, err error) {
	var _args ResourceServiceListZonesArgs
	_args.Req = req
	var _result ResourceServiceListZonesResult
	if err = p.Client_().Call(ctx, "ListZones", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListVolumes(ctx context.Context, req *instance.ListVolumesRequest) (r *instance.ListVolumesResponse, err error) {
	var _args ResourceServiceListVolumesArgs
	_args.Req = req
	var _result ResourceServiceListVolumesResult
	if err = p.Client_().Call(ctx, "ListVolumes", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListKeyPairs(ctx context.Context, req *instance.ListKeyPairsRequest) (r *instance.ListKeyPairsResponse, err error) {
	var _args ResourceServiceListKeyPairsArgs
	_args.Req = req
	var _result ResourceServiceListKeyPairsResult
	if err = p.Client_().Call(ctx, "ListKeyPairs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListSubnets(ctx context.Context, req *vpc.ListSubnetsRequest) (r *vpc.ListSubnetsResponse, err error) {
	var _args ResourceServiceListSubnetsArgs
	_args.Req = req
	var _result ResourceServiceListSubnetsResult
	if err = p.Client_().Call(ctx, "ListSubnets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListElasticIpPools(ctx context.Context, req *vpc.ListElasticIpPoolsRequest) (r *vpc.ListElasticIpPoolsResponse, err error) {
	var _args ResourceServiceListElasticIpPoolsArgs
	_args.Req = req
	var _result ResourceServiceListElasticIpPoolsResult
	if err = p.Client_().Call(ctx, "ListElasticIpPools", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListVpcs(ctx context.Context, req *vpc.ListVpcsRequest) (r *vpc.ListVpcsResponse, err error) {
	var _args ResourceServiceListVpcsArgs
	_args.Req = req
	var _result ResourceServiceListVpcsResult
	if err = p.Client_().Call(ctx, "ListVpcs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListSecurityGroups(ctx context.Context, req *vpc.ListSecurityGroupsRequest) (r *vpc.ListSecurityGroupsResponse, err error) {
	var _args ResourceServiceListSecurityGroupsArgs
	_args.Req = req
	var _result ResourceServiceListSecurityGroupsResult
	if err = p.Client_().Call(ctx, "ListSecurityGroups", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListClbs(ctx context.Context, req *clb.ListClbsRequest) (r *clb.ListClbsResponse, err error) {
	var _args ResourceServiceListClbsArgs
	_args.Req = req
	var _result ResourceServiceListClbsResult
	if err = p.Client_().Call(ctx, "ListClbs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListClbListeners(ctx context.Context, req *clb.ListClbListenersRequest) (r *clb.ListClbListenersResponse, err error) {
	var _args ResourceServiceListClbListenersArgs
	_args.Req = req
	var _result ResourceServiceListClbListenersResult
	if err = p.Client_().Call(ctx, "ListClbListeners", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListQuotas(ctx context.Context, req *quota.ListQuotasRequest) (r *quota.ListQuotasResponse, err error) {
	var _args ResourceServiceListQuotasArgs
	_args.Req = req
	var _result ResourceServiceListQuotasResult
	if err = p.Client_().Call(ctx, "ListQuotas", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetQuota(ctx context.Context, req *quota.GetQuotaRequest) (r *quota.GetQuotaResponse, err error) {
	var _args ResourceServiceGetQuotaArgs
	_args.Req = req
	var _result ResourceServiceGetQuotaResult
	if err = p.Client_().Call(ctx, "GetQuota", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CreateBareMachine(ctx context.Context, req *baremachine.CreateBareMachineRequest) (r *baremachine.CreateBareMachineResponse, err error) {
	var _args ResourceServiceCreateBareMachineArgs
	_args.Req = req
	var _result ResourceServiceCreateBareMachineResult
	if err = p.Client_().Call(ctx, "CreateBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) UpdateBareMachine(ctx context.Context, req *baremachine.UpdateBareMachineRequest) (r *baremachine.UpdateBareMachineResponse, err error) {
	var _args ResourceServiceUpdateBareMachineArgs
	_args.Req = req
	var _result ResourceServiceUpdateBareMachineResult
	if err = p.Client_().Call(ctx, "UpdateBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) DeleteBareMachine(ctx context.Context, req *baremachine.DeleteBareMachineRequest) (r *baremachine.DeleteBareMachineResponse, err error) {
	var _args ResourceServiceDeleteBareMachineArgs
	_args.Req = req
	var _result ResourceServiceDeleteBareMachineResult
	if err = p.Client_().Call(ctx, "DeleteBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetBareMachine(ctx context.Context, req *baremachine.GetBareMachineRequest) (r *baremachine.GetBareMachineResponse, err error) {
	var _args ResourceServiceGetBareMachineArgs
	_args.Req = req
	var _result ResourceServiceGetBareMachineResult
	if err = p.Client_().Call(ctx, "GetBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListBareMachine(ctx context.Context, req *baremachine.ListBareMachineRequest) (r *baremachine.ListBareMachineResponse, err error) {
	var _args ResourceServiceListBareMachineArgs
	_args.Req = req
	var _result ResourceServiceListBareMachineResult
	if err = p.Client_().Call(ctx, "ListBareMachine", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetBareMachineSshPublicKey(ctx context.Context, req *baremachine.GetBareMachineSshPublicKeyRequest) (r *baremachine.GetBareMachineSshPublicKeyResponse, err error) {
	var _args ResourceServiceGetBareMachineSshPublicKeyArgs
	_args.Req = req
	var _result ResourceServiceGetBareMachineSshPublicKeyResult
	if err = p.Client_().Call(ctx, "GetBareMachineSshPublicKey", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListBareMachineExpectOs(ctx context.Context, req *baremachine.ListBareMachineExpectOsRequest) (r *baremachine.ListBareMachineExpectOsResponse, err error) {
	var _args ResourceServiceListBareMachineExpectOsArgs
	_args.Req = req
	var _result ResourceServiceListBareMachineExpectOsResult
	if err = p.Client_().Call(ctx, "ListBareMachineExpectOs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) GetBareMachineImportExcelTemplate(ctx context.Context, req *baremachine.GetBareMachineImportExcelTemplateRequest) (r *baremachine.GetBareMachineImportExcelTemplateResponse, err error) {
	var _args ResourceServiceGetBareMachineImportExcelTemplateArgs
	_args.Req = req
	var _result ResourceServiceGetBareMachineImportExcelTemplateResult
	if err = p.Client_().Call(ctx, "GetBareMachineImportExcelTemplate", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) CheckCidrConflict(ctx context.Context, req *cluster.CheckCidrConflictRequest) (r *cluster.CheckCidrConflictResponse, err error) {
	var _args ResourceServiceCheckCidrConflictArgs
	_args.Req = req
	var _result ResourceServiceCheckCidrConflictResult
	if err = p.Client_().Call(ctx, "CheckCidrConflict", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) RecommendCidr(ctx context.Context, req *cluster.RecommendCidrRequest) (r *cluster.RecommendCidrResponse, err error) {
	var _args ResourceServiceRecommendCidrArgs
	_args.Req = req
	var _result ResourceServiceRecommendCidrResult
	if err = p.Client_().Call(ctx, "RecommendCidr", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) AddVciSubnets(ctx context.Context, req *cluster.AddVciSubnetsRequest) (r *cluster.AddVciSubnetsResponse, err error) {
	var _args ResourceServiceAddVciSubnetsArgs
	_args.Req = req
	var _result ResourceServiceAddVciSubnetsResult
	if err = p.Client_().Call(ctx, "AddVciSubnets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) IsInShortTermWhiteList(ctx context.Context, req *trade.IsInShortTermWhiteListRequest) (r *trade.IsInShortTermWhiteListResponse, err error) {
	var _args ResourceServiceIsInShortTermWhiteListArgs
	_args.Req = req
	var _result ResourceServiceIsInShortTermWhiteListResult
	if err = p.Client_().Call(ctx, "IsInShortTermWhiteList", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) AllowUserPublicTest(ctx context.Context, req *publicverify.PublicTestAllowedReq) (r *publicverify.PublicTestAllowedResp, err error) {
	var _args ResourceServiceAllowUserPublicTestArgs
	_args.Req = req
	var _result ResourceServiceAllowUserPublicTestResult
	if err = p.Client_().Call(ctx, "AllowUserPublicTest", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListVciAvailabilityZones(ctx context.Context, req *vci.ListVciAvailabilityZonesRequest) (r *vci.ListVciAvailabilityZonesResponse, err error) {
	var _args ResourceServiceListVciAvailabilityZonesArgs
	_args.Req = req
	var _result ResourceServiceListVciAvailabilityZonesResult
	if err = p.Client_().Call(ctx, "ListVciAvailabilityZones", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *ResourceServiceClient) ListNodeZones(ctx context.Context, req *cluster.ListNodeZonesRequest) (r *cluster.ListNodeZonesResponse, err error) {
	var _args ResourceServiceListNodeZonesArgs
	_args.Req = req
	var _result ResourceServiceListNodeZonesResult
	if err = p.Client_().Call(ctx, "ListNodeZones", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

type ResourceServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ResourceService
}

func (p *ResourceServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ResourceServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ResourceServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewResourceServiceProcessor(handler ResourceService) *ResourceServiceProcessor {
	self := &ResourceServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetClusterOverview", &resourceServiceProcessorGetClusterOverview{handler: handler})
	self.AddToProcessorMap("GetKubeConfig", &resourceServiceProcessorGetKubeConfig{handler: handler})
	self.AddToProcessorMap("GetKubeconfig", &resourceServiceProcessorGetKubeconfig{handler: handler})
	self.AddToProcessorMap("RevokeKubeconfig", &resourceServiceProcessorRevokeKubeconfig{handler: handler})
	self.AddToProcessorMap("ListKubeconfigUsers", &resourceServiceProcessorListKubeconfigUsers{handler: handler})
	self.AddToProcessorMap("CreateCluster", &resourceServiceProcessorCreateCluster{handler: handler})
	self.AddToProcessorMap("RegisterCluster", &resourceServiceProcessorRegisterCluster{handler: handler})
	self.AddToProcessorMap("UpdateCluster", &resourceServiceProcessorUpdateCluster{handler: handler})
	self.AddToProcessorMap("UpgradeCluster", &resourceServiceProcessorUpgradeCluster{handler: handler})
	self.AddToProcessorMap("DeleteCluster", &resourceServiceProcessorDeleteCluster{handler: handler})
	self.AddToProcessorMap("GetCluster", &resourceServiceProcessorGetCluster{handler: handler})
	self.AddToProcessorMap("ListClusters", &resourceServiceProcessorListClusters{handler: handler})
	self.AddToProcessorMap("GetClusterDeployProgress", &resourceServiceProcessorGetClusterDeployProgress{handler: handler})
	self.AddToProcessorMap("ListSupportedKubernetesVersions", &resourceServiceProcessorListSupportedKubernetesVersions{handler: handler})
	self.AddToProcessorMap("ListClusterNetworkCidrs", &resourceServiceProcessorListClusterNetworkCidrs{handler: handler})
	self.AddToProcessorMap("ListSupportedGpuModels", &resourceServiceProcessorListSupportedGpuModels{handler: handler})
	self.AddToProcessorMap("ListNodes", &resourceServiceProcessorListNodes{handler: handler})
	self.AddToProcessorMap("AddNodes", &resourceServiceProcessorAddNodes{handler: handler})
	self.AddToProcessorMap("GetNode", &resourceServiceProcessorGetNode{handler: handler})
	self.AddToProcessorMap("DeleteNodes", &resourceServiceProcessorDeleteNodes{handler: handler})
	self.AddToProcessorMap("ListNodeLabels", &resourceServiceProcessorListNodeLabels{handler: handler})
	self.AddToProcessorMap("UpdateNode", &resourceServiceProcessorUpdateNode{handler: handler})
	self.AddToProcessorMap("GetClusterAutoScalingRule", &resourceServiceProcessorGetClusterAutoScalingRule{handler: handler})
	self.AddToProcessorMap("UpdateClusterAutoScalingRule", &resourceServiceProcessorUpdateClusterAutoScalingRule{handler: handler})
	self.AddToProcessorMap("ScaleUpNodePool", &resourceServiceProcessorScaleUpNodePool{handler: handler})
	self.AddToProcessorMap("ScaleDownNodePool", &resourceServiceProcessorScaleDownNodePool{handler: handler})
	self.AddToProcessorMap("ListNodePools", &resourceServiceProcessorListNodePools{handler: handler})
	self.AddToProcessorMap("CreateNodePool", &resourceServiceProcessorCreateNodePool{handler: handler})
	self.AddToProcessorMap("GetNodePool", &resourceServiceProcessorGetNodePool{handler: handler})
	self.AddToProcessorMap("UpdateNodePool", &resourceServiceProcessorUpdateNodePool{handler: handler})
	self.AddToProcessorMap("DeleteNodePool", &resourceServiceProcessorDeleteNodePool{handler: handler})
	self.AddToProcessorMap("ListNodePoolScalingRecords", &resourceServiceProcessorListNodePoolScalingRecords{handler: handler})
	self.AddToProcessorMap("ListNodePoolNodes", &resourceServiceProcessorListNodePoolNodes{handler: handler})
	self.AddToProcessorMap("ListNamespace", &resourceServiceProcessorListNamespace{handler: handler})
	self.AddToProcessorMap("CreateNamespace", &resourceServiceProcessorCreateNamespace{handler: handler})
	self.AddToProcessorMap("GetNamespace", &resourceServiceProcessorGetNamespace{handler: handler})
	self.AddToProcessorMap("UpdateNamespace", &resourceServiceProcessorUpdateNamespace{handler: handler})
	self.AddToProcessorMap("UpdateNamespaceResource", &resourceServiceProcessorUpdateNamespaceResource{handler: handler})
	self.AddToProcessorMap("GetNamespaceResource", &resourceServiceProcessorGetNamespaceResource{handler: handler})
	self.AddToProcessorMap("DeleteNamespace", &resourceServiceProcessorDeleteNamespace{handler: handler})
	self.AddToProcessorMap("ListResourceQuota", &resourceServiceProcessorListResourceQuota{handler: handler})
	self.AddToProcessorMap("ListIngressTypes", &resourceServiceProcessorListIngressTypes{handler: handler})
	self.AddToProcessorMap("ListIngress", &resourceServiceProcessorListIngress{handler: handler})
	self.AddToProcessorMap("CreateIngress", &resourceServiceProcessorCreateIngress{handler: handler})
	self.AddToProcessorMap("GetIngress", &resourceServiceProcessorGetIngress{handler: handler})
	self.AddToProcessorMap("UpdateIngress", &resourceServiceProcessorUpdateIngress{handler: handler})
	self.AddToProcessorMap("DeleteIngress", &resourceServiceProcessorDeleteIngress{handler: handler})
	self.AddToProcessorMap("GetSecretDomains", &resourceServiceProcessorGetSecretDomains{handler: handler})
	self.AddToProcessorMap("ListStorageClass", &resourceServiceProcessorListStorageClass{handler: handler})
	self.AddToProcessorMap("CreateStorageClass", &resourceServiceProcessorCreateStorageClass{handler: handler})
	self.AddToProcessorMap("GetStorageClass", &resourceServiceProcessorGetStorageClass{handler: handler})
	self.AddToProcessorMap("DeleteStorageClass", &resourceServiceProcessorDeleteStorageClass{handler: handler})
	self.AddToProcessorMap("ListPersistentVolume", &resourceServiceProcessorListPersistentVolume{handler: handler})
	self.AddToProcessorMap("CreatePersistentVolume", &resourceServiceProcessorCreatePersistentVolume{handler: handler})
	self.AddToProcessorMap("GetPersistentVolume", &resourceServiceProcessorGetPersistentVolume{handler: handler})
	self.AddToProcessorMap("DeletePersistentVolume", &resourceServiceProcessorDeletePersistentVolume{handler: handler})
	self.AddToProcessorMap("ListPersistentVolumeClaim", &resourceServiceProcessorListPersistentVolumeClaim{handler: handler})
	self.AddToProcessorMap("CreatePersistentVolumeClaim", &resourceServiceProcessorCreatePersistentVolumeClaim{handler: handler})
	self.AddToProcessorMap("GetPersistentVolumeClaim", &resourceServiceProcessorGetPersistentVolumeClaim{handler: handler})
	self.AddToProcessorMap("DeletePersistentVolumeClaim", &resourceServiceProcessorDeletePersistentVolumeClaim{handler: handler})
	self.AddToProcessorMap("ListCephCluster", &resourceServiceProcessorListCephCluster{handler: handler})
	self.AddToProcessorMap("ListEvent", &resourceServiceProcessorListEvent{handler: handler})
	self.AddToProcessorMap("ListUserRbacs", &resourceServiceProcessorListUserRbacs{handler: handler})
	self.AddToProcessorMap("CreateUserRbac", &resourceServiceProcessorCreateUserRbac{handler: handler})
	self.AddToProcessorMap("UpdateUserRbac", &resourceServiceProcessorUpdateUserRbac{handler: handler})
	self.AddToProcessorMap("DeleteUserRbac", &resourceServiceProcessorDeleteUserRbac{handler: handler})
	self.AddToProcessorMap("ListCustomRoles", &resourceServiceProcessorListCustomRoles{handler: handler})
	self.AddToProcessorMap("ListSupportedAddons", &resourceServiceProcessorListSupportedAddons{handler: handler})
	self.AddToProcessorMap("ListAddons", &resourceServiceProcessorListAddons{handler: handler})
	self.AddToProcessorMap("InstallAddons", &resourceServiceProcessorInstallAddons{handler: handler})
	self.AddToProcessorMap("ReinstallAddon", &resourceServiceProcessorReinstallAddon{handler: handler})
	self.AddToProcessorMap("UninstallAddons", &resourceServiceProcessorUninstallAddons{handler: handler})
	self.AddToProcessorMap("UpgradeAddon", &resourceServiceProcessorUpgradeAddon{handler: handler})
	self.AddToProcessorMap("GetAddon", &resourceServiceProcessorGetAddon{handler: handler})
	self.AddToProcessorMap("CheckResourceExist", &resourceServiceProcessorCheckResourceExist{handler: handler})
	self.AddToProcessorMap("ListInstances", &resourceServiceProcessorListInstances{handler: handler})
	self.AddToProcessorMap("ListFlavors", &resourceServiceProcessorListFlavors{handler: handler})
	self.AddToProcessorMap("GetInstanceConsole", &resourceServiceProcessorGetInstanceConsole{handler: handler})
	self.AddToProcessorMap("ListZones", &resourceServiceProcessorListZones{handler: handler})
	self.AddToProcessorMap("ListVolumes", &resourceServiceProcessorListVolumes{handler: handler})
	self.AddToProcessorMap("ListKeyPairs", &resourceServiceProcessorListKeyPairs{handler: handler})
	self.AddToProcessorMap("ListSubnets", &resourceServiceProcessorListSubnets{handler: handler})
	self.AddToProcessorMap("ListElasticIpPools", &resourceServiceProcessorListElasticIpPools{handler: handler})
	self.AddToProcessorMap("ListVpcs", &resourceServiceProcessorListVpcs{handler: handler})
	self.AddToProcessorMap("ListSecurityGroups", &resourceServiceProcessorListSecurityGroups{handler: handler})
	self.AddToProcessorMap("ListClbs", &resourceServiceProcessorListClbs{handler: handler})
	self.AddToProcessorMap("ListClbListeners", &resourceServiceProcessorListClbListeners{handler: handler})
	self.AddToProcessorMap("ListQuotas", &resourceServiceProcessorListQuotas{handler: handler})
	self.AddToProcessorMap("GetQuota", &resourceServiceProcessorGetQuota{handler: handler})
	self.AddToProcessorMap("CreateBareMachine", &resourceServiceProcessorCreateBareMachine{handler: handler})
	self.AddToProcessorMap("UpdateBareMachine", &resourceServiceProcessorUpdateBareMachine{handler: handler})
	self.AddToProcessorMap("DeleteBareMachine", &resourceServiceProcessorDeleteBareMachine{handler: handler})
	self.AddToProcessorMap("GetBareMachine", &resourceServiceProcessorGetBareMachine{handler: handler})
	self.AddToProcessorMap("ListBareMachine", &resourceServiceProcessorListBareMachine{handler: handler})
	self.AddToProcessorMap("GetBareMachineSshPublicKey", &resourceServiceProcessorGetBareMachineSshPublicKey{handler: handler})
	self.AddToProcessorMap("ListBareMachineExpectOs", &resourceServiceProcessorListBareMachineExpectOs{handler: handler})
	self.AddToProcessorMap("GetBareMachineImportExcelTemplate", &resourceServiceProcessorGetBareMachineImportExcelTemplate{handler: handler})
	self.AddToProcessorMap("CheckCidrConflict", &resourceServiceProcessorCheckCidrConflict{handler: handler})
	self.AddToProcessorMap("RecommendCidr", &resourceServiceProcessorRecommendCidr{handler: handler})
	self.AddToProcessorMap("AddVciSubnets", &resourceServiceProcessorAddVciSubnets{handler: handler})
	self.AddToProcessorMap("IsInShortTermWhiteList", &resourceServiceProcessorIsInShortTermWhiteList{handler: handler})
	self.AddToProcessorMap("AllowUserPublicTest", &resourceServiceProcessorAllowUserPublicTest{handler: handler})
	self.AddToProcessorMap("ListVciAvailabilityZones", &resourceServiceProcessorListVciAvailabilityZones{handler: handler})
	self.AddToProcessorMap("ListNodeZones", &resourceServiceProcessorListNodeZones{handler: handler})
	return self
}
func (p *ResourceServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type resourceServiceProcessorGetClusterOverview struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetClusterOverview) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetClusterOverviewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetClusterOverview", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetClusterOverviewResult{}
	var retval *overview.GetClusterOverviewResponse
	if retval, err2 = p.handler.GetClusterOverview(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetClusterOverview: "+err2.Error())
			oprot.WriteMessageBegin("GetClusterOverview", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetClusterOverview", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetKubeConfig struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetKubeConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetKubeConfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetKubeConfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetKubeConfigResult{}
	var retval *cluster.GetKubeConfigResponse
	if retval, err2 = p.handler.GetKubeConfig(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetKubeConfig: "+err2.Error())
			oprot.WriteMessageBegin("GetKubeConfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetKubeConfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetKubeconfig struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetKubeconfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetKubeconfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetKubeconfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetKubeconfigResult{}
	var retval *cluster.GetKubeconfigResponse
	if retval, err2 = p.handler.GetKubeconfig(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetKubeconfig: "+err2.Error())
			oprot.WriteMessageBegin("GetKubeconfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetKubeconfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorRevokeKubeconfig struct {
	handler ResourceService
}

func (p *resourceServiceProcessorRevokeKubeconfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceRevokeKubeconfigArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RevokeKubeconfig", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceRevokeKubeconfigResult{}
	var retval *cluster.RevokeKubeconfigResponse
	if retval, err2 = p.handler.RevokeKubeconfig(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RevokeKubeconfig: "+err2.Error())
			oprot.WriteMessageBegin("RevokeKubeconfig", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RevokeKubeconfig", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListKubeconfigUsers struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListKubeconfigUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListKubeconfigUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListKubeconfigUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListKubeconfigUsersResult{}
	var retval *cluster.ListKubeconfigUsersResponse
	if retval, err2 = p.handler.ListKubeconfigUsers(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListKubeconfigUsers: "+err2.Error())
			oprot.WriteMessageBegin("ListKubeconfigUsers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListKubeconfigUsers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateClusterResult{}
	var retval *cluster.CreateClusterResponse
	if retval, err2 = p.handler.CreateCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCluster: "+err2.Error())
			oprot.WriteMessageBegin("CreateCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorRegisterCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorRegisterCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceRegisterClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RegisterCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceRegisterClusterResult{}
	var retval *cluster.RegisterClusterResponse
	if retval, err2 = p.handler.RegisterCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RegisterCluster: "+err2.Error())
			oprot.WriteMessageBegin("RegisterCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RegisterCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateClusterResult{}
	var retval *cluster.UpdateClusterResponse
	if retval, err2 = p.handler.UpdateCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCluster: "+err2.Error())
			oprot.WriteMessageBegin("UpdateCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpgradeCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpgradeCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpgradeClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpgradeCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpgradeClusterResult{}
	var retval *cluster.UpgradeClusterResponse
	if retval, err2 = p.handler.UpgradeCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpgradeCluster: "+err2.Error())
			oprot.WriteMessageBegin("UpgradeCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpgradeCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteClusterResult{}
	var retval *cluster.DeleteClusterResponse
	if retval, err2 = p.handler.DeleteCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCluster: "+err2.Error())
			oprot.WriteMessageBegin("DeleteCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetClusterResult{}
	var retval *cluster.GetClusterResponse
	if retval, err2 = p.handler.GetCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCluster: "+err2.Error())
			oprot.WriteMessageBegin("GetCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListClusters struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListClusters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListClustersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListClusters", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListClustersResult{}
	var retval *cluster.ListClustersResponse
	if retval, err2 = p.handler.ListClusters(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListClusters: "+err2.Error())
			oprot.WriteMessageBegin("ListClusters", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListClusters", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetClusterDeployProgress struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetClusterDeployProgress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetClusterDeployProgressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetClusterDeployProgress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetClusterDeployProgressResult{}
	var retval *cluster.GetClusterDeployProgressResponse
	if retval, err2 = p.handler.GetClusterDeployProgress(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetClusterDeployProgress: "+err2.Error())
			oprot.WriteMessageBegin("GetClusterDeployProgress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetClusterDeployProgress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListSupportedKubernetesVersions struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListSupportedKubernetesVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListSupportedKubernetesVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSupportedKubernetesVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListSupportedKubernetesVersionsResult{}
	var retval *cluster.ListSupportedKubernetesVersionsResponse
	if retval, err2 = p.handler.ListSupportedKubernetesVersions(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSupportedKubernetesVersions: "+err2.Error())
			oprot.WriteMessageBegin("ListSupportedKubernetesVersions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSupportedKubernetesVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListClusterNetworkCidrs struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListClusterNetworkCidrs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListClusterNetworkCidrsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListClusterNetworkCidrs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListClusterNetworkCidrsResult{}
	var retval *cluster.ListClusterNetworkCidrsResponse
	if retval, err2 = p.handler.ListClusterNetworkCidrs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListClusterNetworkCidrs: "+err2.Error())
			oprot.WriteMessageBegin("ListClusterNetworkCidrs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListClusterNetworkCidrs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListSupportedGpuModels struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListSupportedGpuModels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListSupportedGpuModelsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSupportedGpuModels", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListSupportedGpuModelsResult{}
	var retval *cluster.ListSupportedGpuModelsResponse
	if retval, err2 = p.handler.ListSupportedGpuModels(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSupportedGpuModels: "+err2.Error())
			oprot.WriteMessageBegin("ListSupportedGpuModels", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSupportedGpuModels", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNodes struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNodesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNodesResult{}
	var retval *cluster.ListNodesResponse
	if retval, err2 = p.handler.ListNodes(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodes: "+err2.Error())
			oprot.WriteMessageBegin("ListNodes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorAddNodes struct {
	handler ResourceService
}

func (p *resourceServiceProcessorAddNodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceAddNodesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddNodes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceAddNodesResult{}
	var retval *cluster.AddNodesResponse
	if retval, err2 = p.handler.AddNodes(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddNodes: "+err2.Error())
			oprot.WriteMessageBegin("AddNodes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddNodes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetNode struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetNode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetNodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetNodeResult{}
	var retval *cluster.GetNodeResponse
	if retval, err2 = p.handler.GetNode(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNode: "+err2.Error())
			oprot.WriteMessageBegin("GetNode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteNodes struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteNodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteNodesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteNodes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteNodesResult{}
	var retval *cluster.DeleteNodesResponse
	if retval, err2 = p.handler.DeleteNodes(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteNodes: "+err2.Error())
			oprot.WriteMessageBegin("DeleteNodes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteNodes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNodeLabels struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNodeLabels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNodeLabelsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodeLabels", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNodeLabelsResult{}
	var retval *cluster.ListNodeLabelsResponse
	if retval, err2 = p.handler.ListNodeLabels(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodeLabels: "+err2.Error())
			oprot.WriteMessageBegin("ListNodeLabels", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodeLabels", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateNode struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateNode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateNodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateNode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateNodeResult{}
	var retval *cluster.UpdateNodeResponse
	if retval, err2 = p.handler.UpdateNode(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateNode: "+err2.Error())
			oprot.WriteMessageBegin("UpdateNode", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateNode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetClusterAutoScalingRule struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetClusterAutoScalingRule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetClusterAutoScalingRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetClusterAutoScalingRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetClusterAutoScalingRuleResult{}
	var retval *cluster.GetClusterAutoScalingRuleResponse
	if retval, err2 = p.handler.GetClusterAutoScalingRule(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetClusterAutoScalingRule: "+err2.Error())
			oprot.WriteMessageBegin("GetClusterAutoScalingRule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetClusterAutoScalingRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateClusterAutoScalingRule struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateClusterAutoScalingRule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateClusterAutoScalingRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateClusterAutoScalingRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateClusterAutoScalingRuleResult{}
	var retval *cluster.UpdateClusterAutoScalingRuleResponse
	if retval, err2 = p.handler.UpdateClusterAutoScalingRule(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateClusterAutoScalingRule: "+err2.Error())
			oprot.WriteMessageBegin("UpdateClusterAutoScalingRule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateClusterAutoScalingRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorScaleUpNodePool struct {
	handler ResourceService
}

func (p *resourceServiceProcessorScaleUpNodePool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceScaleUpNodePoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ScaleUpNodePool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceScaleUpNodePoolResult{}
	var retval *cluster.ScaleUpNodePoolResponse
	if retval, err2 = p.handler.ScaleUpNodePool(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ScaleUpNodePool: "+err2.Error())
			oprot.WriteMessageBegin("ScaleUpNodePool", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ScaleUpNodePool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorScaleDownNodePool struct {
	handler ResourceService
}

func (p *resourceServiceProcessorScaleDownNodePool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceScaleDownNodePoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ScaleDownNodePool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceScaleDownNodePoolResult{}
	var retval *cluster.ScaleDownNodePoolResponse
	if retval, err2 = p.handler.ScaleDownNodePool(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ScaleDownNodePool: "+err2.Error())
			oprot.WriteMessageBegin("ScaleDownNodePool", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ScaleDownNodePool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNodePools struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNodePools) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNodePoolsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodePools", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNodePoolsResult{}
	var retval *cluster.ListNodePoolsResponse
	if retval, err2 = p.handler.ListNodePools(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodePools: "+err2.Error())
			oprot.WriteMessageBegin("ListNodePools", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodePools", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateNodePool struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateNodePool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateNodePoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateNodePool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateNodePoolResult{}
	var retval *cluster.CreateNodePoolResponse
	if retval, err2 = p.handler.CreateNodePool(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateNodePool: "+err2.Error())
			oprot.WriteMessageBegin("CreateNodePool", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateNodePool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetNodePool struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetNodePool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetNodePoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNodePool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetNodePoolResult{}
	var retval *cluster.GetNodePoolResponse
	if retval, err2 = p.handler.GetNodePool(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNodePool: "+err2.Error())
			oprot.WriteMessageBegin("GetNodePool", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNodePool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateNodePool struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateNodePool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateNodePoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateNodePool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateNodePoolResult{}
	var retval *cluster.UpdateNodePoolResponse
	if retval, err2 = p.handler.UpdateNodePool(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateNodePool: "+err2.Error())
			oprot.WriteMessageBegin("UpdateNodePool", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateNodePool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteNodePool struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteNodePool) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteNodePoolArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteNodePool", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteNodePoolResult{}
	var retval *cluster.DeleteNodePoolResponse
	if retval, err2 = p.handler.DeleteNodePool(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteNodePool: "+err2.Error())
			oprot.WriteMessageBegin("DeleteNodePool", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteNodePool", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNodePoolScalingRecords struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNodePoolScalingRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNodePoolScalingRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodePoolScalingRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNodePoolScalingRecordsResult{}
	var retval *cluster.ListNodePoolScalingRecordsResponse
	if retval, err2 = p.handler.ListNodePoolScalingRecords(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodePoolScalingRecords: "+err2.Error())
			oprot.WriteMessageBegin("ListNodePoolScalingRecords", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodePoolScalingRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNodePoolNodes struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNodePoolNodes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNodePoolNodesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodePoolNodes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNodePoolNodesResult{}
	var retval *cluster.ListNodePoolNodesResponse
	if retval, err2 = p.handler.ListNodePoolNodes(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodePoolNodes: "+err2.Error())
			oprot.WriteMessageBegin("ListNodePoolNodes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodePoolNodes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNamespace struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNamespace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNamespaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNamespace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNamespaceResult{}
	var retval *cluster.ListNamespaceResponse
	if retval, err2 = p.handler.ListNamespace(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNamespace: "+err2.Error())
			oprot.WriteMessageBegin("ListNamespace", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNamespace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateNamespace struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateNamespace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateNamespaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateNamespace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateNamespaceResult{}
	var retval *cluster.CreateNamespaceResponse
	if retval, err2 = p.handler.CreateNamespace(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateNamespace: "+err2.Error())
			oprot.WriteMessageBegin("CreateNamespace", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateNamespace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetNamespace struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetNamespace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetNamespaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNamespace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetNamespaceResult{}
	var retval *cluster.GetNamespaceResponse
	if retval, err2 = p.handler.GetNamespace(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNamespace: "+err2.Error())
			oprot.WriteMessageBegin("GetNamespace", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNamespace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateNamespace struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateNamespace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateNamespaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateNamespace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateNamespaceResult{}
	var retval *cluster.UpdateNamespaceResponse
	if retval, err2 = p.handler.UpdateNamespace(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateNamespace: "+err2.Error())
			oprot.WriteMessageBegin("UpdateNamespace", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateNamespace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateNamespaceResource struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateNamespaceResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateNamespaceResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateNamespaceResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateNamespaceResourceResult{}
	var retval *cluster.UpdateNamespaceResourceResponse
	if retval, err2 = p.handler.UpdateNamespaceResource(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateNamespaceResource: "+err2.Error())
			oprot.WriteMessageBegin("UpdateNamespaceResource", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateNamespaceResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetNamespaceResource struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetNamespaceResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetNamespaceResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetNamespaceResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetNamespaceResourceResult{}
	var retval *cluster.GetNamespaceResourceResponse
	if retval, err2 = p.handler.GetNamespaceResource(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetNamespaceResource: "+err2.Error())
			oprot.WriteMessageBegin("GetNamespaceResource", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetNamespaceResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteNamespace struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteNamespace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteNamespaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteNamespace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteNamespaceResult{}
	var retval *cluster.DeleteNamespaceResponse
	if retval, err2 = p.handler.DeleteNamespace(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteNamespace: "+err2.Error())
			oprot.WriteMessageBegin("DeleteNamespace", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteNamespace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListResourceQuota struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListResourceQuota) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListResourceQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListResourceQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListResourceQuotaResult{}
	var retval *cluster.ListResourceQuotaResponse
	if retval, err2 = p.handler.ListResourceQuota(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListResourceQuota: "+err2.Error())
			oprot.WriteMessageBegin("ListResourceQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListResourceQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListIngressTypes struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListIngressTypes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListIngressTypesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListIngressTypes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListIngressTypesResult{}
	var retval *network.ListIngressTypeResponse
	if retval, err2 = p.handler.ListIngressTypes(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListIngressTypes: "+err2.Error())
			oprot.WriteMessageBegin("ListIngressTypes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListIngressTypes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListIngress struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListIngress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListIngressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListIngress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListIngressResult{}
	var retval *network.ListIngressResponse
	if retval, err2 = p.handler.ListIngress(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListIngress: "+err2.Error())
			oprot.WriteMessageBegin("ListIngress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListIngress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateIngress struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateIngress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateIngressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateIngress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateIngressResult{}
	var retval *network.CreateIngressResponse
	if retval, err2 = p.handler.CreateIngress(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateIngress: "+err2.Error())
			oprot.WriteMessageBegin("CreateIngress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateIngress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetIngress struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetIngress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetIngressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetIngress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetIngressResult{}
	var retval *network.GetIngressResponse
	if retval, err2 = p.handler.GetIngress(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetIngress: "+err2.Error())
			oprot.WriteMessageBegin("GetIngress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetIngress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateIngress struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateIngress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateIngressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateIngress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateIngressResult{}
	var retval *network.UpdateIngressResponse
	if retval, err2 = p.handler.UpdateIngress(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateIngress: "+err2.Error())
			oprot.WriteMessageBegin("UpdateIngress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateIngress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteIngress struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteIngress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteIngressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteIngress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteIngressResult{}
	var retval *network.DeleteIngressResponse
	if retval, err2 = p.handler.DeleteIngress(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteIngress: "+err2.Error())
			oprot.WriteMessageBegin("DeleteIngress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteIngress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetSecretDomains struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetSecretDomains) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetSecretDomainsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSecretDomains", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetSecretDomainsResult{}
	var retval *network.GetSecretDomainsResponse
	if retval, err2 = p.handler.GetSecretDomains(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSecretDomains: "+err2.Error())
			oprot.WriteMessageBegin("GetSecretDomains", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSecretDomains", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListStorageClass struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListStorageClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListStorageClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListStorageClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListStorageClassResult{}
	var retval *storage.ListStorageClassResponse
	if retval, err2 = p.handler.ListStorageClass(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListStorageClass: "+err2.Error())
			oprot.WriteMessageBegin("ListStorageClass", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListStorageClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateStorageClass struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateStorageClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateStorageClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateStorageClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateStorageClassResult{}
	var retval *storage.CreateStorageClassResponse
	if retval, err2 = p.handler.CreateStorageClass(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateStorageClass: "+err2.Error())
			oprot.WriteMessageBegin("CreateStorageClass", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateStorageClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetStorageClass struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetStorageClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetStorageClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetStorageClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetStorageClassResult{}
	var retval *storage.GetStorageClassResponse
	if retval, err2 = p.handler.GetStorageClass(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStorageClass: "+err2.Error())
			oprot.WriteMessageBegin("GetStorageClass", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetStorageClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteStorageClass struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteStorageClass) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteStorageClassArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteStorageClass", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteStorageClassResult{}
	var retval *storage.DeleteStorageClassResponse
	if retval, err2 = p.handler.DeleteStorageClass(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteStorageClass: "+err2.Error())
			oprot.WriteMessageBegin("DeleteStorageClass", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteStorageClass", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListPersistentVolume struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListPersistentVolume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListPersistentVolumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPersistentVolume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListPersistentVolumeResult{}
	var retval *storage.ListPersistentVolumeResponse
	if retval, err2 = p.handler.ListPersistentVolume(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPersistentVolume: "+err2.Error())
			oprot.WriteMessageBegin("ListPersistentVolume", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPersistentVolume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreatePersistentVolume struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreatePersistentVolume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreatePersistentVolumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePersistentVolume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreatePersistentVolumeResult{}
	var retval *storage.CreatePersistentVolumeResponse
	if retval, err2 = p.handler.CreatePersistentVolume(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePersistentVolume: "+err2.Error())
			oprot.WriteMessageBegin("CreatePersistentVolume", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePersistentVolume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetPersistentVolume struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetPersistentVolume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetPersistentVolumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPersistentVolume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetPersistentVolumeResult{}
	var retval *storage.GetPersistentVolumeResponse
	if retval, err2 = p.handler.GetPersistentVolume(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPersistentVolume: "+err2.Error())
			oprot.WriteMessageBegin("GetPersistentVolume", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPersistentVolume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeletePersistentVolume struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeletePersistentVolume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeletePersistentVolumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePersistentVolume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeletePersistentVolumeResult{}
	var retval *storage.DeletePersistentVolumeResponse
	if retval, err2 = p.handler.DeletePersistentVolume(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePersistentVolume: "+err2.Error())
			oprot.WriteMessageBegin("DeletePersistentVolume", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePersistentVolume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListPersistentVolumeClaim struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListPersistentVolumeClaim) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListPersistentVolumeClaimArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPersistentVolumeClaim", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListPersistentVolumeClaimResult{}
	var retval *storage.ListPersistentVolumeClaimResponse
	if retval, err2 = p.handler.ListPersistentVolumeClaim(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPersistentVolumeClaim: "+err2.Error())
			oprot.WriteMessageBegin("ListPersistentVolumeClaim", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPersistentVolumeClaim", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreatePersistentVolumeClaim struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreatePersistentVolumeClaim) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreatePersistentVolumeClaimArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePersistentVolumeClaim", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreatePersistentVolumeClaimResult{}
	var retval *storage.CreatePersistentVolumeClaimResponse
	if retval, err2 = p.handler.CreatePersistentVolumeClaim(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePersistentVolumeClaim: "+err2.Error())
			oprot.WriteMessageBegin("CreatePersistentVolumeClaim", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePersistentVolumeClaim", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetPersistentVolumeClaim struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetPersistentVolumeClaim) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetPersistentVolumeClaimArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPersistentVolumeClaim", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetPersistentVolumeClaimResult{}
	var retval *storage.GetPersistentVolumeClaimResponse
	if retval, err2 = p.handler.GetPersistentVolumeClaim(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPersistentVolumeClaim: "+err2.Error())
			oprot.WriteMessageBegin("GetPersistentVolumeClaim", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPersistentVolumeClaim", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeletePersistentVolumeClaim struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeletePersistentVolumeClaim) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeletePersistentVolumeClaimArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePersistentVolumeClaim", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeletePersistentVolumeClaimResult{}
	var retval *storage.DeletePersistentVolumeClaimResponse
	if retval, err2 = p.handler.DeletePersistentVolumeClaim(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePersistentVolumeClaim: "+err2.Error())
			oprot.WriteMessageBegin("DeletePersistentVolumeClaim", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePersistentVolumeClaim", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListCephCluster struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListCephCluster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListCephClusterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCephCluster", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListCephClusterResult{}
	var retval *storage.ListCephClusterResponse
	if retval, err2 = p.handler.ListCephCluster(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCephCluster: "+err2.Error())
			oprot.WriteMessageBegin("ListCephCluster", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCephCluster", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListEvent struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListEventArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListEventResult{}
	var retval *event.ListEventResponse
	if retval, err2 = p.handler.ListEvent(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvent: "+err2.Error())
			oprot.WriteMessageBegin("ListEvent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListUserRbacs struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListUserRbacs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListUserRbacsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListUserRbacs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListUserRbacsResult{}
	var retval *rbac.ListUserRbacResponse
	if retval, err2 = p.handler.ListUserRbacs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListUserRbacs: "+err2.Error())
			oprot.WriteMessageBegin("ListUserRbacs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListUserRbacs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateUserRbac struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateUserRbac) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateUserRbacArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateUserRbac", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateUserRbacResult{}
	var retval *rbac.CreateUserRbacResponse
	if retval, err2 = p.handler.CreateUserRbac(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateUserRbac: "+err2.Error())
			oprot.WriteMessageBegin("CreateUserRbac", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateUserRbac", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateUserRbac struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateUserRbac) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateUserRbacArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateUserRbac", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateUserRbacResult{}
	var retval *rbac.UpdateUserRbacResponse
	if retval, err2 = p.handler.UpdateUserRbac(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateUserRbac: "+err2.Error())
			oprot.WriteMessageBegin("UpdateUserRbac", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateUserRbac", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteUserRbac struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteUserRbac) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteUserRbacArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteUserRbac", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteUserRbacResult{}
	var retval *rbac.DeleteUserRbacResponse
	if retval, err2 = p.handler.DeleteUserRbac(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteUserRbac: "+err2.Error())
			oprot.WriteMessageBegin("DeleteUserRbac", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteUserRbac", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListCustomRoles struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListCustomRoles) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListCustomRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCustomRoles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListCustomRolesResult{}
	var retval *rbac.ListCustomRolesResponse
	if retval, err2 = p.handler.ListCustomRoles(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCustomRoles: "+err2.Error())
			oprot.WriteMessageBegin("ListCustomRoles", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCustomRoles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListSupportedAddons struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListSupportedAddons) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListSupportedAddonsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSupportedAddons", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListSupportedAddonsResult{}
	var retval *addon.ListSupportedAddonsResponse
	if retval, err2 = p.handler.ListSupportedAddons(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSupportedAddons: "+err2.Error())
			oprot.WriteMessageBegin("ListSupportedAddons", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSupportedAddons", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListAddons struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListAddons) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListAddonsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListAddons", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListAddonsResult{}
	var retval *addon.ListAddonsResponse
	if retval, err2 = p.handler.ListAddons(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListAddons: "+err2.Error())
			oprot.WriteMessageBegin("ListAddons", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListAddons", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorInstallAddons struct {
	handler ResourceService
}

func (p *resourceServiceProcessorInstallAddons) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceInstallAddonsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InstallAddons", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceInstallAddonsResult{}
	var retval *addon.InstallAddonsResponse
	if retval, err2 = p.handler.InstallAddons(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InstallAddons: "+err2.Error())
			oprot.WriteMessageBegin("InstallAddons", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InstallAddons", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorReinstallAddon struct {
	handler ResourceService
}

func (p *resourceServiceProcessorReinstallAddon) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceReinstallAddonArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReinstallAddon", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceReinstallAddonResult{}
	var retval *addon.ReinstallAddonResponse
	if retval, err2 = p.handler.ReinstallAddon(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReinstallAddon: "+err2.Error())
			oprot.WriteMessageBegin("ReinstallAddon", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReinstallAddon", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUninstallAddons struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUninstallAddons) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUninstallAddonsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UninstallAddons", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUninstallAddonsResult{}
	var retval *addon.UninstallAddonsResponse
	if retval, err2 = p.handler.UninstallAddons(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UninstallAddons: "+err2.Error())
			oprot.WriteMessageBegin("UninstallAddons", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UninstallAddons", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpgradeAddon struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpgradeAddon) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpgradeAddonArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpgradeAddon", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpgradeAddonResult{}
	var retval *addon.UpgradeAddonResponse
	if retval, err2 = p.handler.UpgradeAddon(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpgradeAddon: "+err2.Error())
			oprot.WriteMessageBegin("UpgradeAddon", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpgradeAddon", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetAddon struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetAddon) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetAddonArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAddon", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetAddonResult{}
	var retval *addon.GetAddonResponse
	if retval, err2 = p.handler.GetAddon(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAddon: "+err2.Error())
			oprot.WriteMessageBegin("GetAddon", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAddon", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCheckResourceExist struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCheckResourceExist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCheckResourceExistArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckResourceExist", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCheckResourceExistResult{}
	var retval *helper.CheckResourceExistResponse
	if retval, err2 = p.handler.CheckResourceExist(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckResourceExist: "+err2.Error())
			oprot.WriteMessageBegin("CheckResourceExist", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheckResourceExist", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListInstances struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListInstances) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListInstancesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListInstances", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListInstancesResult{}
	var retval *instance.ListInstancesResponse
	if retval, err2 = p.handler.ListInstances(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListInstances: "+err2.Error())
			oprot.WriteMessageBegin("ListInstances", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListInstances", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListFlavors struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListFlavors) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListFlavorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListFlavors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListFlavorsResult{}
	var retval *instance.ListFlavorsResponse
	if retval, err2 = p.handler.ListFlavors(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListFlavors: "+err2.Error())
			oprot.WriteMessageBegin("ListFlavors", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListFlavors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetInstanceConsole struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetInstanceConsole) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetInstanceConsoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetInstanceConsole", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetInstanceConsoleResult{}
	var retval *instance.GetInstanceConsoleResponse
	if retval, err2 = p.handler.GetInstanceConsole(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetInstanceConsole: "+err2.Error())
			oprot.WriteMessageBegin("GetInstanceConsole", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetInstanceConsole", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListZones struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListZones) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListZonesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListZones", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListZonesResult{}
	var retval *instance.ListZonesResponse
	if retval, err2 = p.handler.ListZones(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListZones: "+err2.Error())
			oprot.WriteMessageBegin("ListZones", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListZones", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListVolumes struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListVolumes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListVolumesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListVolumes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListVolumesResult{}
	var retval *instance.ListVolumesResponse
	if retval, err2 = p.handler.ListVolumes(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListVolumes: "+err2.Error())
			oprot.WriteMessageBegin("ListVolumes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListVolumes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListKeyPairs struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListKeyPairs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListKeyPairsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListKeyPairs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListKeyPairsResult{}
	var retval *instance.ListKeyPairsResponse
	if retval, err2 = p.handler.ListKeyPairs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListKeyPairs: "+err2.Error())
			oprot.WriteMessageBegin("ListKeyPairs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListKeyPairs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListSubnets struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListSubnets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListSubnetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSubnets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListSubnetsResult{}
	var retval *vpc.ListSubnetsResponse
	if retval, err2 = p.handler.ListSubnets(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSubnets: "+err2.Error())
			oprot.WriteMessageBegin("ListSubnets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSubnets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListElasticIpPools struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListElasticIpPools) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListElasticIpPoolsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListElasticIpPools", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListElasticIpPoolsResult{}
	var retval *vpc.ListElasticIpPoolsResponse
	if retval, err2 = p.handler.ListElasticIpPools(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListElasticIpPools: "+err2.Error())
			oprot.WriteMessageBegin("ListElasticIpPools", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListElasticIpPools", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListVpcs struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListVpcs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListVpcsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListVpcs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListVpcsResult{}
	var retval *vpc.ListVpcsResponse
	if retval, err2 = p.handler.ListVpcs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListVpcs: "+err2.Error())
			oprot.WriteMessageBegin("ListVpcs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListVpcs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListSecurityGroups struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListSecurityGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListSecurityGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSecurityGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListSecurityGroupsResult{}
	var retval *vpc.ListSecurityGroupsResponse
	if retval, err2 = p.handler.ListSecurityGroups(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSecurityGroups: "+err2.Error())
			oprot.WriteMessageBegin("ListSecurityGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSecurityGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListClbs struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListClbs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListClbsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListClbs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListClbsResult{}
	var retval *clb.ListClbsResponse
	if retval, err2 = p.handler.ListClbs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListClbs: "+err2.Error())
			oprot.WriteMessageBegin("ListClbs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListClbs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListClbListeners struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListClbListeners) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListClbListenersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListClbListeners", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListClbListenersResult{}
	var retval *clb.ListClbListenersResponse
	if retval, err2 = p.handler.ListClbListeners(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListClbListeners: "+err2.Error())
			oprot.WriteMessageBegin("ListClbListeners", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListClbListeners", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListQuotas struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListQuotas) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListQuotasArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListQuotas", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListQuotasResult{}
	var retval *quota.ListQuotasResponse
	if retval, err2 = p.handler.ListQuotas(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListQuotas: "+err2.Error())
			oprot.WriteMessageBegin("ListQuotas", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListQuotas", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetQuota struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetQuota) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetQuotaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetQuota", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetQuotaResult{}
	var retval *quota.GetQuotaResponse
	if retval, err2 = p.handler.GetQuota(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetQuota: "+err2.Error())
			oprot.WriteMessageBegin("GetQuota", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetQuota", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCreateBareMachine struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCreateBareMachine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCreateBareMachineArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateBareMachine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCreateBareMachineResult{}
	var retval *baremachine.CreateBareMachineResponse
	if retval, err2 = p.handler.CreateBareMachine(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateBareMachine: "+err2.Error())
			oprot.WriteMessageBegin("CreateBareMachine", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateBareMachine", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorUpdateBareMachine struct {
	handler ResourceService
}

func (p *resourceServiceProcessorUpdateBareMachine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceUpdateBareMachineArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateBareMachine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceUpdateBareMachineResult{}
	var retval *baremachine.UpdateBareMachineResponse
	if retval, err2 = p.handler.UpdateBareMachine(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBareMachine: "+err2.Error())
			oprot.WriteMessageBegin("UpdateBareMachine", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateBareMachine", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorDeleteBareMachine struct {
	handler ResourceService
}

func (p *resourceServiceProcessorDeleteBareMachine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceDeleteBareMachineArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteBareMachine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceDeleteBareMachineResult{}
	var retval *baremachine.DeleteBareMachineResponse
	if retval, err2 = p.handler.DeleteBareMachine(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteBareMachine: "+err2.Error())
			oprot.WriteMessageBegin("DeleteBareMachine", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteBareMachine", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetBareMachine struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetBareMachine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetBareMachineArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBareMachine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetBareMachineResult{}
	var retval *baremachine.GetBareMachineResponse
	if retval, err2 = p.handler.GetBareMachine(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBareMachine: "+err2.Error())
			oprot.WriteMessageBegin("GetBareMachine", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBareMachine", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListBareMachine struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListBareMachine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListBareMachineArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListBareMachine", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListBareMachineResult{}
	var retval *baremachine.ListBareMachineResponse
	if retval, err2 = p.handler.ListBareMachine(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBareMachine: "+err2.Error())
			oprot.WriteMessageBegin("ListBareMachine", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListBareMachine", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetBareMachineSshPublicKey struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetBareMachineSshPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetBareMachineSshPublicKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBareMachineSshPublicKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetBareMachineSshPublicKeyResult{}
	var retval *baremachine.GetBareMachineSshPublicKeyResponse
	if retval, err2 = p.handler.GetBareMachineSshPublicKey(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBareMachineSshPublicKey: "+err2.Error())
			oprot.WriteMessageBegin("GetBareMachineSshPublicKey", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBareMachineSshPublicKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListBareMachineExpectOs struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListBareMachineExpectOs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListBareMachineExpectOsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListBareMachineExpectOs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListBareMachineExpectOsResult{}
	var retval *baremachine.ListBareMachineExpectOsResponse
	if retval, err2 = p.handler.ListBareMachineExpectOs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBareMachineExpectOs: "+err2.Error())
			oprot.WriteMessageBegin("ListBareMachineExpectOs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListBareMachineExpectOs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorGetBareMachineImportExcelTemplate struct {
	handler ResourceService
}

func (p *resourceServiceProcessorGetBareMachineImportExcelTemplate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceGetBareMachineImportExcelTemplateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetBareMachineImportExcelTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceGetBareMachineImportExcelTemplateResult{}
	var retval *baremachine.GetBareMachineImportExcelTemplateResponse
	if retval, err2 = p.handler.GetBareMachineImportExcelTemplate(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBareMachineImportExcelTemplate: "+err2.Error())
			oprot.WriteMessageBegin("GetBareMachineImportExcelTemplate", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetBareMachineImportExcelTemplate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorCheckCidrConflict struct {
	handler ResourceService
}

func (p *resourceServiceProcessorCheckCidrConflict) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceCheckCidrConflictArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckCidrConflict", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceCheckCidrConflictResult{}
	var retval *cluster.CheckCidrConflictResponse
	if retval, err2 = p.handler.CheckCidrConflict(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckCidrConflict: "+err2.Error())
			oprot.WriteMessageBegin("CheckCidrConflict", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheckCidrConflict", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorRecommendCidr struct {
	handler ResourceService
}

func (p *resourceServiceProcessorRecommendCidr) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceRecommendCidrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecommendCidr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceRecommendCidrResult{}
	var retval *cluster.RecommendCidrResponse
	if retval, err2 = p.handler.RecommendCidr(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecommendCidr: "+err2.Error())
			oprot.WriteMessageBegin("RecommendCidr", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecommendCidr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorAddVciSubnets struct {
	handler ResourceService
}

func (p *resourceServiceProcessorAddVciSubnets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceAddVciSubnetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddVciSubnets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceAddVciSubnetsResult{}
	var retval *cluster.AddVciSubnetsResponse
	if retval, err2 = p.handler.AddVciSubnets(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddVciSubnets: "+err2.Error())
			oprot.WriteMessageBegin("AddVciSubnets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AddVciSubnets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorIsInShortTermWhiteList struct {
	handler ResourceService
}

func (p *resourceServiceProcessorIsInShortTermWhiteList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceIsInShortTermWhiteListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IsInShortTermWhiteList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceIsInShortTermWhiteListResult{}
	var retval *trade.IsInShortTermWhiteListResponse
	if retval, err2 = p.handler.IsInShortTermWhiteList(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsInShortTermWhiteList: "+err2.Error())
			oprot.WriteMessageBegin("IsInShortTermWhiteList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IsInShortTermWhiteList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorAllowUserPublicTest struct {
	handler ResourceService
}

func (p *resourceServiceProcessorAllowUserPublicTest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceAllowUserPublicTestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AllowUserPublicTest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceAllowUserPublicTestResult{}
	var retval *publicverify.PublicTestAllowedResp
	if retval, err2 = p.handler.AllowUserPublicTest(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AllowUserPublicTest: "+err2.Error())
			oprot.WriteMessageBegin("AllowUserPublicTest", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AllowUserPublicTest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListVciAvailabilityZones struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListVciAvailabilityZones) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListVciAvailabilityZonesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListVciAvailabilityZones", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListVciAvailabilityZonesResult{}
	var retval *vci.ListVciAvailabilityZonesResponse
	if retval, err2 = p.handler.ListVciAvailabilityZones(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListVciAvailabilityZones: "+err2.Error())
			oprot.WriteMessageBegin("ListVciAvailabilityZones", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListVciAvailabilityZones", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resourceServiceProcessorListNodeZones struct {
	handler ResourceService
}

func (p *resourceServiceProcessorListNodeZones) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResourceServiceListNodeZonesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodeZones", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResourceServiceListNodeZonesResult{}
	var retval *cluster.ListNodeZonesResponse
	if retval, err2 = p.handler.ListNodeZones(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodeZones: "+err2.Error())
			oprot.WriteMessageBegin("ListNodeZones", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodeZones", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ResourceServiceGetClusterOverviewArgs struct {
	Req *overview.GetClusterOverviewRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetClusterOverviewArgs() *ResourceServiceGetClusterOverviewArgs {
	return &ResourceServiceGetClusterOverviewArgs{}
}

var ResourceServiceGetClusterOverviewArgs_Req_DEFAULT *overview.GetClusterOverviewRequest

func (p *ResourceServiceGetClusterOverviewArgs) GetReq() (v *overview.GetClusterOverviewRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetClusterOverviewArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetClusterOverviewArgs) SetReq(val *overview.GetClusterOverviewRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetClusterOverviewArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetClusterOverviewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetClusterOverviewArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterOverviewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = overview.NewGetClusterOverviewRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterOverviewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterOverview_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterOverviewArgs(%+v)", *p)
}

func (p *ResourceServiceGetClusterOverviewArgs) DeepEqual(ano *ResourceServiceGetClusterOverviewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterOverviewArgs) Field1DeepEqual(src *overview.GetClusterOverviewRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterOverviewResult struct {
	Success *overview.GetClusterOverviewResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                        `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetClusterOverviewResult() *ResourceServiceGetClusterOverviewResult {
	return &ResourceServiceGetClusterOverviewResult{}
}

var ResourceServiceGetClusterOverviewResult_Success_DEFAULT *overview.GetClusterOverviewResponse

func (p *ResourceServiceGetClusterOverviewResult) GetSuccess() (v *overview.GetClusterOverviewResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetClusterOverviewResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetClusterOverviewResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetClusterOverviewResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetClusterOverviewResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetClusterOverviewResult) SetSuccess(x interface{}) {
	p.Success = x.(*overview.GetClusterOverviewResponse)
}
func (p *ResourceServiceGetClusterOverviewResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetClusterOverviewResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetClusterOverviewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetClusterOverviewResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetClusterOverviewResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterOverviewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = overview.NewGetClusterOverviewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterOverviewResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterOverviewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterOverview_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterOverviewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterOverviewResult(%+v)", *p)
}

func (p *ResourceServiceGetClusterOverviewResult) DeepEqual(ano *ResourceServiceGetClusterOverviewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterOverviewResult) Field0DeepEqual(src *overview.GetClusterOverviewResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetClusterOverviewResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetKubeConfigArgs struct {
	Req *cluster.GetKubeConfigRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetKubeConfigArgs() *ResourceServiceGetKubeConfigArgs {
	return &ResourceServiceGetKubeConfigArgs{}
}

var ResourceServiceGetKubeConfigArgs_Req_DEFAULT *cluster.GetKubeConfigRequest

func (p *ResourceServiceGetKubeConfigArgs) GetReq() (v *cluster.GetKubeConfigRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetKubeConfigArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetKubeConfigArgs) SetReq(val *cluster.GetKubeConfigRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetKubeConfigArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetKubeConfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetKubeConfigArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetKubeConfigArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetKubeConfigRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetKubeConfigArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeConfig_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetKubeConfigArgs(%+v)", *p)
}

func (p *ResourceServiceGetKubeConfigArgs) DeepEqual(ano *ResourceServiceGetKubeConfigArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetKubeConfigArgs) Field1DeepEqual(src *cluster.GetKubeConfigRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetKubeConfigResult struct {
	Success *cluster.GetKubeConfigResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetKubeConfigResult() *ResourceServiceGetKubeConfigResult {
	return &ResourceServiceGetKubeConfigResult{}
}

var ResourceServiceGetKubeConfigResult_Success_DEFAULT *cluster.GetKubeConfigResponse

func (p *ResourceServiceGetKubeConfigResult) GetSuccess() (v *cluster.GetKubeConfigResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetKubeConfigResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetKubeConfigResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetKubeConfigResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetKubeConfigResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetKubeConfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetKubeConfigResponse)
}
func (p *ResourceServiceGetKubeConfigResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetKubeConfigResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetKubeConfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetKubeConfigResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetKubeConfigResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetKubeConfigResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetKubeConfigResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetKubeConfigResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetKubeConfigResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeConfig_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetKubeConfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetKubeConfigResult(%+v)", *p)
}

func (p *ResourceServiceGetKubeConfigResult) DeepEqual(ano *ResourceServiceGetKubeConfigResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetKubeConfigResult) Field0DeepEqual(src *cluster.GetKubeConfigResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetKubeConfigResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetKubeconfigArgs struct {
	Req *cluster.GetKubeconfigRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetKubeconfigArgs() *ResourceServiceGetKubeconfigArgs {
	return &ResourceServiceGetKubeconfigArgs{}
}

var ResourceServiceGetKubeconfigArgs_Req_DEFAULT *cluster.GetKubeconfigRequest

func (p *ResourceServiceGetKubeconfigArgs) GetReq() (v *cluster.GetKubeconfigRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetKubeconfigArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetKubeconfigArgs) SetReq(val *cluster.GetKubeconfigRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetKubeconfigArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetKubeconfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetKubeconfigArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetKubeconfigArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetKubeconfigRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetKubeconfigArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeconfig_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetKubeconfigArgs(%+v)", *p)
}

func (p *ResourceServiceGetKubeconfigArgs) DeepEqual(ano *ResourceServiceGetKubeconfigArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetKubeconfigArgs) Field1DeepEqual(src *cluster.GetKubeconfigRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetKubeconfigResult struct {
	Success *cluster.GetKubeconfigResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetKubeconfigResult() *ResourceServiceGetKubeconfigResult {
	return &ResourceServiceGetKubeconfigResult{}
}

var ResourceServiceGetKubeconfigResult_Success_DEFAULT *cluster.GetKubeconfigResponse

func (p *ResourceServiceGetKubeconfigResult) GetSuccess() (v *cluster.GetKubeconfigResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetKubeconfigResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetKubeconfigResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetKubeconfigResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetKubeconfigResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetKubeconfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetKubeconfigResponse)
}
func (p *ResourceServiceGetKubeconfigResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetKubeconfigResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetKubeconfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetKubeconfigResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetKubeconfigResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetKubeconfigResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetKubeconfigResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetKubeconfigResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetKubeconfigResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetKubeconfig_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetKubeconfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetKubeconfigResult(%+v)", *p)
}

func (p *ResourceServiceGetKubeconfigResult) DeepEqual(ano *ResourceServiceGetKubeconfigResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetKubeconfigResult) Field0DeepEqual(src *cluster.GetKubeconfigResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetKubeconfigResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceRevokeKubeconfigArgs struct {
	Req *cluster.RevokeKubeconfigRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceRevokeKubeconfigArgs() *ResourceServiceRevokeKubeconfigArgs {
	return &ResourceServiceRevokeKubeconfigArgs{}
}

var ResourceServiceRevokeKubeconfigArgs_Req_DEFAULT *cluster.RevokeKubeconfigRequest

func (p *ResourceServiceRevokeKubeconfigArgs) GetReq() (v *cluster.RevokeKubeconfigRequest) {
	if !p.IsSetReq() {
		return ResourceServiceRevokeKubeconfigArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceRevokeKubeconfigArgs) SetReq(val *cluster.RevokeKubeconfigRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceRevokeKubeconfigArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceRevokeKubeconfigArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceRevokeKubeconfigArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceRevokeKubeconfigArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewRevokeKubeconfigRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRevokeKubeconfigArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevokeKubeconfig_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceRevokeKubeconfigArgs(%+v)", *p)
}

func (p *ResourceServiceRevokeKubeconfigArgs) DeepEqual(ano *ResourceServiceRevokeKubeconfigArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceRevokeKubeconfigArgs) Field1DeepEqual(src *cluster.RevokeKubeconfigRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceRevokeKubeconfigResult struct {
	Success *cluster.RevokeKubeconfigResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                     `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceRevokeKubeconfigResult() *ResourceServiceRevokeKubeconfigResult {
	return &ResourceServiceRevokeKubeconfigResult{}
}

var ResourceServiceRevokeKubeconfigResult_Success_DEFAULT *cluster.RevokeKubeconfigResponse

func (p *ResourceServiceRevokeKubeconfigResult) GetSuccess() (v *cluster.RevokeKubeconfigResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceRevokeKubeconfigResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceRevokeKubeconfigResult_Err_DEFAULT *common.Error

func (p *ResourceServiceRevokeKubeconfigResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceRevokeKubeconfigResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceRevokeKubeconfigResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.RevokeKubeconfigResponse)
}
func (p *ResourceServiceRevokeKubeconfigResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceRevokeKubeconfigResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceRevokeKubeconfigResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceRevokeKubeconfigResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceRevokeKubeconfigResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceRevokeKubeconfigResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewRevokeKubeconfigResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRevokeKubeconfigResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRevokeKubeconfigResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevokeKubeconfig_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceRevokeKubeconfigResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceRevokeKubeconfigResult(%+v)", *p)
}

func (p *ResourceServiceRevokeKubeconfigResult) DeepEqual(ano *ResourceServiceRevokeKubeconfigResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceRevokeKubeconfigResult) Field0DeepEqual(src *cluster.RevokeKubeconfigResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceRevokeKubeconfigResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListKubeconfigUsersArgs struct {
	Req *cluster.ListKubeconfigUsersRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListKubeconfigUsersArgs() *ResourceServiceListKubeconfigUsersArgs {
	return &ResourceServiceListKubeconfigUsersArgs{}
}

var ResourceServiceListKubeconfigUsersArgs_Req_DEFAULT *cluster.ListKubeconfigUsersRequest

func (p *ResourceServiceListKubeconfigUsersArgs) GetReq() (v *cluster.ListKubeconfigUsersRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListKubeconfigUsersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListKubeconfigUsersArgs) SetReq(val *cluster.ListKubeconfigUsersRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListKubeconfigUsersArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListKubeconfigUsersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListKubeconfigUsersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListKubeconfigUsersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListKubeconfigUsersRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListKubeconfigUsersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListKubeconfigUsers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListKubeconfigUsersArgs(%+v)", *p)
}

func (p *ResourceServiceListKubeconfigUsersArgs) DeepEqual(ano *ResourceServiceListKubeconfigUsersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListKubeconfigUsersArgs) Field1DeepEqual(src *cluster.ListKubeconfigUsersRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListKubeconfigUsersResult struct {
	Success *cluster.ListKubeconfigUsersResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                        `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListKubeconfigUsersResult() *ResourceServiceListKubeconfigUsersResult {
	return &ResourceServiceListKubeconfigUsersResult{}
}

var ResourceServiceListKubeconfigUsersResult_Success_DEFAULT *cluster.ListKubeconfigUsersResponse

func (p *ResourceServiceListKubeconfigUsersResult) GetSuccess() (v *cluster.ListKubeconfigUsersResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListKubeconfigUsersResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListKubeconfigUsersResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListKubeconfigUsersResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListKubeconfigUsersResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListKubeconfigUsersResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListKubeconfigUsersResponse)
}
func (p *ResourceServiceListKubeconfigUsersResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListKubeconfigUsersResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListKubeconfigUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListKubeconfigUsersResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListKubeconfigUsersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListKubeconfigUsersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListKubeconfigUsersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListKubeconfigUsersResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListKubeconfigUsersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListKubeconfigUsers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListKubeconfigUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListKubeconfigUsersResult(%+v)", *p)
}

func (p *ResourceServiceListKubeconfigUsersResult) DeepEqual(ano *ResourceServiceListKubeconfigUsersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListKubeconfigUsersResult) Field0DeepEqual(src *cluster.ListKubeconfigUsersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListKubeconfigUsersResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateClusterArgs struct {
	Req *cluster.CreateClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateClusterArgs() *ResourceServiceCreateClusterArgs {
	return &ResourceServiceCreateClusterArgs{}
}

var ResourceServiceCreateClusterArgs_Req_DEFAULT *cluster.CreateClusterRequest

func (p *ResourceServiceCreateClusterArgs) GetReq() (v *cluster.CreateClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateClusterArgs) SetReq(val *cluster.CreateClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewCreateClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateClusterArgs(%+v)", *p)
}

func (p *ResourceServiceCreateClusterArgs) DeepEqual(ano *ResourceServiceCreateClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateClusterArgs) Field1DeepEqual(src *cluster.CreateClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateClusterResult struct {
	Success *cluster.CreateClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateClusterResult() *ResourceServiceCreateClusterResult {
	return &ResourceServiceCreateClusterResult{}
}

var ResourceServiceCreateClusterResult_Success_DEFAULT *cluster.CreateClusterResponse

func (p *ResourceServiceCreateClusterResult) GetSuccess() (v *cluster.CreateClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.CreateClusterResponse)
}
func (p *ResourceServiceCreateClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewCreateClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateClusterResult(%+v)", *p)
}

func (p *ResourceServiceCreateClusterResult) DeepEqual(ano *ResourceServiceCreateClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateClusterResult) Field0DeepEqual(src *cluster.CreateClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceRegisterClusterArgs struct {
	Req *cluster.RegisterClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceRegisterClusterArgs() *ResourceServiceRegisterClusterArgs {
	return &ResourceServiceRegisterClusterArgs{}
}

var ResourceServiceRegisterClusterArgs_Req_DEFAULT *cluster.RegisterClusterRequest

func (p *ResourceServiceRegisterClusterArgs) GetReq() (v *cluster.RegisterClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceRegisterClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceRegisterClusterArgs) SetReq(val *cluster.RegisterClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceRegisterClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceRegisterClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceRegisterClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceRegisterClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewRegisterClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRegisterClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceRegisterClusterArgs(%+v)", *p)
}

func (p *ResourceServiceRegisterClusterArgs) DeepEqual(ano *ResourceServiceRegisterClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceRegisterClusterArgs) Field1DeepEqual(src *cluster.RegisterClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceRegisterClusterResult struct {
	Success *cluster.RegisterClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceRegisterClusterResult() *ResourceServiceRegisterClusterResult {
	return &ResourceServiceRegisterClusterResult{}
}

var ResourceServiceRegisterClusterResult_Success_DEFAULT *cluster.RegisterClusterResponse

func (p *ResourceServiceRegisterClusterResult) GetSuccess() (v *cluster.RegisterClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceRegisterClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceRegisterClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceRegisterClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceRegisterClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceRegisterClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.RegisterClusterResponse)
}
func (p *ResourceServiceRegisterClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceRegisterClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceRegisterClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceRegisterClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceRegisterClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceRegisterClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewRegisterClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRegisterClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRegisterClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceRegisterClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceRegisterClusterResult(%+v)", *p)
}

func (p *ResourceServiceRegisterClusterResult) DeepEqual(ano *ResourceServiceRegisterClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceRegisterClusterResult) Field0DeepEqual(src *cluster.RegisterClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceRegisterClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateClusterArgs struct {
	Req *cluster.UpdateClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateClusterArgs() *ResourceServiceUpdateClusterArgs {
	return &ResourceServiceUpdateClusterArgs{}
}

var ResourceServiceUpdateClusterArgs_Req_DEFAULT *cluster.UpdateClusterRequest

func (p *ResourceServiceUpdateClusterArgs) GetReq() (v *cluster.UpdateClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateClusterArgs) SetReq(val *cluster.UpdateClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpdateClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateClusterArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateClusterArgs) DeepEqual(ano *ResourceServiceUpdateClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateClusterArgs) Field1DeepEqual(src *cluster.UpdateClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateClusterResult struct {
	Success *cluster.UpdateClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateClusterResult() *ResourceServiceUpdateClusterResult {
	return &ResourceServiceUpdateClusterResult{}
}

var ResourceServiceUpdateClusterResult_Success_DEFAULT *cluster.UpdateClusterResponse

func (p *ResourceServiceUpdateClusterResult) GetSuccess() (v *cluster.UpdateClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpdateClusterResponse)
}
func (p *ResourceServiceUpdateClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpdateClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateClusterResult(%+v)", *p)
}

func (p *ResourceServiceUpdateClusterResult) DeepEqual(ano *ResourceServiceUpdateClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateClusterResult) Field0DeepEqual(src *cluster.UpdateClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpgradeClusterArgs struct {
	Req *cluster.UpgradeClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpgradeClusterArgs() *ResourceServiceUpgradeClusterArgs {
	return &ResourceServiceUpgradeClusterArgs{}
}

var ResourceServiceUpgradeClusterArgs_Req_DEFAULT *cluster.UpgradeClusterRequest

func (p *ResourceServiceUpgradeClusterArgs) GetReq() (v *cluster.UpgradeClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpgradeClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpgradeClusterArgs) SetReq(val *cluster.UpgradeClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpgradeClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpgradeClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpgradeClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpgradeClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpgradeClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpgradeClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpgradeClusterArgs(%+v)", *p)
}

func (p *ResourceServiceUpgradeClusterArgs) DeepEqual(ano *ResourceServiceUpgradeClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpgradeClusterArgs) Field1DeepEqual(src *cluster.UpgradeClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpgradeClusterResult struct {
	Success *cluster.UpgradeClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpgradeClusterResult() *ResourceServiceUpgradeClusterResult {
	return &ResourceServiceUpgradeClusterResult{}
}

var ResourceServiceUpgradeClusterResult_Success_DEFAULT *cluster.UpgradeClusterResponse

func (p *ResourceServiceUpgradeClusterResult) GetSuccess() (v *cluster.UpgradeClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpgradeClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpgradeClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpgradeClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpgradeClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpgradeClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpgradeClusterResponse)
}
func (p *ResourceServiceUpgradeClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpgradeClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpgradeClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpgradeClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpgradeClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpgradeClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpgradeClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpgradeClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpgradeClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpgradeClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpgradeClusterResult(%+v)", *p)
}

func (p *ResourceServiceUpgradeClusterResult) DeepEqual(ano *ResourceServiceUpgradeClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpgradeClusterResult) Field0DeepEqual(src *cluster.UpgradeClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpgradeClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteClusterArgs struct {
	Req *cluster.DeleteClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteClusterArgs() *ResourceServiceDeleteClusterArgs {
	return &ResourceServiceDeleteClusterArgs{}
}

var ResourceServiceDeleteClusterArgs_Req_DEFAULT *cluster.DeleteClusterRequest

func (p *ResourceServiceDeleteClusterArgs) GetReq() (v *cluster.DeleteClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteClusterArgs) SetReq(val *cluster.DeleteClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewDeleteClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteClusterArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteClusterArgs) DeepEqual(ano *ResourceServiceDeleteClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteClusterArgs) Field1DeepEqual(src *cluster.DeleteClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteClusterResult struct {
	Success *cluster.DeleteClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteClusterResult() *ResourceServiceDeleteClusterResult {
	return &ResourceServiceDeleteClusterResult{}
}

var ResourceServiceDeleteClusterResult_Success_DEFAULT *cluster.DeleteClusterResponse

func (p *ResourceServiceDeleteClusterResult) GetSuccess() (v *cluster.DeleteClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.DeleteClusterResponse)
}
func (p *ResourceServiceDeleteClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewDeleteClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteClusterResult(%+v)", *p)
}

func (p *ResourceServiceDeleteClusterResult) DeepEqual(ano *ResourceServiceDeleteClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteClusterResult) Field0DeepEqual(src *cluster.DeleteClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterArgs struct {
	Req *cluster.GetClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetClusterArgs() *ResourceServiceGetClusterArgs {
	return &ResourceServiceGetClusterArgs{}
}

var ResourceServiceGetClusterArgs_Req_DEFAULT *cluster.GetClusterRequest

func (p *ResourceServiceGetClusterArgs) GetReq() (v *cluster.GetClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetClusterArgs) SetReq(val *cluster.GetClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterArgs(%+v)", *p)
}

func (p *ResourceServiceGetClusterArgs) DeepEqual(ano *ResourceServiceGetClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterArgs) Field1DeepEqual(src *cluster.GetClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterResult struct {
	Success *cluster.GetClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error               `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetClusterResult() *ResourceServiceGetClusterResult {
	return &ResourceServiceGetClusterResult{}
}

var ResourceServiceGetClusterResult_Success_DEFAULT *cluster.GetClusterResponse

func (p *ResourceServiceGetClusterResult) GetSuccess() (v *cluster.GetClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetClusterResponse)
}
func (p *ResourceServiceGetClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterResult(%+v)", *p)
}

func (p *ResourceServiceGetClusterResult) DeepEqual(ano *ResourceServiceGetClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterResult) Field0DeepEqual(src *cluster.GetClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClustersArgs struct {
	Req *cluster.ListClustersRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListClustersArgs() *ResourceServiceListClustersArgs {
	return &ResourceServiceListClustersArgs{}
}

var ResourceServiceListClustersArgs_Req_DEFAULT *cluster.ListClustersRequest

func (p *ResourceServiceListClustersArgs) GetReq() (v *cluster.ListClustersRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListClustersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListClustersArgs) SetReq(val *cluster.ListClustersRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListClustersArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListClustersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListClustersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClustersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClustersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListClustersRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClustersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClusters_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClustersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClustersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClustersArgs(%+v)", *p)
}

func (p *ResourceServiceListClustersArgs) DeepEqual(ano *ResourceServiceListClustersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListClustersArgs) Field1DeepEqual(src *cluster.ListClustersRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClustersResult struct {
	Success *cluster.ListClustersResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListClustersResult() *ResourceServiceListClustersResult {
	return &ResourceServiceListClustersResult{}
}

var ResourceServiceListClustersResult_Success_DEFAULT *cluster.ListClustersResponse

func (p *ResourceServiceListClustersResult) GetSuccess() (v *cluster.ListClustersResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListClustersResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListClustersResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListClustersResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListClustersResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListClustersResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListClustersResponse)
}
func (p *ResourceServiceListClustersResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListClustersResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListClustersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListClustersResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListClustersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClustersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClustersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListClustersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClustersResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClustersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClusters_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClustersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListClustersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClustersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClustersResult(%+v)", *p)
}

func (p *ResourceServiceListClustersResult) DeepEqual(ano *ResourceServiceListClustersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListClustersResult) Field0DeepEqual(src *cluster.ListClustersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListClustersResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterDeployProgressArgs struct {
	Req *cluster.GetClusterDeployProgressRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetClusterDeployProgressArgs() *ResourceServiceGetClusterDeployProgressArgs {
	return &ResourceServiceGetClusterDeployProgressArgs{}
}

var ResourceServiceGetClusterDeployProgressArgs_Req_DEFAULT *cluster.GetClusterDeployProgressRequest

func (p *ResourceServiceGetClusterDeployProgressArgs) GetReq() (v *cluster.GetClusterDeployProgressRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetClusterDeployProgressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetClusterDeployProgressArgs) SetReq(val *cluster.GetClusterDeployProgressRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetClusterDeployProgressArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetClusterDeployProgressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetClusterDeployProgressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterDeployProgressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetClusterDeployProgressRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterDeployProgressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterDeployProgress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterDeployProgressArgs(%+v)", *p)
}

func (p *ResourceServiceGetClusterDeployProgressArgs) DeepEqual(ano *ResourceServiceGetClusterDeployProgressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterDeployProgressArgs) Field1DeepEqual(src *cluster.GetClusterDeployProgressRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterDeployProgressResult struct {
	Success *cluster.GetClusterDeployProgressResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                             `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetClusterDeployProgressResult() *ResourceServiceGetClusterDeployProgressResult {
	return &ResourceServiceGetClusterDeployProgressResult{}
}

var ResourceServiceGetClusterDeployProgressResult_Success_DEFAULT *cluster.GetClusterDeployProgressResponse

func (p *ResourceServiceGetClusterDeployProgressResult) GetSuccess() (v *cluster.GetClusterDeployProgressResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetClusterDeployProgressResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetClusterDeployProgressResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetClusterDeployProgressResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetClusterDeployProgressResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetClusterDeployProgressResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetClusterDeployProgressResponse)
}
func (p *ResourceServiceGetClusterDeployProgressResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetClusterDeployProgressResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetClusterDeployProgressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetClusterDeployProgressResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetClusterDeployProgressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterDeployProgressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetClusterDeployProgressResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterDeployProgressResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterDeployProgressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterDeployProgress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterDeployProgressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterDeployProgressResult(%+v)", *p)
}

func (p *ResourceServiceGetClusterDeployProgressResult) DeepEqual(ano *ResourceServiceGetClusterDeployProgressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterDeployProgressResult) Field0DeepEqual(src *cluster.GetClusterDeployProgressResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetClusterDeployProgressResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSupportedKubernetesVersionsArgs struct {
	Req *cluster.ListSupportedKubernetesVersionsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListSupportedKubernetesVersionsArgs() *ResourceServiceListSupportedKubernetesVersionsArgs {
	return &ResourceServiceListSupportedKubernetesVersionsArgs{}
}

var ResourceServiceListSupportedKubernetesVersionsArgs_Req_DEFAULT *cluster.ListSupportedKubernetesVersionsRequest

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) GetReq() (v *cluster.ListSupportedKubernetesVersionsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListSupportedKubernetesVersionsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListSupportedKubernetesVersionsArgs) SetReq(val *cluster.ListSupportedKubernetesVersionsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListSupportedKubernetesVersionsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSupportedKubernetesVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListSupportedKubernetesVersionsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedKubernetesVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSupportedKubernetesVersionsArgs(%+v)", *p)
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) DeepEqual(ano *ResourceServiceListSupportedKubernetesVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListSupportedKubernetesVersionsArgs) Field1DeepEqual(src *cluster.ListSupportedKubernetesVersionsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSupportedKubernetesVersionsResult struct {
	Success *cluster.ListSupportedKubernetesVersionsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListSupportedKubernetesVersionsResult() *ResourceServiceListSupportedKubernetesVersionsResult {
	return &ResourceServiceListSupportedKubernetesVersionsResult{}
}

var ResourceServiceListSupportedKubernetesVersionsResult_Success_DEFAULT *cluster.ListSupportedKubernetesVersionsResponse

func (p *ResourceServiceListSupportedKubernetesVersionsResult) GetSuccess() (v *cluster.ListSupportedKubernetesVersionsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListSupportedKubernetesVersionsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListSupportedKubernetesVersionsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListSupportedKubernetesVersionsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListSupportedKubernetesVersionsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListSupportedKubernetesVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListSupportedKubernetesVersionsResponse)
}
func (p *ResourceServiceListSupportedKubernetesVersionsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListSupportedKubernetesVersionsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSupportedKubernetesVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListSupportedKubernetesVersionsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedKubernetesVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSupportedKubernetesVersionsResult(%+v)", *p)
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) DeepEqual(ano *ResourceServiceListSupportedKubernetesVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListSupportedKubernetesVersionsResult) Field0DeepEqual(src *cluster.ListSupportedKubernetesVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListSupportedKubernetesVersionsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClusterNetworkCidrsArgs struct {
	Req *cluster.ListClusterNetworkCidrsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListClusterNetworkCidrsArgs() *ResourceServiceListClusterNetworkCidrsArgs {
	return &ResourceServiceListClusterNetworkCidrsArgs{}
}

var ResourceServiceListClusterNetworkCidrsArgs_Req_DEFAULT *cluster.ListClusterNetworkCidrsRequest

func (p *ResourceServiceListClusterNetworkCidrsArgs) GetReq() (v *cluster.ListClusterNetworkCidrsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListClusterNetworkCidrsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListClusterNetworkCidrsArgs) SetReq(val *cluster.ListClusterNetworkCidrsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListClusterNetworkCidrsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClusterNetworkCidrsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListClusterNetworkCidrsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClusterNetworkCidrs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClusterNetworkCidrsArgs(%+v)", *p)
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) DeepEqual(ano *ResourceServiceListClusterNetworkCidrsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListClusterNetworkCidrsArgs) Field1DeepEqual(src *cluster.ListClusterNetworkCidrsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClusterNetworkCidrsResult struct {
	Success *cluster.ListClusterNetworkCidrsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                            `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListClusterNetworkCidrsResult() *ResourceServiceListClusterNetworkCidrsResult {
	return &ResourceServiceListClusterNetworkCidrsResult{}
}

var ResourceServiceListClusterNetworkCidrsResult_Success_DEFAULT *cluster.ListClusterNetworkCidrsResponse

func (p *ResourceServiceListClusterNetworkCidrsResult) GetSuccess() (v *cluster.ListClusterNetworkCidrsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListClusterNetworkCidrsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListClusterNetworkCidrsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListClusterNetworkCidrsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListClusterNetworkCidrsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListClusterNetworkCidrsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListClusterNetworkCidrsResponse)
}
func (p *ResourceServiceListClusterNetworkCidrsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListClusterNetworkCidrsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListClusterNetworkCidrsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListClusterNetworkCidrsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListClusterNetworkCidrsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClusterNetworkCidrsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListClusterNetworkCidrsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClusterNetworkCidrsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClusterNetworkCidrsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClusterNetworkCidrs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClusterNetworkCidrsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClusterNetworkCidrsResult(%+v)", *p)
}

func (p *ResourceServiceListClusterNetworkCidrsResult) DeepEqual(ano *ResourceServiceListClusterNetworkCidrsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListClusterNetworkCidrsResult) Field0DeepEqual(src *cluster.ListClusterNetworkCidrsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListClusterNetworkCidrsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSupportedGpuModelsArgs struct {
	Req *cluster.ListSupportedGpuModelsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListSupportedGpuModelsArgs() *ResourceServiceListSupportedGpuModelsArgs {
	return &ResourceServiceListSupportedGpuModelsArgs{}
}

var ResourceServiceListSupportedGpuModelsArgs_Req_DEFAULT *cluster.ListSupportedGpuModelsRequest

func (p *ResourceServiceListSupportedGpuModelsArgs) GetReq() (v *cluster.ListSupportedGpuModelsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListSupportedGpuModelsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListSupportedGpuModelsArgs) SetReq(val *cluster.ListSupportedGpuModelsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListSupportedGpuModelsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListSupportedGpuModelsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListSupportedGpuModelsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSupportedGpuModelsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListSupportedGpuModelsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedGpuModelsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedGpuModels_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSupportedGpuModelsArgs(%+v)", *p)
}

func (p *ResourceServiceListSupportedGpuModelsArgs) DeepEqual(ano *ResourceServiceListSupportedGpuModelsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListSupportedGpuModelsArgs) Field1DeepEqual(src *cluster.ListSupportedGpuModelsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSupportedGpuModelsResult struct {
	Success *cluster.ListSupportedGpuModelsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                           `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListSupportedGpuModelsResult() *ResourceServiceListSupportedGpuModelsResult {
	return &ResourceServiceListSupportedGpuModelsResult{}
}

var ResourceServiceListSupportedGpuModelsResult_Success_DEFAULT *cluster.ListSupportedGpuModelsResponse

func (p *ResourceServiceListSupportedGpuModelsResult) GetSuccess() (v *cluster.ListSupportedGpuModelsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListSupportedGpuModelsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListSupportedGpuModelsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListSupportedGpuModelsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListSupportedGpuModelsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListSupportedGpuModelsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListSupportedGpuModelsResponse)
}
func (p *ResourceServiceListSupportedGpuModelsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListSupportedGpuModelsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListSupportedGpuModelsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListSupportedGpuModelsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListSupportedGpuModelsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSupportedGpuModelsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListSupportedGpuModelsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedGpuModelsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedGpuModelsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedGpuModels_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSupportedGpuModelsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSupportedGpuModelsResult(%+v)", *p)
}

func (p *ResourceServiceListSupportedGpuModelsResult) DeepEqual(ano *ResourceServiceListSupportedGpuModelsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListSupportedGpuModelsResult) Field0DeepEqual(src *cluster.ListSupportedGpuModelsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListSupportedGpuModelsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodesArgs struct {
	Req *cluster.ListNodesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNodesArgs() *ResourceServiceListNodesArgs {
	return &ResourceServiceListNodesArgs{}
}

var ResourceServiceListNodesArgs_Req_DEFAULT *cluster.ListNodesRequest

func (p *ResourceServiceListNodesArgs) GetReq() (v *cluster.ListNodesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNodesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNodesArgs) SetReq(val *cluster.ListNodesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNodesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNodesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNodesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNodesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodesArgs(%+v)", *p)
}

func (p *ResourceServiceListNodesArgs) DeepEqual(ano *ResourceServiceListNodesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodesArgs) Field1DeepEqual(src *cluster.ListNodesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodesResult struct {
	Success *cluster.ListNodesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error              `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNodesResult() *ResourceServiceListNodesResult {
	return &ResourceServiceListNodesResult{}
}

var ResourceServiceListNodesResult_Success_DEFAULT *cluster.ListNodesResponse

func (p *ResourceServiceListNodesResult) GetSuccess() (v *cluster.ListNodesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNodesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNodesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNodesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNodesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNodesResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNodesResponse)
}
func (p *ResourceServiceListNodesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNodesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNodesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNodesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNodesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNodesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNodesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodesResult(%+v)", *p)
}

func (p *ResourceServiceListNodesResult) DeepEqual(ano *ResourceServiceListNodesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodesResult) Field0DeepEqual(src *cluster.ListNodesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNodesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceAddNodesArgs struct {
	Req *cluster.AddNodesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceAddNodesArgs() *ResourceServiceAddNodesArgs {
	return &ResourceServiceAddNodesArgs{}
}

var ResourceServiceAddNodesArgs_Req_DEFAULT *cluster.AddNodesRequest

func (p *ResourceServiceAddNodesArgs) GetReq() (v *cluster.AddNodesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceAddNodesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceAddNodesArgs) SetReq(val *cluster.AddNodesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceAddNodesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceAddNodesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceAddNodesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceAddNodesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceAddNodesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewAddNodesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAddNodesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNodes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceAddNodesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceAddNodesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceAddNodesArgs(%+v)", *p)
}

func (p *ResourceServiceAddNodesArgs) DeepEqual(ano *ResourceServiceAddNodesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceAddNodesArgs) Field1DeepEqual(src *cluster.AddNodesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceAddNodesResult struct {
	Success *cluster.AddNodesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceAddNodesResult() *ResourceServiceAddNodesResult {
	return &ResourceServiceAddNodesResult{}
}

var ResourceServiceAddNodesResult_Success_DEFAULT *cluster.AddNodesResponse

func (p *ResourceServiceAddNodesResult) GetSuccess() (v *cluster.AddNodesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceAddNodesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceAddNodesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceAddNodesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceAddNodesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceAddNodesResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.AddNodesResponse)
}
func (p *ResourceServiceAddNodesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceAddNodesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceAddNodesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceAddNodesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceAddNodesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceAddNodesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceAddNodesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewAddNodesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAddNodesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAddNodesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddNodes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceAddNodesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceAddNodesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceAddNodesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceAddNodesResult(%+v)", *p)
}

func (p *ResourceServiceAddNodesResult) DeepEqual(ano *ResourceServiceAddNodesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceAddNodesResult) Field0DeepEqual(src *cluster.AddNodesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceAddNodesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNodeArgs struct {
	Req *cluster.GetNodeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetNodeArgs() *ResourceServiceGetNodeArgs {
	return &ResourceServiceGetNodeArgs{}
}

var ResourceServiceGetNodeArgs_Req_DEFAULT *cluster.GetNodeRequest

func (p *ResourceServiceGetNodeArgs) GetReq() (v *cluster.GetNodeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetNodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetNodeArgs) SetReq(val *cluster.GetNodeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetNodeArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetNodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetNodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetNodeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNodeArgs(%+v)", *p)
}

func (p *ResourceServiceGetNodeArgs) DeepEqual(ano *ResourceServiceGetNodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNodeArgs) Field1DeepEqual(src *cluster.GetNodeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNodeResult struct {
	Success *cluster.GetNodeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetNodeResult() *ResourceServiceGetNodeResult {
	return &ResourceServiceGetNodeResult{}
}

var ResourceServiceGetNodeResult_Success_DEFAULT *cluster.GetNodeResponse

func (p *ResourceServiceGetNodeResult) GetSuccess() (v *cluster.GetNodeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetNodeResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetNodeResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetNodeResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetNodeResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetNodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetNodeResponse)
}
func (p *ResourceServiceGetNodeResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetNodeResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetNodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetNodeResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetNodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetNodeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetNodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNodeResult(%+v)", *p)
}

func (p *ResourceServiceGetNodeResult) DeepEqual(ano *ResourceServiceGetNodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNodeResult) Field0DeepEqual(src *cluster.GetNodeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetNodeResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteNodesArgs struct {
	Req *cluster.DeleteNodesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteNodesArgs() *ResourceServiceDeleteNodesArgs {
	return &ResourceServiceDeleteNodesArgs{}
}

var ResourceServiceDeleteNodesArgs_Req_DEFAULT *cluster.DeleteNodesRequest

func (p *ResourceServiceDeleteNodesArgs) GetReq() (v *cluster.DeleteNodesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteNodesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteNodesArgs) SetReq(val *cluster.DeleteNodesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteNodesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteNodesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteNodesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteNodesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewDeleteNodesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNodesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteNodesArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteNodesArgs) DeepEqual(ano *ResourceServiceDeleteNodesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteNodesArgs) Field1DeepEqual(src *cluster.DeleteNodesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteNodesResult struct {
	Success *cluster.DeleteNodesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteNodesResult() *ResourceServiceDeleteNodesResult {
	return &ResourceServiceDeleteNodesResult{}
}

var ResourceServiceDeleteNodesResult_Success_DEFAULT *cluster.DeleteNodesResponse

func (p *ResourceServiceDeleteNodesResult) GetSuccess() (v *cluster.DeleteNodesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteNodesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteNodesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteNodesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteNodesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteNodesResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.DeleteNodesResponse)
}
func (p *ResourceServiceDeleteNodesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteNodesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteNodesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteNodesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteNodesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteNodesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewDeleteNodesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNodesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNodesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteNodesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteNodesResult(%+v)", *p)
}

func (p *ResourceServiceDeleteNodesResult) DeepEqual(ano *ResourceServiceDeleteNodesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteNodesResult) Field0DeepEqual(src *cluster.DeleteNodesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteNodesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodeLabelsArgs struct {
	Req *cluster.ListNodeLabelsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNodeLabelsArgs() *ResourceServiceListNodeLabelsArgs {
	return &ResourceServiceListNodeLabelsArgs{}
}

var ResourceServiceListNodeLabelsArgs_Req_DEFAULT *cluster.ListNodeLabelsRequest

func (p *ResourceServiceListNodeLabelsArgs) GetReq() (v *cluster.ListNodeLabelsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNodeLabelsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNodeLabelsArgs) SetReq(val *cluster.ListNodeLabelsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNodeLabelsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNodeLabelsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNodeLabelsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodeLabelsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNodeLabelsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodeLabelsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeLabels_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodeLabelsArgs(%+v)", *p)
}

func (p *ResourceServiceListNodeLabelsArgs) DeepEqual(ano *ResourceServiceListNodeLabelsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodeLabelsArgs) Field1DeepEqual(src *cluster.ListNodeLabelsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodeLabelsResult struct {
	Success *cluster.ListNodeLabelsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNodeLabelsResult() *ResourceServiceListNodeLabelsResult {
	return &ResourceServiceListNodeLabelsResult{}
}

var ResourceServiceListNodeLabelsResult_Success_DEFAULT *cluster.ListNodeLabelsResponse

func (p *ResourceServiceListNodeLabelsResult) GetSuccess() (v *cluster.ListNodeLabelsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNodeLabelsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNodeLabelsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNodeLabelsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNodeLabelsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNodeLabelsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNodeLabelsResponse)
}
func (p *ResourceServiceListNodeLabelsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNodeLabelsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNodeLabelsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNodeLabelsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNodeLabelsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodeLabelsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNodeLabelsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodeLabelsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodeLabelsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeLabels_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodeLabelsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodeLabelsResult(%+v)", *p)
}

func (p *ResourceServiceListNodeLabelsResult) DeepEqual(ano *ResourceServiceListNodeLabelsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodeLabelsResult) Field0DeepEqual(src *cluster.ListNodeLabelsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNodeLabelsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNodeArgs struct {
	Req *cluster.UpdateNodeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateNodeArgs() *ResourceServiceUpdateNodeArgs {
	return &ResourceServiceUpdateNodeArgs{}
}

var ResourceServiceUpdateNodeArgs_Req_DEFAULT *cluster.UpdateNodeRequest

func (p *ResourceServiceUpdateNodeArgs) GetReq() (v *cluster.UpdateNodeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateNodeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateNodeArgs) SetReq(val *cluster.UpdateNodeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateNodeArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateNodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateNodeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNodeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpdateNodeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNodeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNode_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNodeArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateNodeArgs) DeepEqual(ano *ResourceServiceUpdateNodeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNodeArgs) Field1DeepEqual(src *cluster.UpdateNodeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNodeResult struct {
	Success *cluster.UpdateNodeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error               `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateNodeResult() *ResourceServiceUpdateNodeResult {
	return &ResourceServiceUpdateNodeResult{}
}

var ResourceServiceUpdateNodeResult_Success_DEFAULT *cluster.UpdateNodeResponse

func (p *ResourceServiceUpdateNodeResult) GetSuccess() (v *cluster.UpdateNodeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateNodeResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateNodeResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateNodeResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateNodeResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateNodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpdateNodeResponse)
}
func (p *ResourceServiceUpdateNodeResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateNodeResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateNodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateNodeResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateNodeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNodeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpdateNodeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNodeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNodeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNode_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNodeResult(%+v)", *p)
}

func (p *ResourceServiceUpdateNodeResult) DeepEqual(ano *ResourceServiceUpdateNodeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNodeResult) Field0DeepEqual(src *cluster.UpdateNodeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateNodeResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterAutoScalingRuleArgs struct {
	Req *cluster.GetClusterAutoScalingRuleRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetClusterAutoScalingRuleArgs() *ResourceServiceGetClusterAutoScalingRuleArgs {
	return &ResourceServiceGetClusterAutoScalingRuleArgs{}
}

var ResourceServiceGetClusterAutoScalingRuleArgs_Req_DEFAULT *cluster.GetClusterAutoScalingRuleRequest

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) GetReq() (v *cluster.GetClusterAutoScalingRuleRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetClusterAutoScalingRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetClusterAutoScalingRuleArgs) SetReq(val *cluster.GetClusterAutoScalingRuleRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetClusterAutoScalingRuleArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterAutoScalingRuleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetClusterAutoScalingRuleRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterAutoScalingRule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterAutoScalingRuleArgs(%+v)", *p)
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) DeepEqual(ano *ResourceServiceGetClusterAutoScalingRuleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterAutoScalingRuleArgs) Field1DeepEqual(src *cluster.GetClusterAutoScalingRuleRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetClusterAutoScalingRuleResult struct {
	Success *cluster.GetClusterAutoScalingRuleResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                              `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetClusterAutoScalingRuleResult() *ResourceServiceGetClusterAutoScalingRuleResult {
	return &ResourceServiceGetClusterAutoScalingRuleResult{}
}

var ResourceServiceGetClusterAutoScalingRuleResult_Success_DEFAULT *cluster.GetClusterAutoScalingRuleResponse

func (p *ResourceServiceGetClusterAutoScalingRuleResult) GetSuccess() (v *cluster.GetClusterAutoScalingRuleResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetClusterAutoScalingRuleResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetClusterAutoScalingRuleResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetClusterAutoScalingRuleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetClusterAutoScalingRuleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetClusterAutoScalingRuleResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetClusterAutoScalingRuleResponse)
}
func (p *ResourceServiceGetClusterAutoScalingRuleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetClusterAutoScalingRuleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetClusterAutoScalingRuleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetClusterAutoScalingRuleResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterAutoScalingRule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetClusterAutoScalingRuleResult(%+v)", *p)
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) DeepEqual(ano *ResourceServiceGetClusterAutoScalingRuleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetClusterAutoScalingRuleResult) Field0DeepEqual(src *cluster.GetClusterAutoScalingRuleResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetClusterAutoScalingRuleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateClusterAutoScalingRuleArgs struct {
	Req *cluster.UpdateClusterAutoScalingRuleRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateClusterAutoScalingRuleArgs() *ResourceServiceUpdateClusterAutoScalingRuleArgs {
	return &ResourceServiceUpdateClusterAutoScalingRuleArgs{}
}

var ResourceServiceUpdateClusterAutoScalingRuleArgs_Req_DEFAULT *cluster.UpdateClusterAutoScalingRuleRequest

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) GetReq() (v *cluster.UpdateClusterAutoScalingRuleRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateClusterAutoScalingRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) SetReq(val *cluster.UpdateClusterAutoScalingRuleRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateClusterAutoScalingRuleArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateClusterAutoScalingRuleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpdateClusterAutoScalingRuleRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateClusterAutoScalingRule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateClusterAutoScalingRuleArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) DeepEqual(ano *ResourceServiceUpdateClusterAutoScalingRuleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleArgs) Field1DeepEqual(src *cluster.UpdateClusterAutoScalingRuleRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateClusterAutoScalingRuleResult struct {
	Success *cluster.UpdateClusterAutoScalingRuleResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateClusterAutoScalingRuleResult() *ResourceServiceUpdateClusterAutoScalingRuleResult {
	return &ResourceServiceUpdateClusterAutoScalingRuleResult{}
}

var ResourceServiceUpdateClusterAutoScalingRuleResult_Success_DEFAULT *cluster.UpdateClusterAutoScalingRuleResponse

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) GetSuccess() (v *cluster.UpdateClusterAutoScalingRuleResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateClusterAutoScalingRuleResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateClusterAutoScalingRuleResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateClusterAutoScalingRuleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpdateClusterAutoScalingRuleResponse)
}
func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateClusterAutoScalingRuleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateClusterAutoScalingRuleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpdateClusterAutoScalingRuleResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateClusterAutoScalingRule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateClusterAutoScalingRuleResult(%+v)", *p)
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) DeepEqual(ano *ResourceServiceUpdateClusterAutoScalingRuleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) Field0DeepEqual(src *cluster.UpdateClusterAutoScalingRuleResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateClusterAutoScalingRuleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceScaleUpNodePoolArgs struct {
	Req *cluster.ScaleUpNodePoolRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceScaleUpNodePoolArgs() *ResourceServiceScaleUpNodePoolArgs {
	return &ResourceServiceScaleUpNodePoolArgs{}
}

var ResourceServiceScaleUpNodePoolArgs_Req_DEFAULT *cluster.ScaleUpNodePoolRequest

func (p *ResourceServiceScaleUpNodePoolArgs) GetReq() (v *cluster.ScaleUpNodePoolRequest) {
	if !p.IsSetReq() {
		return ResourceServiceScaleUpNodePoolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceScaleUpNodePoolArgs) SetReq(val *cluster.ScaleUpNodePoolRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceScaleUpNodePoolArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceScaleUpNodePoolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceScaleUpNodePoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceScaleUpNodePoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewScaleUpNodePoolRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceScaleUpNodePoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleUpNodePool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceScaleUpNodePoolArgs(%+v)", *p)
}

func (p *ResourceServiceScaleUpNodePoolArgs) DeepEqual(ano *ResourceServiceScaleUpNodePoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceScaleUpNodePoolArgs) Field1DeepEqual(src *cluster.ScaleUpNodePoolRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceScaleUpNodePoolResult struct {
	Success *cluster.ScaleUpNodePoolResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceScaleUpNodePoolResult() *ResourceServiceScaleUpNodePoolResult {
	return &ResourceServiceScaleUpNodePoolResult{}
}

var ResourceServiceScaleUpNodePoolResult_Success_DEFAULT *cluster.ScaleUpNodePoolResponse

func (p *ResourceServiceScaleUpNodePoolResult) GetSuccess() (v *cluster.ScaleUpNodePoolResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceScaleUpNodePoolResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceScaleUpNodePoolResult_Err_DEFAULT *common.Error

func (p *ResourceServiceScaleUpNodePoolResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceScaleUpNodePoolResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceScaleUpNodePoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ScaleUpNodePoolResponse)
}
func (p *ResourceServiceScaleUpNodePoolResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceScaleUpNodePoolResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceScaleUpNodePoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceScaleUpNodePoolResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceScaleUpNodePoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceScaleUpNodePoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewScaleUpNodePoolResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceScaleUpNodePoolResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceScaleUpNodePoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleUpNodePool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceScaleUpNodePoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceScaleUpNodePoolResult(%+v)", *p)
}

func (p *ResourceServiceScaleUpNodePoolResult) DeepEqual(ano *ResourceServiceScaleUpNodePoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceScaleUpNodePoolResult) Field0DeepEqual(src *cluster.ScaleUpNodePoolResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceScaleUpNodePoolResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceScaleDownNodePoolArgs struct {
	Req *cluster.ScaleDownNodePoolRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceScaleDownNodePoolArgs() *ResourceServiceScaleDownNodePoolArgs {
	return &ResourceServiceScaleDownNodePoolArgs{}
}

var ResourceServiceScaleDownNodePoolArgs_Req_DEFAULT *cluster.ScaleDownNodePoolRequest

func (p *ResourceServiceScaleDownNodePoolArgs) GetReq() (v *cluster.ScaleDownNodePoolRequest) {
	if !p.IsSetReq() {
		return ResourceServiceScaleDownNodePoolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceScaleDownNodePoolArgs) SetReq(val *cluster.ScaleDownNodePoolRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceScaleDownNodePoolArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceScaleDownNodePoolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceScaleDownNodePoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceScaleDownNodePoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewScaleDownNodePoolRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceScaleDownNodePoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleDownNodePool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceScaleDownNodePoolArgs(%+v)", *p)
}

func (p *ResourceServiceScaleDownNodePoolArgs) DeepEqual(ano *ResourceServiceScaleDownNodePoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceScaleDownNodePoolArgs) Field1DeepEqual(src *cluster.ScaleDownNodePoolRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceScaleDownNodePoolResult struct {
	Success *cluster.ScaleDownNodePoolResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                      `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceScaleDownNodePoolResult() *ResourceServiceScaleDownNodePoolResult {
	return &ResourceServiceScaleDownNodePoolResult{}
}

var ResourceServiceScaleDownNodePoolResult_Success_DEFAULT *cluster.ScaleDownNodePoolResponse

func (p *ResourceServiceScaleDownNodePoolResult) GetSuccess() (v *cluster.ScaleDownNodePoolResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceScaleDownNodePoolResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceScaleDownNodePoolResult_Err_DEFAULT *common.Error

func (p *ResourceServiceScaleDownNodePoolResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceScaleDownNodePoolResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceScaleDownNodePoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ScaleDownNodePoolResponse)
}
func (p *ResourceServiceScaleDownNodePoolResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceScaleDownNodePoolResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceScaleDownNodePoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceScaleDownNodePoolResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceScaleDownNodePoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceScaleDownNodePoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewScaleDownNodePoolResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceScaleDownNodePoolResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceScaleDownNodePoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScaleDownNodePool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceScaleDownNodePoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceScaleDownNodePoolResult(%+v)", *p)
}

func (p *ResourceServiceScaleDownNodePoolResult) DeepEqual(ano *ResourceServiceScaleDownNodePoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceScaleDownNodePoolResult) Field0DeepEqual(src *cluster.ScaleDownNodePoolResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceScaleDownNodePoolResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodePoolsArgs struct {
	Req *cluster.ListNodePoolsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNodePoolsArgs() *ResourceServiceListNodePoolsArgs {
	return &ResourceServiceListNodePoolsArgs{}
}

var ResourceServiceListNodePoolsArgs_Req_DEFAULT *cluster.ListNodePoolsRequest

func (p *ResourceServiceListNodePoolsArgs) GetReq() (v *cluster.ListNodePoolsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNodePoolsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNodePoolsArgs) SetReq(val *cluster.ListNodePoolsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNodePoolsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNodePoolsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNodePoolsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodePoolsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNodePoolsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePools_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodePoolsArgs(%+v)", *p)
}

func (p *ResourceServiceListNodePoolsArgs) DeepEqual(ano *ResourceServiceListNodePoolsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodePoolsArgs) Field1DeepEqual(src *cluster.ListNodePoolsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodePoolsResult struct {
	Success *cluster.ListNodePoolsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNodePoolsResult() *ResourceServiceListNodePoolsResult {
	return &ResourceServiceListNodePoolsResult{}
}

var ResourceServiceListNodePoolsResult_Success_DEFAULT *cluster.ListNodePoolsResponse

func (p *ResourceServiceListNodePoolsResult) GetSuccess() (v *cluster.ListNodePoolsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNodePoolsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNodePoolsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNodePoolsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNodePoolsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNodePoolsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNodePoolsResponse)
}
func (p *ResourceServiceListNodePoolsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNodePoolsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNodePoolsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNodePoolsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNodePoolsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodePoolsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNodePoolsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePools_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodePoolsResult(%+v)", *p)
}

func (p *ResourceServiceListNodePoolsResult) DeepEqual(ano *ResourceServiceListNodePoolsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodePoolsResult) Field0DeepEqual(src *cluster.ListNodePoolsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNodePoolsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateNodePoolArgs struct {
	Req *cluster.CreateNodePoolRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateNodePoolArgs() *ResourceServiceCreateNodePoolArgs {
	return &ResourceServiceCreateNodePoolArgs{}
}

var ResourceServiceCreateNodePoolArgs_Req_DEFAULT *cluster.CreateNodePoolRequest

func (p *ResourceServiceCreateNodePoolArgs) GetReq() (v *cluster.CreateNodePoolRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateNodePoolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateNodePoolArgs) SetReq(val *cluster.CreateNodePoolRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateNodePoolArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateNodePoolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateNodePoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateNodePoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewCreateNodePoolRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateNodePoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNodePool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateNodePoolArgs(%+v)", *p)
}

func (p *ResourceServiceCreateNodePoolArgs) DeepEqual(ano *ResourceServiceCreateNodePoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateNodePoolArgs) Field1DeepEqual(src *cluster.CreateNodePoolRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateNodePoolResult struct {
	Success *cluster.CreateNodePoolResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateNodePoolResult() *ResourceServiceCreateNodePoolResult {
	return &ResourceServiceCreateNodePoolResult{}
}

var ResourceServiceCreateNodePoolResult_Success_DEFAULT *cluster.CreateNodePoolResponse

func (p *ResourceServiceCreateNodePoolResult) GetSuccess() (v *cluster.CreateNodePoolResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateNodePoolResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateNodePoolResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateNodePoolResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateNodePoolResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateNodePoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.CreateNodePoolResponse)
}
func (p *ResourceServiceCreateNodePoolResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateNodePoolResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateNodePoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateNodePoolResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateNodePoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateNodePoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewCreateNodePoolResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateNodePoolResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateNodePoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNodePool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateNodePoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateNodePoolResult(%+v)", *p)
}

func (p *ResourceServiceCreateNodePoolResult) DeepEqual(ano *ResourceServiceCreateNodePoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateNodePoolResult) Field0DeepEqual(src *cluster.CreateNodePoolResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateNodePoolResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNodePoolArgs struct {
	Req *cluster.GetNodePoolRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetNodePoolArgs() *ResourceServiceGetNodePoolArgs {
	return &ResourceServiceGetNodePoolArgs{}
}

var ResourceServiceGetNodePoolArgs_Req_DEFAULT *cluster.GetNodePoolRequest

func (p *ResourceServiceGetNodePoolArgs) GetReq() (v *cluster.GetNodePoolRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetNodePoolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetNodePoolArgs) SetReq(val *cluster.GetNodePoolRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetNodePoolArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetNodePoolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetNodePoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNodePoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetNodePoolRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNodePoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodePool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNodePoolArgs(%+v)", *p)
}

func (p *ResourceServiceGetNodePoolArgs) DeepEqual(ano *ResourceServiceGetNodePoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNodePoolArgs) Field1DeepEqual(src *cluster.GetNodePoolRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNodePoolResult struct {
	Success *cluster.GetNodePoolResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetNodePoolResult() *ResourceServiceGetNodePoolResult {
	return &ResourceServiceGetNodePoolResult{}
}

var ResourceServiceGetNodePoolResult_Success_DEFAULT *cluster.GetNodePoolResponse

func (p *ResourceServiceGetNodePoolResult) GetSuccess() (v *cluster.GetNodePoolResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetNodePoolResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetNodePoolResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetNodePoolResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetNodePoolResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetNodePoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetNodePoolResponse)
}
func (p *ResourceServiceGetNodePoolResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetNodePoolResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetNodePoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetNodePoolResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetNodePoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNodePoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetNodePoolResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNodePoolResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNodePoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNodePool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNodePoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNodePoolResult(%+v)", *p)
}

func (p *ResourceServiceGetNodePoolResult) DeepEqual(ano *ResourceServiceGetNodePoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNodePoolResult) Field0DeepEqual(src *cluster.GetNodePoolResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetNodePoolResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNodePoolArgs struct {
	Req *cluster.UpdateNodePoolRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateNodePoolArgs() *ResourceServiceUpdateNodePoolArgs {
	return &ResourceServiceUpdateNodePoolArgs{}
}

var ResourceServiceUpdateNodePoolArgs_Req_DEFAULT *cluster.UpdateNodePoolRequest

func (p *ResourceServiceUpdateNodePoolArgs) GetReq() (v *cluster.UpdateNodePoolRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateNodePoolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateNodePoolArgs) SetReq(val *cluster.UpdateNodePoolRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateNodePoolArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateNodePoolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateNodePoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNodePoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpdateNodePoolRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNodePoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNodePool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNodePoolArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateNodePoolArgs) DeepEqual(ano *ResourceServiceUpdateNodePoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNodePoolArgs) Field1DeepEqual(src *cluster.UpdateNodePoolRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNodePoolResult struct {
	Success *cluster.UpdateNodePoolResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateNodePoolResult() *ResourceServiceUpdateNodePoolResult {
	return &ResourceServiceUpdateNodePoolResult{}
}

var ResourceServiceUpdateNodePoolResult_Success_DEFAULT *cluster.UpdateNodePoolResponse

func (p *ResourceServiceUpdateNodePoolResult) GetSuccess() (v *cluster.UpdateNodePoolResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateNodePoolResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateNodePoolResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateNodePoolResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateNodePoolResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateNodePoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpdateNodePoolResponse)
}
func (p *ResourceServiceUpdateNodePoolResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateNodePoolResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateNodePoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateNodePoolResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateNodePoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNodePoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpdateNodePoolResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNodePoolResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNodePoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNodePool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNodePoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNodePoolResult(%+v)", *p)
}

func (p *ResourceServiceUpdateNodePoolResult) DeepEqual(ano *ResourceServiceUpdateNodePoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNodePoolResult) Field0DeepEqual(src *cluster.UpdateNodePoolResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateNodePoolResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteNodePoolArgs struct {
	Req *cluster.DeleteNodePoolRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteNodePoolArgs() *ResourceServiceDeleteNodePoolArgs {
	return &ResourceServiceDeleteNodePoolArgs{}
}

var ResourceServiceDeleteNodePoolArgs_Req_DEFAULT *cluster.DeleteNodePoolRequest

func (p *ResourceServiceDeleteNodePoolArgs) GetReq() (v *cluster.DeleteNodePoolRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteNodePoolArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteNodePoolArgs) SetReq(val *cluster.DeleteNodePoolRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteNodePoolArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteNodePoolArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteNodePoolArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteNodePoolArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewDeleteNodePoolRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNodePoolArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodePool_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteNodePoolArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteNodePoolArgs) DeepEqual(ano *ResourceServiceDeleteNodePoolArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteNodePoolArgs) Field1DeepEqual(src *cluster.DeleteNodePoolRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteNodePoolResult struct {
	Success *cluster.DeleteNodePoolResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteNodePoolResult() *ResourceServiceDeleteNodePoolResult {
	return &ResourceServiceDeleteNodePoolResult{}
}

var ResourceServiceDeleteNodePoolResult_Success_DEFAULT *cluster.DeleteNodePoolResponse

func (p *ResourceServiceDeleteNodePoolResult) GetSuccess() (v *cluster.DeleteNodePoolResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteNodePoolResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteNodePoolResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteNodePoolResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteNodePoolResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteNodePoolResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.DeleteNodePoolResponse)
}
func (p *ResourceServiceDeleteNodePoolResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteNodePoolResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteNodePoolResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteNodePoolResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteNodePoolResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteNodePoolResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewDeleteNodePoolResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNodePoolResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNodePoolResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNodePool_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteNodePoolResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteNodePoolResult(%+v)", *p)
}

func (p *ResourceServiceDeleteNodePoolResult) DeepEqual(ano *ResourceServiceDeleteNodePoolResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteNodePoolResult) Field0DeepEqual(src *cluster.DeleteNodePoolResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteNodePoolResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodePoolScalingRecordsArgs struct {
	Req *cluster.ListNodePoolScalingRecordsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNodePoolScalingRecordsArgs() *ResourceServiceListNodePoolScalingRecordsArgs {
	return &ResourceServiceListNodePoolScalingRecordsArgs{}
}

var ResourceServiceListNodePoolScalingRecordsArgs_Req_DEFAULT *cluster.ListNodePoolScalingRecordsRequest

func (p *ResourceServiceListNodePoolScalingRecordsArgs) GetReq() (v *cluster.ListNodePoolScalingRecordsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNodePoolScalingRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNodePoolScalingRecordsArgs) SetReq(val *cluster.ListNodePoolScalingRecordsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNodePoolScalingRecordsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodePoolScalingRecordsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNodePoolScalingRecordsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolScalingRecords_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodePoolScalingRecordsArgs(%+v)", *p)
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) DeepEqual(ano *ResourceServiceListNodePoolScalingRecordsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodePoolScalingRecordsArgs) Field1DeepEqual(src *cluster.ListNodePoolScalingRecordsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodePoolScalingRecordsResult struct {
	Success *cluster.ListNodePoolScalingRecordsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                               `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNodePoolScalingRecordsResult() *ResourceServiceListNodePoolScalingRecordsResult {
	return &ResourceServiceListNodePoolScalingRecordsResult{}
}

var ResourceServiceListNodePoolScalingRecordsResult_Success_DEFAULT *cluster.ListNodePoolScalingRecordsResponse

func (p *ResourceServiceListNodePoolScalingRecordsResult) GetSuccess() (v *cluster.ListNodePoolScalingRecordsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNodePoolScalingRecordsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNodePoolScalingRecordsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNodePoolScalingRecordsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNodePoolScalingRecordsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNodePoolScalingRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNodePoolScalingRecordsResponse)
}
func (p *ResourceServiceListNodePoolScalingRecordsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNodePoolScalingRecordsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodePoolScalingRecordsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNodePoolScalingRecordsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolScalingRecords_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodePoolScalingRecordsResult(%+v)", *p)
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) DeepEqual(ano *ResourceServiceListNodePoolScalingRecordsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodePoolScalingRecordsResult) Field0DeepEqual(src *cluster.ListNodePoolScalingRecordsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNodePoolScalingRecordsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodePoolNodesArgs struct {
	Req *cluster.ListNodePoolNodesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNodePoolNodesArgs() *ResourceServiceListNodePoolNodesArgs {
	return &ResourceServiceListNodePoolNodesArgs{}
}

var ResourceServiceListNodePoolNodesArgs_Req_DEFAULT *cluster.ListNodePoolNodesRequest

func (p *ResourceServiceListNodePoolNodesArgs) GetReq() (v *cluster.ListNodePoolNodesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNodePoolNodesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNodePoolNodesArgs) SetReq(val *cluster.ListNodePoolNodesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNodePoolNodesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNodePoolNodesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNodePoolNodesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodePoolNodesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNodePoolNodesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolNodesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolNodes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodePoolNodesArgs(%+v)", *p)
}

func (p *ResourceServiceListNodePoolNodesArgs) DeepEqual(ano *ResourceServiceListNodePoolNodesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodePoolNodesArgs) Field1DeepEqual(src *cluster.ListNodePoolNodesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodePoolNodesResult struct {
	Success *cluster.ListNodePoolNodesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                      `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNodePoolNodesResult() *ResourceServiceListNodePoolNodesResult {
	return &ResourceServiceListNodePoolNodesResult{}
}

var ResourceServiceListNodePoolNodesResult_Success_DEFAULT *cluster.ListNodePoolNodesResponse

func (p *ResourceServiceListNodePoolNodesResult) GetSuccess() (v *cluster.ListNodePoolNodesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNodePoolNodesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNodePoolNodesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNodePoolNodesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNodePoolNodesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNodePoolNodesResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNodePoolNodesResponse)
}
func (p *ResourceServiceListNodePoolNodesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNodePoolNodesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNodePoolNodesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNodePoolNodesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNodePoolNodesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodePoolNodesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNodePoolNodesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolNodesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodePoolNodesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodePoolNodes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodePoolNodesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodePoolNodesResult(%+v)", *p)
}

func (p *ResourceServiceListNodePoolNodesResult) DeepEqual(ano *ResourceServiceListNodePoolNodesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodePoolNodesResult) Field0DeepEqual(src *cluster.ListNodePoolNodesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNodePoolNodesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNamespaceArgs struct {
	Req *cluster.ListNamespaceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNamespaceArgs() *ResourceServiceListNamespaceArgs {
	return &ResourceServiceListNamespaceArgs{}
}

var ResourceServiceListNamespaceArgs_Req_DEFAULT *cluster.ListNamespaceRequest

func (p *ResourceServiceListNamespaceArgs) GetReq() (v *cluster.ListNamespaceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNamespaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNamespaceArgs) SetReq(val *cluster.ListNamespaceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNamespaceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNamespaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNamespaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNamespaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNamespaceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNamespaceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNamespaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNamespace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNamespaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNamespaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNamespaceArgs(%+v)", *p)
}

func (p *ResourceServiceListNamespaceArgs) DeepEqual(ano *ResourceServiceListNamespaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNamespaceArgs) Field1DeepEqual(src *cluster.ListNamespaceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNamespaceResult struct {
	Success *cluster.ListNamespaceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNamespaceResult() *ResourceServiceListNamespaceResult {
	return &ResourceServiceListNamespaceResult{}
}

var ResourceServiceListNamespaceResult_Success_DEFAULT *cluster.ListNamespaceResponse

func (p *ResourceServiceListNamespaceResult) GetSuccess() (v *cluster.ListNamespaceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNamespaceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNamespaceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNamespaceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNamespaceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNamespaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNamespaceResponse)
}
func (p *ResourceServiceListNamespaceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNamespaceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNamespaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNamespaceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNamespaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNamespaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNamespaceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNamespaceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNamespaceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNamespaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNamespace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNamespaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNamespaceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNamespaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNamespaceResult(%+v)", *p)
}

func (p *ResourceServiceListNamespaceResult) DeepEqual(ano *ResourceServiceListNamespaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNamespaceResult) Field0DeepEqual(src *cluster.ListNamespaceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNamespaceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateNamespaceArgs struct {
	Req *cluster.CreateNamespaceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateNamespaceArgs() *ResourceServiceCreateNamespaceArgs {
	return &ResourceServiceCreateNamespaceArgs{}
}

var ResourceServiceCreateNamespaceArgs_Req_DEFAULT *cluster.CreateNamespaceRequest

func (p *ResourceServiceCreateNamespaceArgs) GetReq() (v *cluster.CreateNamespaceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateNamespaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateNamespaceArgs) SetReq(val *cluster.CreateNamespaceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateNamespaceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateNamespaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateNamespaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateNamespaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewCreateNamespaceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateNamespaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNamespace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateNamespaceArgs(%+v)", *p)
}

func (p *ResourceServiceCreateNamespaceArgs) DeepEqual(ano *ResourceServiceCreateNamespaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateNamespaceArgs) Field1DeepEqual(src *cluster.CreateNamespaceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateNamespaceResult struct {
	Success *cluster.CreateNamespaceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateNamespaceResult() *ResourceServiceCreateNamespaceResult {
	return &ResourceServiceCreateNamespaceResult{}
}

var ResourceServiceCreateNamespaceResult_Success_DEFAULT *cluster.CreateNamespaceResponse

func (p *ResourceServiceCreateNamespaceResult) GetSuccess() (v *cluster.CreateNamespaceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateNamespaceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateNamespaceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateNamespaceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateNamespaceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateNamespaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.CreateNamespaceResponse)
}
func (p *ResourceServiceCreateNamespaceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateNamespaceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateNamespaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateNamespaceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateNamespaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateNamespaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewCreateNamespaceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateNamespaceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateNamespaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateNamespace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateNamespaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateNamespaceResult(%+v)", *p)
}

func (p *ResourceServiceCreateNamespaceResult) DeepEqual(ano *ResourceServiceCreateNamespaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateNamespaceResult) Field0DeepEqual(src *cluster.CreateNamespaceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateNamespaceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNamespaceArgs struct {
	Req *cluster.GetNamespaceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetNamespaceArgs() *ResourceServiceGetNamespaceArgs {
	return &ResourceServiceGetNamespaceArgs{}
}

var ResourceServiceGetNamespaceArgs_Req_DEFAULT *cluster.GetNamespaceRequest

func (p *ResourceServiceGetNamespaceArgs) GetReq() (v *cluster.GetNamespaceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetNamespaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetNamespaceArgs) SetReq(val *cluster.GetNamespaceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetNamespaceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetNamespaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetNamespaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNamespaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetNamespaceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNamespaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNamespaceArgs(%+v)", *p)
}

func (p *ResourceServiceGetNamespaceArgs) DeepEqual(ano *ResourceServiceGetNamespaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNamespaceArgs) Field1DeepEqual(src *cluster.GetNamespaceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNamespaceResult struct {
	Success *cluster.GetNamespaceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetNamespaceResult() *ResourceServiceGetNamespaceResult {
	return &ResourceServiceGetNamespaceResult{}
}

var ResourceServiceGetNamespaceResult_Success_DEFAULT *cluster.GetNamespaceResponse

func (p *ResourceServiceGetNamespaceResult) GetSuccess() (v *cluster.GetNamespaceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetNamespaceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetNamespaceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetNamespaceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetNamespaceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetNamespaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetNamespaceResponse)
}
func (p *ResourceServiceGetNamespaceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetNamespaceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetNamespaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetNamespaceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetNamespaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNamespaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetNamespaceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNamespaceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNamespaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNamespaceResult(%+v)", *p)
}

func (p *ResourceServiceGetNamespaceResult) DeepEqual(ano *ResourceServiceGetNamespaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNamespaceResult) Field0DeepEqual(src *cluster.GetNamespaceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetNamespaceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNamespaceArgs struct {
	Req *cluster.UpdateNamespaceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateNamespaceArgs() *ResourceServiceUpdateNamespaceArgs {
	return &ResourceServiceUpdateNamespaceArgs{}
}

var ResourceServiceUpdateNamespaceArgs_Req_DEFAULT *cluster.UpdateNamespaceRequest

func (p *ResourceServiceUpdateNamespaceArgs) GetReq() (v *cluster.UpdateNamespaceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateNamespaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateNamespaceArgs) SetReq(val *cluster.UpdateNamespaceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateNamespaceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateNamespaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateNamespaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNamespaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpdateNamespaceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNamespaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNamespaceArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateNamespaceArgs) DeepEqual(ano *ResourceServiceUpdateNamespaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNamespaceArgs) Field1DeepEqual(src *cluster.UpdateNamespaceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNamespaceResult struct {
	Success *cluster.UpdateNamespaceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateNamespaceResult() *ResourceServiceUpdateNamespaceResult {
	return &ResourceServiceUpdateNamespaceResult{}
}

var ResourceServiceUpdateNamespaceResult_Success_DEFAULT *cluster.UpdateNamespaceResponse

func (p *ResourceServiceUpdateNamespaceResult) GetSuccess() (v *cluster.UpdateNamespaceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateNamespaceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateNamespaceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateNamespaceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateNamespaceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateNamespaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpdateNamespaceResponse)
}
func (p *ResourceServiceUpdateNamespaceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateNamespaceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateNamespaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateNamespaceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateNamespaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNamespaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpdateNamespaceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNamespaceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNamespaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNamespaceResult(%+v)", *p)
}

func (p *ResourceServiceUpdateNamespaceResult) DeepEqual(ano *ResourceServiceUpdateNamespaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNamespaceResult) Field0DeepEqual(src *cluster.UpdateNamespaceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateNamespaceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNamespaceResourceArgs struct {
	Req *cluster.UpdateNamespaceResourceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateNamespaceResourceArgs() *ResourceServiceUpdateNamespaceResourceArgs {
	return &ResourceServiceUpdateNamespaceResourceArgs{}
}

var ResourceServiceUpdateNamespaceResourceArgs_Req_DEFAULT *cluster.UpdateNamespaceResourceRequest

func (p *ResourceServiceUpdateNamespaceResourceArgs) GetReq() (v *cluster.UpdateNamespaceResourceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateNamespaceResourceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateNamespaceResourceArgs) SetReq(val *cluster.UpdateNamespaceResourceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateNamespaceResourceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNamespaceResourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewUpdateNamespaceResourceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespaceResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNamespaceResourceArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) DeepEqual(ano *ResourceServiceUpdateNamespaceResourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNamespaceResourceArgs) Field1DeepEqual(src *cluster.UpdateNamespaceResourceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateNamespaceResourceResult struct {
	Success *cluster.UpdateNamespaceResourceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                            `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateNamespaceResourceResult() *ResourceServiceUpdateNamespaceResourceResult {
	return &ResourceServiceUpdateNamespaceResourceResult{}
}

var ResourceServiceUpdateNamespaceResourceResult_Success_DEFAULT *cluster.UpdateNamespaceResourceResponse

func (p *ResourceServiceUpdateNamespaceResourceResult) GetSuccess() (v *cluster.UpdateNamespaceResourceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateNamespaceResourceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateNamespaceResourceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateNamespaceResourceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateNamespaceResourceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateNamespaceResourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.UpdateNamespaceResourceResponse)
}
func (p *ResourceServiceUpdateNamespaceResourceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateNamespaceResourceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateNamespaceResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateNamespaceResourceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateNamespaceResourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateNamespaceResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewUpdateNamespaceResourceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNamespaceResourceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateNamespaceResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateNamespaceResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateNamespaceResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateNamespaceResourceResult(%+v)", *p)
}

func (p *ResourceServiceUpdateNamespaceResourceResult) DeepEqual(ano *ResourceServiceUpdateNamespaceResourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateNamespaceResourceResult) Field0DeepEqual(src *cluster.UpdateNamespaceResourceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateNamespaceResourceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNamespaceResourceArgs struct {
	Req *cluster.GetNamespaceResourceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetNamespaceResourceArgs() *ResourceServiceGetNamespaceResourceArgs {
	return &ResourceServiceGetNamespaceResourceArgs{}
}

var ResourceServiceGetNamespaceResourceArgs_Req_DEFAULT *cluster.GetNamespaceResourceRequest

func (p *ResourceServiceGetNamespaceResourceArgs) GetReq() (v *cluster.GetNamespaceResourceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetNamespaceResourceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetNamespaceResourceArgs) SetReq(val *cluster.GetNamespaceResourceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetNamespaceResourceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetNamespaceResourceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetNamespaceResourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNamespaceResourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewGetNamespaceResourceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNamespaceResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespaceResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNamespaceResourceArgs(%+v)", *p)
}

func (p *ResourceServiceGetNamespaceResourceArgs) DeepEqual(ano *ResourceServiceGetNamespaceResourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNamespaceResourceArgs) Field1DeepEqual(src *cluster.GetNamespaceResourceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetNamespaceResourceResult struct {
	Success *cluster.GetNamespaceResourceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                         `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetNamespaceResourceResult() *ResourceServiceGetNamespaceResourceResult {
	return &ResourceServiceGetNamespaceResourceResult{}
}

var ResourceServiceGetNamespaceResourceResult_Success_DEFAULT *cluster.GetNamespaceResourceResponse

func (p *ResourceServiceGetNamespaceResourceResult) GetSuccess() (v *cluster.GetNamespaceResourceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetNamespaceResourceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetNamespaceResourceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetNamespaceResourceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetNamespaceResourceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetNamespaceResourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.GetNamespaceResourceResponse)
}
func (p *ResourceServiceGetNamespaceResourceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetNamespaceResourceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetNamespaceResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetNamespaceResourceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetNamespaceResourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetNamespaceResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewGetNamespaceResourceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNamespaceResourceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetNamespaceResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetNamespaceResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetNamespaceResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetNamespaceResourceResult(%+v)", *p)
}

func (p *ResourceServiceGetNamespaceResourceResult) DeepEqual(ano *ResourceServiceGetNamespaceResourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetNamespaceResourceResult) Field0DeepEqual(src *cluster.GetNamespaceResourceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetNamespaceResourceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteNamespaceArgs struct {
	Req *cluster.DeleteNamespaceRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteNamespaceArgs() *ResourceServiceDeleteNamespaceArgs {
	return &ResourceServiceDeleteNamespaceArgs{}
}

var ResourceServiceDeleteNamespaceArgs_Req_DEFAULT *cluster.DeleteNamespaceRequest

func (p *ResourceServiceDeleteNamespaceArgs) GetReq() (v *cluster.DeleteNamespaceRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteNamespaceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteNamespaceArgs) SetReq(val *cluster.DeleteNamespaceRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteNamespaceArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteNamespaceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteNamespaceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteNamespaceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewDeleteNamespaceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNamespaceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNamespace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteNamespaceArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteNamespaceArgs) DeepEqual(ano *ResourceServiceDeleteNamespaceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteNamespaceArgs) Field1DeepEqual(src *cluster.DeleteNamespaceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteNamespaceResult struct {
	Success *cluster.DeleteNamespaceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteNamespaceResult() *ResourceServiceDeleteNamespaceResult {
	return &ResourceServiceDeleteNamespaceResult{}
}

var ResourceServiceDeleteNamespaceResult_Success_DEFAULT *cluster.DeleteNamespaceResponse

func (p *ResourceServiceDeleteNamespaceResult) GetSuccess() (v *cluster.DeleteNamespaceResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteNamespaceResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteNamespaceResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteNamespaceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteNamespaceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteNamespaceResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.DeleteNamespaceResponse)
}
func (p *ResourceServiceDeleteNamespaceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteNamespaceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteNamespaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteNamespaceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteNamespaceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteNamespaceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewDeleteNamespaceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNamespaceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteNamespaceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteNamespace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteNamespaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteNamespaceResult(%+v)", *p)
}

func (p *ResourceServiceDeleteNamespaceResult) DeepEqual(ano *ResourceServiceDeleteNamespaceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteNamespaceResult) Field0DeepEqual(src *cluster.DeleteNamespaceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteNamespaceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListResourceQuotaArgs struct {
	Req *cluster.ListResourceQuotaRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListResourceQuotaArgs() *ResourceServiceListResourceQuotaArgs {
	return &ResourceServiceListResourceQuotaArgs{}
}

var ResourceServiceListResourceQuotaArgs_Req_DEFAULT *cluster.ListResourceQuotaRequest

func (p *ResourceServiceListResourceQuotaArgs) GetReq() (v *cluster.ListResourceQuotaRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListResourceQuotaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListResourceQuotaArgs) SetReq(val *cluster.ListResourceQuotaRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListResourceQuotaArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListResourceQuotaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListResourceQuotaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListResourceQuotaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListResourceQuotaRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListResourceQuotaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListResourceQuota_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListResourceQuotaArgs(%+v)", *p)
}

func (p *ResourceServiceListResourceQuotaArgs) DeepEqual(ano *ResourceServiceListResourceQuotaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListResourceQuotaArgs) Field1DeepEqual(src *cluster.ListResourceQuotaRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListResourceQuotaResult struct {
	Success *cluster.ListResourceQuotaResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                      `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListResourceQuotaResult() *ResourceServiceListResourceQuotaResult {
	return &ResourceServiceListResourceQuotaResult{}
}

var ResourceServiceListResourceQuotaResult_Success_DEFAULT *cluster.ListResourceQuotaResponse

func (p *ResourceServiceListResourceQuotaResult) GetSuccess() (v *cluster.ListResourceQuotaResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListResourceQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListResourceQuotaResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListResourceQuotaResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListResourceQuotaResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListResourceQuotaResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListResourceQuotaResponse)
}
func (p *ResourceServiceListResourceQuotaResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListResourceQuotaResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListResourceQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListResourceQuotaResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListResourceQuotaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListResourceQuotaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListResourceQuotaResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListResourceQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListResourceQuotaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListResourceQuota_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListResourceQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListResourceQuotaResult(%+v)", *p)
}

func (p *ResourceServiceListResourceQuotaResult) DeepEqual(ano *ResourceServiceListResourceQuotaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListResourceQuotaResult) Field0DeepEqual(src *cluster.ListResourceQuotaResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListResourceQuotaResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListIngressTypesArgs struct {
	Req *network.ListIngressTypeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListIngressTypesArgs() *ResourceServiceListIngressTypesArgs {
	return &ResourceServiceListIngressTypesArgs{}
}

var ResourceServiceListIngressTypesArgs_Req_DEFAULT *network.ListIngressTypeRequest

func (p *ResourceServiceListIngressTypesArgs) GetReq() (v *network.ListIngressTypeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListIngressTypesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListIngressTypesArgs) SetReq(val *network.ListIngressTypeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListIngressTypesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListIngressTypesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListIngressTypesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListIngressTypesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewListIngressTypeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListIngressTypesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListIngressTypes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListIngressTypesArgs(%+v)", *p)
}

func (p *ResourceServiceListIngressTypesArgs) DeepEqual(ano *ResourceServiceListIngressTypesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListIngressTypesArgs) Field1DeepEqual(src *network.ListIngressTypeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListIngressTypesResult struct {
	Success *network.ListIngressTypeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListIngressTypesResult() *ResourceServiceListIngressTypesResult {
	return &ResourceServiceListIngressTypesResult{}
}

var ResourceServiceListIngressTypesResult_Success_DEFAULT *network.ListIngressTypeResponse

func (p *ResourceServiceListIngressTypesResult) GetSuccess() (v *network.ListIngressTypeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListIngressTypesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListIngressTypesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListIngressTypesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListIngressTypesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListIngressTypesResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.ListIngressTypeResponse)
}
func (p *ResourceServiceListIngressTypesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListIngressTypesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListIngressTypesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListIngressTypesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListIngressTypesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListIngressTypesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewListIngressTypeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListIngressTypesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListIngressTypesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListIngressTypes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListIngressTypesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListIngressTypesResult(%+v)", *p)
}

func (p *ResourceServiceListIngressTypesResult) DeepEqual(ano *ResourceServiceListIngressTypesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListIngressTypesResult) Field0DeepEqual(src *network.ListIngressTypeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListIngressTypesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListIngressArgs struct {
	Req *network.ListIngressRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListIngressArgs() *ResourceServiceListIngressArgs {
	return &ResourceServiceListIngressArgs{}
}

var ResourceServiceListIngressArgs_Req_DEFAULT *network.ListIngressRequest

func (p *ResourceServiceListIngressArgs) GetReq() (v *network.ListIngressRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListIngressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListIngressArgs) SetReq(val *network.ListIngressRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListIngressArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListIngressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListIngressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListIngressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListIngressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewListIngressRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListIngressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListIngress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListIngressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListIngressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListIngressArgs(%+v)", *p)
}

func (p *ResourceServiceListIngressArgs) DeepEqual(ano *ResourceServiceListIngressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListIngressArgs) Field1DeepEqual(src *network.ListIngressRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListIngressResult struct {
	Success *network.ListIngressResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListIngressResult() *ResourceServiceListIngressResult {
	return &ResourceServiceListIngressResult{}
}

var ResourceServiceListIngressResult_Success_DEFAULT *network.ListIngressResponse

func (p *ResourceServiceListIngressResult) GetSuccess() (v *network.ListIngressResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListIngressResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListIngressResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListIngressResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListIngressResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListIngressResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.ListIngressResponse)
}
func (p *ResourceServiceListIngressResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListIngressResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListIngressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListIngressResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListIngressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListIngressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListIngressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewListIngressResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListIngressResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListIngressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListIngress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListIngressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListIngressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListIngressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListIngressResult(%+v)", *p)
}

func (p *ResourceServiceListIngressResult) DeepEqual(ano *ResourceServiceListIngressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListIngressResult) Field0DeepEqual(src *network.ListIngressResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListIngressResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateIngressArgs struct {
	Req *network.CreateIngressRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateIngressArgs() *ResourceServiceCreateIngressArgs {
	return &ResourceServiceCreateIngressArgs{}
}

var ResourceServiceCreateIngressArgs_Req_DEFAULT *network.CreateIngressRequest

func (p *ResourceServiceCreateIngressArgs) GetReq() (v *network.CreateIngressRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateIngressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateIngressArgs) SetReq(val *network.CreateIngressRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateIngressArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateIngressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateIngressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateIngressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateIngressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewCreateIngressRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateIngressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateIngress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateIngressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateIngressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateIngressArgs(%+v)", *p)
}

func (p *ResourceServiceCreateIngressArgs) DeepEqual(ano *ResourceServiceCreateIngressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateIngressArgs) Field1DeepEqual(src *network.CreateIngressRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateIngressResult struct {
	Success *network.CreateIngressResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateIngressResult() *ResourceServiceCreateIngressResult {
	return &ResourceServiceCreateIngressResult{}
}

var ResourceServiceCreateIngressResult_Success_DEFAULT *network.CreateIngressResponse

func (p *ResourceServiceCreateIngressResult) GetSuccess() (v *network.CreateIngressResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateIngressResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateIngressResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateIngressResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateIngressResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateIngressResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.CreateIngressResponse)
}
func (p *ResourceServiceCreateIngressResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateIngressResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateIngressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateIngressResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateIngressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateIngressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateIngressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewCreateIngressResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateIngressResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateIngressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateIngress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateIngressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateIngressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateIngressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateIngressResult(%+v)", *p)
}

func (p *ResourceServiceCreateIngressResult) DeepEqual(ano *ResourceServiceCreateIngressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateIngressResult) Field0DeepEqual(src *network.CreateIngressResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateIngressResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetIngressArgs struct {
	Req *network.GetIngressRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetIngressArgs() *ResourceServiceGetIngressArgs {
	return &ResourceServiceGetIngressArgs{}
}

var ResourceServiceGetIngressArgs_Req_DEFAULT *network.GetIngressRequest

func (p *ResourceServiceGetIngressArgs) GetReq() (v *network.GetIngressRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetIngressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetIngressArgs) SetReq(val *network.GetIngressRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetIngressArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetIngressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetIngressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetIngressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetIngressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewGetIngressRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetIngressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetIngress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetIngressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetIngressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetIngressArgs(%+v)", *p)
}

func (p *ResourceServiceGetIngressArgs) DeepEqual(ano *ResourceServiceGetIngressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetIngressArgs) Field1DeepEqual(src *network.GetIngressRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetIngressResult struct {
	Success *network.GetIngressResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error               `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetIngressResult() *ResourceServiceGetIngressResult {
	return &ResourceServiceGetIngressResult{}
}

var ResourceServiceGetIngressResult_Success_DEFAULT *network.GetIngressResponse

func (p *ResourceServiceGetIngressResult) GetSuccess() (v *network.GetIngressResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetIngressResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetIngressResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetIngressResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetIngressResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetIngressResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.GetIngressResponse)
}
func (p *ResourceServiceGetIngressResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetIngressResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetIngressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetIngressResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetIngressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetIngressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetIngressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewGetIngressResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetIngressResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetIngressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetIngress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetIngressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetIngressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetIngressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetIngressResult(%+v)", *p)
}

func (p *ResourceServiceGetIngressResult) DeepEqual(ano *ResourceServiceGetIngressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetIngressResult) Field0DeepEqual(src *network.GetIngressResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetIngressResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateIngressArgs struct {
	Req *network.UpdateIngressRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateIngressArgs() *ResourceServiceUpdateIngressArgs {
	return &ResourceServiceUpdateIngressArgs{}
}

var ResourceServiceUpdateIngressArgs_Req_DEFAULT *network.UpdateIngressRequest

func (p *ResourceServiceUpdateIngressArgs) GetReq() (v *network.UpdateIngressRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateIngressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateIngressArgs) SetReq(val *network.UpdateIngressRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateIngressArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateIngressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateIngressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateIngressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewUpdateIngressRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateIngressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateIngress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateIngressArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateIngressArgs) DeepEqual(ano *ResourceServiceUpdateIngressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateIngressArgs) Field1DeepEqual(src *network.UpdateIngressRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateIngressResult struct {
	Success *network.UpdateIngressResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateIngressResult() *ResourceServiceUpdateIngressResult {
	return &ResourceServiceUpdateIngressResult{}
}

var ResourceServiceUpdateIngressResult_Success_DEFAULT *network.UpdateIngressResponse

func (p *ResourceServiceUpdateIngressResult) GetSuccess() (v *network.UpdateIngressResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateIngressResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateIngressResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateIngressResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateIngressResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateIngressResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.UpdateIngressResponse)
}
func (p *ResourceServiceUpdateIngressResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateIngressResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateIngressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateIngressResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateIngressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateIngressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewUpdateIngressResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateIngressResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateIngressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateIngress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateIngressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateIngressResult(%+v)", *p)
}

func (p *ResourceServiceUpdateIngressResult) DeepEqual(ano *ResourceServiceUpdateIngressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateIngressResult) Field0DeepEqual(src *network.UpdateIngressResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateIngressResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteIngressArgs struct {
	Req *network.DeleteIngressRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteIngressArgs() *ResourceServiceDeleteIngressArgs {
	return &ResourceServiceDeleteIngressArgs{}
}

var ResourceServiceDeleteIngressArgs_Req_DEFAULT *network.DeleteIngressRequest

func (p *ResourceServiceDeleteIngressArgs) GetReq() (v *network.DeleteIngressRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteIngressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteIngressArgs) SetReq(val *network.DeleteIngressRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteIngressArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteIngressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteIngressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteIngressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewDeleteIngressRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteIngressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteIngress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteIngressArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteIngressArgs) DeepEqual(ano *ResourceServiceDeleteIngressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteIngressArgs) Field1DeepEqual(src *network.DeleteIngressRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteIngressResult struct {
	Success *network.DeleteIngressResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteIngressResult() *ResourceServiceDeleteIngressResult {
	return &ResourceServiceDeleteIngressResult{}
}

var ResourceServiceDeleteIngressResult_Success_DEFAULT *network.DeleteIngressResponse

func (p *ResourceServiceDeleteIngressResult) GetSuccess() (v *network.DeleteIngressResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteIngressResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteIngressResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteIngressResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteIngressResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteIngressResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.DeleteIngressResponse)
}
func (p *ResourceServiceDeleteIngressResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteIngressResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteIngressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteIngressResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteIngressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteIngressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewDeleteIngressResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteIngressResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteIngressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteIngress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteIngressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteIngressResult(%+v)", *p)
}

func (p *ResourceServiceDeleteIngressResult) DeepEqual(ano *ResourceServiceDeleteIngressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteIngressResult) Field0DeepEqual(src *network.DeleteIngressResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteIngressResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetSecretDomainsArgs struct {
	Req *network.GetSecretDomainsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetSecretDomainsArgs() *ResourceServiceGetSecretDomainsArgs {
	return &ResourceServiceGetSecretDomainsArgs{}
}

var ResourceServiceGetSecretDomainsArgs_Req_DEFAULT *network.GetSecretDomainsRequest

func (p *ResourceServiceGetSecretDomainsArgs) GetReq() (v *network.GetSecretDomainsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetSecretDomainsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetSecretDomainsArgs) SetReq(val *network.GetSecretDomainsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetSecretDomainsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetSecretDomainsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetSecretDomainsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetSecretDomainsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = network.NewGetSecretDomainsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetSecretDomainsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSecretDomains_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetSecretDomainsArgs(%+v)", *p)
}

func (p *ResourceServiceGetSecretDomainsArgs) DeepEqual(ano *ResourceServiceGetSecretDomainsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetSecretDomainsArgs) Field1DeepEqual(src *network.GetSecretDomainsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetSecretDomainsResult struct {
	Success *network.GetSecretDomainsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                     `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetSecretDomainsResult() *ResourceServiceGetSecretDomainsResult {
	return &ResourceServiceGetSecretDomainsResult{}
}

var ResourceServiceGetSecretDomainsResult_Success_DEFAULT *network.GetSecretDomainsResponse

func (p *ResourceServiceGetSecretDomainsResult) GetSuccess() (v *network.GetSecretDomainsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetSecretDomainsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetSecretDomainsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetSecretDomainsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetSecretDomainsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetSecretDomainsResult) SetSuccess(x interface{}) {
	p.Success = x.(*network.GetSecretDomainsResponse)
}
func (p *ResourceServiceGetSecretDomainsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetSecretDomainsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetSecretDomainsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetSecretDomainsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetSecretDomainsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetSecretDomainsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = network.NewGetSecretDomainsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetSecretDomainsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetSecretDomainsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSecretDomains_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetSecretDomainsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetSecretDomainsResult(%+v)", *p)
}

func (p *ResourceServiceGetSecretDomainsResult) DeepEqual(ano *ResourceServiceGetSecretDomainsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetSecretDomainsResult) Field0DeepEqual(src *network.GetSecretDomainsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetSecretDomainsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListStorageClassArgs struct {
	Req *storage.ListStorageClassRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListStorageClassArgs() *ResourceServiceListStorageClassArgs {
	return &ResourceServiceListStorageClassArgs{}
}

var ResourceServiceListStorageClassArgs_Req_DEFAULT *storage.ListStorageClassRequest

func (p *ResourceServiceListStorageClassArgs) GetReq() (v *storage.ListStorageClassRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListStorageClassArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListStorageClassArgs) SetReq(val *storage.ListStorageClassRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListStorageClassArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListStorageClassArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListStorageClassArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListStorageClassArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListStorageClassArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewListStorageClassRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListStorageClassArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListStorageClass_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListStorageClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListStorageClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListStorageClassArgs(%+v)", *p)
}

func (p *ResourceServiceListStorageClassArgs) DeepEqual(ano *ResourceServiceListStorageClassArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListStorageClassArgs) Field1DeepEqual(src *storage.ListStorageClassRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListStorageClassResult struct {
	Success *storage.ListStorageClassResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                     `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListStorageClassResult() *ResourceServiceListStorageClassResult {
	return &ResourceServiceListStorageClassResult{}
}

var ResourceServiceListStorageClassResult_Success_DEFAULT *storage.ListStorageClassResponse

func (p *ResourceServiceListStorageClassResult) GetSuccess() (v *storage.ListStorageClassResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListStorageClassResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListStorageClassResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListStorageClassResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListStorageClassResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListStorageClassResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.ListStorageClassResponse)
}
func (p *ResourceServiceListStorageClassResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListStorageClassResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListStorageClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListStorageClassResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListStorageClassResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListStorageClassResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListStorageClassResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewListStorageClassResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListStorageClassResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListStorageClassResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListStorageClass_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListStorageClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListStorageClassResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListStorageClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListStorageClassResult(%+v)", *p)
}

func (p *ResourceServiceListStorageClassResult) DeepEqual(ano *ResourceServiceListStorageClassResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListStorageClassResult) Field0DeepEqual(src *storage.ListStorageClassResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListStorageClassResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateStorageClassArgs struct {
	Req *storage.CreateStorageClassRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateStorageClassArgs() *ResourceServiceCreateStorageClassArgs {
	return &ResourceServiceCreateStorageClassArgs{}
}

var ResourceServiceCreateStorageClassArgs_Req_DEFAULT *storage.CreateStorageClassRequest

func (p *ResourceServiceCreateStorageClassArgs) GetReq() (v *storage.CreateStorageClassRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateStorageClassArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateStorageClassArgs) SetReq(val *storage.CreateStorageClassRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateStorageClassArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateStorageClassArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateStorageClassArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateStorageClassArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewCreateStorageClassRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateStorageClassArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateStorageClass_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateStorageClassArgs(%+v)", *p)
}

func (p *ResourceServiceCreateStorageClassArgs) DeepEqual(ano *ResourceServiceCreateStorageClassArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateStorageClassArgs) Field1DeepEqual(src *storage.CreateStorageClassRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateStorageClassResult struct {
	Success *storage.CreateStorageClassResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateStorageClassResult() *ResourceServiceCreateStorageClassResult {
	return &ResourceServiceCreateStorageClassResult{}
}

var ResourceServiceCreateStorageClassResult_Success_DEFAULT *storage.CreateStorageClassResponse

func (p *ResourceServiceCreateStorageClassResult) GetSuccess() (v *storage.CreateStorageClassResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateStorageClassResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateStorageClassResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateStorageClassResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateStorageClassResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateStorageClassResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.CreateStorageClassResponse)
}
func (p *ResourceServiceCreateStorageClassResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateStorageClassResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateStorageClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateStorageClassResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateStorageClassResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateStorageClassResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewCreateStorageClassResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateStorageClassResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateStorageClassResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateStorageClass_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateStorageClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateStorageClassResult(%+v)", *p)
}

func (p *ResourceServiceCreateStorageClassResult) DeepEqual(ano *ResourceServiceCreateStorageClassResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateStorageClassResult) Field0DeepEqual(src *storage.CreateStorageClassResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateStorageClassResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetStorageClassArgs struct {
	Req *storage.GetStorageClassRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetStorageClassArgs() *ResourceServiceGetStorageClassArgs {
	return &ResourceServiceGetStorageClassArgs{}
}

var ResourceServiceGetStorageClassArgs_Req_DEFAULT *storage.GetStorageClassRequest

func (p *ResourceServiceGetStorageClassArgs) GetReq() (v *storage.GetStorageClassRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetStorageClassArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetStorageClassArgs) SetReq(val *storage.GetStorageClassRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetStorageClassArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetStorageClassArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetStorageClassArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetStorageClassArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewGetStorageClassRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetStorageClassArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetStorageClass_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetStorageClassArgs(%+v)", *p)
}

func (p *ResourceServiceGetStorageClassArgs) DeepEqual(ano *ResourceServiceGetStorageClassArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetStorageClassArgs) Field1DeepEqual(src *storage.GetStorageClassRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetStorageClassResult struct {
	Success *storage.GetStorageClassResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetStorageClassResult() *ResourceServiceGetStorageClassResult {
	return &ResourceServiceGetStorageClassResult{}
}

var ResourceServiceGetStorageClassResult_Success_DEFAULT *storage.GetStorageClassResponse

func (p *ResourceServiceGetStorageClassResult) GetSuccess() (v *storage.GetStorageClassResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetStorageClassResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetStorageClassResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetStorageClassResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetStorageClassResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetStorageClassResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.GetStorageClassResponse)
}
func (p *ResourceServiceGetStorageClassResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetStorageClassResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetStorageClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetStorageClassResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetStorageClassResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetStorageClassResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewGetStorageClassResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetStorageClassResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetStorageClassResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetStorageClass_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetStorageClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetStorageClassResult(%+v)", *p)
}

func (p *ResourceServiceGetStorageClassResult) DeepEqual(ano *ResourceServiceGetStorageClassResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetStorageClassResult) Field0DeepEqual(src *storage.GetStorageClassResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetStorageClassResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteStorageClassArgs struct {
	Req *storage.DeleteStorageClassRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteStorageClassArgs() *ResourceServiceDeleteStorageClassArgs {
	return &ResourceServiceDeleteStorageClassArgs{}
}

var ResourceServiceDeleteStorageClassArgs_Req_DEFAULT *storage.DeleteStorageClassRequest

func (p *ResourceServiceDeleteStorageClassArgs) GetReq() (v *storage.DeleteStorageClassRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteStorageClassArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteStorageClassArgs) SetReq(val *storage.DeleteStorageClassRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteStorageClassArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteStorageClassArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteStorageClassArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteStorageClassArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewDeleteStorageClassRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteStorageClassArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteStorageClass_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteStorageClassArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteStorageClassArgs) DeepEqual(ano *ResourceServiceDeleteStorageClassArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteStorageClassArgs) Field1DeepEqual(src *storage.DeleteStorageClassRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteStorageClassResult struct {
	Success *storage.DeleteStorageClassResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteStorageClassResult() *ResourceServiceDeleteStorageClassResult {
	return &ResourceServiceDeleteStorageClassResult{}
}

var ResourceServiceDeleteStorageClassResult_Success_DEFAULT *storage.DeleteStorageClassResponse

func (p *ResourceServiceDeleteStorageClassResult) GetSuccess() (v *storage.DeleteStorageClassResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteStorageClassResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteStorageClassResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteStorageClassResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteStorageClassResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteStorageClassResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.DeleteStorageClassResponse)
}
func (p *ResourceServiceDeleteStorageClassResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteStorageClassResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteStorageClassResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteStorageClassResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteStorageClassResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteStorageClassResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewDeleteStorageClassResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteStorageClassResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteStorageClassResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteStorageClass_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteStorageClassResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteStorageClassResult(%+v)", *p)
}

func (p *ResourceServiceDeleteStorageClassResult) DeepEqual(ano *ResourceServiceDeleteStorageClassResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteStorageClassResult) Field0DeepEqual(src *storage.DeleteStorageClassResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteStorageClassResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListPersistentVolumeArgs struct {
	Req *storage.ListPersistentVolumeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListPersistentVolumeArgs() *ResourceServiceListPersistentVolumeArgs {
	return &ResourceServiceListPersistentVolumeArgs{}
}

var ResourceServiceListPersistentVolumeArgs_Req_DEFAULT *storage.ListPersistentVolumeRequest

func (p *ResourceServiceListPersistentVolumeArgs) GetReq() (v *storage.ListPersistentVolumeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListPersistentVolumeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListPersistentVolumeArgs) SetReq(val *storage.ListPersistentVolumeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListPersistentVolumeArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListPersistentVolumeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListPersistentVolumeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListPersistentVolumeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewListPersistentVolumeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListPersistentVolumeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersistentVolume_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListPersistentVolumeArgs(%+v)", *p)
}

func (p *ResourceServiceListPersistentVolumeArgs) DeepEqual(ano *ResourceServiceListPersistentVolumeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListPersistentVolumeArgs) Field1DeepEqual(src *storage.ListPersistentVolumeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListPersistentVolumeResult struct {
	Success *storage.ListPersistentVolumeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                         `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListPersistentVolumeResult() *ResourceServiceListPersistentVolumeResult {
	return &ResourceServiceListPersistentVolumeResult{}
}

var ResourceServiceListPersistentVolumeResult_Success_DEFAULT *storage.ListPersistentVolumeResponse

func (p *ResourceServiceListPersistentVolumeResult) GetSuccess() (v *storage.ListPersistentVolumeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListPersistentVolumeResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListPersistentVolumeResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListPersistentVolumeResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListPersistentVolumeResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListPersistentVolumeResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.ListPersistentVolumeResponse)
}
func (p *ResourceServiceListPersistentVolumeResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListPersistentVolumeResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListPersistentVolumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListPersistentVolumeResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListPersistentVolumeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListPersistentVolumeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewListPersistentVolumeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListPersistentVolumeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListPersistentVolumeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersistentVolume_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListPersistentVolumeResult(%+v)", *p)
}

func (p *ResourceServiceListPersistentVolumeResult) DeepEqual(ano *ResourceServiceListPersistentVolumeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListPersistentVolumeResult) Field0DeepEqual(src *storage.ListPersistentVolumeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListPersistentVolumeResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreatePersistentVolumeArgs struct {
	Req *storage.CreatePersistentVolumeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreatePersistentVolumeArgs() *ResourceServiceCreatePersistentVolumeArgs {
	return &ResourceServiceCreatePersistentVolumeArgs{}
}

var ResourceServiceCreatePersistentVolumeArgs_Req_DEFAULT *storage.CreatePersistentVolumeRequest

func (p *ResourceServiceCreatePersistentVolumeArgs) GetReq() (v *storage.CreatePersistentVolumeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreatePersistentVolumeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreatePersistentVolumeArgs) SetReq(val *storage.CreatePersistentVolumeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreatePersistentVolumeArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreatePersistentVolumeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreatePersistentVolumeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreatePersistentVolumeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewCreatePersistentVolumeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreatePersistentVolumeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersistentVolume_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreatePersistentVolumeArgs(%+v)", *p)
}

func (p *ResourceServiceCreatePersistentVolumeArgs) DeepEqual(ano *ResourceServiceCreatePersistentVolumeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreatePersistentVolumeArgs) Field1DeepEqual(src *storage.CreatePersistentVolumeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreatePersistentVolumeResult struct {
	Success *storage.CreatePersistentVolumeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                           `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreatePersistentVolumeResult() *ResourceServiceCreatePersistentVolumeResult {
	return &ResourceServiceCreatePersistentVolumeResult{}
}

var ResourceServiceCreatePersistentVolumeResult_Success_DEFAULT *storage.CreatePersistentVolumeResponse

func (p *ResourceServiceCreatePersistentVolumeResult) GetSuccess() (v *storage.CreatePersistentVolumeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreatePersistentVolumeResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreatePersistentVolumeResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreatePersistentVolumeResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreatePersistentVolumeResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreatePersistentVolumeResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.CreatePersistentVolumeResponse)
}
func (p *ResourceServiceCreatePersistentVolumeResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreatePersistentVolumeResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreatePersistentVolumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreatePersistentVolumeResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreatePersistentVolumeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreatePersistentVolumeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewCreatePersistentVolumeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreatePersistentVolumeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreatePersistentVolumeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersistentVolume_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreatePersistentVolumeResult(%+v)", *p)
}

func (p *ResourceServiceCreatePersistentVolumeResult) DeepEqual(ano *ResourceServiceCreatePersistentVolumeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreatePersistentVolumeResult) Field0DeepEqual(src *storage.CreatePersistentVolumeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreatePersistentVolumeResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetPersistentVolumeArgs struct {
	Req *storage.GetPersistentVolumeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetPersistentVolumeArgs() *ResourceServiceGetPersistentVolumeArgs {
	return &ResourceServiceGetPersistentVolumeArgs{}
}

var ResourceServiceGetPersistentVolumeArgs_Req_DEFAULT *storage.GetPersistentVolumeRequest

func (p *ResourceServiceGetPersistentVolumeArgs) GetReq() (v *storage.GetPersistentVolumeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetPersistentVolumeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetPersistentVolumeArgs) SetReq(val *storage.GetPersistentVolumeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetPersistentVolumeArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetPersistentVolumeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetPersistentVolumeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetPersistentVolumeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewGetPersistentVolumeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetPersistentVolumeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersistentVolume_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetPersistentVolumeArgs(%+v)", *p)
}

func (p *ResourceServiceGetPersistentVolumeArgs) DeepEqual(ano *ResourceServiceGetPersistentVolumeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetPersistentVolumeArgs) Field1DeepEqual(src *storage.GetPersistentVolumeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetPersistentVolumeResult struct {
	Success *storage.GetPersistentVolumeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                        `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetPersistentVolumeResult() *ResourceServiceGetPersistentVolumeResult {
	return &ResourceServiceGetPersistentVolumeResult{}
}

var ResourceServiceGetPersistentVolumeResult_Success_DEFAULT *storage.GetPersistentVolumeResponse

func (p *ResourceServiceGetPersistentVolumeResult) GetSuccess() (v *storage.GetPersistentVolumeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetPersistentVolumeResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetPersistentVolumeResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetPersistentVolumeResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetPersistentVolumeResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetPersistentVolumeResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.GetPersistentVolumeResponse)
}
func (p *ResourceServiceGetPersistentVolumeResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetPersistentVolumeResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetPersistentVolumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetPersistentVolumeResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetPersistentVolumeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetPersistentVolumeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewGetPersistentVolumeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetPersistentVolumeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetPersistentVolumeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersistentVolume_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetPersistentVolumeResult(%+v)", *p)
}

func (p *ResourceServiceGetPersistentVolumeResult) DeepEqual(ano *ResourceServiceGetPersistentVolumeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetPersistentVolumeResult) Field0DeepEqual(src *storage.GetPersistentVolumeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetPersistentVolumeResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeletePersistentVolumeArgs struct {
	Req *storage.DeletePersistentVolumeRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeletePersistentVolumeArgs() *ResourceServiceDeletePersistentVolumeArgs {
	return &ResourceServiceDeletePersistentVolumeArgs{}
}

var ResourceServiceDeletePersistentVolumeArgs_Req_DEFAULT *storage.DeletePersistentVolumeRequest

func (p *ResourceServiceDeletePersistentVolumeArgs) GetReq() (v *storage.DeletePersistentVolumeRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeletePersistentVolumeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeletePersistentVolumeArgs) SetReq(val *storage.DeletePersistentVolumeRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeletePersistentVolumeArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeletePersistentVolumeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeletePersistentVolumeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeletePersistentVolumeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewDeletePersistentVolumeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeletePersistentVolumeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersistentVolume_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeletePersistentVolumeArgs(%+v)", *p)
}

func (p *ResourceServiceDeletePersistentVolumeArgs) DeepEqual(ano *ResourceServiceDeletePersistentVolumeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeletePersistentVolumeArgs) Field1DeepEqual(src *storage.DeletePersistentVolumeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeletePersistentVolumeResult struct {
	Success *storage.DeletePersistentVolumeResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                           `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeletePersistentVolumeResult() *ResourceServiceDeletePersistentVolumeResult {
	return &ResourceServiceDeletePersistentVolumeResult{}
}

var ResourceServiceDeletePersistentVolumeResult_Success_DEFAULT *storage.DeletePersistentVolumeResponse

func (p *ResourceServiceDeletePersistentVolumeResult) GetSuccess() (v *storage.DeletePersistentVolumeResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeletePersistentVolumeResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeletePersistentVolumeResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeletePersistentVolumeResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeletePersistentVolumeResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeletePersistentVolumeResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.DeletePersistentVolumeResponse)
}
func (p *ResourceServiceDeletePersistentVolumeResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeletePersistentVolumeResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeletePersistentVolumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeletePersistentVolumeResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeletePersistentVolumeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeletePersistentVolumeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewDeletePersistentVolumeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeletePersistentVolumeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeletePersistentVolumeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersistentVolume_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeletePersistentVolumeResult(%+v)", *p)
}

func (p *ResourceServiceDeletePersistentVolumeResult) DeepEqual(ano *ResourceServiceDeletePersistentVolumeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeletePersistentVolumeResult) Field0DeepEqual(src *storage.DeletePersistentVolumeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeletePersistentVolumeResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListPersistentVolumeClaimArgs struct {
	Req *storage.ListPersistentVolumeClaimRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListPersistentVolumeClaimArgs() *ResourceServiceListPersistentVolumeClaimArgs {
	return &ResourceServiceListPersistentVolumeClaimArgs{}
}

var ResourceServiceListPersistentVolumeClaimArgs_Req_DEFAULT *storage.ListPersistentVolumeClaimRequest

func (p *ResourceServiceListPersistentVolumeClaimArgs) GetReq() (v *storage.ListPersistentVolumeClaimRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListPersistentVolumeClaimArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListPersistentVolumeClaimArgs) SetReq(val *storage.ListPersistentVolumeClaimRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListPersistentVolumeClaimArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListPersistentVolumeClaimArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewListPersistentVolumeClaimRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersistentVolumeClaim_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListPersistentVolumeClaimArgs(%+v)", *p)
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) DeepEqual(ano *ResourceServiceListPersistentVolumeClaimArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListPersistentVolumeClaimArgs) Field1DeepEqual(src *storage.ListPersistentVolumeClaimRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListPersistentVolumeClaimResult struct {
	Success *storage.ListPersistentVolumeClaimResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                              `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListPersistentVolumeClaimResult() *ResourceServiceListPersistentVolumeClaimResult {
	return &ResourceServiceListPersistentVolumeClaimResult{}
}

var ResourceServiceListPersistentVolumeClaimResult_Success_DEFAULT *storage.ListPersistentVolumeClaimResponse

func (p *ResourceServiceListPersistentVolumeClaimResult) GetSuccess() (v *storage.ListPersistentVolumeClaimResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListPersistentVolumeClaimResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListPersistentVolumeClaimResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListPersistentVolumeClaimResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListPersistentVolumeClaimResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListPersistentVolumeClaimResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.ListPersistentVolumeClaimResponse)
}
func (p *ResourceServiceListPersistentVolumeClaimResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListPersistentVolumeClaimResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListPersistentVolumeClaimResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListPersistentVolumeClaimResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListPersistentVolumeClaimResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListPersistentVolumeClaimResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewListPersistentVolumeClaimResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListPersistentVolumeClaimResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListPersistentVolumeClaimResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPersistentVolumeClaim_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListPersistentVolumeClaimResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListPersistentVolumeClaimResult(%+v)", *p)
}

func (p *ResourceServiceListPersistentVolumeClaimResult) DeepEqual(ano *ResourceServiceListPersistentVolumeClaimResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListPersistentVolumeClaimResult) Field0DeepEqual(src *storage.ListPersistentVolumeClaimResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListPersistentVolumeClaimResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreatePersistentVolumeClaimArgs struct {
	Req *storage.CreatePersistentVolumeClaimRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreatePersistentVolumeClaimArgs() *ResourceServiceCreatePersistentVolumeClaimArgs {
	return &ResourceServiceCreatePersistentVolumeClaimArgs{}
}

var ResourceServiceCreatePersistentVolumeClaimArgs_Req_DEFAULT *storage.CreatePersistentVolumeClaimRequest

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) GetReq() (v *storage.CreatePersistentVolumeClaimRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreatePersistentVolumeClaimArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreatePersistentVolumeClaimArgs) SetReq(val *storage.CreatePersistentVolumeClaimRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreatePersistentVolumeClaimArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreatePersistentVolumeClaimArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewCreatePersistentVolumeClaimRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersistentVolumeClaim_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreatePersistentVolumeClaimArgs(%+v)", *p)
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) DeepEqual(ano *ResourceServiceCreatePersistentVolumeClaimArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreatePersistentVolumeClaimArgs) Field1DeepEqual(src *storage.CreatePersistentVolumeClaimRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreatePersistentVolumeClaimResult struct {
	Success *storage.CreatePersistentVolumeClaimResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreatePersistentVolumeClaimResult() *ResourceServiceCreatePersistentVolumeClaimResult {
	return &ResourceServiceCreatePersistentVolumeClaimResult{}
}

var ResourceServiceCreatePersistentVolumeClaimResult_Success_DEFAULT *storage.CreatePersistentVolumeClaimResponse

func (p *ResourceServiceCreatePersistentVolumeClaimResult) GetSuccess() (v *storage.CreatePersistentVolumeClaimResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreatePersistentVolumeClaimResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreatePersistentVolumeClaimResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreatePersistentVolumeClaimResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreatePersistentVolumeClaimResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreatePersistentVolumeClaimResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.CreatePersistentVolumeClaimResponse)
}
func (p *ResourceServiceCreatePersistentVolumeClaimResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreatePersistentVolumeClaimResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreatePersistentVolumeClaimResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewCreatePersistentVolumeClaimResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePersistentVolumeClaim_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreatePersistentVolumeClaimResult(%+v)", *p)
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) DeepEqual(ano *ResourceServiceCreatePersistentVolumeClaimResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreatePersistentVolumeClaimResult) Field0DeepEqual(src *storage.CreatePersistentVolumeClaimResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreatePersistentVolumeClaimResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetPersistentVolumeClaimArgs struct {
	Req *storage.GetPersistentVolumeClaimRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetPersistentVolumeClaimArgs() *ResourceServiceGetPersistentVolumeClaimArgs {
	return &ResourceServiceGetPersistentVolumeClaimArgs{}
}

var ResourceServiceGetPersistentVolumeClaimArgs_Req_DEFAULT *storage.GetPersistentVolumeClaimRequest

func (p *ResourceServiceGetPersistentVolumeClaimArgs) GetReq() (v *storage.GetPersistentVolumeClaimRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetPersistentVolumeClaimArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetPersistentVolumeClaimArgs) SetReq(val *storage.GetPersistentVolumeClaimRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetPersistentVolumeClaimArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetPersistentVolumeClaimArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewGetPersistentVolumeClaimRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersistentVolumeClaim_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetPersistentVolumeClaimArgs(%+v)", *p)
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) DeepEqual(ano *ResourceServiceGetPersistentVolumeClaimArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetPersistentVolumeClaimArgs) Field1DeepEqual(src *storage.GetPersistentVolumeClaimRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetPersistentVolumeClaimResult struct {
	Success *storage.GetPersistentVolumeClaimResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                             `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetPersistentVolumeClaimResult() *ResourceServiceGetPersistentVolumeClaimResult {
	return &ResourceServiceGetPersistentVolumeClaimResult{}
}

var ResourceServiceGetPersistentVolumeClaimResult_Success_DEFAULT *storage.GetPersistentVolumeClaimResponse

func (p *ResourceServiceGetPersistentVolumeClaimResult) GetSuccess() (v *storage.GetPersistentVolumeClaimResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetPersistentVolumeClaimResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetPersistentVolumeClaimResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetPersistentVolumeClaimResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetPersistentVolumeClaimResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetPersistentVolumeClaimResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.GetPersistentVolumeClaimResponse)
}
func (p *ResourceServiceGetPersistentVolumeClaimResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetPersistentVolumeClaimResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetPersistentVolumeClaimResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewGetPersistentVolumeClaimResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPersistentVolumeClaim_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetPersistentVolumeClaimResult(%+v)", *p)
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) DeepEqual(ano *ResourceServiceGetPersistentVolumeClaimResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetPersistentVolumeClaimResult) Field0DeepEqual(src *storage.GetPersistentVolumeClaimResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetPersistentVolumeClaimResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeletePersistentVolumeClaimArgs struct {
	Req *storage.DeletePersistentVolumeClaimRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeletePersistentVolumeClaimArgs() *ResourceServiceDeletePersistentVolumeClaimArgs {
	return &ResourceServiceDeletePersistentVolumeClaimArgs{}
}

var ResourceServiceDeletePersistentVolumeClaimArgs_Req_DEFAULT *storage.DeletePersistentVolumeClaimRequest

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) GetReq() (v *storage.DeletePersistentVolumeClaimRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeletePersistentVolumeClaimArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeletePersistentVolumeClaimArgs) SetReq(val *storage.DeletePersistentVolumeClaimRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeletePersistentVolumeClaimArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeletePersistentVolumeClaimArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewDeletePersistentVolumeClaimRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersistentVolumeClaim_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeletePersistentVolumeClaimArgs(%+v)", *p)
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) DeepEqual(ano *ResourceServiceDeletePersistentVolumeClaimArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeletePersistentVolumeClaimArgs) Field1DeepEqual(src *storage.DeletePersistentVolumeClaimRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeletePersistentVolumeClaimResult struct {
	Success *storage.DeletePersistentVolumeClaimResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeletePersistentVolumeClaimResult() *ResourceServiceDeletePersistentVolumeClaimResult {
	return &ResourceServiceDeletePersistentVolumeClaimResult{}
}

var ResourceServiceDeletePersistentVolumeClaimResult_Success_DEFAULT *storage.DeletePersistentVolumeClaimResponse

func (p *ResourceServiceDeletePersistentVolumeClaimResult) GetSuccess() (v *storage.DeletePersistentVolumeClaimResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeletePersistentVolumeClaimResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeletePersistentVolumeClaimResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeletePersistentVolumeClaimResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeletePersistentVolumeClaimResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeletePersistentVolumeClaimResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.DeletePersistentVolumeClaimResponse)
}
func (p *ResourceServiceDeletePersistentVolumeClaimResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeletePersistentVolumeClaimResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeletePersistentVolumeClaimResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewDeletePersistentVolumeClaimResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePersistentVolumeClaim_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeletePersistentVolumeClaimResult(%+v)", *p)
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) DeepEqual(ano *ResourceServiceDeletePersistentVolumeClaimResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeletePersistentVolumeClaimResult) Field0DeepEqual(src *storage.DeletePersistentVolumeClaimResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeletePersistentVolumeClaimResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListCephClusterArgs struct {
	Req *storage.ListCephClusterRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListCephClusterArgs() *ResourceServiceListCephClusterArgs {
	return &ResourceServiceListCephClusterArgs{}
}

var ResourceServiceListCephClusterArgs_Req_DEFAULT *storage.ListCephClusterRequest

func (p *ResourceServiceListCephClusterArgs) GetReq() (v *storage.ListCephClusterRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListCephClusterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListCephClusterArgs) SetReq(val *storage.ListCephClusterRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListCephClusterArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListCephClusterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListCephClusterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListCephClusterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListCephClusterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = storage.NewListCephClusterRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListCephClusterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCephCluster_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListCephClusterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListCephClusterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListCephClusterArgs(%+v)", *p)
}

func (p *ResourceServiceListCephClusterArgs) DeepEqual(ano *ResourceServiceListCephClusterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListCephClusterArgs) Field1DeepEqual(src *storage.ListCephClusterRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListCephClusterResult struct {
	Success *storage.ListCephClusterResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                    `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListCephClusterResult() *ResourceServiceListCephClusterResult {
	return &ResourceServiceListCephClusterResult{}
}

var ResourceServiceListCephClusterResult_Success_DEFAULT *storage.ListCephClusterResponse

func (p *ResourceServiceListCephClusterResult) GetSuccess() (v *storage.ListCephClusterResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListCephClusterResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListCephClusterResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListCephClusterResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListCephClusterResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListCephClusterResult) SetSuccess(x interface{}) {
	p.Success = x.(*storage.ListCephClusterResponse)
}
func (p *ResourceServiceListCephClusterResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListCephClusterResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListCephClusterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListCephClusterResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListCephClusterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListCephClusterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListCephClusterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = storage.NewListCephClusterResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListCephClusterResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListCephClusterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCephCluster_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListCephClusterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListCephClusterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListCephClusterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListCephClusterResult(%+v)", *p)
}

func (p *ResourceServiceListCephClusterResult) DeepEqual(ano *ResourceServiceListCephClusterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListCephClusterResult) Field0DeepEqual(src *storage.ListCephClusterResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListCephClusterResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListEventArgs struct {
	Req *event.ListEventRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListEventArgs() *ResourceServiceListEventArgs {
	return &ResourceServiceListEventArgs{}
}

var ResourceServiceListEventArgs_Req_DEFAULT *event.ListEventRequest

func (p *ResourceServiceListEventArgs) GetReq() (v *event.ListEventRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListEventArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListEventArgs) SetReq(val *event.ListEventRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListEventArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListEventArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListEventArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListEventArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListEventArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = event.NewListEventRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListEventArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvent_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListEventArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListEventArgs(%+v)", *p)
}

func (p *ResourceServiceListEventArgs) DeepEqual(ano *ResourceServiceListEventArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListEventArgs) Field1DeepEqual(src *event.ListEventRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListEventResult struct {
	Success *event.ListEventResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListEventResult() *ResourceServiceListEventResult {
	return &ResourceServiceListEventResult{}
}

var ResourceServiceListEventResult_Success_DEFAULT *event.ListEventResponse

func (p *ResourceServiceListEventResult) GetSuccess() (v *event.ListEventResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListEventResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListEventResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListEventResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListEventResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListEventResult) SetSuccess(x interface{}) {
	p.Success = x.(*event.ListEventResponse)
}
func (p *ResourceServiceListEventResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListEventResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListEventResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListEventResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListEventResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListEventResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListEventResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = event.NewListEventResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListEventResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListEventResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvent_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListEventResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListEventResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListEventResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListEventResult(%+v)", *p)
}

func (p *ResourceServiceListEventResult) DeepEqual(ano *ResourceServiceListEventResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListEventResult) Field0DeepEqual(src *event.ListEventResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListEventResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListUserRbacsArgs struct {
	Req *rbac.ListUserRbacRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListUserRbacsArgs() *ResourceServiceListUserRbacsArgs {
	return &ResourceServiceListUserRbacsArgs{}
}

var ResourceServiceListUserRbacsArgs_Req_DEFAULT *rbac.ListUserRbacRequest

func (p *ResourceServiceListUserRbacsArgs) GetReq() (v *rbac.ListUserRbacRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListUserRbacsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListUserRbacsArgs) SetReq(val *rbac.ListUserRbacRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListUserRbacsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListUserRbacsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListUserRbacsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListUserRbacsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = rbac.NewListUserRbacRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListUserRbacsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListUserRbacs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListUserRbacsArgs(%+v)", *p)
}

func (p *ResourceServiceListUserRbacsArgs) DeepEqual(ano *ResourceServiceListUserRbacsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListUserRbacsArgs) Field1DeepEqual(src *rbac.ListUserRbacRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListUserRbacsResult struct {
	Success *rbac.ListUserRbacResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error              `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListUserRbacsResult() *ResourceServiceListUserRbacsResult {
	return &ResourceServiceListUserRbacsResult{}
}

var ResourceServiceListUserRbacsResult_Success_DEFAULT *rbac.ListUserRbacResponse

func (p *ResourceServiceListUserRbacsResult) GetSuccess() (v *rbac.ListUserRbacResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListUserRbacsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListUserRbacsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListUserRbacsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListUserRbacsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListUserRbacsResult) SetSuccess(x interface{}) {
	p.Success = x.(*rbac.ListUserRbacResponse)
}
func (p *ResourceServiceListUserRbacsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListUserRbacsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListUserRbacsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListUserRbacsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListUserRbacsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListUserRbacsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = rbac.NewListUserRbacResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListUserRbacsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListUserRbacsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListUserRbacs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListUserRbacsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListUserRbacsResult(%+v)", *p)
}

func (p *ResourceServiceListUserRbacsResult) DeepEqual(ano *ResourceServiceListUserRbacsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListUserRbacsResult) Field0DeepEqual(src *rbac.ListUserRbacResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListUserRbacsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateUserRbacArgs struct {
	Req *rbac.CreateUserRbacRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateUserRbacArgs() *ResourceServiceCreateUserRbacArgs {
	return &ResourceServiceCreateUserRbacArgs{}
}

var ResourceServiceCreateUserRbacArgs_Req_DEFAULT *rbac.CreateUserRbacRequest

func (p *ResourceServiceCreateUserRbacArgs) GetReq() (v *rbac.CreateUserRbacRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateUserRbacArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateUserRbacArgs) SetReq(val *rbac.CreateUserRbacRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateUserRbacArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateUserRbacArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateUserRbacArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateUserRbacArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = rbac.NewCreateUserRbacRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateUserRbacArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUserRbac_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateUserRbacArgs(%+v)", *p)
}

func (p *ResourceServiceCreateUserRbacArgs) DeepEqual(ano *ResourceServiceCreateUserRbacArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateUserRbacArgs) Field1DeepEqual(src *rbac.CreateUserRbacRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateUserRbacResult struct {
	Success *rbac.CreateUserRbacResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateUserRbacResult() *ResourceServiceCreateUserRbacResult {
	return &ResourceServiceCreateUserRbacResult{}
}

var ResourceServiceCreateUserRbacResult_Success_DEFAULT *rbac.CreateUserRbacResponse

func (p *ResourceServiceCreateUserRbacResult) GetSuccess() (v *rbac.CreateUserRbacResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateUserRbacResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateUserRbacResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateUserRbacResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateUserRbacResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateUserRbacResult) SetSuccess(x interface{}) {
	p.Success = x.(*rbac.CreateUserRbacResponse)
}
func (p *ResourceServiceCreateUserRbacResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateUserRbacResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateUserRbacResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateUserRbacResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateUserRbacResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateUserRbacResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = rbac.NewCreateUserRbacResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateUserRbacResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateUserRbacResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateUserRbac_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateUserRbacResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateUserRbacResult(%+v)", *p)
}

func (p *ResourceServiceCreateUserRbacResult) DeepEqual(ano *ResourceServiceCreateUserRbacResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateUserRbacResult) Field0DeepEqual(src *rbac.CreateUserRbacResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateUserRbacResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateUserRbacArgs struct {
	Req *rbac.UpdateUserRbacRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateUserRbacArgs() *ResourceServiceUpdateUserRbacArgs {
	return &ResourceServiceUpdateUserRbacArgs{}
}

var ResourceServiceUpdateUserRbacArgs_Req_DEFAULT *rbac.UpdateUserRbacRequest

func (p *ResourceServiceUpdateUserRbacArgs) GetReq() (v *rbac.UpdateUserRbacRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateUserRbacArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateUserRbacArgs) SetReq(val *rbac.UpdateUserRbacRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateUserRbacArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateUserRbacArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateUserRbacArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateUserRbacArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = rbac.NewUpdateUserRbacRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateUserRbacArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUserRbac_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateUserRbacArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateUserRbacArgs) DeepEqual(ano *ResourceServiceUpdateUserRbacArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateUserRbacArgs) Field1DeepEqual(src *rbac.UpdateUserRbacRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateUserRbacResult struct {
	Success *rbac.UpdateUserRbacResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateUserRbacResult() *ResourceServiceUpdateUserRbacResult {
	return &ResourceServiceUpdateUserRbacResult{}
}

var ResourceServiceUpdateUserRbacResult_Success_DEFAULT *rbac.UpdateUserRbacResponse

func (p *ResourceServiceUpdateUserRbacResult) GetSuccess() (v *rbac.UpdateUserRbacResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateUserRbacResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateUserRbacResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateUserRbacResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateUserRbacResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateUserRbacResult) SetSuccess(x interface{}) {
	p.Success = x.(*rbac.UpdateUserRbacResponse)
}
func (p *ResourceServiceUpdateUserRbacResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateUserRbacResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateUserRbacResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateUserRbacResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateUserRbacResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateUserRbacResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = rbac.NewUpdateUserRbacResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateUserRbacResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateUserRbacResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateUserRbac_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateUserRbacResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateUserRbacResult(%+v)", *p)
}

func (p *ResourceServiceUpdateUserRbacResult) DeepEqual(ano *ResourceServiceUpdateUserRbacResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateUserRbacResult) Field0DeepEqual(src *rbac.UpdateUserRbacResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateUserRbacResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteUserRbacArgs struct {
	Req *rbac.DeleteUserRbacRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteUserRbacArgs() *ResourceServiceDeleteUserRbacArgs {
	return &ResourceServiceDeleteUserRbacArgs{}
}

var ResourceServiceDeleteUserRbacArgs_Req_DEFAULT *rbac.DeleteUserRbacRequest

func (p *ResourceServiceDeleteUserRbacArgs) GetReq() (v *rbac.DeleteUserRbacRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteUserRbacArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteUserRbacArgs) SetReq(val *rbac.DeleteUserRbacRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteUserRbacArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteUserRbacArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteUserRbacArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteUserRbacArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = rbac.NewDeleteUserRbacRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteUserRbacArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUserRbac_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteUserRbacArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteUserRbacArgs) DeepEqual(ano *ResourceServiceDeleteUserRbacArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteUserRbacArgs) Field1DeepEqual(src *rbac.DeleteUserRbacRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteUserRbacResult struct {
	Success *rbac.DeleteUserRbacResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteUserRbacResult() *ResourceServiceDeleteUserRbacResult {
	return &ResourceServiceDeleteUserRbacResult{}
}

var ResourceServiceDeleteUserRbacResult_Success_DEFAULT *rbac.DeleteUserRbacResponse

func (p *ResourceServiceDeleteUserRbacResult) GetSuccess() (v *rbac.DeleteUserRbacResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteUserRbacResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteUserRbacResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteUserRbacResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteUserRbacResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteUserRbacResult) SetSuccess(x interface{}) {
	p.Success = x.(*rbac.DeleteUserRbacResponse)
}
func (p *ResourceServiceDeleteUserRbacResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteUserRbacResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteUserRbacResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteUserRbacResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteUserRbacResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteUserRbacResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = rbac.NewDeleteUserRbacResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteUserRbacResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteUserRbacResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteUserRbac_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteUserRbacResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteUserRbacResult(%+v)", *p)
}

func (p *ResourceServiceDeleteUserRbacResult) DeepEqual(ano *ResourceServiceDeleteUserRbacResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteUserRbacResult) Field0DeepEqual(src *rbac.DeleteUserRbacResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteUserRbacResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListCustomRolesArgs struct {
	Req *rbac.ListCustomRolesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListCustomRolesArgs() *ResourceServiceListCustomRolesArgs {
	return &ResourceServiceListCustomRolesArgs{}
}

var ResourceServiceListCustomRolesArgs_Req_DEFAULT *rbac.ListCustomRolesRequest

func (p *ResourceServiceListCustomRolesArgs) GetReq() (v *rbac.ListCustomRolesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListCustomRolesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListCustomRolesArgs) SetReq(val *rbac.ListCustomRolesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListCustomRolesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListCustomRolesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListCustomRolesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListCustomRolesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = rbac.NewListCustomRolesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListCustomRolesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCustomRoles_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListCustomRolesArgs(%+v)", *p)
}

func (p *ResourceServiceListCustomRolesArgs) DeepEqual(ano *ResourceServiceListCustomRolesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListCustomRolesArgs) Field1DeepEqual(src *rbac.ListCustomRolesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListCustomRolesResult struct {
	Success *rbac.ListCustomRolesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListCustomRolesResult() *ResourceServiceListCustomRolesResult {
	return &ResourceServiceListCustomRolesResult{}
}

var ResourceServiceListCustomRolesResult_Success_DEFAULT *rbac.ListCustomRolesResponse

func (p *ResourceServiceListCustomRolesResult) GetSuccess() (v *rbac.ListCustomRolesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListCustomRolesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListCustomRolesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListCustomRolesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListCustomRolesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListCustomRolesResult) SetSuccess(x interface{}) {
	p.Success = x.(*rbac.ListCustomRolesResponse)
}
func (p *ResourceServiceListCustomRolesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListCustomRolesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListCustomRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListCustomRolesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListCustomRolesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListCustomRolesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = rbac.NewListCustomRolesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListCustomRolesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListCustomRolesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCustomRoles_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListCustomRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListCustomRolesResult(%+v)", *p)
}

func (p *ResourceServiceListCustomRolesResult) DeepEqual(ano *ResourceServiceListCustomRolesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListCustomRolesResult) Field0DeepEqual(src *rbac.ListCustomRolesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListCustomRolesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSupportedAddonsArgs struct {
	Req *addon.ListSupportedAddonsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListSupportedAddonsArgs() *ResourceServiceListSupportedAddonsArgs {
	return &ResourceServiceListSupportedAddonsArgs{}
}

var ResourceServiceListSupportedAddonsArgs_Req_DEFAULT *addon.ListSupportedAddonsRequest

func (p *ResourceServiceListSupportedAddonsArgs) GetReq() (v *addon.ListSupportedAddonsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListSupportedAddonsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListSupportedAddonsArgs) SetReq(val *addon.ListSupportedAddonsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListSupportedAddonsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListSupportedAddonsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListSupportedAddonsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSupportedAddonsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewListSupportedAddonsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedAddonsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedAddons_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSupportedAddonsArgs(%+v)", *p)
}

func (p *ResourceServiceListSupportedAddonsArgs) DeepEqual(ano *ResourceServiceListSupportedAddonsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListSupportedAddonsArgs) Field1DeepEqual(src *addon.ListSupportedAddonsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSupportedAddonsResult struct {
	Success *addon.ListSupportedAddonsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                      `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListSupportedAddonsResult() *ResourceServiceListSupportedAddonsResult {
	return &ResourceServiceListSupportedAddonsResult{}
}

var ResourceServiceListSupportedAddonsResult_Success_DEFAULT *addon.ListSupportedAddonsResponse

func (p *ResourceServiceListSupportedAddonsResult) GetSuccess() (v *addon.ListSupportedAddonsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListSupportedAddonsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListSupportedAddonsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListSupportedAddonsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListSupportedAddonsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListSupportedAddonsResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.ListSupportedAddonsResponse)
}
func (p *ResourceServiceListSupportedAddonsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListSupportedAddonsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListSupportedAddonsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListSupportedAddonsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListSupportedAddonsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSupportedAddonsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewListSupportedAddonsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedAddonsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSupportedAddonsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSupportedAddons_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSupportedAddonsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSupportedAddonsResult(%+v)", *p)
}

func (p *ResourceServiceListSupportedAddonsResult) DeepEqual(ano *ResourceServiceListSupportedAddonsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListSupportedAddonsResult) Field0DeepEqual(src *addon.ListSupportedAddonsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListSupportedAddonsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListAddonsArgs struct {
	Req *addon.ListAddonsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListAddonsArgs() *ResourceServiceListAddonsArgs {
	return &ResourceServiceListAddonsArgs{}
}

var ResourceServiceListAddonsArgs_Req_DEFAULT *addon.ListAddonsRequest

func (p *ResourceServiceListAddonsArgs) GetReq() (v *addon.ListAddonsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListAddonsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListAddonsArgs) SetReq(val *addon.ListAddonsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListAddonsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListAddonsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListAddonsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListAddonsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListAddonsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewListAddonsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListAddonsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAddons_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListAddonsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListAddonsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListAddonsArgs(%+v)", *p)
}

func (p *ResourceServiceListAddonsArgs) DeepEqual(ano *ResourceServiceListAddonsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListAddonsArgs) Field1DeepEqual(src *addon.ListAddonsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListAddonsResult struct {
	Success *addon.ListAddonsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListAddonsResult() *ResourceServiceListAddonsResult {
	return &ResourceServiceListAddonsResult{}
}

var ResourceServiceListAddonsResult_Success_DEFAULT *addon.ListAddonsResponse

func (p *ResourceServiceListAddonsResult) GetSuccess() (v *addon.ListAddonsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListAddonsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListAddonsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListAddonsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListAddonsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListAddonsResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.ListAddonsResponse)
}
func (p *ResourceServiceListAddonsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListAddonsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListAddonsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListAddonsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListAddonsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListAddonsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListAddonsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewListAddonsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListAddonsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListAddonsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAddons_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListAddonsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListAddonsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListAddonsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListAddonsResult(%+v)", *p)
}

func (p *ResourceServiceListAddonsResult) DeepEqual(ano *ResourceServiceListAddonsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListAddonsResult) Field0DeepEqual(src *addon.ListAddonsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListAddonsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceInstallAddonsArgs struct {
	Req *addon.InstallAddonsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceInstallAddonsArgs() *ResourceServiceInstallAddonsArgs {
	return &ResourceServiceInstallAddonsArgs{}
}

var ResourceServiceInstallAddonsArgs_Req_DEFAULT *addon.InstallAddonsRequest

func (p *ResourceServiceInstallAddonsArgs) GetReq() (v *addon.InstallAddonsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceInstallAddonsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceInstallAddonsArgs) SetReq(val *addon.InstallAddonsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceInstallAddonsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceInstallAddonsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceInstallAddonsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceInstallAddonsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewInstallAddonsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceInstallAddonsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InstallAddons_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceInstallAddonsArgs(%+v)", *p)
}

func (p *ResourceServiceInstallAddonsArgs) DeepEqual(ano *ResourceServiceInstallAddonsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceInstallAddonsArgs) Field1DeepEqual(src *addon.InstallAddonsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceInstallAddonsResult struct {
	Success *addon.InstallAddonsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceInstallAddonsResult() *ResourceServiceInstallAddonsResult {
	return &ResourceServiceInstallAddonsResult{}
}

var ResourceServiceInstallAddonsResult_Success_DEFAULT *addon.InstallAddonsResponse

func (p *ResourceServiceInstallAddonsResult) GetSuccess() (v *addon.InstallAddonsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceInstallAddonsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceInstallAddonsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceInstallAddonsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceInstallAddonsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceInstallAddonsResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.InstallAddonsResponse)
}
func (p *ResourceServiceInstallAddonsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceInstallAddonsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceInstallAddonsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceInstallAddonsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceInstallAddonsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceInstallAddonsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewInstallAddonsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceInstallAddonsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceInstallAddonsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InstallAddons_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceInstallAddonsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceInstallAddonsResult(%+v)", *p)
}

func (p *ResourceServiceInstallAddonsResult) DeepEqual(ano *ResourceServiceInstallAddonsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceInstallAddonsResult) Field0DeepEqual(src *addon.InstallAddonsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceInstallAddonsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceReinstallAddonArgs struct {
	Req *addon.ReinstallAddonRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceReinstallAddonArgs() *ResourceServiceReinstallAddonArgs {
	return &ResourceServiceReinstallAddonArgs{}
}

var ResourceServiceReinstallAddonArgs_Req_DEFAULT *addon.ReinstallAddonRequest

func (p *ResourceServiceReinstallAddonArgs) GetReq() (v *addon.ReinstallAddonRequest) {
	if !p.IsSetReq() {
		return ResourceServiceReinstallAddonArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceReinstallAddonArgs) SetReq(val *addon.ReinstallAddonRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceReinstallAddonArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceReinstallAddonArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceReinstallAddonArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceReinstallAddonArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewReinstallAddonRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceReinstallAddonArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReinstallAddon_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceReinstallAddonArgs(%+v)", *p)
}

func (p *ResourceServiceReinstallAddonArgs) DeepEqual(ano *ResourceServiceReinstallAddonArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceReinstallAddonArgs) Field1DeepEqual(src *addon.ReinstallAddonRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceReinstallAddonResult struct {
	Success *addon.ReinstallAddonResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceReinstallAddonResult() *ResourceServiceReinstallAddonResult {
	return &ResourceServiceReinstallAddonResult{}
}

var ResourceServiceReinstallAddonResult_Success_DEFAULT *addon.ReinstallAddonResponse

func (p *ResourceServiceReinstallAddonResult) GetSuccess() (v *addon.ReinstallAddonResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceReinstallAddonResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceReinstallAddonResult_Err_DEFAULT *common.Error

func (p *ResourceServiceReinstallAddonResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceReinstallAddonResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceReinstallAddonResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.ReinstallAddonResponse)
}
func (p *ResourceServiceReinstallAddonResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceReinstallAddonResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceReinstallAddonResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceReinstallAddonResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceReinstallAddonResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceReinstallAddonResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewReinstallAddonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceReinstallAddonResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceReinstallAddonResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReinstallAddon_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceReinstallAddonResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceReinstallAddonResult(%+v)", *p)
}

func (p *ResourceServiceReinstallAddonResult) DeepEqual(ano *ResourceServiceReinstallAddonResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceReinstallAddonResult) Field0DeepEqual(src *addon.ReinstallAddonResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceReinstallAddonResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUninstallAddonsArgs struct {
	Req *addon.UninstallAddonsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUninstallAddonsArgs() *ResourceServiceUninstallAddonsArgs {
	return &ResourceServiceUninstallAddonsArgs{}
}

var ResourceServiceUninstallAddonsArgs_Req_DEFAULT *addon.UninstallAddonsRequest

func (p *ResourceServiceUninstallAddonsArgs) GetReq() (v *addon.UninstallAddonsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUninstallAddonsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUninstallAddonsArgs) SetReq(val *addon.UninstallAddonsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUninstallAddonsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUninstallAddonsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUninstallAddonsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUninstallAddonsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewUninstallAddonsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUninstallAddonsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UninstallAddons_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUninstallAddonsArgs(%+v)", *p)
}

func (p *ResourceServiceUninstallAddonsArgs) DeepEqual(ano *ResourceServiceUninstallAddonsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUninstallAddonsArgs) Field1DeepEqual(src *addon.UninstallAddonsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUninstallAddonsResult struct {
	Success *addon.UninstallAddonsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUninstallAddonsResult() *ResourceServiceUninstallAddonsResult {
	return &ResourceServiceUninstallAddonsResult{}
}

var ResourceServiceUninstallAddonsResult_Success_DEFAULT *addon.UninstallAddonsResponse

func (p *ResourceServiceUninstallAddonsResult) GetSuccess() (v *addon.UninstallAddonsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUninstallAddonsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUninstallAddonsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUninstallAddonsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUninstallAddonsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUninstallAddonsResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.UninstallAddonsResponse)
}
func (p *ResourceServiceUninstallAddonsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUninstallAddonsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUninstallAddonsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUninstallAddonsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUninstallAddonsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUninstallAddonsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewUninstallAddonsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUninstallAddonsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUninstallAddonsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UninstallAddons_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUninstallAddonsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUninstallAddonsResult(%+v)", *p)
}

func (p *ResourceServiceUninstallAddonsResult) DeepEqual(ano *ResourceServiceUninstallAddonsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUninstallAddonsResult) Field0DeepEqual(src *addon.UninstallAddonsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUninstallAddonsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpgradeAddonArgs struct {
	Req *addon.UpgradeAddonRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpgradeAddonArgs() *ResourceServiceUpgradeAddonArgs {
	return &ResourceServiceUpgradeAddonArgs{}
}

var ResourceServiceUpgradeAddonArgs_Req_DEFAULT *addon.UpgradeAddonRequest

func (p *ResourceServiceUpgradeAddonArgs) GetReq() (v *addon.UpgradeAddonRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpgradeAddonArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpgradeAddonArgs) SetReq(val *addon.UpgradeAddonRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpgradeAddonArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpgradeAddonArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpgradeAddonArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpgradeAddonArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewUpgradeAddonRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpgradeAddonArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeAddon_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpgradeAddonArgs(%+v)", *p)
}

func (p *ResourceServiceUpgradeAddonArgs) DeepEqual(ano *ResourceServiceUpgradeAddonArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpgradeAddonArgs) Field1DeepEqual(src *addon.UpgradeAddonRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpgradeAddonResult struct {
	Success *addon.UpgradeAddonResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error               `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpgradeAddonResult() *ResourceServiceUpgradeAddonResult {
	return &ResourceServiceUpgradeAddonResult{}
}

var ResourceServiceUpgradeAddonResult_Success_DEFAULT *addon.UpgradeAddonResponse

func (p *ResourceServiceUpgradeAddonResult) GetSuccess() (v *addon.UpgradeAddonResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpgradeAddonResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpgradeAddonResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpgradeAddonResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpgradeAddonResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpgradeAddonResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.UpgradeAddonResponse)
}
func (p *ResourceServiceUpgradeAddonResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpgradeAddonResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpgradeAddonResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpgradeAddonResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpgradeAddonResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpgradeAddonResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewUpgradeAddonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpgradeAddonResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpgradeAddonResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpgradeAddon_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpgradeAddonResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpgradeAddonResult(%+v)", *p)
}

func (p *ResourceServiceUpgradeAddonResult) DeepEqual(ano *ResourceServiceUpgradeAddonResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpgradeAddonResult) Field0DeepEqual(src *addon.UpgradeAddonResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpgradeAddonResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetAddonArgs struct {
	Req *addon.GetAddonRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetAddonArgs() *ResourceServiceGetAddonArgs {
	return &ResourceServiceGetAddonArgs{}
}

var ResourceServiceGetAddonArgs_Req_DEFAULT *addon.GetAddonRequest

func (p *ResourceServiceGetAddonArgs) GetReq() (v *addon.GetAddonRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetAddonArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetAddonArgs) SetReq(val *addon.GetAddonRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetAddonArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetAddonArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetAddonArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetAddonArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetAddonArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = addon.NewGetAddonRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetAddonArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAddon_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetAddonArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetAddonArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetAddonArgs(%+v)", *p)
}

func (p *ResourceServiceGetAddonArgs) DeepEqual(ano *ResourceServiceGetAddonArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetAddonArgs) Field1DeepEqual(src *addon.GetAddonRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetAddonResult struct {
	Success *addon.GetAddonResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetAddonResult() *ResourceServiceGetAddonResult {
	return &ResourceServiceGetAddonResult{}
}

var ResourceServiceGetAddonResult_Success_DEFAULT *addon.GetAddonResponse

func (p *ResourceServiceGetAddonResult) GetSuccess() (v *addon.GetAddonResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetAddonResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetAddonResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetAddonResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetAddonResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetAddonResult) SetSuccess(x interface{}) {
	p.Success = x.(*addon.GetAddonResponse)
}
func (p *ResourceServiceGetAddonResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetAddonResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetAddonResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetAddonResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetAddonResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetAddonResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetAddonResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = addon.NewGetAddonResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetAddonResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetAddonResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAddon_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetAddonResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetAddonResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetAddonResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetAddonResult(%+v)", *p)
}

func (p *ResourceServiceGetAddonResult) DeepEqual(ano *ResourceServiceGetAddonResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetAddonResult) Field0DeepEqual(src *addon.GetAddonResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetAddonResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCheckResourceExistArgs struct {
	Req *helper.CheckResourceExistRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCheckResourceExistArgs() *ResourceServiceCheckResourceExistArgs {
	return &ResourceServiceCheckResourceExistArgs{}
}

var ResourceServiceCheckResourceExistArgs_Req_DEFAULT *helper.CheckResourceExistRequest

func (p *ResourceServiceCheckResourceExistArgs) GetReq() (v *helper.CheckResourceExistRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCheckResourceExistArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCheckResourceExistArgs) SetReq(val *helper.CheckResourceExistRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCheckResourceExistArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCheckResourceExistArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCheckResourceExistArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCheckResourceExistArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = helper.NewCheckResourceExistRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCheckResourceExistArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckResourceExist_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCheckResourceExistArgs(%+v)", *p)
}

func (p *ResourceServiceCheckResourceExistArgs) DeepEqual(ano *ResourceServiceCheckResourceExistArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCheckResourceExistArgs) Field1DeepEqual(src *helper.CheckResourceExistRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCheckResourceExistResult struct {
	Success *helper.CheckResourceExistResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                      `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCheckResourceExistResult() *ResourceServiceCheckResourceExistResult {
	return &ResourceServiceCheckResourceExistResult{}
}

var ResourceServiceCheckResourceExistResult_Success_DEFAULT *helper.CheckResourceExistResponse

func (p *ResourceServiceCheckResourceExistResult) GetSuccess() (v *helper.CheckResourceExistResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCheckResourceExistResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCheckResourceExistResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCheckResourceExistResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCheckResourceExistResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCheckResourceExistResult) SetSuccess(x interface{}) {
	p.Success = x.(*helper.CheckResourceExistResponse)
}
func (p *ResourceServiceCheckResourceExistResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCheckResourceExistResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCheckResourceExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCheckResourceExistResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCheckResourceExistResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCheckResourceExistResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = helper.NewCheckResourceExistResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCheckResourceExistResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCheckResourceExistResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckResourceExist_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCheckResourceExistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCheckResourceExistResult(%+v)", *p)
}

func (p *ResourceServiceCheckResourceExistResult) DeepEqual(ano *ResourceServiceCheckResourceExistResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCheckResourceExistResult) Field0DeepEqual(src *helper.CheckResourceExistResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCheckResourceExistResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListInstancesArgs struct {
	Req *instance.ListInstancesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListInstancesArgs() *ResourceServiceListInstancesArgs {
	return &ResourceServiceListInstancesArgs{}
}

var ResourceServiceListInstancesArgs_Req_DEFAULT *instance.ListInstancesRequest

func (p *ResourceServiceListInstancesArgs) GetReq() (v *instance.ListInstancesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListInstancesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListInstancesArgs) SetReq(val *instance.ListInstancesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListInstancesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListInstancesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListInstancesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListInstancesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListInstancesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instance.NewListInstancesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListInstancesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListInstances_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListInstancesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListInstancesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListInstancesArgs(%+v)", *p)
}

func (p *ResourceServiceListInstancesArgs) DeepEqual(ano *ResourceServiceListInstancesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListInstancesArgs) Field1DeepEqual(src *instance.ListInstancesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListInstancesResult struct {
	Success *instance.ListInstancesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListInstancesResult() *ResourceServiceListInstancesResult {
	return &ResourceServiceListInstancesResult{}
}

var ResourceServiceListInstancesResult_Success_DEFAULT *instance.ListInstancesResponse

func (p *ResourceServiceListInstancesResult) GetSuccess() (v *instance.ListInstancesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListInstancesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListInstancesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListInstancesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListInstancesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListInstancesResult) SetSuccess(x interface{}) {
	p.Success = x.(*instance.ListInstancesResponse)
}
func (p *ResourceServiceListInstancesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListInstancesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListInstancesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListInstancesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListInstancesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListInstancesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListInstancesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instance.NewListInstancesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListInstancesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListInstancesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListInstances_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListInstancesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListInstancesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListInstancesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListInstancesResult(%+v)", *p)
}

func (p *ResourceServiceListInstancesResult) DeepEqual(ano *ResourceServiceListInstancesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListInstancesResult) Field0DeepEqual(src *instance.ListInstancesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListInstancesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListFlavorsArgs struct {
	Req *instance.ListFlavorsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListFlavorsArgs() *ResourceServiceListFlavorsArgs {
	return &ResourceServiceListFlavorsArgs{}
}

var ResourceServiceListFlavorsArgs_Req_DEFAULT *instance.ListFlavorsRequest

func (p *ResourceServiceListFlavorsArgs) GetReq() (v *instance.ListFlavorsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListFlavorsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListFlavorsArgs) SetReq(val *instance.ListFlavorsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListFlavorsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListFlavorsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListFlavorsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListFlavorsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListFlavorsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instance.NewListFlavorsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListFlavorsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListFlavors_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListFlavorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListFlavorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListFlavorsArgs(%+v)", *p)
}

func (p *ResourceServiceListFlavorsArgs) DeepEqual(ano *ResourceServiceListFlavorsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListFlavorsArgs) Field1DeepEqual(src *instance.ListFlavorsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListFlavorsResult struct {
	Success *instance.ListFlavorsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListFlavorsResult() *ResourceServiceListFlavorsResult {
	return &ResourceServiceListFlavorsResult{}
}

var ResourceServiceListFlavorsResult_Success_DEFAULT *instance.ListFlavorsResponse

func (p *ResourceServiceListFlavorsResult) GetSuccess() (v *instance.ListFlavorsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListFlavorsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListFlavorsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListFlavorsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListFlavorsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListFlavorsResult) SetSuccess(x interface{}) {
	p.Success = x.(*instance.ListFlavorsResponse)
}
func (p *ResourceServiceListFlavorsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListFlavorsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListFlavorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListFlavorsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListFlavorsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListFlavorsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListFlavorsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instance.NewListFlavorsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListFlavorsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListFlavorsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListFlavors_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListFlavorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListFlavorsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListFlavorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListFlavorsResult(%+v)", *p)
}

func (p *ResourceServiceListFlavorsResult) DeepEqual(ano *ResourceServiceListFlavorsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListFlavorsResult) Field0DeepEqual(src *instance.ListFlavorsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListFlavorsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetInstanceConsoleArgs struct {
	Req *instance.GetInstanceConsoleRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetInstanceConsoleArgs() *ResourceServiceGetInstanceConsoleArgs {
	return &ResourceServiceGetInstanceConsoleArgs{}
}

var ResourceServiceGetInstanceConsoleArgs_Req_DEFAULT *instance.GetInstanceConsoleRequest

func (p *ResourceServiceGetInstanceConsoleArgs) GetReq() (v *instance.GetInstanceConsoleRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetInstanceConsoleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetInstanceConsoleArgs) SetReq(val *instance.GetInstanceConsoleRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetInstanceConsoleArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetInstanceConsoleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetInstanceConsoleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetInstanceConsoleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instance.NewGetInstanceConsoleRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetInstanceConsoleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInstanceConsole_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetInstanceConsoleArgs(%+v)", *p)
}

func (p *ResourceServiceGetInstanceConsoleArgs) DeepEqual(ano *ResourceServiceGetInstanceConsoleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetInstanceConsoleArgs) Field1DeepEqual(src *instance.GetInstanceConsoleRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetInstanceConsoleResult struct {
	Success *instance.GetInstanceConsoleResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                        `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetInstanceConsoleResult() *ResourceServiceGetInstanceConsoleResult {
	return &ResourceServiceGetInstanceConsoleResult{}
}

var ResourceServiceGetInstanceConsoleResult_Success_DEFAULT *instance.GetInstanceConsoleResponse

func (p *ResourceServiceGetInstanceConsoleResult) GetSuccess() (v *instance.GetInstanceConsoleResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetInstanceConsoleResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetInstanceConsoleResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetInstanceConsoleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetInstanceConsoleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetInstanceConsoleResult) SetSuccess(x interface{}) {
	p.Success = x.(*instance.GetInstanceConsoleResponse)
}
func (p *ResourceServiceGetInstanceConsoleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetInstanceConsoleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetInstanceConsoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetInstanceConsoleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetInstanceConsoleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetInstanceConsoleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instance.NewGetInstanceConsoleResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetInstanceConsoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetInstanceConsoleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetInstanceConsole_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetInstanceConsoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetInstanceConsoleResult(%+v)", *p)
}

func (p *ResourceServiceGetInstanceConsoleResult) DeepEqual(ano *ResourceServiceGetInstanceConsoleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetInstanceConsoleResult) Field0DeepEqual(src *instance.GetInstanceConsoleResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetInstanceConsoleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListZonesArgs struct {
	Req *instance.ListZonesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListZonesArgs() *ResourceServiceListZonesArgs {
	return &ResourceServiceListZonesArgs{}
}

var ResourceServiceListZonesArgs_Req_DEFAULT *instance.ListZonesRequest

func (p *ResourceServiceListZonesArgs) GetReq() (v *instance.ListZonesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListZonesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListZonesArgs) SetReq(val *instance.ListZonesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListZonesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListZonesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListZonesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListZonesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListZonesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instance.NewListZonesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListZonesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListZones_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListZonesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListZonesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListZonesArgs(%+v)", *p)
}

func (p *ResourceServiceListZonesArgs) DeepEqual(ano *ResourceServiceListZonesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListZonesArgs) Field1DeepEqual(src *instance.ListZonesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListZonesResult struct {
	Success *instance.ListZonesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error               `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListZonesResult() *ResourceServiceListZonesResult {
	return &ResourceServiceListZonesResult{}
}

var ResourceServiceListZonesResult_Success_DEFAULT *instance.ListZonesResponse

func (p *ResourceServiceListZonesResult) GetSuccess() (v *instance.ListZonesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListZonesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListZonesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListZonesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListZonesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListZonesResult) SetSuccess(x interface{}) {
	p.Success = x.(*instance.ListZonesResponse)
}
func (p *ResourceServiceListZonesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListZonesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListZonesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListZonesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListZonesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListZonesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListZonesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instance.NewListZonesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListZonesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListZonesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListZones_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListZonesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListZonesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListZonesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListZonesResult(%+v)", *p)
}

func (p *ResourceServiceListZonesResult) DeepEqual(ano *ResourceServiceListZonesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListZonesResult) Field0DeepEqual(src *instance.ListZonesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListZonesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListVolumesArgs struct {
	Req *instance.ListVolumesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListVolumesArgs() *ResourceServiceListVolumesArgs {
	return &ResourceServiceListVolumesArgs{}
}

var ResourceServiceListVolumesArgs_Req_DEFAULT *instance.ListVolumesRequest

func (p *ResourceServiceListVolumesArgs) GetReq() (v *instance.ListVolumesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListVolumesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListVolumesArgs) SetReq(val *instance.ListVolumesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListVolumesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListVolumesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListVolumesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListVolumesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListVolumesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instance.NewListVolumesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVolumesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVolumes_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListVolumesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListVolumesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListVolumesArgs(%+v)", *p)
}

func (p *ResourceServiceListVolumesArgs) DeepEqual(ano *ResourceServiceListVolumesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListVolumesArgs) Field1DeepEqual(src *instance.ListVolumesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListVolumesResult struct {
	Success *instance.ListVolumesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListVolumesResult() *ResourceServiceListVolumesResult {
	return &ResourceServiceListVolumesResult{}
}

var ResourceServiceListVolumesResult_Success_DEFAULT *instance.ListVolumesResponse

func (p *ResourceServiceListVolumesResult) GetSuccess() (v *instance.ListVolumesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListVolumesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListVolumesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListVolumesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListVolumesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListVolumesResult) SetSuccess(x interface{}) {
	p.Success = x.(*instance.ListVolumesResponse)
}
func (p *ResourceServiceListVolumesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListVolumesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListVolumesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListVolumesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListVolumesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListVolumesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListVolumesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instance.NewListVolumesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVolumesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVolumesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVolumes_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListVolumesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListVolumesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListVolumesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListVolumesResult(%+v)", *p)
}

func (p *ResourceServiceListVolumesResult) DeepEqual(ano *ResourceServiceListVolumesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListVolumesResult) Field0DeepEqual(src *instance.ListVolumesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListVolumesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListKeyPairsArgs struct {
	Req *instance.ListKeyPairsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListKeyPairsArgs() *ResourceServiceListKeyPairsArgs {
	return &ResourceServiceListKeyPairsArgs{}
}

var ResourceServiceListKeyPairsArgs_Req_DEFAULT *instance.ListKeyPairsRequest

func (p *ResourceServiceListKeyPairsArgs) GetReq() (v *instance.ListKeyPairsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListKeyPairsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListKeyPairsArgs) SetReq(val *instance.ListKeyPairsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListKeyPairsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListKeyPairsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListKeyPairsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListKeyPairsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instance.NewListKeyPairsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListKeyPairsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListKeyPairs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListKeyPairsArgs(%+v)", *p)
}

func (p *ResourceServiceListKeyPairsArgs) DeepEqual(ano *ResourceServiceListKeyPairsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListKeyPairsArgs) Field1DeepEqual(src *instance.ListKeyPairsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListKeyPairsResult struct {
	Success *instance.ListKeyPairsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListKeyPairsResult() *ResourceServiceListKeyPairsResult {
	return &ResourceServiceListKeyPairsResult{}
}

var ResourceServiceListKeyPairsResult_Success_DEFAULT *instance.ListKeyPairsResponse

func (p *ResourceServiceListKeyPairsResult) GetSuccess() (v *instance.ListKeyPairsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListKeyPairsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListKeyPairsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListKeyPairsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListKeyPairsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListKeyPairsResult) SetSuccess(x interface{}) {
	p.Success = x.(*instance.ListKeyPairsResponse)
}
func (p *ResourceServiceListKeyPairsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListKeyPairsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListKeyPairsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListKeyPairsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListKeyPairsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListKeyPairsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instance.NewListKeyPairsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListKeyPairsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListKeyPairsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListKeyPairs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListKeyPairsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListKeyPairsResult(%+v)", *p)
}

func (p *ResourceServiceListKeyPairsResult) DeepEqual(ano *ResourceServiceListKeyPairsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListKeyPairsResult) Field0DeepEqual(src *instance.ListKeyPairsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListKeyPairsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSubnetsArgs struct {
	Req *vpc.ListSubnetsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListSubnetsArgs() *ResourceServiceListSubnetsArgs {
	return &ResourceServiceListSubnetsArgs{}
}

var ResourceServiceListSubnetsArgs_Req_DEFAULT *vpc.ListSubnetsRequest

func (p *ResourceServiceListSubnetsArgs) GetReq() (v *vpc.ListSubnetsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListSubnetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListSubnetsArgs) SetReq(val *vpc.ListSubnetsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListSubnetsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListSubnetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListSubnetsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSubnetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSubnetsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = vpc.NewListSubnetsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSubnetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSubnets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSubnetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSubnetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSubnetsArgs(%+v)", *p)
}

func (p *ResourceServiceListSubnetsArgs) DeepEqual(ano *ResourceServiceListSubnetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListSubnetsArgs) Field1DeepEqual(src *vpc.ListSubnetsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSubnetsResult struct {
	Success *vpc.ListSubnetsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListSubnetsResult() *ResourceServiceListSubnetsResult {
	return &ResourceServiceListSubnetsResult{}
}

var ResourceServiceListSubnetsResult_Success_DEFAULT *vpc.ListSubnetsResponse

func (p *ResourceServiceListSubnetsResult) GetSuccess() (v *vpc.ListSubnetsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListSubnetsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListSubnetsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListSubnetsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListSubnetsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListSubnetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*vpc.ListSubnetsResponse)
}
func (p *ResourceServiceListSubnetsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListSubnetsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListSubnetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListSubnetsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListSubnetsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSubnetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSubnetsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vpc.NewListSubnetsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSubnetsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSubnetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSubnets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSubnetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListSubnetsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSubnetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSubnetsResult(%+v)", *p)
}

func (p *ResourceServiceListSubnetsResult) DeepEqual(ano *ResourceServiceListSubnetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListSubnetsResult) Field0DeepEqual(src *vpc.ListSubnetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListSubnetsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListElasticIpPoolsArgs struct {
	Req *vpc.ListElasticIpPoolsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListElasticIpPoolsArgs() *ResourceServiceListElasticIpPoolsArgs {
	return &ResourceServiceListElasticIpPoolsArgs{}
}

var ResourceServiceListElasticIpPoolsArgs_Req_DEFAULT *vpc.ListElasticIpPoolsRequest

func (p *ResourceServiceListElasticIpPoolsArgs) GetReq() (v *vpc.ListElasticIpPoolsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListElasticIpPoolsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListElasticIpPoolsArgs) SetReq(val *vpc.ListElasticIpPoolsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListElasticIpPoolsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListElasticIpPoolsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListElasticIpPoolsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListElasticIpPoolsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = vpc.NewListElasticIpPoolsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListElasticIpPoolsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListElasticIpPools_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListElasticIpPoolsArgs(%+v)", *p)
}

func (p *ResourceServiceListElasticIpPoolsArgs) DeepEqual(ano *ResourceServiceListElasticIpPoolsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListElasticIpPoolsArgs) Field1DeepEqual(src *vpc.ListElasticIpPoolsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListElasticIpPoolsResult struct {
	Success *vpc.ListElasticIpPoolsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListElasticIpPoolsResult() *ResourceServiceListElasticIpPoolsResult {
	return &ResourceServiceListElasticIpPoolsResult{}
}

var ResourceServiceListElasticIpPoolsResult_Success_DEFAULT *vpc.ListElasticIpPoolsResponse

func (p *ResourceServiceListElasticIpPoolsResult) GetSuccess() (v *vpc.ListElasticIpPoolsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListElasticIpPoolsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListElasticIpPoolsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListElasticIpPoolsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListElasticIpPoolsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListElasticIpPoolsResult) SetSuccess(x interface{}) {
	p.Success = x.(*vpc.ListElasticIpPoolsResponse)
}
func (p *ResourceServiceListElasticIpPoolsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListElasticIpPoolsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListElasticIpPoolsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListElasticIpPoolsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListElasticIpPoolsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListElasticIpPoolsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vpc.NewListElasticIpPoolsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListElasticIpPoolsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListElasticIpPoolsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListElasticIpPools_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListElasticIpPoolsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListElasticIpPoolsResult(%+v)", *p)
}

func (p *ResourceServiceListElasticIpPoolsResult) DeepEqual(ano *ResourceServiceListElasticIpPoolsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListElasticIpPoolsResult) Field0DeepEqual(src *vpc.ListElasticIpPoolsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListElasticIpPoolsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListVpcsArgs struct {
	Req *vpc.ListVpcsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListVpcsArgs() *ResourceServiceListVpcsArgs {
	return &ResourceServiceListVpcsArgs{}
}

var ResourceServiceListVpcsArgs_Req_DEFAULT *vpc.ListVpcsRequest

func (p *ResourceServiceListVpcsArgs) GetReq() (v *vpc.ListVpcsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListVpcsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListVpcsArgs) SetReq(val *vpc.ListVpcsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListVpcsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListVpcsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListVpcsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListVpcsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListVpcsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = vpc.NewListVpcsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVpcsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVpcs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListVpcsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListVpcsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListVpcsArgs(%+v)", *p)
}

func (p *ResourceServiceListVpcsArgs) DeepEqual(ano *ResourceServiceListVpcsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListVpcsArgs) Field1DeepEqual(src *vpc.ListVpcsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListVpcsResult struct {
	Success *vpc.ListVpcsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListVpcsResult() *ResourceServiceListVpcsResult {
	return &ResourceServiceListVpcsResult{}
}

var ResourceServiceListVpcsResult_Success_DEFAULT *vpc.ListVpcsResponse

func (p *ResourceServiceListVpcsResult) GetSuccess() (v *vpc.ListVpcsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListVpcsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListVpcsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListVpcsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListVpcsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListVpcsResult) SetSuccess(x interface{}) {
	p.Success = x.(*vpc.ListVpcsResponse)
}
func (p *ResourceServiceListVpcsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListVpcsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListVpcsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListVpcsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListVpcsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListVpcsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListVpcsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vpc.NewListVpcsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVpcsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVpcsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVpcs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListVpcsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListVpcsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListVpcsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListVpcsResult(%+v)", *p)
}

func (p *ResourceServiceListVpcsResult) DeepEqual(ano *ResourceServiceListVpcsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListVpcsResult) Field0DeepEqual(src *vpc.ListVpcsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListVpcsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSecurityGroupsArgs struct {
	Req *vpc.ListSecurityGroupsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListSecurityGroupsArgs() *ResourceServiceListSecurityGroupsArgs {
	return &ResourceServiceListSecurityGroupsArgs{}
}

var ResourceServiceListSecurityGroupsArgs_Req_DEFAULT *vpc.ListSecurityGroupsRequest

func (p *ResourceServiceListSecurityGroupsArgs) GetReq() (v *vpc.ListSecurityGroupsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListSecurityGroupsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListSecurityGroupsArgs) SetReq(val *vpc.ListSecurityGroupsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListSecurityGroupsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListSecurityGroupsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListSecurityGroupsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSecurityGroupsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = vpc.NewListSecurityGroupsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSecurityGroupsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSecurityGroups_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSecurityGroupsArgs(%+v)", *p)
}

func (p *ResourceServiceListSecurityGroupsArgs) DeepEqual(ano *ResourceServiceListSecurityGroupsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListSecurityGroupsArgs) Field1DeepEqual(src *vpc.ListSecurityGroupsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListSecurityGroupsResult struct {
	Success *vpc.ListSecurityGroupsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListSecurityGroupsResult() *ResourceServiceListSecurityGroupsResult {
	return &ResourceServiceListSecurityGroupsResult{}
}

var ResourceServiceListSecurityGroupsResult_Success_DEFAULT *vpc.ListSecurityGroupsResponse

func (p *ResourceServiceListSecurityGroupsResult) GetSuccess() (v *vpc.ListSecurityGroupsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListSecurityGroupsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListSecurityGroupsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListSecurityGroupsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListSecurityGroupsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListSecurityGroupsResult) SetSuccess(x interface{}) {
	p.Success = x.(*vpc.ListSecurityGroupsResponse)
}
func (p *ResourceServiceListSecurityGroupsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListSecurityGroupsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListSecurityGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListSecurityGroupsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListSecurityGroupsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListSecurityGroupsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vpc.NewListSecurityGroupsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSecurityGroupsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListSecurityGroupsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSecurityGroups_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListSecurityGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListSecurityGroupsResult(%+v)", *p)
}

func (p *ResourceServiceListSecurityGroupsResult) DeepEqual(ano *ResourceServiceListSecurityGroupsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListSecurityGroupsResult) Field0DeepEqual(src *vpc.ListSecurityGroupsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListSecurityGroupsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClbsArgs struct {
	Req *clb.ListClbsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListClbsArgs() *ResourceServiceListClbsArgs {
	return &ResourceServiceListClbsArgs{}
}

var ResourceServiceListClbsArgs_Req_DEFAULT *clb.ListClbsRequest

func (p *ResourceServiceListClbsArgs) GetReq() (v *clb.ListClbsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListClbsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListClbsArgs) SetReq(val *clb.ListClbsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListClbsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListClbsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListClbsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClbsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClbsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = clb.NewListClbsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClbsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClbs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClbsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClbsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClbsArgs(%+v)", *p)
}

func (p *ResourceServiceListClbsArgs) DeepEqual(ano *ResourceServiceListClbsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListClbsArgs) Field1DeepEqual(src *clb.ListClbsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClbsResult struct {
	Success *clb.ListClbsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListClbsResult() *ResourceServiceListClbsResult {
	return &ResourceServiceListClbsResult{}
}

var ResourceServiceListClbsResult_Success_DEFAULT *clb.ListClbsResponse

func (p *ResourceServiceListClbsResult) GetSuccess() (v *clb.ListClbsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListClbsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListClbsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListClbsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListClbsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListClbsResult) SetSuccess(x interface{}) {
	p.Success = x.(*clb.ListClbsResponse)
}
func (p *ResourceServiceListClbsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListClbsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListClbsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListClbsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListClbsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClbsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClbsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = clb.NewListClbsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClbsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClbsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClbs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClbsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListClbsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClbsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClbsResult(%+v)", *p)
}

func (p *ResourceServiceListClbsResult) DeepEqual(ano *ResourceServiceListClbsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListClbsResult) Field0DeepEqual(src *clb.ListClbsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListClbsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClbListenersArgs struct {
	Req *clb.ListClbListenersRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListClbListenersArgs() *ResourceServiceListClbListenersArgs {
	return &ResourceServiceListClbListenersArgs{}
}

var ResourceServiceListClbListenersArgs_Req_DEFAULT *clb.ListClbListenersRequest

func (p *ResourceServiceListClbListenersArgs) GetReq() (v *clb.ListClbListenersRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListClbListenersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListClbListenersArgs) SetReq(val *clb.ListClbListenersRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListClbListenersArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListClbListenersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListClbListenersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClbListenersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClbListenersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = clb.NewListClbListenersRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClbListenersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClbListeners_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClbListenersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClbListenersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClbListenersArgs(%+v)", *p)
}

func (p *ResourceServiceListClbListenersArgs) DeepEqual(ano *ResourceServiceListClbListenersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListClbListenersArgs) Field1DeepEqual(src *clb.ListClbListenersRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListClbListenersResult struct {
	Success *clb.ListClbListenersResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListClbListenersResult() *ResourceServiceListClbListenersResult {
	return &ResourceServiceListClbListenersResult{}
}

var ResourceServiceListClbListenersResult_Success_DEFAULT *clb.ListClbListenersResponse

func (p *ResourceServiceListClbListenersResult) GetSuccess() (v *clb.ListClbListenersResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListClbListenersResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListClbListenersResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListClbListenersResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListClbListenersResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListClbListenersResult) SetSuccess(x interface{}) {
	p.Success = x.(*clb.ListClbListenersResponse)
}
func (p *ResourceServiceListClbListenersResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListClbListenersResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListClbListenersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListClbListenersResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListClbListenersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListClbListenersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListClbListenersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = clb.NewListClbListenersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClbListenersResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListClbListenersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListClbListeners_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListClbListenersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListClbListenersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListClbListenersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListClbListenersResult(%+v)", *p)
}

func (p *ResourceServiceListClbListenersResult) DeepEqual(ano *ResourceServiceListClbListenersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListClbListenersResult) Field0DeepEqual(src *clb.ListClbListenersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListClbListenersResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListQuotasArgs struct {
	Req *quota.ListQuotasRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListQuotasArgs() *ResourceServiceListQuotasArgs {
	return &ResourceServiceListQuotasArgs{}
}

var ResourceServiceListQuotasArgs_Req_DEFAULT *quota.ListQuotasRequest

func (p *ResourceServiceListQuotasArgs) GetReq() (v *quota.ListQuotasRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListQuotasArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListQuotasArgs) SetReq(val *quota.ListQuotasRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListQuotasArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListQuotasArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListQuotasArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListQuotasArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListQuotasArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = quota.NewListQuotasRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListQuotasArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListQuotas_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListQuotasArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListQuotasArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListQuotasArgs(%+v)", *p)
}

func (p *ResourceServiceListQuotasArgs) DeepEqual(ano *ResourceServiceListQuotasArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListQuotasArgs) Field1DeepEqual(src *quota.ListQuotasRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListQuotasResult struct {
	Success *quota.ListQuotasResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListQuotasResult() *ResourceServiceListQuotasResult {
	return &ResourceServiceListQuotasResult{}
}

var ResourceServiceListQuotasResult_Success_DEFAULT *quota.ListQuotasResponse

func (p *ResourceServiceListQuotasResult) GetSuccess() (v *quota.ListQuotasResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListQuotasResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListQuotasResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListQuotasResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListQuotasResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListQuotasResult) SetSuccess(x interface{}) {
	p.Success = x.(*quota.ListQuotasResponse)
}
func (p *ResourceServiceListQuotasResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListQuotasResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListQuotasResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListQuotasResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListQuotasResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListQuotasResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListQuotasResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = quota.NewListQuotasResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListQuotasResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListQuotasResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListQuotas_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListQuotasResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListQuotasResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListQuotasResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListQuotasResult(%+v)", *p)
}

func (p *ResourceServiceListQuotasResult) DeepEqual(ano *ResourceServiceListQuotasResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListQuotasResult) Field0DeepEqual(src *quota.ListQuotasResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListQuotasResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetQuotaArgs struct {
	Req *quota.GetQuotaRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetQuotaArgs() *ResourceServiceGetQuotaArgs {
	return &ResourceServiceGetQuotaArgs{}
}

var ResourceServiceGetQuotaArgs_Req_DEFAULT *quota.GetQuotaRequest

func (p *ResourceServiceGetQuotaArgs) GetReq() (v *quota.GetQuotaRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetQuotaArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetQuotaArgs) SetReq(val *quota.GetQuotaRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetQuotaArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetQuotaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetQuotaArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetQuotaArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetQuotaArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = quota.NewGetQuotaRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetQuotaArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetQuota_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetQuotaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetQuotaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetQuotaArgs(%+v)", *p)
}

func (p *ResourceServiceGetQuotaArgs) DeepEqual(ano *ResourceServiceGetQuotaArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetQuotaArgs) Field1DeepEqual(src *quota.GetQuotaRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetQuotaResult struct {
	Success *quota.GetQuotaResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetQuotaResult() *ResourceServiceGetQuotaResult {
	return &ResourceServiceGetQuotaResult{}
}

var ResourceServiceGetQuotaResult_Success_DEFAULT *quota.GetQuotaResponse

func (p *ResourceServiceGetQuotaResult) GetSuccess() (v *quota.GetQuotaResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetQuotaResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetQuotaResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetQuotaResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetQuotaResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetQuotaResult) SetSuccess(x interface{}) {
	p.Success = x.(*quota.GetQuotaResponse)
}
func (p *ResourceServiceGetQuotaResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetQuotaResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetQuotaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetQuotaResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetQuotaResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetQuotaResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetQuotaResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = quota.NewGetQuotaResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetQuotaResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetQuotaResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetQuota_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetQuotaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetQuotaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetQuotaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetQuotaResult(%+v)", *p)
}

func (p *ResourceServiceGetQuotaResult) DeepEqual(ano *ResourceServiceGetQuotaResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetQuotaResult) Field0DeepEqual(src *quota.GetQuotaResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetQuotaResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateBareMachineArgs struct {
	Req *baremachine.CreateBareMachineRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCreateBareMachineArgs() *ResourceServiceCreateBareMachineArgs {
	return &ResourceServiceCreateBareMachineArgs{}
}

var ResourceServiceCreateBareMachineArgs_Req_DEFAULT *baremachine.CreateBareMachineRequest

func (p *ResourceServiceCreateBareMachineArgs) GetReq() (v *baremachine.CreateBareMachineRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCreateBareMachineArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCreateBareMachineArgs) SetReq(val *baremachine.CreateBareMachineRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCreateBareMachineArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCreateBareMachineArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCreateBareMachineArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateBareMachineArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewCreateBareMachineRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateBareMachineArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateBareMachine_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateBareMachineArgs(%+v)", *p)
}

func (p *ResourceServiceCreateBareMachineArgs) DeepEqual(ano *ResourceServiceCreateBareMachineArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateBareMachineArgs) Field1DeepEqual(src *baremachine.CreateBareMachineRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCreateBareMachineResult struct {
	Success *baremachine.CreateBareMachineResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                          `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCreateBareMachineResult() *ResourceServiceCreateBareMachineResult {
	return &ResourceServiceCreateBareMachineResult{}
}

var ResourceServiceCreateBareMachineResult_Success_DEFAULT *baremachine.CreateBareMachineResponse

func (p *ResourceServiceCreateBareMachineResult) GetSuccess() (v *baremachine.CreateBareMachineResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCreateBareMachineResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCreateBareMachineResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCreateBareMachineResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCreateBareMachineResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCreateBareMachineResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.CreateBareMachineResponse)
}
func (p *ResourceServiceCreateBareMachineResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCreateBareMachineResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCreateBareMachineResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCreateBareMachineResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCreateBareMachineResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCreateBareMachineResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewCreateBareMachineResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateBareMachineResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCreateBareMachineResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateBareMachine_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCreateBareMachineResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCreateBareMachineResult(%+v)", *p)
}

func (p *ResourceServiceCreateBareMachineResult) DeepEqual(ano *ResourceServiceCreateBareMachineResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCreateBareMachineResult) Field0DeepEqual(src *baremachine.CreateBareMachineResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCreateBareMachineResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateBareMachineArgs struct {
	Req *baremachine.UpdateBareMachineRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceUpdateBareMachineArgs() *ResourceServiceUpdateBareMachineArgs {
	return &ResourceServiceUpdateBareMachineArgs{}
}

var ResourceServiceUpdateBareMachineArgs_Req_DEFAULT *baremachine.UpdateBareMachineRequest

func (p *ResourceServiceUpdateBareMachineArgs) GetReq() (v *baremachine.UpdateBareMachineRequest) {
	if !p.IsSetReq() {
		return ResourceServiceUpdateBareMachineArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceUpdateBareMachineArgs) SetReq(val *baremachine.UpdateBareMachineRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceUpdateBareMachineArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceUpdateBareMachineArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceUpdateBareMachineArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateBareMachineArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewUpdateBareMachineRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateBareMachineArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBareMachine_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateBareMachineArgs(%+v)", *p)
}

func (p *ResourceServiceUpdateBareMachineArgs) DeepEqual(ano *ResourceServiceUpdateBareMachineArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateBareMachineArgs) Field1DeepEqual(src *baremachine.UpdateBareMachineRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceUpdateBareMachineResult struct {
	Success *baremachine.UpdateBareMachineResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                          `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceUpdateBareMachineResult() *ResourceServiceUpdateBareMachineResult {
	return &ResourceServiceUpdateBareMachineResult{}
}

var ResourceServiceUpdateBareMachineResult_Success_DEFAULT *baremachine.UpdateBareMachineResponse

func (p *ResourceServiceUpdateBareMachineResult) GetSuccess() (v *baremachine.UpdateBareMachineResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceUpdateBareMachineResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceUpdateBareMachineResult_Err_DEFAULT *common.Error

func (p *ResourceServiceUpdateBareMachineResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceUpdateBareMachineResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceUpdateBareMachineResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.UpdateBareMachineResponse)
}
func (p *ResourceServiceUpdateBareMachineResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceUpdateBareMachineResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceUpdateBareMachineResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceUpdateBareMachineResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceUpdateBareMachineResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceUpdateBareMachineResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewUpdateBareMachineResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateBareMachineResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceUpdateBareMachineResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBareMachine_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceUpdateBareMachineResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceUpdateBareMachineResult(%+v)", *p)
}

func (p *ResourceServiceUpdateBareMachineResult) DeepEqual(ano *ResourceServiceUpdateBareMachineResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceUpdateBareMachineResult) Field0DeepEqual(src *baremachine.UpdateBareMachineResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceUpdateBareMachineResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteBareMachineArgs struct {
	Req *baremachine.DeleteBareMachineRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceDeleteBareMachineArgs() *ResourceServiceDeleteBareMachineArgs {
	return &ResourceServiceDeleteBareMachineArgs{}
}

var ResourceServiceDeleteBareMachineArgs_Req_DEFAULT *baremachine.DeleteBareMachineRequest

func (p *ResourceServiceDeleteBareMachineArgs) GetReq() (v *baremachine.DeleteBareMachineRequest) {
	if !p.IsSetReq() {
		return ResourceServiceDeleteBareMachineArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceDeleteBareMachineArgs) SetReq(val *baremachine.DeleteBareMachineRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceDeleteBareMachineArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceDeleteBareMachineArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceDeleteBareMachineArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteBareMachineArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewDeleteBareMachineRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteBareMachineArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBareMachine_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteBareMachineArgs(%+v)", *p)
}

func (p *ResourceServiceDeleteBareMachineArgs) DeepEqual(ano *ResourceServiceDeleteBareMachineArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteBareMachineArgs) Field1DeepEqual(src *baremachine.DeleteBareMachineRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceDeleteBareMachineResult struct {
	Success *baremachine.DeleteBareMachineResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                          `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceDeleteBareMachineResult() *ResourceServiceDeleteBareMachineResult {
	return &ResourceServiceDeleteBareMachineResult{}
}

var ResourceServiceDeleteBareMachineResult_Success_DEFAULT *baremachine.DeleteBareMachineResponse

func (p *ResourceServiceDeleteBareMachineResult) GetSuccess() (v *baremachine.DeleteBareMachineResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceDeleteBareMachineResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceDeleteBareMachineResult_Err_DEFAULT *common.Error

func (p *ResourceServiceDeleteBareMachineResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceDeleteBareMachineResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceDeleteBareMachineResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.DeleteBareMachineResponse)
}
func (p *ResourceServiceDeleteBareMachineResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceDeleteBareMachineResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceDeleteBareMachineResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceDeleteBareMachineResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceDeleteBareMachineResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceDeleteBareMachineResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewDeleteBareMachineResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteBareMachineResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceDeleteBareMachineResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteBareMachine_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceDeleteBareMachineResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceDeleteBareMachineResult(%+v)", *p)
}

func (p *ResourceServiceDeleteBareMachineResult) DeepEqual(ano *ResourceServiceDeleteBareMachineResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceDeleteBareMachineResult) Field0DeepEqual(src *baremachine.DeleteBareMachineResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceDeleteBareMachineResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetBareMachineArgs struct {
	Req *baremachine.GetBareMachineRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetBareMachineArgs() *ResourceServiceGetBareMachineArgs {
	return &ResourceServiceGetBareMachineArgs{}
}

var ResourceServiceGetBareMachineArgs_Req_DEFAULT *baremachine.GetBareMachineRequest

func (p *ResourceServiceGetBareMachineArgs) GetReq() (v *baremachine.GetBareMachineRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetBareMachineArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetBareMachineArgs) SetReq(val *baremachine.GetBareMachineRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetBareMachineArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetBareMachineArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetBareMachineArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetBareMachineArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewGetBareMachineRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBareMachine_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetBareMachineArgs(%+v)", *p)
}

func (p *ResourceServiceGetBareMachineArgs) DeepEqual(ano *ResourceServiceGetBareMachineArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetBareMachineArgs) Field1DeepEqual(src *baremachine.GetBareMachineRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetBareMachineResult struct {
	Success *baremachine.GetBareMachineResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetBareMachineResult() *ResourceServiceGetBareMachineResult {
	return &ResourceServiceGetBareMachineResult{}
}

var ResourceServiceGetBareMachineResult_Success_DEFAULT *baremachine.GetBareMachineResponse

func (p *ResourceServiceGetBareMachineResult) GetSuccess() (v *baremachine.GetBareMachineResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetBareMachineResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetBareMachineResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetBareMachineResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetBareMachineResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetBareMachineResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.GetBareMachineResponse)
}
func (p *ResourceServiceGetBareMachineResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetBareMachineResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetBareMachineResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetBareMachineResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetBareMachineResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetBareMachineResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewGetBareMachineResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBareMachine_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetBareMachineResult(%+v)", *p)
}

func (p *ResourceServiceGetBareMachineResult) DeepEqual(ano *ResourceServiceGetBareMachineResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetBareMachineResult) Field0DeepEqual(src *baremachine.GetBareMachineResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetBareMachineResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListBareMachineArgs struct {
	Req *baremachine.ListBareMachineRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListBareMachineArgs() *ResourceServiceListBareMachineArgs {
	return &ResourceServiceListBareMachineArgs{}
}

var ResourceServiceListBareMachineArgs_Req_DEFAULT *baremachine.ListBareMachineRequest

func (p *ResourceServiceListBareMachineArgs) GetReq() (v *baremachine.ListBareMachineRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListBareMachineArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListBareMachineArgs) SetReq(val *baremachine.ListBareMachineRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListBareMachineArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListBareMachineArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListBareMachineArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListBareMachineArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewListBareMachineRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListBareMachineArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBareMachine_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListBareMachineArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListBareMachineArgs(%+v)", *p)
}

func (p *ResourceServiceListBareMachineArgs) DeepEqual(ano *ResourceServiceListBareMachineArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListBareMachineArgs) Field1DeepEqual(src *baremachine.ListBareMachineRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListBareMachineResult struct {
	Success *baremachine.ListBareMachineResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                        `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListBareMachineResult() *ResourceServiceListBareMachineResult {
	return &ResourceServiceListBareMachineResult{}
}

var ResourceServiceListBareMachineResult_Success_DEFAULT *baremachine.ListBareMachineResponse

func (p *ResourceServiceListBareMachineResult) GetSuccess() (v *baremachine.ListBareMachineResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListBareMachineResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListBareMachineResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListBareMachineResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListBareMachineResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListBareMachineResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.ListBareMachineResponse)
}
func (p *ResourceServiceListBareMachineResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListBareMachineResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListBareMachineResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListBareMachineResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListBareMachineResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListBareMachineResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewListBareMachineResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListBareMachineResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListBareMachineResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBareMachine_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListBareMachineResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListBareMachineResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListBareMachineResult(%+v)", *p)
}

func (p *ResourceServiceListBareMachineResult) DeepEqual(ano *ResourceServiceListBareMachineResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListBareMachineResult) Field0DeepEqual(src *baremachine.ListBareMachineResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListBareMachineResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetBareMachineSshPublicKeyArgs struct {
	Req *baremachine.GetBareMachineSshPublicKeyRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetBareMachineSshPublicKeyArgs() *ResourceServiceGetBareMachineSshPublicKeyArgs {
	return &ResourceServiceGetBareMachineSshPublicKeyArgs{}
}

var ResourceServiceGetBareMachineSshPublicKeyArgs_Req_DEFAULT *baremachine.GetBareMachineSshPublicKeyRequest

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) GetReq() (v *baremachine.GetBareMachineSshPublicKeyRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetBareMachineSshPublicKeyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) SetReq(val *baremachine.GetBareMachineSshPublicKeyRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetBareMachineSshPublicKeyArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetBareMachineSshPublicKeyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewGetBareMachineSshPublicKeyRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBareMachineSshPublicKey_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetBareMachineSshPublicKeyArgs(%+v)", *p)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) DeepEqual(ano *ResourceServiceGetBareMachineSshPublicKeyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetBareMachineSshPublicKeyArgs) Field1DeepEqual(src *baremachine.GetBareMachineSshPublicKeyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetBareMachineSshPublicKeyResult struct {
	Success *baremachine.GetBareMachineSshPublicKeyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                   `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetBareMachineSshPublicKeyResult() *ResourceServiceGetBareMachineSshPublicKeyResult {
	return &ResourceServiceGetBareMachineSshPublicKeyResult{}
}

var ResourceServiceGetBareMachineSshPublicKeyResult_Success_DEFAULT *baremachine.GetBareMachineSshPublicKeyResponse

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) GetSuccess() (v *baremachine.GetBareMachineSshPublicKeyResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetBareMachineSshPublicKeyResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetBareMachineSshPublicKeyResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetBareMachineSshPublicKeyResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetBareMachineSshPublicKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.GetBareMachineSshPublicKeyResponse)
}
func (p *ResourceServiceGetBareMachineSshPublicKeyResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetBareMachineSshPublicKeyResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetBareMachineSshPublicKeyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewGetBareMachineSshPublicKeyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBareMachineSshPublicKey_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetBareMachineSshPublicKeyResult(%+v)", *p)
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) DeepEqual(ano *ResourceServiceGetBareMachineSshPublicKeyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetBareMachineSshPublicKeyResult) Field0DeepEqual(src *baremachine.GetBareMachineSshPublicKeyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetBareMachineSshPublicKeyResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListBareMachineExpectOsArgs struct {
	Req *baremachine.ListBareMachineExpectOsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListBareMachineExpectOsArgs() *ResourceServiceListBareMachineExpectOsArgs {
	return &ResourceServiceListBareMachineExpectOsArgs{}
}

var ResourceServiceListBareMachineExpectOsArgs_Req_DEFAULT *baremachine.ListBareMachineExpectOsRequest

func (p *ResourceServiceListBareMachineExpectOsArgs) GetReq() (v *baremachine.ListBareMachineExpectOsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListBareMachineExpectOsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListBareMachineExpectOsArgs) SetReq(val *baremachine.ListBareMachineExpectOsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListBareMachineExpectOsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListBareMachineExpectOsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListBareMachineExpectOsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListBareMachineExpectOsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewListBareMachineExpectOsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListBareMachineExpectOsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBareMachineExpectOs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListBareMachineExpectOsArgs(%+v)", *p)
}

func (p *ResourceServiceListBareMachineExpectOsArgs) DeepEqual(ano *ResourceServiceListBareMachineExpectOsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListBareMachineExpectOsArgs) Field1DeepEqual(src *baremachine.ListBareMachineExpectOsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListBareMachineExpectOsResult struct {
	Success *baremachine.ListBareMachineExpectOsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListBareMachineExpectOsResult() *ResourceServiceListBareMachineExpectOsResult {
	return &ResourceServiceListBareMachineExpectOsResult{}
}

var ResourceServiceListBareMachineExpectOsResult_Success_DEFAULT *baremachine.ListBareMachineExpectOsResponse

func (p *ResourceServiceListBareMachineExpectOsResult) GetSuccess() (v *baremachine.ListBareMachineExpectOsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListBareMachineExpectOsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListBareMachineExpectOsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListBareMachineExpectOsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListBareMachineExpectOsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListBareMachineExpectOsResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.ListBareMachineExpectOsResponse)
}
func (p *ResourceServiceListBareMachineExpectOsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListBareMachineExpectOsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListBareMachineExpectOsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListBareMachineExpectOsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListBareMachineExpectOsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListBareMachineExpectOsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewListBareMachineExpectOsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListBareMachineExpectOsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListBareMachineExpectOsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBareMachineExpectOs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListBareMachineExpectOsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListBareMachineExpectOsResult(%+v)", *p)
}

func (p *ResourceServiceListBareMachineExpectOsResult) DeepEqual(ano *ResourceServiceListBareMachineExpectOsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListBareMachineExpectOsResult) Field0DeepEqual(src *baremachine.ListBareMachineExpectOsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListBareMachineExpectOsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetBareMachineImportExcelTemplateArgs struct {
	Req *baremachine.GetBareMachineImportExcelTemplateRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceGetBareMachineImportExcelTemplateArgs() *ResourceServiceGetBareMachineImportExcelTemplateArgs {
	return &ResourceServiceGetBareMachineImportExcelTemplateArgs{}
}

var ResourceServiceGetBareMachineImportExcelTemplateArgs_Req_DEFAULT *baremachine.GetBareMachineImportExcelTemplateRequest

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) GetReq() (v *baremachine.GetBareMachineImportExcelTemplateRequest) {
	if !p.IsSetReq() {
		return ResourceServiceGetBareMachineImportExcelTemplateArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) SetReq(val *baremachine.GetBareMachineImportExcelTemplateRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceGetBareMachineImportExcelTemplateArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetBareMachineImportExcelTemplateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = baremachine.NewGetBareMachineImportExcelTemplateRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBareMachineImportExcelTemplate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetBareMachineImportExcelTemplateArgs(%+v)", *p)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) DeepEqual(ano *ResourceServiceGetBareMachineImportExcelTemplateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateArgs) Field1DeepEqual(src *baremachine.GetBareMachineImportExcelTemplateRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceGetBareMachineImportExcelTemplateResult struct {
	Success *baremachine.GetBareMachineImportExcelTemplateResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                          `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceGetBareMachineImportExcelTemplateResult() *ResourceServiceGetBareMachineImportExcelTemplateResult {
	return &ResourceServiceGetBareMachineImportExcelTemplateResult{}
}

var ResourceServiceGetBareMachineImportExcelTemplateResult_Success_DEFAULT *baremachine.GetBareMachineImportExcelTemplateResponse

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) GetSuccess() (v *baremachine.GetBareMachineImportExcelTemplateResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceGetBareMachineImportExcelTemplateResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceGetBareMachineImportExcelTemplateResult_Err_DEFAULT *common.Error

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceGetBareMachineImportExcelTemplateResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*baremachine.GetBareMachineImportExcelTemplateResponse)
}
func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceGetBareMachineImportExcelTemplateResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceGetBareMachineImportExcelTemplateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = baremachine.NewGetBareMachineImportExcelTemplateResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetBareMachineImportExcelTemplate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceGetBareMachineImportExcelTemplateResult(%+v)", *p)
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) DeepEqual(ano *ResourceServiceGetBareMachineImportExcelTemplateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) Field0DeepEqual(src *baremachine.GetBareMachineImportExcelTemplateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceGetBareMachineImportExcelTemplateResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCheckCidrConflictArgs struct {
	Req *cluster.CheckCidrConflictRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceCheckCidrConflictArgs() *ResourceServiceCheckCidrConflictArgs {
	return &ResourceServiceCheckCidrConflictArgs{}
}

var ResourceServiceCheckCidrConflictArgs_Req_DEFAULT *cluster.CheckCidrConflictRequest

func (p *ResourceServiceCheckCidrConflictArgs) GetReq() (v *cluster.CheckCidrConflictRequest) {
	if !p.IsSetReq() {
		return ResourceServiceCheckCidrConflictArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceCheckCidrConflictArgs) SetReq(val *cluster.CheckCidrConflictRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceCheckCidrConflictArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceCheckCidrConflictArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceCheckCidrConflictArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCheckCidrConflictArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewCheckCidrConflictRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCheckCidrConflictArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckCidrConflict_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCheckCidrConflictArgs(%+v)", *p)
}

func (p *ResourceServiceCheckCidrConflictArgs) DeepEqual(ano *ResourceServiceCheckCidrConflictArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceCheckCidrConflictArgs) Field1DeepEqual(src *cluster.CheckCidrConflictRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceCheckCidrConflictResult struct {
	Success *cluster.CheckCidrConflictResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                      `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceCheckCidrConflictResult() *ResourceServiceCheckCidrConflictResult {
	return &ResourceServiceCheckCidrConflictResult{}
}

var ResourceServiceCheckCidrConflictResult_Success_DEFAULT *cluster.CheckCidrConflictResponse

func (p *ResourceServiceCheckCidrConflictResult) GetSuccess() (v *cluster.CheckCidrConflictResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceCheckCidrConflictResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceCheckCidrConflictResult_Err_DEFAULT *common.Error

func (p *ResourceServiceCheckCidrConflictResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceCheckCidrConflictResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceCheckCidrConflictResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.CheckCidrConflictResponse)
}
func (p *ResourceServiceCheckCidrConflictResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceCheckCidrConflictResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceCheckCidrConflictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceCheckCidrConflictResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceCheckCidrConflictResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceCheckCidrConflictResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewCheckCidrConflictResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCheckCidrConflictResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceCheckCidrConflictResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckCidrConflict_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceCheckCidrConflictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceCheckCidrConflictResult(%+v)", *p)
}

func (p *ResourceServiceCheckCidrConflictResult) DeepEqual(ano *ResourceServiceCheckCidrConflictResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceCheckCidrConflictResult) Field0DeepEqual(src *cluster.CheckCidrConflictResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceCheckCidrConflictResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceRecommendCidrArgs struct {
	Req *cluster.RecommendCidrRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceRecommendCidrArgs() *ResourceServiceRecommendCidrArgs {
	return &ResourceServiceRecommendCidrArgs{}
}

var ResourceServiceRecommendCidrArgs_Req_DEFAULT *cluster.RecommendCidrRequest

func (p *ResourceServiceRecommendCidrArgs) GetReq() (v *cluster.RecommendCidrRequest) {
	if !p.IsSetReq() {
		return ResourceServiceRecommendCidrArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceRecommendCidrArgs) SetReq(val *cluster.RecommendCidrRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceRecommendCidrArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceRecommendCidrArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceRecommendCidrArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceRecommendCidrArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewRecommendCidrRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRecommendCidrArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RecommendCidr_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceRecommendCidrArgs(%+v)", *p)
}

func (p *ResourceServiceRecommendCidrArgs) DeepEqual(ano *ResourceServiceRecommendCidrArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceRecommendCidrArgs) Field1DeepEqual(src *cluster.RecommendCidrRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceRecommendCidrResult struct {
	Success *cluster.RecommendCidrResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceRecommendCidrResult() *ResourceServiceRecommendCidrResult {
	return &ResourceServiceRecommendCidrResult{}
}

var ResourceServiceRecommendCidrResult_Success_DEFAULT *cluster.RecommendCidrResponse

func (p *ResourceServiceRecommendCidrResult) GetSuccess() (v *cluster.RecommendCidrResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceRecommendCidrResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceRecommendCidrResult_Err_DEFAULT *common.Error

func (p *ResourceServiceRecommendCidrResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceRecommendCidrResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceRecommendCidrResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.RecommendCidrResponse)
}
func (p *ResourceServiceRecommendCidrResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceRecommendCidrResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceRecommendCidrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceRecommendCidrResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceRecommendCidrResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceRecommendCidrResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewRecommendCidrResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRecommendCidrResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceRecommendCidrResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RecommendCidr_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceRecommendCidrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceRecommendCidrResult(%+v)", *p)
}

func (p *ResourceServiceRecommendCidrResult) DeepEqual(ano *ResourceServiceRecommendCidrResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceRecommendCidrResult) Field0DeepEqual(src *cluster.RecommendCidrResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceRecommendCidrResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceAddVciSubnetsArgs struct {
	Req *cluster.AddVciSubnetsRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceAddVciSubnetsArgs() *ResourceServiceAddVciSubnetsArgs {
	return &ResourceServiceAddVciSubnetsArgs{}
}

var ResourceServiceAddVciSubnetsArgs_Req_DEFAULT *cluster.AddVciSubnetsRequest

func (p *ResourceServiceAddVciSubnetsArgs) GetReq() (v *cluster.AddVciSubnetsRequest) {
	if !p.IsSetReq() {
		return ResourceServiceAddVciSubnetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceAddVciSubnetsArgs) SetReq(val *cluster.AddVciSubnetsRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceAddVciSubnetsArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceAddVciSubnetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceAddVciSubnetsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceAddVciSubnetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewAddVciSubnetsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAddVciSubnetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddVciSubnets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceAddVciSubnetsArgs(%+v)", *p)
}

func (p *ResourceServiceAddVciSubnetsArgs) DeepEqual(ano *ResourceServiceAddVciSubnetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceAddVciSubnetsArgs) Field1DeepEqual(src *cluster.AddVciSubnetsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceAddVciSubnetsResult struct {
	Success *cluster.AddVciSubnetsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceAddVciSubnetsResult() *ResourceServiceAddVciSubnetsResult {
	return &ResourceServiceAddVciSubnetsResult{}
}

var ResourceServiceAddVciSubnetsResult_Success_DEFAULT *cluster.AddVciSubnetsResponse

func (p *ResourceServiceAddVciSubnetsResult) GetSuccess() (v *cluster.AddVciSubnetsResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceAddVciSubnetsResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceAddVciSubnetsResult_Err_DEFAULT *common.Error

func (p *ResourceServiceAddVciSubnetsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceAddVciSubnetsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceAddVciSubnetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.AddVciSubnetsResponse)
}
func (p *ResourceServiceAddVciSubnetsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceAddVciSubnetsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceAddVciSubnetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceAddVciSubnetsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceAddVciSubnetsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceAddVciSubnetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewAddVciSubnetsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAddVciSubnetsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAddVciSubnetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AddVciSubnets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceAddVciSubnetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceAddVciSubnetsResult(%+v)", *p)
}

func (p *ResourceServiceAddVciSubnetsResult) DeepEqual(ano *ResourceServiceAddVciSubnetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceAddVciSubnetsResult) Field0DeepEqual(src *cluster.AddVciSubnetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceAddVciSubnetsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceIsInShortTermWhiteListArgs struct {
	Req *trade.IsInShortTermWhiteListRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceIsInShortTermWhiteListArgs() *ResourceServiceIsInShortTermWhiteListArgs {
	return &ResourceServiceIsInShortTermWhiteListArgs{}
}

var ResourceServiceIsInShortTermWhiteListArgs_Req_DEFAULT *trade.IsInShortTermWhiteListRequest

func (p *ResourceServiceIsInShortTermWhiteListArgs) GetReq() (v *trade.IsInShortTermWhiteListRequest) {
	if !p.IsSetReq() {
		return ResourceServiceIsInShortTermWhiteListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceIsInShortTermWhiteListArgs) SetReq(val *trade.IsInShortTermWhiteListRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceIsInShortTermWhiteListArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceIsInShortTermWhiteListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = trade.NewIsInShortTermWhiteListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsInShortTermWhiteList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceIsInShortTermWhiteListArgs(%+v)", *p)
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) DeepEqual(ano *ResourceServiceIsInShortTermWhiteListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceIsInShortTermWhiteListArgs) Field1DeepEqual(src *trade.IsInShortTermWhiteListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceIsInShortTermWhiteListResult struct {
	Success *trade.IsInShortTermWhiteListResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                         `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceIsInShortTermWhiteListResult() *ResourceServiceIsInShortTermWhiteListResult {
	return &ResourceServiceIsInShortTermWhiteListResult{}
}

var ResourceServiceIsInShortTermWhiteListResult_Success_DEFAULT *trade.IsInShortTermWhiteListResponse

func (p *ResourceServiceIsInShortTermWhiteListResult) GetSuccess() (v *trade.IsInShortTermWhiteListResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceIsInShortTermWhiteListResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceIsInShortTermWhiteListResult_Err_DEFAULT *common.Error

func (p *ResourceServiceIsInShortTermWhiteListResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceIsInShortTermWhiteListResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceIsInShortTermWhiteListResult) SetSuccess(x interface{}) {
	p.Success = x.(*trade.IsInShortTermWhiteListResponse)
}
func (p *ResourceServiceIsInShortTermWhiteListResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceIsInShortTermWhiteListResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceIsInShortTermWhiteListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceIsInShortTermWhiteListResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceIsInShortTermWhiteListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceIsInShortTermWhiteListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = trade.NewIsInShortTermWhiteListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceIsInShortTermWhiteListResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceIsInShortTermWhiteListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsInShortTermWhiteList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceIsInShortTermWhiteListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceIsInShortTermWhiteListResult(%+v)", *p)
}

func (p *ResourceServiceIsInShortTermWhiteListResult) DeepEqual(ano *ResourceServiceIsInShortTermWhiteListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceIsInShortTermWhiteListResult) Field0DeepEqual(src *trade.IsInShortTermWhiteListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceIsInShortTermWhiteListResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceAllowUserPublicTestArgs struct {
	Req *publicverify.PublicTestAllowedReq `thrift:"req,1" json:"req"`
}

func NewResourceServiceAllowUserPublicTestArgs() *ResourceServiceAllowUserPublicTestArgs {
	return &ResourceServiceAllowUserPublicTestArgs{}
}

var ResourceServiceAllowUserPublicTestArgs_Req_DEFAULT *publicverify.PublicTestAllowedReq

func (p *ResourceServiceAllowUserPublicTestArgs) GetReq() (v *publicverify.PublicTestAllowedReq) {
	if !p.IsSetReq() {
		return ResourceServiceAllowUserPublicTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceAllowUserPublicTestArgs) SetReq(val *publicverify.PublicTestAllowedReq) {
	p.Req = val
}

var fieldIDToName_ResourceServiceAllowUserPublicTestArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceAllowUserPublicTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceAllowUserPublicTestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceAllowUserPublicTestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = publicverify.NewPublicTestAllowedReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAllowUserPublicTestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AllowUserPublicTest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceAllowUserPublicTestArgs(%+v)", *p)
}

func (p *ResourceServiceAllowUserPublicTestArgs) DeepEqual(ano *ResourceServiceAllowUserPublicTestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceAllowUserPublicTestArgs) Field1DeepEqual(src *publicverify.PublicTestAllowedReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceAllowUserPublicTestResult struct {
	Success *publicverify.PublicTestAllowedResp `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceAllowUserPublicTestResult() *ResourceServiceAllowUserPublicTestResult {
	return &ResourceServiceAllowUserPublicTestResult{}
}

var ResourceServiceAllowUserPublicTestResult_Success_DEFAULT *publicverify.PublicTestAllowedResp

func (p *ResourceServiceAllowUserPublicTestResult) GetSuccess() (v *publicverify.PublicTestAllowedResp) {
	if !p.IsSetSuccess() {
		return ResourceServiceAllowUserPublicTestResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceAllowUserPublicTestResult_Err_DEFAULT *common.Error

func (p *ResourceServiceAllowUserPublicTestResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceAllowUserPublicTestResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceAllowUserPublicTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*publicverify.PublicTestAllowedResp)
}
func (p *ResourceServiceAllowUserPublicTestResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceAllowUserPublicTestResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceAllowUserPublicTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceAllowUserPublicTestResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceAllowUserPublicTestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceAllowUserPublicTestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = publicverify.NewPublicTestAllowedResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAllowUserPublicTestResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceAllowUserPublicTestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AllowUserPublicTest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceAllowUserPublicTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceAllowUserPublicTestResult(%+v)", *p)
}

func (p *ResourceServiceAllowUserPublicTestResult) DeepEqual(ano *ResourceServiceAllowUserPublicTestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceAllowUserPublicTestResult) Field0DeepEqual(src *publicverify.PublicTestAllowedResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceAllowUserPublicTestResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListVciAvailabilityZonesArgs struct {
	Req *vci.ListVciAvailabilityZonesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListVciAvailabilityZonesArgs() *ResourceServiceListVciAvailabilityZonesArgs {
	return &ResourceServiceListVciAvailabilityZonesArgs{}
}

var ResourceServiceListVciAvailabilityZonesArgs_Req_DEFAULT *vci.ListVciAvailabilityZonesRequest

func (p *ResourceServiceListVciAvailabilityZonesArgs) GetReq() (v *vci.ListVciAvailabilityZonesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListVciAvailabilityZonesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListVciAvailabilityZonesArgs) SetReq(val *vci.ListVciAvailabilityZonesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListVciAvailabilityZonesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListVciAvailabilityZonesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = vci.NewListVciAvailabilityZonesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVciAvailabilityZones_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListVciAvailabilityZonesArgs(%+v)", *p)
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) DeepEqual(ano *ResourceServiceListVciAvailabilityZonesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListVciAvailabilityZonesArgs) Field1DeepEqual(src *vci.ListVciAvailabilityZonesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListVciAvailabilityZonesResult struct {
	Success *vci.ListVciAvailabilityZonesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                         `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListVciAvailabilityZonesResult() *ResourceServiceListVciAvailabilityZonesResult {
	return &ResourceServiceListVciAvailabilityZonesResult{}
}

var ResourceServiceListVciAvailabilityZonesResult_Success_DEFAULT *vci.ListVciAvailabilityZonesResponse

func (p *ResourceServiceListVciAvailabilityZonesResult) GetSuccess() (v *vci.ListVciAvailabilityZonesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListVciAvailabilityZonesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListVciAvailabilityZonesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListVciAvailabilityZonesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListVciAvailabilityZonesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListVciAvailabilityZonesResult) SetSuccess(x interface{}) {
	p.Success = x.(*vci.ListVciAvailabilityZonesResponse)
}
func (p *ResourceServiceListVciAvailabilityZonesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListVciAvailabilityZonesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListVciAvailabilityZonesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListVciAvailabilityZonesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListVciAvailabilityZonesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListVciAvailabilityZonesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vci.NewListVciAvailabilityZonesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVciAvailabilityZonesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListVciAvailabilityZonesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListVciAvailabilityZones_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListVciAvailabilityZonesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListVciAvailabilityZonesResult(%+v)", *p)
}

func (p *ResourceServiceListVciAvailabilityZonesResult) DeepEqual(ano *ResourceServiceListVciAvailabilityZonesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListVciAvailabilityZonesResult) Field0DeepEqual(src *vci.ListVciAvailabilityZonesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListVciAvailabilityZonesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodeZonesArgs struct {
	Req *cluster.ListNodeZonesRequest `thrift:"req,1" json:"req"`
}

func NewResourceServiceListNodeZonesArgs() *ResourceServiceListNodeZonesArgs {
	return &ResourceServiceListNodeZonesArgs{}
}

var ResourceServiceListNodeZonesArgs_Req_DEFAULT *cluster.ListNodeZonesRequest

func (p *ResourceServiceListNodeZonesArgs) GetReq() (v *cluster.ListNodeZonesRequest) {
	if !p.IsSetReq() {
		return ResourceServiceListNodeZonesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ResourceServiceListNodeZonesArgs) SetReq(val *cluster.ListNodeZonesRequest) {
	p.Req = val
}

var fieldIDToName_ResourceServiceListNodeZonesArgs = map[int16]string{
	1: "req",
}

func (p *ResourceServiceListNodeZonesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResourceServiceListNodeZonesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodeZonesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = cluster.NewListNodeZonesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodeZonesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeZones_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodeZonesArgs(%+v)", *p)
}

func (p *ResourceServiceListNodeZonesArgs) DeepEqual(ano *ResourceServiceListNodeZonesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodeZonesArgs) Field1DeepEqual(src *cluster.ListNodeZonesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ResourceServiceListNodeZonesResult struct {
	Success *cluster.ListNodeZonesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewResourceServiceListNodeZonesResult() *ResourceServiceListNodeZonesResult {
	return &ResourceServiceListNodeZonesResult{}
}

var ResourceServiceListNodeZonesResult_Success_DEFAULT *cluster.ListNodeZonesResponse

func (p *ResourceServiceListNodeZonesResult) GetSuccess() (v *cluster.ListNodeZonesResponse) {
	if !p.IsSetSuccess() {
		return ResourceServiceListNodeZonesResult_Success_DEFAULT
	}
	return p.Success
}

var ResourceServiceListNodeZonesResult_Err_DEFAULT *common.Error

func (p *ResourceServiceListNodeZonesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return ResourceServiceListNodeZonesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *ResourceServiceListNodeZonesResult) SetSuccess(x interface{}) {
	p.Success = x.(*cluster.ListNodeZonesResponse)
}
func (p *ResourceServiceListNodeZonesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_ResourceServiceListNodeZonesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *ResourceServiceListNodeZonesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResourceServiceListNodeZonesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *ResourceServiceListNodeZonesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResourceServiceListNodeZonesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = cluster.NewListNodeZonesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodeZonesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResourceServiceListNodeZonesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeZones_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResourceServiceListNodeZonesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceServiceListNodeZonesResult(%+v)", *p)
}

func (p *ResourceServiceListNodeZonesResult) DeepEqual(ano *ResourceServiceListNodeZonesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *ResourceServiceListNodeZonesResult) Field0DeepEqual(src *cluster.ListNodeZonesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResourceServiceListNodeZonesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}
