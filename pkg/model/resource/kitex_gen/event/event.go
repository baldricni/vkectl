// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package event

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/base"
	"strings"
)

type ListEventRequest struct {
	ClusterId string              `thrift:"ClusterId,1,required" validate:"required"`
	Namespace *string             `thrift:"Namespace,2" json:"Namespace,omitempty"`
	Name      *string             `thrift:"Name,3" json:"Name,omitempty"`
	Kind      []string            `thrift:"Kind,4" json:"Kind,omitempty"`
	Start     int32               `thrift:"Start,5" validate:"gte=0"`
	Limit     int32               `thrift:"Limit,6" json:"Limit,omitempty"`
	Filters   map[string][]string `thrift:"Filters,7" json:"Filters,omitempty"`
	Top       *base.TopParam      `thrift:"Top,254,required" json:"Top"`
	Base      *base.Base          `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListEventRequest() *ListEventRequest {
	return &ListEventRequest{

		Start: 0,
		Limit: 10,
	}
}

func (p *ListEventRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListEventRequest_Namespace_DEFAULT string

func (p *ListEventRequest) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return ListEventRequest_Namespace_DEFAULT
	}
	return *p.Namespace
}

var ListEventRequest_Name_DEFAULT string

func (p *ListEventRequest) GetName() (v string) {
	if !p.IsSetName() {
		return ListEventRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListEventRequest_Kind_DEFAULT []string

func (p *ListEventRequest) GetKind() (v []string) {
	if !p.IsSetKind() {
		return ListEventRequest_Kind_DEFAULT
	}
	return p.Kind
}

var ListEventRequest_Start_DEFAULT int32 = 0

func (p *ListEventRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListEventRequest_Start_DEFAULT
	}
	return p.Start
}

var ListEventRequest_Limit_DEFAULT int32 = 10

func (p *ListEventRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListEventRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListEventRequest_Filters_DEFAULT map[string][]string

func (p *ListEventRequest) GetFilters() (v map[string][]string) {
	if !p.IsSetFilters() {
		return ListEventRequest_Filters_DEFAULT
	}
	return p.Filters
}

var ListEventRequest_Top_DEFAULT *base.TopParam

func (p *ListEventRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListEventRequest_Top_DEFAULT
	}
	return p.Top
}

var ListEventRequest_Base_DEFAULT *base.Base

func (p *ListEventRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListEventRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEventRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListEventRequest) SetNamespace(val *string) {
	p.Namespace = val
}
func (p *ListEventRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListEventRequest) SetKind(val []string) {
	p.Kind = val
}
func (p *ListEventRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListEventRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListEventRequest) SetFilters(val map[string][]string) {
	p.Filters = val
}
func (p *ListEventRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *ListEventRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEventRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Kind",
	5:   "Start",
	6:   "Limit",
	7:   "Filters",
	254: "Top",
	255: "Base",
}

func (p *ListEventRequest) IsSetNamespace() bool {
	return p.Namespace != nil
}

func (p *ListEventRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListEventRequest) IsSetKind() bool {
	return p.Kind != nil
}

func (p *ListEventRequest) IsSetStart() bool {
	return p.Start != ListEventRequest_Start_DEFAULT
}

func (p *ListEventRequest) IsSetLimit() bool {
	return p.Limit != ListEventRequest_Limit_DEFAULT
}

func (p *ListEventRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ListEventRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListEventRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEventRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEventRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListEventRequest[fieldId]))
}

func (p *ListEventRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListEventRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = &v
	}
	return nil
}

func (p *ListEventRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *ListEventRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Kind = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Kind = append(p.Kind, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListEventRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListEventRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListEventRequest) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Filters = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Filters[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListEventRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListEventRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListEventRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEventRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEventRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListEventRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListEventRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListEventRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetKind() {
		if err = oprot.WriteFieldBegin("Kind", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Kind)); err != nil {
			return err
		}
		for _, v := range p.Kind {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListEventRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListEventRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListEventRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("Filters", thrift.MAP, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Filters)); err != nil {
			return err
		}
		for k, v := range p.Filters {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListEventRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *ListEventRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEventRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEventRequest(%+v)", *p)
}

func (p *ListEventRequest) DeepEqual(ano *ListEventRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field5DeepEqual(ano.Start) {
		return false
	}
	if !p.Field6DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field7DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEventRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListEventRequest) Field2DeepEqual(src *string) bool {

	if p.Namespace == src {
		return true
	} else if p.Namespace == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Namespace, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEventRequest) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEventRequest) Field4DeepEqual(src []string) bool {

	if len(p.Kind) != len(src) {
		return false
	}
	for i, v := range p.Kind {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListEventRequest) Field5DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListEventRequest) Field6DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListEventRequest) Field7DeepEqual(src map[string][]string) bool {

	if len(p.Filters) != len(src) {
		return false
	}
	for k, v := range p.Filters {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *ListEventRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEventRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type Event struct {
	Id           string  `thrift:"Id,1,required" json:"Id"`
	OccorTime    string  `thrift:"OccorTime,2,required" json:"OccorTime"`
	ResourceName string  `thrift:"ResourceName,3,required" json:"ResourceName"`
	Kind         *string `thrift:"Kind,4" json:"Kind,omitempty"`
	Type         string  `thrift:"Type,5,required" json:"Type"`
	Message      *string `thrift:"Message,6" json:"Message,omitempty"`
	Detail       *string `thrift:"Detail,7" json:"Detail,omitempty"`
	Times        int32   `thrift:"Times,8,required" json:"Times"`
}

func NewEvent() *Event {
	return &Event{}
}

func (p *Event) GetId() (v string) {
	return p.Id
}

func (p *Event) GetOccorTime() (v string) {
	return p.OccorTime
}

func (p *Event) GetResourceName() (v string) {
	return p.ResourceName
}

var Event_Kind_DEFAULT string

func (p *Event) GetKind() (v string) {
	if !p.IsSetKind() {
		return Event_Kind_DEFAULT
	}
	return *p.Kind
}

func (p *Event) GetType() (v string) {
	return p.Type
}

var Event_Message_DEFAULT string

func (p *Event) GetMessage() (v string) {
	if !p.IsSetMessage() {
		return Event_Message_DEFAULT
	}
	return *p.Message
}

var Event_Detail_DEFAULT string

func (p *Event) GetDetail() (v string) {
	if !p.IsSetDetail() {
		return Event_Detail_DEFAULT
	}
	return *p.Detail
}

func (p *Event) GetTimes() (v int32) {
	return p.Times
}
func (p *Event) SetId(val string) {
	p.Id = val
}
func (p *Event) SetOccorTime(val string) {
	p.OccorTime = val
}
func (p *Event) SetResourceName(val string) {
	p.ResourceName = val
}
func (p *Event) SetKind(val *string) {
	p.Kind = val
}
func (p *Event) SetType(val string) {
	p.Type = val
}
func (p *Event) SetMessage(val *string) {
	p.Message = val
}
func (p *Event) SetDetail(val *string) {
	p.Detail = val
}
func (p *Event) SetTimes(val int32) {
	p.Times = val
}

var fieldIDToName_Event = map[int16]string{
	1: "Id",
	2: "OccorTime",
	3: "ResourceName",
	4: "Kind",
	5: "Type",
	6: "Message",
	7: "Detail",
	8: "Times",
}

func (p *Event) IsSetKind() bool {
	return p.Kind != nil
}

func (p *Event) IsSetMessage() bool {
	return p.Message != nil
}

func (p *Event) IsSetDetail() bool {
	return p.Detail != nil
}

func (p *Event) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetOccorTime bool = false
	var issetResourceName bool = false
	var issetType bool = false
	var issetTimes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOccorTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetResourceName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOccorTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetResourceName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTimes {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Event[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Event[fieldId]))
}

func (p *Event) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Event) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OccorTime = v
	}
	return nil
}

func (p *Event) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ResourceName = v
	}
	return nil
}

func (p *Event) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = &v
	}
	return nil
}

func (p *Event) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *Event) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = &v
	}
	return nil
}

func (p *Event) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Detail = &v
	}
	return nil
}

func (p *Event) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Times = v
	}
	return nil
}

func (p *Event) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Event"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Event) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Event) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OccorTime", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OccorTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Event) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ResourceName", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResourceName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Event) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetKind() {
		if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Kind); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Event) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Event) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("Message", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Event) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("Detail", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Detail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Event) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Times", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Times); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Event) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Event(%+v)", *p)
}

func (p *Event) DeepEqual(ano *Event) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.OccorTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.ResourceName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field5DeepEqual(ano.Type) {
		return false
	}
	if !p.Field6DeepEqual(ano.Message) {
		return false
	}
	if !p.Field7DeepEqual(ano.Detail) {
		return false
	}
	if !p.Field8DeepEqual(ano.Times) {
		return false
	}
	return true
}

func (p *Event) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field2DeepEqual(src string) bool {

	if strings.Compare(p.OccorTime, src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ResourceName, src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field4DeepEqual(src *string) bool {

	if p.Kind == src {
		return true
	} else if p.Kind == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Kind, *src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field6DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field7DeepEqual(src *string) bool {

	if p.Detail == src {
		return true
	} else if p.Detail == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Detail, *src) != 0 {
		return false
	}
	return true
}
func (p *Event) Field8DeepEqual(src int32) bool {

	if p.Times != src {
		return false
	}
	return true
}

type ListEventResponse struct {
	Items []*Event   `thrift:"Items,1,required" json:"Items"`
	Total int32      `thrift:"Total,2,required" json:"Total"`
	Base  *base.Base `thrift:"Base,255" json:"Base,omitempty"`
}

func NewListEventResponse() *ListEventResponse {
	return &ListEventResponse{}
}

func (p *ListEventResponse) GetItems() (v []*Event) {
	return p.Items
}

func (p *ListEventResponse) GetTotal() (v int32) {
	return p.Total
}

var ListEventResponse_Base_DEFAULT *base.Base

func (p *ListEventResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return ListEventResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEventResponse) SetItems(val []*Event) {
	p.Items = val
}
func (p *ListEventResponse) SetTotal(val int32) {
	p.Total = val
}
func (p *ListEventResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEventResponse = map[int16]string{
	1:   "Items",
	2:   "Total",
	255: "Base",
}

func (p *ListEventResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEventResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItems bool = false
	var issetTotal bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItems {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTotal {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEventResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListEventResponse[fieldId]))
}

func (p *ListEventResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*Event, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewEvent()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListEventResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListEventResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListEventResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEventResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListEventResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEventResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEventResponse(%+v)", *p)
}

func (p *ListEventResponse) DeepEqual(ano *ListEventResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEventResponse) Field1DeepEqual(src []*Event) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEventResponse) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListEventResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
