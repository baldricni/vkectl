// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package overview

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/resource/kitex_gen/base"
	"strings"
)

type ClusterStatistics struct {
	TotalCount   int32 `thrift:"TotalCount,1,required" json:"TotalCount"`
	RunningCount int32 `thrift:"RunningCount,2,required" json:"RunningCount"`
	ErrorCount   int32 `thrift:"ErrorCount,3,required" json:"ErrorCount"`
	OtherCount   int32 `thrift:"OtherCount,4,required" json:"OtherCount"`
}

func NewClusterStatistics() *ClusterStatistics {
	return &ClusterStatistics{}
}

func (p *ClusterStatistics) GetTotalCount() (v int32) {
	return p.TotalCount
}

func (p *ClusterStatistics) GetRunningCount() (v int32) {
	return p.RunningCount
}

func (p *ClusterStatistics) GetErrorCount() (v int32) {
	return p.ErrorCount
}

func (p *ClusterStatistics) GetOtherCount() (v int32) {
	return p.OtherCount
}
func (p *ClusterStatistics) SetTotalCount(val int32) {
	p.TotalCount = val
}
func (p *ClusterStatistics) SetRunningCount(val int32) {
	p.RunningCount = val
}
func (p *ClusterStatistics) SetErrorCount(val int32) {
	p.ErrorCount = val
}
func (p *ClusterStatistics) SetOtherCount(val int32) {
	p.OtherCount = val
}

var fieldIDToName_ClusterStatistics = map[int16]string{
	1: "TotalCount",
	2: "RunningCount",
	3: "ErrorCount",
	4: "OtherCount",
}

func (p *ClusterStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCount bool = false
	var issetRunningCount bool = false
	var issetErrorCount bool = false
	var issetOtherCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunningCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetOtherCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRunningCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetErrorCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetOtherCount {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterStatistics[fieldId]))
}

func (p *ClusterStatistics) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *ClusterStatistics) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.RunningCount = v
	}
	return nil
}

func (p *ClusterStatistics) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ErrorCount = v
	}
	return nil
}

func (p *ClusterStatistics) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.OtherCount = v
	}
	return nil
}

func (p *ClusterStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCount", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunningCount", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RunningCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorCount", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ErrorCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OtherCount", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OtherCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterStatistics(%+v)", *p)
}

func (p *ClusterStatistics) DeepEqual(ano *ClusterStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.RunningCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.ErrorCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.OtherCount) {
		return false
	}
	return true
}

func (p *ClusterStatistics) Field1DeepEqual(src int32) bool {

	if p.TotalCount != src {
		return false
	}
	return true
}
func (p *ClusterStatistics) Field2DeepEqual(src int32) bool {

	if p.RunningCount != src {
		return false
	}
	return true
}
func (p *ClusterStatistics) Field3DeepEqual(src int32) bool {

	if p.ErrorCount != src {
		return false
	}
	return true
}
func (p *ClusterStatistics) Field4DeepEqual(src int32) bool {

	if p.OtherCount != src {
		return false
	}
	return true
}

type NodeStatistics struct {
	TotalCount   int32 `thrift:"TotalCount,1,required" json:"TotalCount"`
	RunningCount int32 `thrift:"RunningCount,2,required" json:"RunningCount"`
	ErrorCount   int32 `thrift:"ErrorCount,3,required" json:"ErrorCount"`
	OtherCount   int32 `thrift:"OtherCount,4,required" json:"OtherCount"`
}

func NewNodeStatistics() *NodeStatistics {
	return &NodeStatistics{}
}

func (p *NodeStatistics) GetTotalCount() (v int32) {
	return p.TotalCount
}

func (p *NodeStatistics) GetRunningCount() (v int32) {
	return p.RunningCount
}

func (p *NodeStatistics) GetErrorCount() (v int32) {
	return p.ErrorCount
}

func (p *NodeStatistics) GetOtherCount() (v int32) {
	return p.OtherCount
}
func (p *NodeStatistics) SetTotalCount(val int32) {
	p.TotalCount = val
}
func (p *NodeStatistics) SetRunningCount(val int32) {
	p.RunningCount = val
}
func (p *NodeStatistics) SetErrorCount(val int32) {
	p.ErrorCount = val
}
func (p *NodeStatistics) SetOtherCount(val int32) {
	p.OtherCount = val
}

var fieldIDToName_NodeStatistics = map[int16]string{
	1: "TotalCount",
	2: "RunningCount",
	3: "ErrorCount",
	4: "OtherCount",
}

func (p *NodeStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCount bool = false
	var issetRunningCount bool = false
	var issetErrorCount bool = false
	var issetOtherCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunningCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetErrorCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetOtherCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetRunningCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetErrorCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetOtherCount {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodeStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodeStatistics[fieldId]))
}

func (p *NodeStatistics) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *NodeStatistics) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.RunningCount = v
	}
	return nil
}

func (p *NodeStatistics) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ErrorCount = v
	}
	return nil
}

func (p *NodeStatistics) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.OtherCount = v
	}
	return nil
}

func (p *NodeStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodeStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCount", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodeStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunningCount", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RunningCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodeStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ErrorCount", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ErrorCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodeStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OtherCount", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OtherCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NodeStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeStatistics(%+v)", *p)
}

func (p *NodeStatistics) DeepEqual(ano *NodeStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.RunningCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.ErrorCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.OtherCount) {
		return false
	}
	return true
}

func (p *NodeStatistics) Field1DeepEqual(src int32) bool {

	if p.TotalCount != src {
		return false
	}
	return true
}
func (p *NodeStatistics) Field2DeepEqual(src int32) bool {

	if p.RunningCount != src {
		return false
	}
	return true
}
func (p *NodeStatistics) Field3DeepEqual(src int32) bool {

	if p.ErrorCount != src {
		return false
	}
	return true
}
func (p *NodeStatistics) Field4DeepEqual(src int32) bool {

	if p.OtherCount != src {
		return false
	}
	return true
}

type WorkloadStatistics struct {
	TotalCount  int32 `thrift:"TotalCount,1,required" json:"TotalCount"`
	NormalCount int32 `thrift:"NormalCount,2,required" json:"NormalCount"`
	OtherCount  int32 `thrift:"OtherCount,3,required" json:"OtherCount"`
}

func NewWorkloadStatistics() *WorkloadStatistics {
	return &WorkloadStatistics{}
}

func (p *WorkloadStatistics) GetTotalCount() (v int32) {
	return p.TotalCount
}

func (p *WorkloadStatistics) GetNormalCount() (v int32) {
	return p.NormalCount
}

func (p *WorkloadStatistics) GetOtherCount() (v int32) {
	return p.OtherCount
}
func (p *WorkloadStatistics) SetTotalCount(val int32) {
	p.TotalCount = val
}
func (p *WorkloadStatistics) SetNormalCount(val int32) {
	p.NormalCount = val
}
func (p *WorkloadStatistics) SetOtherCount(val int32) {
	p.OtherCount = val
}

var fieldIDToName_WorkloadStatistics = map[int16]string{
	1: "TotalCount",
	2: "NormalCount",
	3: "OtherCount",
}

func (p *WorkloadStatistics) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCount bool = false
	var issetNormalCount bool = false
	var issetOtherCount bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNormalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetOtherCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNormalCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetOtherCount {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WorkloadStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_WorkloadStatistics[fieldId]))
}

func (p *WorkloadStatistics) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *WorkloadStatistics) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NormalCount = v
	}
	return nil
}

func (p *WorkloadStatistics) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.OtherCount = v
	}
	return nil
}

func (p *WorkloadStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WorkloadStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WorkloadStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCount", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WorkloadStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NormalCount", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NormalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *WorkloadStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("OtherCount", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.OtherCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *WorkloadStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkloadStatistics(%+v)", *p)
}

func (p *WorkloadStatistics) DeepEqual(ano *WorkloadStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.NormalCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.OtherCount) {
		return false
	}
	return true
}

func (p *WorkloadStatistics) Field1DeepEqual(src int32) bool {

	if p.TotalCount != src {
		return false
	}
	return true
}
func (p *WorkloadStatistics) Field2DeepEqual(src int32) bool {

	if p.NormalCount != src {
		return false
	}
	return true
}
func (p *WorkloadStatistics) Field3DeepEqual(src int32) bool {

	if p.OtherCount != src {
		return false
	}
	return true
}

type ClusterDetailItem struct {
	Id                  string `thrift:"Id,1,required" json:"Id"`
	Name                string `thrift:"Name,2,required" json:"Name"`
	TotalCpu            string `thrift:"TotalCpu,3,required" json:"TotalCpu"`
	UsedCpu             string `thrift:"UsedCpu,4,required" json:"UsedCpu"`
	TotalMemory         string `thrift:"TotalMemory,5,required" json:"TotalMemory"`
	UsedMemory          string `thrift:"UsedMemory,6,required" json:"UsedMemory"`
	NodeTotalCount      int32  `thrift:"NodeTotalCount,7,required" json:"NodeTotalCount"`
	NodeNormalCount     int32  `thrift:"NodeNormalCount,8,required" json:"NodeNormalCount"`
	WorkloadTotalCount  int32  `thrift:"WorkloadTotalCount,9,required" json:"WorkloadTotalCount"`
	WorkloadNormalCount int32  `thrift:"WorkloadNormalCount,10,required" json:"WorkloadNormalCount"`
	Status              string `thrift:"Status,11,required" json:"Status"`
}

func NewClusterDetailItem() *ClusterDetailItem {
	return &ClusterDetailItem{}
}

func (p *ClusterDetailItem) GetId() (v string) {
	return p.Id
}

func (p *ClusterDetailItem) GetName() (v string) {
	return p.Name
}

func (p *ClusterDetailItem) GetTotalCpu() (v string) {
	return p.TotalCpu
}

func (p *ClusterDetailItem) GetUsedCpu() (v string) {
	return p.UsedCpu
}

func (p *ClusterDetailItem) GetTotalMemory() (v string) {
	return p.TotalMemory
}

func (p *ClusterDetailItem) GetUsedMemory() (v string) {
	return p.UsedMemory
}

func (p *ClusterDetailItem) GetNodeTotalCount() (v int32) {
	return p.NodeTotalCount
}

func (p *ClusterDetailItem) GetNodeNormalCount() (v int32) {
	return p.NodeNormalCount
}

func (p *ClusterDetailItem) GetWorkloadTotalCount() (v int32) {
	return p.WorkloadTotalCount
}

func (p *ClusterDetailItem) GetWorkloadNormalCount() (v int32) {
	return p.WorkloadNormalCount
}

func (p *ClusterDetailItem) GetStatus() (v string) {
	return p.Status
}
func (p *ClusterDetailItem) SetId(val string) {
	p.Id = val
}
func (p *ClusterDetailItem) SetName(val string) {
	p.Name = val
}
func (p *ClusterDetailItem) SetTotalCpu(val string) {
	p.TotalCpu = val
}
func (p *ClusterDetailItem) SetUsedCpu(val string) {
	p.UsedCpu = val
}
func (p *ClusterDetailItem) SetTotalMemory(val string) {
	p.TotalMemory = val
}
func (p *ClusterDetailItem) SetUsedMemory(val string) {
	p.UsedMemory = val
}
func (p *ClusterDetailItem) SetNodeTotalCount(val int32) {
	p.NodeTotalCount = val
}
func (p *ClusterDetailItem) SetNodeNormalCount(val int32) {
	p.NodeNormalCount = val
}
func (p *ClusterDetailItem) SetWorkloadTotalCount(val int32) {
	p.WorkloadTotalCount = val
}
func (p *ClusterDetailItem) SetWorkloadNormalCount(val int32) {
	p.WorkloadNormalCount = val
}
func (p *ClusterDetailItem) SetStatus(val string) {
	p.Status = val
}

var fieldIDToName_ClusterDetailItem = map[int16]string{
	1:  "Id",
	2:  "Name",
	3:  "TotalCpu",
	4:  "UsedCpu",
	5:  "TotalMemory",
	6:  "UsedMemory",
	7:  "NodeTotalCount",
	8:  "NodeNormalCount",
	9:  "WorkloadTotalCount",
	10: "WorkloadNormalCount",
	11: "Status",
}

func (p *ClusterDetailItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetName bool = false
	var issetTotalCpu bool = false
	var issetUsedCpu bool = false
	var issetTotalMemory bool = false
	var issetUsedMemory bool = false
	var issetNodeTotalCount bool = false
	var issetNodeNormalCount bool = false
	var issetWorkloadTotalCount bool = false
	var issetWorkloadNormalCount bool = false
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedCpu = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetUsedMemory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeNormalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadNormalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTotalCpu {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUsedCpu {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTotalMemory {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetUsedMemory {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetNodeTotalCount {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNodeNormalCount {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadTotalCount {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadNormalCount {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClusterDetailItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ClusterDetailItem[fieldId]))
}

func (p *ClusterDetailItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalCpu = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedCpu = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TotalMemory = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UsedMemory = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NodeTotalCount = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NodeNormalCount = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.WorkloadTotalCount = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.WorkloadNormalCount = v
	}
	return nil
}

func (p *ClusterDetailItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ClusterDetailItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClusterDetailItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClusterDetailItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCpu", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedCpu", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedCpu); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalMemory", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TotalMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UsedMemory", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UsedMemory); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeTotalCount", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NodeTotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeNormalCount", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.NodeNormalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadTotalCount", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.WorkloadTotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadNormalCount", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.WorkloadNormalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ClusterDetailItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ClusterDetailItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClusterDetailItem(%+v)", *p)
}

func (p *ClusterDetailItem) DeepEqual(ano *ClusterDetailItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.TotalCpu) {
		return false
	}
	if !p.Field4DeepEqual(ano.UsedCpu) {
		return false
	}
	if !p.Field5DeepEqual(ano.TotalMemory) {
		return false
	}
	if !p.Field6DeepEqual(ano.UsedMemory) {
		return false
	}
	if !p.Field7DeepEqual(ano.NodeTotalCount) {
		return false
	}
	if !p.Field8DeepEqual(ano.NodeNormalCount) {
		return false
	}
	if !p.Field9DeepEqual(ano.WorkloadTotalCount) {
		return false
	}
	if !p.Field10DeepEqual(ano.WorkloadNormalCount) {
		return false
	}
	if !p.Field11DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ClusterDetailItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TotalCpu, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.UsedCpu, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TotalMemory, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UsedMemory, src) != 0 {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field7DeepEqual(src int32) bool {

	if p.NodeTotalCount != src {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field8DeepEqual(src int32) bool {

	if p.NodeNormalCount != src {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field9DeepEqual(src int32) bool {

	if p.WorkloadTotalCount != src {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field10DeepEqual(src int32) bool {

	if p.WorkloadNormalCount != src {
		return false
	}
	return true
}
func (p *ClusterDetailItem) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}

type GetClusterOverviewRequest struct {
	Top  *base.TopParam `thrift:"Top,254,required" json:"Top"`
	Base *base.Base     `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterOverviewRequest() *GetClusterOverviewRequest {
	return &GetClusterOverviewRequest{}
}

var GetClusterOverviewRequest_Top_DEFAULT *base.TopParam

func (p *GetClusterOverviewRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetClusterOverviewRequest_Top_DEFAULT
	}
	return p.Top
}

var GetClusterOverviewRequest_Base_DEFAULT *base.Base

func (p *GetClusterOverviewRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterOverviewRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterOverviewRequest) SetTop(val *base.TopParam) {
	p.Top = val
}
func (p *GetClusterOverviewRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterOverviewRequest = map[int16]string{
	254: "Top",
	255: "Base",
}

func (p *GetClusterOverviewRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetClusterOverviewRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterOverviewRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 254:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField254(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTop {
		fieldId = 254
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterOverviewRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterOverviewRequest[fieldId]))
}

func (p *GetClusterOverviewRequest) ReadField254(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterOverviewRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField254(oprot); err != nil {
			fieldId = 254
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterOverviewRequest) writeField254(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 254); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 254 end error: ", p), err)
}

func (p *GetClusterOverviewRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterOverviewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterOverviewRequest(%+v)", *p)
}

func (p *GetClusterOverviewRequest) DeepEqual(ano *GetClusterOverviewRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field254DeepEqual(ano.Top) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterOverviewRequest) Field254DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterOverviewRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetClusterOverviewResponse struct {
	ClusterStatistics  *ClusterStatistics   `thrift:"ClusterStatistics,1,required" json:"ClusterStatistics"`
	NodeStatistics     *NodeStatistics      `thrift:"NodeStatistics,2,required" json:"NodeStatistics"`
	WorkloadStatistics *WorkloadStatistics  `thrift:"WorkloadStatistics,3,required" json:"WorkloadStatistics"`
	ClusterDetails     []*ClusterDetailItem `thrift:"ClusterDetails,4,required" json:"ClusterDetails"`
	Base               *base.Base           `thrift:"Base,255" json:"Base,omitempty"`
}

func NewGetClusterOverviewResponse() *GetClusterOverviewResponse {
	return &GetClusterOverviewResponse{}
}

var GetClusterOverviewResponse_ClusterStatistics_DEFAULT *ClusterStatistics

func (p *GetClusterOverviewResponse) GetClusterStatistics() (v *ClusterStatistics) {
	if !p.IsSetClusterStatistics() {
		return GetClusterOverviewResponse_ClusterStatistics_DEFAULT
	}
	return p.ClusterStatistics
}

var GetClusterOverviewResponse_NodeStatistics_DEFAULT *NodeStatistics

func (p *GetClusterOverviewResponse) GetNodeStatistics() (v *NodeStatistics) {
	if !p.IsSetNodeStatistics() {
		return GetClusterOverviewResponse_NodeStatistics_DEFAULT
	}
	return p.NodeStatistics
}

var GetClusterOverviewResponse_WorkloadStatistics_DEFAULT *WorkloadStatistics

func (p *GetClusterOverviewResponse) GetWorkloadStatistics() (v *WorkloadStatistics) {
	if !p.IsSetWorkloadStatistics() {
		return GetClusterOverviewResponse_WorkloadStatistics_DEFAULT
	}
	return p.WorkloadStatistics
}

func (p *GetClusterOverviewResponse) GetClusterDetails() (v []*ClusterDetailItem) {
	return p.ClusterDetails
}

var GetClusterOverviewResponse_Base_DEFAULT *base.Base

func (p *GetClusterOverviewResponse) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetClusterOverviewResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *GetClusterOverviewResponse) SetClusterStatistics(val *ClusterStatistics) {
	p.ClusterStatistics = val
}
func (p *GetClusterOverviewResponse) SetNodeStatistics(val *NodeStatistics) {
	p.NodeStatistics = val
}
func (p *GetClusterOverviewResponse) SetWorkloadStatistics(val *WorkloadStatistics) {
	p.WorkloadStatistics = val
}
func (p *GetClusterOverviewResponse) SetClusterDetails(val []*ClusterDetailItem) {
	p.ClusterDetails = val
}
func (p *GetClusterOverviewResponse) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetClusterOverviewResponse = map[int16]string{
	1:   "ClusterStatistics",
	2:   "NodeStatistics",
	3:   "WorkloadStatistics",
	4:   "ClusterDetails",
	255: "Base",
}

func (p *GetClusterOverviewResponse) IsSetClusterStatistics() bool {
	return p.ClusterStatistics != nil
}

func (p *GetClusterOverviewResponse) IsSetNodeStatistics() bool {
	return p.NodeStatistics != nil
}

func (p *GetClusterOverviewResponse) IsSetWorkloadStatistics() bool {
	return p.WorkloadStatistics != nil
}

func (p *GetClusterOverviewResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetClusterOverviewResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterStatistics bool = false
	var issetNodeStatistics bool = false
	var issetWorkloadStatistics bool = false
	var issetClusterDetails bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterStatistics = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeStatistics = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadStatistics = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterDetails = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterStatistics {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNodeStatistics {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadStatistics {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetClusterDetails {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetClusterOverviewResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetClusterOverviewResponse[fieldId]))
}

func (p *GetClusterOverviewResponse) ReadField1(iprot thrift.TProtocol) error {
	p.ClusterStatistics = NewClusterStatistics()
	if err := p.ClusterStatistics.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewResponse) ReadField2(iprot thrift.TProtocol) error {
	p.NodeStatistics = NewNodeStatistics()
	if err := p.NodeStatistics.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewResponse) ReadField3(iprot thrift.TProtocol) error {
	p.WorkloadStatistics = NewWorkloadStatistics()
	if err := p.WorkloadStatistics.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ClusterDetails = make([]*ClusterDetailItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewClusterDetailItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ClusterDetails = append(p.ClusterDetails, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewResponse) ReadField255(iprot thrift.TProtocol) error {
	p.Base = base.NewBase()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetClusterOverviewResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetClusterOverviewResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetClusterOverviewResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterStatistics", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ClusterStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetClusterOverviewResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeStatistics", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.NodeStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetClusterOverviewResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadStatistics", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.WorkloadStatistics.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetClusterOverviewResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterDetails", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ClusterDetails)); err != nil {
		return err
	}
	for _, v := range p.ClusterDetails {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetClusterOverviewResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetClusterOverviewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetClusterOverviewResponse(%+v)", *p)
}

func (p *GetClusterOverviewResponse) DeepEqual(ano *GetClusterOverviewResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterStatistics) {
		return false
	}
	if !p.Field2DeepEqual(ano.NodeStatistics) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkloadStatistics) {
		return false
	}
	if !p.Field4DeepEqual(ano.ClusterDetails) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetClusterOverviewResponse) Field1DeepEqual(src *ClusterStatistics) bool {

	if !p.ClusterStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterOverviewResponse) Field2DeepEqual(src *NodeStatistics) bool {

	if !p.NodeStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterOverviewResponse) Field3DeepEqual(src *WorkloadStatistics) bool {

	if !p.WorkloadStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetClusterOverviewResponse) Field4DeepEqual(src []*ClusterDetailItem) bool {

	if len(p.ClusterDetails) != len(src) {
		return false
	}
	for i, v := range p.ClusterDetails {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetClusterOverviewResponse) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
