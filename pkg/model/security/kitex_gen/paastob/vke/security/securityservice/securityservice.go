// Code generated by Kitex v0.1.0. DO NOT EDIT.

package securityservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/volcengine/vkectl/pkg/model/security/kitex_gen/paastob/productivity/common"
	"github.com/volcengine/vkectl/pkg/model/security/kitex_gen/paastob/vke/security"
)

func serviceInfo() *kitex.ServiceInfo {
	return securityServiceServiceInfo
}

var securityServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SecurityService"
	handlerType := (*security.SecurityService)(nil)
	methods := map[string]kitex.MethodInfo{
		"StartScan":       kitex.NewMethodInfo(startScanHandler, newSecurityServiceStartScanArgs, newSecurityServiceStartScanResult, false),
		"ListBenchmarks":  kitex.NewMethodInfo(listBenchmarksHandler, newSecurityServiceListBenchmarksArgs, newSecurityServiceListBenchmarksResult, false),
		"GetCronScan":     kitex.NewMethodInfo(getCronScanHandler, newSecurityServiceGetCronScanArgs, newSecurityServiceGetCronScanResult, false),
		"UpdateCronScan":  kitex.NewMethodInfo(updateCronScanHandler, newSecurityServiceUpdateCronScanArgs, newSecurityServiceUpdateCronScanResult, false),
		"ListNodeReports": kitex.NewMethodInfo(listNodeReportsHandler, newSecurityServiceListNodeReportsArgs, newSecurityServiceListNodeReportsResult, false),
		"StartNodeScan":   kitex.NewMethodInfo(startNodeScanHandler, newSecurityServiceStartNodeScanArgs, newSecurityServiceStartNodeScanResult, false),
		"ListCheckItems":  kitex.NewMethodInfo(listCheckItemsHandler, newSecurityServiceListCheckItemsArgs, newSecurityServiceListCheckItemsResult, false),
		"GetCheckItem":    kitex.NewMethodInfo(getCheckItemHandler, newSecurityServiceGetCheckItemArgs, newSecurityServiceGetCheckItemResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "security",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.1.0",
		Extra:           extra,
	}
	return svcInfo
}

func startScanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceStartScanArgs)
	realResult := result.(*security.SecurityServiceStartScanResult)
	success, err := handler.(security.SecurityService).StartScan(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceStartScanArgs() interface{} {
	return security.NewSecurityServiceStartScanArgs()
}

func newSecurityServiceStartScanResult() interface{} {
	return security.NewSecurityServiceStartScanResult()
}

func listBenchmarksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceListBenchmarksArgs)
	realResult := result.(*security.SecurityServiceListBenchmarksResult)
	success, err := handler.(security.SecurityService).ListBenchmarks(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceListBenchmarksArgs() interface{} {
	return security.NewSecurityServiceListBenchmarksArgs()
}

func newSecurityServiceListBenchmarksResult() interface{} {
	return security.NewSecurityServiceListBenchmarksResult()
}

func getCronScanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceGetCronScanArgs)
	realResult := result.(*security.SecurityServiceGetCronScanResult)
	success, err := handler.(security.SecurityService).GetCronScan(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceGetCronScanArgs() interface{} {
	return security.NewSecurityServiceGetCronScanArgs()
}

func newSecurityServiceGetCronScanResult() interface{} {
	return security.NewSecurityServiceGetCronScanResult()
}

func updateCronScanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceUpdateCronScanArgs)
	realResult := result.(*security.SecurityServiceUpdateCronScanResult)
	success, err := handler.(security.SecurityService).UpdateCronScan(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceUpdateCronScanArgs() interface{} {
	return security.NewSecurityServiceUpdateCronScanArgs()
}

func newSecurityServiceUpdateCronScanResult() interface{} {
	return security.NewSecurityServiceUpdateCronScanResult()
}

func listNodeReportsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceListNodeReportsArgs)
	realResult := result.(*security.SecurityServiceListNodeReportsResult)
	success, err := handler.(security.SecurityService).ListNodeReports(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceListNodeReportsArgs() interface{} {
	return security.NewSecurityServiceListNodeReportsArgs()
}

func newSecurityServiceListNodeReportsResult() interface{} {
	return security.NewSecurityServiceListNodeReportsResult()
}

func startNodeScanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceStartNodeScanArgs)
	realResult := result.(*security.SecurityServiceStartNodeScanResult)
	success, err := handler.(security.SecurityService).StartNodeScan(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceStartNodeScanArgs() interface{} {
	return security.NewSecurityServiceStartNodeScanArgs()
}

func newSecurityServiceStartNodeScanResult() interface{} {
	return security.NewSecurityServiceStartNodeScanResult()
}

func listCheckItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceListCheckItemsArgs)
	realResult := result.(*security.SecurityServiceListCheckItemsResult)
	success, err := handler.(security.SecurityService).ListCheckItems(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceListCheckItemsArgs() interface{} {
	return security.NewSecurityServiceListCheckItemsArgs()
}

func newSecurityServiceListCheckItemsResult() interface{} {
	return security.NewSecurityServiceListCheckItemsResult()
}

func getCheckItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityServiceGetCheckItemArgs)
	realResult := result.(*security.SecurityServiceGetCheckItemResult)
	success, err := handler.(security.SecurityService).GetCheckItem(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSecurityServiceGetCheckItemArgs() interface{} {
	return security.NewSecurityServiceGetCheckItemArgs()
}

func newSecurityServiceGetCheckItemResult() interface{} {
	return security.NewSecurityServiceGetCheckItemResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) StartScan(ctx context.Context, req *security.StartScanRequest) (r *common.EmptyResponse, err error) {
	var _args security.SecurityServiceStartScanArgs
	_args.Req = req
	var _result security.SecurityServiceStartScanResult
	if err = p.c.Call(ctx, "StartScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBenchmarks(ctx context.Context, req *security.ListBenchmarksRequest) (r *security.ListBenchmarksResponse, err error) {
	var _args security.SecurityServiceListBenchmarksArgs
	_args.Req = req
	var _result security.SecurityServiceListBenchmarksResult
	if err = p.c.Call(ctx, "ListBenchmarks", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCronScan(ctx context.Context, req *security.GetCronScanRequest) (r *security.GetCronScanResponse, err error) {
	var _args security.SecurityServiceGetCronScanArgs
	_args.Req = req
	var _result security.SecurityServiceGetCronScanResult
	if err = p.c.Call(ctx, "GetCronScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCronScan(ctx context.Context, req *security.UpdateCronScanRequest) (r *common.EmptyResponse, err error) {
	var _args security.SecurityServiceUpdateCronScanArgs
	_args.Req = req
	var _result security.SecurityServiceUpdateCronScanResult
	if err = p.c.Call(ctx, "UpdateCronScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListNodeReports(ctx context.Context, req *security.ListNodeReportsRequest) (r *security.ListNodeReportsResponse, err error) {
	var _args security.SecurityServiceListNodeReportsArgs
	_args.Req = req
	var _result security.SecurityServiceListNodeReportsResult
	if err = p.c.Call(ctx, "ListNodeReports", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StartNodeScan(ctx context.Context, req *security.StartNodeScanRequest) (r *common.EmptyResponse, err error) {
	var _args security.SecurityServiceStartNodeScanArgs
	_args.Req = req
	var _result security.SecurityServiceStartNodeScanResult
	if err = p.c.Call(ctx, "StartNodeScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCheckItems(ctx context.Context, req *security.ListCheckItemsRequest) (r *security.ListCheckItemsResponse, err error) {
	var _args security.SecurityServiceListCheckItemsArgs
	_args.Req = req
	var _result security.SecurityServiceListCheckItemsResult
	if err = p.c.Call(ctx, "ListCheckItems", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCheckItem(ctx context.Context, req *security.GetCheckItemRequest) (r *security.GetCheckItemResponse, err error) {
	var _args security.SecurityServiceGetCheckItemArgs
	_args.Req = req
	var _result security.SecurityServiceGetCheckItemResult
	if err = p.c.Call(ctx, "GetCheckItem", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}
