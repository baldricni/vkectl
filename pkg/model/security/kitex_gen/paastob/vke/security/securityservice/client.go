// Code generated by Kitex v0.1.0. DO NOT EDIT.

package securityservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/volcengine/vkectl/pkg/model/security/kitex_gen/paastob/productivity/common"
	"github.com/volcengine/vkectl/pkg/model/security/kitex_gen/paastob/vke/security"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	StartScan(ctx context.Context, req *security.StartScanRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	ListBenchmarks(ctx context.Context, req *security.ListBenchmarksRequest, callOptions ...callopt.Option) (r *security.ListBenchmarksResponse, err error)
	GetCronScan(ctx context.Context, req *security.GetCronScanRequest, callOptions ...callopt.Option) (r *security.GetCronScanResponse, err error)
	UpdateCronScan(ctx context.Context, req *security.UpdateCronScanRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	ListNodeReports(ctx context.Context, req *security.ListNodeReportsRequest, callOptions ...callopt.Option) (r *security.ListNodeReportsResponse, err error)
	StartNodeScan(ctx context.Context, req *security.StartNodeScanRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error)
	ListCheckItems(ctx context.Context, req *security.ListCheckItemsRequest, callOptions ...callopt.Option) (r *security.ListCheckItemsResponse, err error)
	GetCheckItem(ctx context.Context, req *security.GetCheckItemRequest, callOptions ...callopt.Option) (r *security.GetCheckItemResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kSecurityServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSecurityServiceClient struct {
	*kClient
}

func (p *kSecurityServiceClient) StartScan(ctx context.Context, req *security.StartScanRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StartScan(ctx, req)
}

func (p *kSecurityServiceClient) ListBenchmarks(ctx context.Context, req *security.ListBenchmarksRequest, callOptions ...callopt.Option) (r *security.ListBenchmarksResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListBenchmarks(ctx, req)
}

func (p *kSecurityServiceClient) GetCronScan(ctx context.Context, req *security.GetCronScanRequest, callOptions ...callopt.Option) (r *security.GetCronScanResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCronScan(ctx, req)
}

func (p *kSecurityServiceClient) UpdateCronScan(ctx context.Context, req *security.UpdateCronScanRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCronScan(ctx, req)
}

func (p *kSecurityServiceClient) ListNodeReports(ctx context.Context, req *security.ListNodeReportsRequest, callOptions ...callopt.Option) (r *security.ListNodeReportsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListNodeReports(ctx, req)
}

func (p *kSecurityServiceClient) StartNodeScan(ctx context.Context, req *security.StartNodeScanRequest, callOptions ...callopt.Option) (r *common.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StartNodeScan(ctx, req)
}

func (p *kSecurityServiceClient) ListCheckItems(ctx context.Context, req *security.ListCheckItemsRequest, callOptions ...callopt.Option) (r *security.ListCheckItemsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCheckItems(ctx, req)
}

func (p *kSecurityServiceClient) GetCheckItem(ctx context.Context, req *security.GetCheckItemRequest, callOptions ...callopt.Option) (r *security.GetCheckItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCheckItem(ctx, req)
}
