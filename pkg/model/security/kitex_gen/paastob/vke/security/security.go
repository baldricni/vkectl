// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package security

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/security/kitex_gen/paastob/productivity/common"
)

type ErrCode int64

const (
	ErrCode_ParamErr    ErrCode = 1
	ErrCode_NetworkErr  ErrCode = 2
	ErrCode_NotFoundErr ErrCode = 3
	ErrCode_InternalErr ErrCode = 4
	ErrCode_ConflictErr ErrCode = 5
)

func (p ErrCode) String() string {
	switch p {
	case ErrCode_ParamErr:
		return "ParamErr"
	case ErrCode_NetworkErr:
		return "NetworkErr"
	case ErrCode_NotFoundErr:
		return "NotFoundErr"
	case ErrCode_InternalErr:
		return "InternalErr"
	case ErrCode_ConflictErr:
		return "ConflictErr"
	}
	return "<UNSET>"
}

func ErrCodeFromString(s string) (ErrCode, error) {
	switch s {
	case "ParamErr":
		return ErrCode_ParamErr, nil
	case "NetworkErr":
		return ErrCode_NetworkErr, nil
	case "NotFoundErr":
		return ErrCode_NotFoundErr, nil
	case "InternalErr":
		return ErrCode_InternalErr, nil
	case "ConflictErr":
		return ErrCode_ConflictErr, nil
	}
	return ErrCode(0), fmt.Errorf("not a valid ErrCode string")
}

func ErrCodePtr(v ErrCode) *ErrCode { return &v }

func (p *ErrCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ErrCode(result.Int64)
	return
}

func (p *ErrCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SecurityService interface {
	StartScan(ctx context.Context, req *StartScanRequest) (r *common.EmptyResponse, err error)

	ListBenchmarks(ctx context.Context, req *ListBenchmarksRequest) (r *ListBenchmarksResponse, err error)

	GetCronScan(ctx context.Context, req *GetCronScanRequest) (r *GetCronScanResponse, err error)

	UpdateCronScan(ctx context.Context, req *UpdateCronScanRequest) (r *common.EmptyResponse, err error)

	ListNodeReports(ctx context.Context, req *ListNodeReportsRequest) (r *ListNodeReportsResponse, err error)

	StartNodeScan(ctx context.Context, req *StartNodeScanRequest) (r *common.EmptyResponse, err error)

	ListCheckItems(ctx context.Context, req *ListCheckItemsRequest) (r *ListCheckItemsResponse, err error)

	GetCheckItem(ctx context.Context, req *GetCheckItemRequest) (r *GetCheckItemResponse, err error)
}

type SecurityServiceClient struct {
	c thrift.TClient
}

func NewSecurityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecurityServiceClient {
	return &SecurityServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSecurityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecurityServiceClient {
	return &SecurityServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSecurityServiceClient(c thrift.TClient) *SecurityServiceClient {
	return &SecurityServiceClient{
		c: c,
	}
}

func (p *SecurityServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SecurityServiceClient) StartScan(ctx context.Context, req *StartScanRequest) (r *common.EmptyResponse, err error) {
	var _args SecurityServiceStartScanArgs
	_args.Req = req
	var _result SecurityServiceStartScanResult
	if err = p.Client_().Call(ctx, "StartScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) ListBenchmarks(ctx context.Context, req *ListBenchmarksRequest) (r *ListBenchmarksResponse, err error) {
	var _args SecurityServiceListBenchmarksArgs
	_args.Req = req
	var _result SecurityServiceListBenchmarksResult
	if err = p.Client_().Call(ctx, "ListBenchmarks", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) GetCronScan(ctx context.Context, req *GetCronScanRequest) (r *GetCronScanResponse, err error) {
	var _args SecurityServiceGetCronScanArgs
	_args.Req = req
	var _result SecurityServiceGetCronScanResult
	if err = p.Client_().Call(ctx, "GetCronScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) UpdateCronScan(ctx context.Context, req *UpdateCronScanRequest) (r *common.EmptyResponse, err error) {
	var _args SecurityServiceUpdateCronScanArgs
	_args.Req = req
	var _result SecurityServiceUpdateCronScanResult
	if err = p.Client_().Call(ctx, "UpdateCronScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) ListNodeReports(ctx context.Context, req *ListNodeReportsRequest) (r *ListNodeReportsResponse, err error) {
	var _args SecurityServiceListNodeReportsArgs
	_args.Req = req
	var _result SecurityServiceListNodeReportsResult
	if err = p.Client_().Call(ctx, "ListNodeReports", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) StartNodeScan(ctx context.Context, req *StartNodeScanRequest) (r *common.EmptyResponse, err error) {
	var _args SecurityServiceStartNodeScanArgs
	_args.Req = req
	var _result SecurityServiceStartNodeScanResult
	if err = p.Client_().Call(ctx, "StartNodeScan", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) ListCheckItems(ctx context.Context, req *ListCheckItemsRequest) (r *ListCheckItemsResponse, err error) {
	var _args SecurityServiceListCheckItemsArgs
	_args.Req = req
	var _result SecurityServiceListCheckItemsResult
	if err = p.Client_().Call(ctx, "ListCheckItems", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *SecurityServiceClient) GetCheckItem(ctx context.Context, req *GetCheckItemRequest) (r *GetCheckItemResponse, err error) {
	var _args SecurityServiceGetCheckItemArgs
	_args.Req = req
	var _result SecurityServiceGetCheckItemResult
	if err = p.Client_().Call(ctx, "GetCheckItem", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

type SecurityServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SecurityService
}

func (p *SecurityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SecurityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SecurityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSecurityServiceProcessor(handler SecurityService) *SecurityServiceProcessor {
	self := &SecurityServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("StartScan", &securityServiceProcessorStartScan{handler: handler})
	self.AddToProcessorMap("ListBenchmarks", &securityServiceProcessorListBenchmarks{handler: handler})
	self.AddToProcessorMap("GetCronScan", &securityServiceProcessorGetCronScan{handler: handler})
	self.AddToProcessorMap("UpdateCronScan", &securityServiceProcessorUpdateCronScan{handler: handler})
	self.AddToProcessorMap("ListNodeReports", &securityServiceProcessorListNodeReports{handler: handler})
	self.AddToProcessorMap("StartNodeScan", &securityServiceProcessorStartNodeScan{handler: handler})
	self.AddToProcessorMap("ListCheckItems", &securityServiceProcessorListCheckItems{handler: handler})
	self.AddToProcessorMap("GetCheckItem", &securityServiceProcessorGetCheckItem{handler: handler})
	return self
}
func (p *SecurityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type securityServiceProcessorStartScan struct {
	handler SecurityService
}

func (p *securityServiceProcessorStartScan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceStartScanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("StartScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceStartScanResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.StartScan(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartScan: "+err2.Error())
			oprot.WriteMessageBegin("StartScan", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("StartScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorListBenchmarks struct {
	handler SecurityService
}

func (p *securityServiceProcessorListBenchmarks) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceListBenchmarksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListBenchmarks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceListBenchmarksResult{}
	var retval *ListBenchmarksResponse
	if retval, err2 = p.handler.ListBenchmarks(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListBenchmarks: "+err2.Error())
			oprot.WriteMessageBegin("ListBenchmarks", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListBenchmarks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorGetCronScan struct {
	handler SecurityService
}

func (p *securityServiceProcessorGetCronScan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceGetCronScanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCronScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceGetCronScanResult{}
	var retval *GetCronScanResponse
	if retval, err2 = p.handler.GetCronScan(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCronScan: "+err2.Error())
			oprot.WriteMessageBegin("GetCronScan", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCronScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorUpdateCronScan struct {
	handler SecurityService
}

func (p *securityServiceProcessorUpdateCronScan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceUpdateCronScanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCronScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceUpdateCronScanResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.UpdateCronScan(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCronScan: "+err2.Error())
			oprot.WriteMessageBegin("UpdateCronScan", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCronScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorListNodeReports struct {
	handler SecurityService
}

func (p *securityServiceProcessorListNodeReports) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceListNodeReportsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListNodeReports", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceListNodeReportsResult{}
	var retval *ListNodeReportsResponse
	if retval, err2 = p.handler.ListNodeReports(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListNodeReports: "+err2.Error())
			oprot.WriteMessageBegin("ListNodeReports", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListNodeReports", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorStartNodeScan struct {
	handler SecurityService
}

func (p *securityServiceProcessorStartNodeScan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceStartNodeScanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("StartNodeScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceStartNodeScanResult{}
	var retval *common.EmptyResponse
	if retval, err2 = p.handler.StartNodeScan(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartNodeScan: "+err2.Error())
			oprot.WriteMessageBegin("StartNodeScan", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("StartNodeScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorListCheckItems struct {
	handler SecurityService
}

func (p *securityServiceProcessorListCheckItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceListCheckItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCheckItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceListCheckItemsResult{}
	var retval *ListCheckItemsResponse
	if retval, err2 = p.handler.ListCheckItems(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCheckItems: "+err2.Error())
			oprot.WriteMessageBegin("ListCheckItems", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCheckItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type securityServiceProcessorGetCheckItem struct {
	handler SecurityService
}

func (p *securityServiceProcessorGetCheckItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecurityServiceGetCheckItemArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCheckItem", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := SecurityServiceGetCheckItemResult{}
	var retval *GetCheckItemResponse
	if retval, err2 = p.handler.GetCheckItem(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCheckItem: "+err2.Error())
			oprot.WriteMessageBegin("GetCheckItem", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCheckItem", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type SecurityServiceStartScanArgs struct {
	Req *StartScanRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceStartScanArgs() *SecurityServiceStartScanArgs {
	return &SecurityServiceStartScanArgs{}
}

var SecurityServiceStartScanArgs_Req_DEFAULT *StartScanRequest

func (p *SecurityServiceStartScanArgs) GetReq() (v *StartScanRequest) {
	if !p.IsSetReq() {
		return SecurityServiceStartScanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceStartScanArgs) SetReq(val *StartScanRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceStartScanArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceStartScanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceStartScanArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceStartScanArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceStartScanArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewStartScanRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceStartScanArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StartScan_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceStartScanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceStartScanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceStartScanArgs(%+v)", *p)
}

func (p *SecurityServiceStartScanArgs) DeepEqual(ano *SecurityServiceStartScanArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceStartScanArgs) Field1DeepEqual(src *StartScanRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceStartScanResult struct {
	Success *common.EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceStartScanResult() *SecurityServiceStartScanResult {
	return &SecurityServiceStartScanResult{}
}

var SecurityServiceStartScanResult_Success_DEFAULT *common.EmptyResponse

func (p *SecurityServiceStartScanResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceStartScanResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceStartScanResult_Err_DEFAULT *common.Error

func (p *SecurityServiceStartScanResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceStartScanResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceStartScanResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}
func (p *SecurityServiceStartScanResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceStartScanResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceStartScanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceStartScanResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceStartScanResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceStartScanResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceStartScanResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceStartScanResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceStartScanResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StartScan_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceStartScanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceStartScanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceStartScanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceStartScanResult(%+v)", *p)
}

func (p *SecurityServiceStartScanResult) DeepEqual(ano *SecurityServiceStartScanResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceStartScanResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceStartScanResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceListBenchmarksArgs struct {
	Req *ListBenchmarksRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceListBenchmarksArgs() *SecurityServiceListBenchmarksArgs {
	return &SecurityServiceListBenchmarksArgs{}
}

var SecurityServiceListBenchmarksArgs_Req_DEFAULT *ListBenchmarksRequest

func (p *SecurityServiceListBenchmarksArgs) GetReq() (v *ListBenchmarksRequest) {
	if !p.IsSetReq() {
		return SecurityServiceListBenchmarksArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceListBenchmarksArgs) SetReq(val *ListBenchmarksRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceListBenchmarksArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceListBenchmarksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceListBenchmarksArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceListBenchmarksArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListBenchmarksRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListBenchmarksArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBenchmarks_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceListBenchmarksArgs(%+v)", *p)
}

func (p *SecurityServiceListBenchmarksArgs) DeepEqual(ano *SecurityServiceListBenchmarksArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceListBenchmarksArgs) Field1DeepEqual(src *ListBenchmarksRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceListBenchmarksResult struct {
	Success *ListBenchmarksResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceListBenchmarksResult() *SecurityServiceListBenchmarksResult {
	return &SecurityServiceListBenchmarksResult{}
}

var SecurityServiceListBenchmarksResult_Success_DEFAULT *ListBenchmarksResponse

func (p *SecurityServiceListBenchmarksResult) GetSuccess() (v *ListBenchmarksResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceListBenchmarksResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceListBenchmarksResult_Err_DEFAULT *common.Error

func (p *SecurityServiceListBenchmarksResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceListBenchmarksResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceListBenchmarksResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListBenchmarksResponse)
}
func (p *SecurityServiceListBenchmarksResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceListBenchmarksResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceListBenchmarksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceListBenchmarksResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceListBenchmarksResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceListBenchmarksResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListBenchmarksResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListBenchmarksResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListBenchmarksResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListBenchmarks_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceListBenchmarksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceListBenchmarksResult(%+v)", *p)
}

func (p *SecurityServiceListBenchmarksResult) DeepEqual(ano *SecurityServiceListBenchmarksResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceListBenchmarksResult) Field0DeepEqual(src *ListBenchmarksResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceListBenchmarksResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceGetCronScanArgs struct {
	Req *GetCronScanRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceGetCronScanArgs() *SecurityServiceGetCronScanArgs {
	return &SecurityServiceGetCronScanArgs{}
}

var SecurityServiceGetCronScanArgs_Req_DEFAULT *GetCronScanRequest

func (p *SecurityServiceGetCronScanArgs) GetReq() (v *GetCronScanRequest) {
	if !p.IsSetReq() {
		return SecurityServiceGetCronScanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceGetCronScanArgs) SetReq(val *GetCronScanRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceGetCronScanArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceGetCronScanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceGetCronScanArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceGetCronScanArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceGetCronScanArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetCronScanRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceGetCronScanArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCronScan_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceGetCronScanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceGetCronScanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceGetCronScanArgs(%+v)", *p)
}

func (p *SecurityServiceGetCronScanArgs) DeepEqual(ano *SecurityServiceGetCronScanArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceGetCronScanArgs) Field1DeepEqual(src *GetCronScanRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceGetCronScanResult struct {
	Success *GetCronScanResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error        `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceGetCronScanResult() *SecurityServiceGetCronScanResult {
	return &SecurityServiceGetCronScanResult{}
}

var SecurityServiceGetCronScanResult_Success_DEFAULT *GetCronScanResponse

func (p *SecurityServiceGetCronScanResult) GetSuccess() (v *GetCronScanResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceGetCronScanResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceGetCronScanResult_Err_DEFAULT *common.Error

func (p *SecurityServiceGetCronScanResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceGetCronScanResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceGetCronScanResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCronScanResponse)
}
func (p *SecurityServiceGetCronScanResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceGetCronScanResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceGetCronScanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceGetCronScanResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceGetCronScanResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceGetCronScanResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceGetCronScanResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCronScanResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceGetCronScanResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceGetCronScanResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCronScan_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceGetCronScanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceGetCronScanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceGetCronScanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceGetCronScanResult(%+v)", *p)
}

func (p *SecurityServiceGetCronScanResult) DeepEqual(ano *SecurityServiceGetCronScanResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceGetCronScanResult) Field0DeepEqual(src *GetCronScanResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceGetCronScanResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceUpdateCronScanArgs struct {
	Req *UpdateCronScanRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceUpdateCronScanArgs() *SecurityServiceUpdateCronScanArgs {
	return &SecurityServiceUpdateCronScanArgs{}
}

var SecurityServiceUpdateCronScanArgs_Req_DEFAULT *UpdateCronScanRequest

func (p *SecurityServiceUpdateCronScanArgs) GetReq() (v *UpdateCronScanRequest) {
	if !p.IsSetReq() {
		return SecurityServiceUpdateCronScanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceUpdateCronScanArgs) SetReq(val *UpdateCronScanRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceUpdateCronScanArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceUpdateCronScanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceUpdateCronScanArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceUpdateCronScanArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateCronScanRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceUpdateCronScanArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCronScan_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceUpdateCronScanArgs(%+v)", *p)
}

func (p *SecurityServiceUpdateCronScanArgs) DeepEqual(ano *SecurityServiceUpdateCronScanArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceUpdateCronScanArgs) Field1DeepEqual(src *UpdateCronScanRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceUpdateCronScanResult struct {
	Success *common.EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceUpdateCronScanResult() *SecurityServiceUpdateCronScanResult {
	return &SecurityServiceUpdateCronScanResult{}
}

var SecurityServiceUpdateCronScanResult_Success_DEFAULT *common.EmptyResponse

func (p *SecurityServiceUpdateCronScanResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceUpdateCronScanResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceUpdateCronScanResult_Err_DEFAULT *common.Error

func (p *SecurityServiceUpdateCronScanResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceUpdateCronScanResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceUpdateCronScanResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}
func (p *SecurityServiceUpdateCronScanResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceUpdateCronScanResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceUpdateCronScanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceUpdateCronScanResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceUpdateCronScanResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceUpdateCronScanResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceUpdateCronScanResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceUpdateCronScanResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCronScan_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceUpdateCronScanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceUpdateCronScanResult(%+v)", *p)
}

func (p *SecurityServiceUpdateCronScanResult) DeepEqual(ano *SecurityServiceUpdateCronScanResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceUpdateCronScanResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceUpdateCronScanResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceListNodeReportsArgs struct {
	Req *ListNodeReportsRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceListNodeReportsArgs() *SecurityServiceListNodeReportsArgs {
	return &SecurityServiceListNodeReportsArgs{}
}

var SecurityServiceListNodeReportsArgs_Req_DEFAULT *ListNodeReportsRequest

func (p *SecurityServiceListNodeReportsArgs) GetReq() (v *ListNodeReportsRequest) {
	if !p.IsSetReq() {
		return SecurityServiceListNodeReportsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceListNodeReportsArgs) SetReq(val *ListNodeReportsRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceListNodeReportsArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceListNodeReportsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceListNodeReportsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceListNodeReportsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListNodeReportsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListNodeReportsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeReports_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceListNodeReportsArgs(%+v)", *p)
}

func (p *SecurityServiceListNodeReportsArgs) DeepEqual(ano *SecurityServiceListNodeReportsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceListNodeReportsArgs) Field1DeepEqual(src *ListNodeReportsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceListNodeReportsResult struct {
	Success *ListNodeReportsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceListNodeReportsResult() *SecurityServiceListNodeReportsResult {
	return &SecurityServiceListNodeReportsResult{}
}

var SecurityServiceListNodeReportsResult_Success_DEFAULT *ListNodeReportsResponse

func (p *SecurityServiceListNodeReportsResult) GetSuccess() (v *ListNodeReportsResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceListNodeReportsResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceListNodeReportsResult_Err_DEFAULT *common.Error

func (p *SecurityServiceListNodeReportsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceListNodeReportsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceListNodeReportsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListNodeReportsResponse)
}
func (p *SecurityServiceListNodeReportsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceListNodeReportsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceListNodeReportsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceListNodeReportsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceListNodeReportsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceListNodeReportsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListNodeReportsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListNodeReportsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListNodeReportsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListNodeReports_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceListNodeReportsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceListNodeReportsResult(%+v)", *p)
}

func (p *SecurityServiceListNodeReportsResult) DeepEqual(ano *SecurityServiceListNodeReportsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceListNodeReportsResult) Field0DeepEqual(src *ListNodeReportsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceListNodeReportsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceStartNodeScanArgs struct {
	Req *StartNodeScanRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceStartNodeScanArgs() *SecurityServiceStartNodeScanArgs {
	return &SecurityServiceStartNodeScanArgs{}
}

var SecurityServiceStartNodeScanArgs_Req_DEFAULT *StartNodeScanRequest

func (p *SecurityServiceStartNodeScanArgs) GetReq() (v *StartNodeScanRequest) {
	if !p.IsSetReq() {
		return SecurityServiceStartNodeScanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceStartNodeScanArgs) SetReq(val *StartNodeScanRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceStartNodeScanArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceStartNodeScanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceStartNodeScanArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceStartNodeScanArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewStartNodeScanRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceStartNodeScanArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StartNodeScan_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceStartNodeScanArgs(%+v)", *p)
}

func (p *SecurityServiceStartNodeScanArgs) DeepEqual(ano *SecurityServiceStartNodeScanArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceStartNodeScanArgs) Field1DeepEqual(src *StartNodeScanRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceStartNodeScanResult struct {
	Success *common.EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceStartNodeScanResult() *SecurityServiceStartNodeScanResult {
	return &SecurityServiceStartNodeScanResult{}
}

var SecurityServiceStartNodeScanResult_Success_DEFAULT *common.EmptyResponse

func (p *SecurityServiceStartNodeScanResult) GetSuccess() (v *common.EmptyResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceStartNodeScanResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceStartNodeScanResult_Err_DEFAULT *common.Error

func (p *SecurityServiceStartNodeScanResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceStartNodeScanResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceStartNodeScanResult) SetSuccess(x interface{}) {
	p.Success = x.(*common.EmptyResponse)
}
func (p *SecurityServiceStartNodeScanResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceStartNodeScanResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceStartNodeScanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceStartNodeScanResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceStartNodeScanResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceStartNodeScanResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = common.NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceStartNodeScanResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceStartNodeScanResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StartNodeScan_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceStartNodeScanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceStartNodeScanResult(%+v)", *p)
}

func (p *SecurityServiceStartNodeScanResult) DeepEqual(ano *SecurityServiceStartNodeScanResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceStartNodeScanResult) Field0DeepEqual(src *common.EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceStartNodeScanResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceListCheckItemsArgs struct {
	Req *ListCheckItemsRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceListCheckItemsArgs() *SecurityServiceListCheckItemsArgs {
	return &SecurityServiceListCheckItemsArgs{}
}

var SecurityServiceListCheckItemsArgs_Req_DEFAULT *ListCheckItemsRequest

func (p *SecurityServiceListCheckItemsArgs) GetReq() (v *ListCheckItemsRequest) {
	if !p.IsSetReq() {
		return SecurityServiceListCheckItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceListCheckItemsArgs) SetReq(val *ListCheckItemsRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceListCheckItemsArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceListCheckItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceListCheckItemsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceListCheckItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListCheckItemsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListCheckItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCheckItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceListCheckItemsArgs(%+v)", *p)
}

func (p *SecurityServiceListCheckItemsArgs) DeepEqual(ano *SecurityServiceListCheckItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceListCheckItemsArgs) Field1DeepEqual(src *ListCheckItemsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceListCheckItemsResult struct {
	Success *ListCheckItemsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceListCheckItemsResult() *SecurityServiceListCheckItemsResult {
	return &SecurityServiceListCheckItemsResult{}
}

var SecurityServiceListCheckItemsResult_Success_DEFAULT *ListCheckItemsResponse

func (p *SecurityServiceListCheckItemsResult) GetSuccess() (v *ListCheckItemsResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceListCheckItemsResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceListCheckItemsResult_Err_DEFAULT *common.Error

func (p *SecurityServiceListCheckItemsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceListCheckItemsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceListCheckItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListCheckItemsResponse)
}
func (p *SecurityServiceListCheckItemsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceListCheckItemsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceListCheckItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceListCheckItemsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceListCheckItemsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceListCheckItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListCheckItemsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListCheckItemsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceListCheckItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCheckItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceListCheckItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceListCheckItemsResult(%+v)", *p)
}

func (p *SecurityServiceListCheckItemsResult) DeepEqual(ano *SecurityServiceListCheckItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceListCheckItemsResult) Field0DeepEqual(src *ListCheckItemsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceListCheckItemsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceGetCheckItemArgs struct {
	Req *GetCheckItemRequest `thrift:"req,1" json:"req"`
}

func NewSecurityServiceGetCheckItemArgs() *SecurityServiceGetCheckItemArgs {
	return &SecurityServiceGetCheckItemArgs{}
}

var SecurityServiceGetCheckItemArgs_Req_DEFAULT *GetCheckItemRequest

func (p *SecurityServiceGetCheckItemArgs) GetReq() (v *GetCheckItemRequest) {
	if !p.IsSetReq() {
		return SecurityServiceGetCheckItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SecurityServiceGetCheckItemArgs) SetReq(val *GetCheckItemRequest) {
	p.Req = val
}

var fieldIDToName_SecurityServiceGetCheckItemArgs = map[int16]string{
	1: "req",
}

func (p *SecurityServiceGetCheckItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SecurityServiceGetCheckItemArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceGetCheckItemArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetCheckItemRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceGetCheckItemArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCheckItem_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceGetCheckItemArgs(%+v)", *p)
}

func (p *SecurityServiceGetCheckItemArgs) DeepEqual(ano *SecurityServiceGetCheckItemArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *SecurityServiceGetCheckItemArgs) Field1DeepEqual(src *GetCheckItemRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type SecurityServiceGetCheckItemResult struct {
	Success *GetCheckItemResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewSecurityServiceGetCheckItemResult() *SecurityServiceGetCheckItemResult {
	return &SecurityServiceGetCheckItemResult{}
}

var SecurityServiceGetCheckItemResult_Success_DEFAULT *GetCheckItemResponse

func (p *SecurityServiceGetCheckItemResult) GetSuccess() (v *GetCheckItemResponse) {
	if !p.IsSetSuccess() {
		return SecurityServiceGetCheckItemResult_Success_DEFAULT
	}
	return p.Success
}

var SecurityServiceGetCheckItemResult_Err_DEFAULT *common.Error

func (p *SecurityServiceGetCheckItemResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return SecurityServiceGetCheckItemResult_Err_DEFAULT
	}
	return p.Err
}
func (p *SecurityServiceGetCheckItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCheckItemResponse)
}
func (p *SecurityServiceGetCheckItemResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_SecurityServiceGetCheckItemResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *SecurityServiceGetCheckItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecurityServiceGetCheckItemResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *SecurityServiceGetCheckItemResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecurityServiceGetCheckItemResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCheckItemResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceGetCheckItemResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SecurityServiceGetCheckItemResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCheckItem_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecurityServiceGetCheckItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecurityServiceGetCheckItemResult(%+v)", *p)
}

func (p *SecurityServiceGetCheckItemResult) DeepEqual(ano *SecurityServiceGetCheckItemResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *SecurityServiceGetCheckItemResult) Field0DeepEqual(src *GetCheckItemResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SecurityServiceGetCheckItemResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}
