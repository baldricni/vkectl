// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type Workload struct {
	Kind      string `thrift:"Kind,1,required" json:"Kind"`
	Namespace string `thrift:"Namespace,2,required" json:"Namespace"`
	Name      string `thrift:"Name,3,required" json:"Name"`
	Container string `thrift:"Container,4,required" json:"Container"`
}

func NewWorkload() *Workload {
	return &Workload{}
}

func (p *Workload) GetKind() (v string) {
	return p.Kind
}

func (p *Workload) GetNamespace() (v string) {
	return p.Namespace
}

func (p *Workload) GetName() (v string) {
	return p.Name
}

func (p *Workload) GetContainer() (v string) {
	return p.Container
}
func (p *Workload) SetKind(val string) {
	p.Kind = val
}
func (p *Workload) SetNamespace(val string) {
	p.Namespace = val
}
func (p *Workload) SetName(val string) {
	p.Name = val
}
func (p *Workload) SetContainer(val string) {
	p.Container = val
}

var fieldIDToName_Workload = map[int16]string{
	1: "Kind",
	2: "Namespace",
	3: "Name",
	4: "Container",
}

func (p *Workload) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKind bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetContainer bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainer = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKind {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetContainer {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Workload[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Workload[fieldId]))
}

func (p *Workload) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *Workload) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *Workload) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Workload) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Container = v
	}
	return nil
}

func (p *Workload) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Workload"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Workload) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Workload) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Workload) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Workload) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Container", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Container); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Workload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Workload(%+v)", *p)
}

func (p *Workload) DeepEqual(ano *Workload) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Container) {
		return false
	}
	return true
}

func (p *Workload) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *Workload) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *Workload) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Workload) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Container, src) != 0 {
		return false
	}
	return true
}

type LogCollectRule struct {
	ClusterId  string      `thrift:"ClusterId,1,required" json:"ClusterId"`
	Name       string      `thrift:"Name,2,required" json:"Name"`
	CreateTime string      `thrift:"CreateTime,3,required" json:"CreateTime"`
	ProjectId  string      `thrift:"ProjectId,4,required" json:"ProjectId"`
	TopicId    string      `thrift:"TopicId,5,required" json:"TopicId"`
	Type       string      `thrift:"Type,6,required" json:"Type"`
	FilePath   string      `thrift:"FilePath,7,required" json:"FilePath"`
	Scope      string      `thrift:"Scope,8,required" json:"Scope"`
	Namespace  string      `thrift:"Namespace,9,required" json:"Namespace"`
	Workloads  []*Workload `thrift:"Workloads,10,required" json:"Workloads"`
}

func NewLogCollectRule() *LogCollectRule {
	return &LogCollectRule{}
}

func (p *LogCollectRule) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *LogCollectRule) GetName() (v string) {
	return p.Name
}

func (p *LogCollectRule) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *LogCollectRule) GetProjectId() (v string) {
	return p.ProjectId
}

func (p *LogCollectRule) GetTopicId() (v string) {
	return p.TopicId
}

func (p *LogCollectRule) GetType() (v string) {
	return p.Type
}

func (p *LogCollectRule) GetFilePath() (v string) {
	return p.FilePath
}

func (p *LogCollectRule) GetScope() (v string) {
	return p.Scope
}

func (p *LogCollectRule) GetNamespace() (v string) {
	return p.Namespace
}

func (p *LogCollectRule) GetWorkloads() (v []*Workload) {
	return p.Workloads
}
func (p *LogCollectRule) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *LogCollectRule) SetName(val string) {
	p.Name = val
}
func (p *LogCollectRule) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *LogCollectRule) SetProjectId(val string) {
	p.ProjectId = val
}
func (p *LogCollectRule) SetTopicId(val string) {
	p.TopicId = val
}
func (p *LogCollectRule) SetType(val string) {
	p.Type = val
}
func (p *LogCollectRule) SetFilePath(val string) {
	p.FilePath = val
}
func (p *LogCollectRule) SetScope(val string) {
	p.Scope = val
}
func (p *LogCollectRule) SetNamespace(val string) {
	p.Namespace = val
}
func (p *LogCollectRule) SetWorkloads(val []*Workload) {
	p.Workloads = val
}

var fieldIDToName_LogCollectRule = map[int16]string{
	1:  "ClusterId",
	2:  "Name",
	3:  "CreateTime",
	4:  "ProjectId",
	5:  "TopicId",
	6:  "Type",
	7:  "FilePath",
	8:  "Scope",
	9:  "Namespace",
	10: "Workloads",
}

func (p *LogCollectRule) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetCreateTime bool = false
	var issetProjectId bool = false
	var issetTopicId bool = false
	var issetType bool = false
	var issetFilePath bool = false
	var issetScope bool = false
	var issetNamespace bool = false
	var issetWorkloads bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetProjectId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTopicId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilePath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetScope = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloads = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetProjectId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTopicId {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetFilePath {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetScope {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetWorkloads {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LogCollectRule[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_LogCollectRule[fieldId]))
}

func (p *LogCollectRule) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *LogCollectRule) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *LogCollectRule) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *LogCollectRule) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *LogCollectRule) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TopicId = v
	}
	return nil
}

func (p *LogCollectRule) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *LogCollectRule) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FilePath = v
	}
	return nil
}

func (p *LogCollectRule) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Scope = v
	}
	return nil
}

func (p *LogCollectRule) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *LogCollectRule) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Workloads = make([]*Workload, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewWorkload()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Workloads = append(p.Workloads, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *LogCollectRule) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LogCollectRule"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LogCollectRule) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LogCollectRule) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LogCollectRule) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LogCollectRule) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProjectId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProjectId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LogCollectRule) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopicId", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LogCollectRule) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *LogCollectRule) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FilePath", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FilePath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *LogCollectRule) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Scope", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Scope); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *LogCollectRule) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *LogCollectRule) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Workloads", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Workloads)); err != nil {
		return err
	}
	for _, v := range p.Workloads {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *LogCollectRule) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogCollectRule(%+v)", *p)
}

func (p *LogCollectRule) DeepEqual(ano *LogCollectRule) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.ProjectId) {
		return false
	}
	if !p.Field5DeepEqual(ano.TopicId) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.FilePath) {
		return false
	}
	if !p.Field8DeepEqual(ano.Scope) {
		return false
	}
	if !p.Field9DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field10DeepEqual(ano.Workloads) {
		return false
	}
	return true
}

func (p *LogCollectRule) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field3DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ProjectId, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TopicId, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field7DeepEqual(src string) bool {

	if strings.Compare(p.FilePath, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Scope, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *LogCollectRule) Field10DeepEqual(src []*Workload) bool {

	if len(p.Workloads) != len(src) {
		return false
	}
	for i, v := range p.Workloads {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ListLogCollectRulesReq struct {
	ClusterId  string                     `thrift:"ClusterId,1,required" json:"ClusterId"`
	PageSize   int32                      `thrift:"PageSize,2" json:"PageSize,omitempty"`
	PageNumber int32                      `thrift:"PageNumber,3" json:"PageNumber,omitempty"`
	Filter     *ListLogCollectRulesFilter `thrift:"Filter,4" json:"Filter,omitempty"`
	OrderBy    string                     `thrift:"OrderBy,5" json:"OrderBy" default:"CreateTime"`
	Desc       *bool                      `thrift:"Desc,6" json:"Desc,omitempty"`
	Top        *base.TopParam             `thrift:"Top,255,required" json:"Top"`
}

func NewListLogCollectRulesReq() *ListLogCollectRulesReq {
	return &ListLogCollectRulesReq{

		PageSize:   10,
		PageNumber: 1,
		OrderBy:    "CreateTime",
	}
}

func (p *ListLogCollectRulesReq) GetClusterId() (v string) {
	return p.ClusterId
}

var ListLogCollectRulesReq_PageSize_DEFAULT int32 = 10

func (p *ListLogCollectRulesReq) GetPageSize() (v int32) {
	if !p.IsSetPageSize() {
		return ListLogCollectRulesReq_PageSize_DEFAULT
	}
	return p.PageSize
}

var ListLogCollectRulesReq_PageNumber_DEFAULT int32 = 1

func (p *ListLogCollectRulesReq) GetPageNumber() (v int32) {
	if !p.IsSetPageNumber() {
		return ListLogCollectRulesReq_PageNumber_DEFAULT
	}
	return p.PageNumber
}

var ListLogCollectRulesReq_Filter_DEFAULT *ListLogCollectRulesFilter

func (p *ListLogCollectRulesReq) GetFilter() (v *ListLogCollectRulesFilter) {
	if !p.IsSetFilter() {
		return ListLogCollectRulesReq_Filter_DEFAULT
	}
	return p.Filter
}

var ListLogCollectRulesReq_OrderBy_DEFAULT string = "CreateTime"

func (p *ListLogCollectRulesReq) GetOrderBy() (v string) {
	if !p.IsSetOrderBy() {
		return ListLogCollectRulesReq_OrderBy_DEFAULT
	}
	return p.OrderBy
}

var ListLogCollectRulesReq_Desc_DEFAULT bool

func (p *ListLogCollectRulesReq) GetDesc() (v bool) {
	if !p.IsSetDesc() {
		return ListLogCollectRulesReq_Desc_DEFAULT
	}
	return *p.Desc
}

var ListLogCollectRulesReq_Top_DEFAULT *base.TopParam

func (p *ListLogCollectRulesReq) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListLogCollectRulesReq_Top_DEFAULT
	}
	return p.Top
}
func (p *ListLogCollectRulesReq) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListLogCollectRulesReq) SetPageSize(val int32) {
	p.PageSize = val
}
func (p *ListLogCollectRulesReq) SetPageNumber(val int32) {
	p.PageNumber = val
}
func (p *ListLogCollectRulesReq) SetFilter(val *ListLogCollectRulesFilter) {
	p.Filter = val
}
func (p *ListLogCollectRulesReq) SetOrderBy(val string) {
	p.OrderBy = val
}
func (p *ListLogCollectRulesReq) SetDesc(val *bool) {
	p.Desc = val
}
func (p *ListLogCollectRulesReq) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListLogCollectRulesReq = map[int16]string{
	1:   "ClusterId",
	2:   "PageSize",
	3:   "PageNumber",
	4:   "Filter",
	5:   "OrderBy",
	6:   "Desc",
	255: "Top",
}

func (p *ListLogCollectRulesReq) IsSetPageSize() bool {
	return p.PageSize != ListLogCollectRulesReq_PageSize_DEFAULT
}

func (p *ListLogCollectRulesReq) IsSetPageNumber() bool {
	return p.PageNumber != ListLogCollectRulesReq_PageNumber_DEFAULT
}

func (p *ListLogCollectRulesReq) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListLogCollectRulesReq) IsSetOrderBy() bool {
	return p.OrderBy != ListLogCollectRulesReq_OrderBy_DEFAULT
}

func (p *ListLogCollectRulesReq) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *ListLogCollectRulesReq) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListLogCollectRulesReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListLogCollectRulesReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListLogCollectRulesReq[fieldId]))
}

func (p *ListLogCollectRulesReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListLogCollectRulesReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *ListLogCollectRulesReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageNumber = v
	}
	return nil
}

func (p *ListLogCollectRulesReq) ReadField4(iprot thrift.TProtocol) error {
	p.Filter = NewListLogCollectRulesFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListLogCollectRulesReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderBy = v
	}
	return nil
}

func (p *ListLogCollectRulesReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Desc = &v
	}
	return nil
}

func (p *ListLogCollectRulesReq) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListLogCollectRulesReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListLogCollectRulesReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("PageSize", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("PageNumber", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBy() {
		if err = oprot.WriteFieldBegin("OrderBy", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.OrderBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("Desc", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListLogCollectRulesReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListLogCollectRulesReq(%+v)", *p)
}

func (p *ListLogCollectRulesReq) DeepEqual(ano *ListLogCollectRulesReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field5DeepEqual(ano.OrderBy) {
		return false
	}
	if !p.Field6DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListLogCollectRulesReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListLogCollectRulesReq) Field2DeepEqual(src int32) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ListLogCollectRulesReq) Field3DeepEqual(src int32) bool {

	if p.PageNumber != src {
		return false
	}
	return true
}
func (p *ListLogCollectRulesReq) Field4DeepEqual(src *ListLogCollectRulesFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListLogCollectRulesReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.OrderBy, src) != 0 {
		return false
	}
	return true
}
func (p *ListLogCollectRulesReq) Field6DeepEqual(src *bool) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if *p.Desc != *src {
		return false
	}
	return true
}
func (p *ListLogCollectRulesReq) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListLogCollectRulesFilter struct {
	Name  *string  `thrift:"Name,1" json:"Name,omitempty"`
	Types []string `thrift:"Types,2" json:"Types,omitempty"`
}

func NewListLogCollectRulesFilter() *ListLogCollectRulesFilter {
	return &ListLogCollectRulesFilter{}
}

var ListLogCollectRulesFilter_Name_DEFAULT string

func (p *ListLogCollectRulesFilter) GetName() (v string) {
	if !p.IsSetName() {
		return ListLogCollectRulesFilter_Name_DEFAULT
	}
	return *p.Name
}

var ListLogCollectRulesFilter_Types_DEFAULT []string

func (p *ListLogCollectRulesFilter) GetTypes() (v []string) {
	if !p.IsSetTypes() {
		return ListLogCollectRulesFilter_Types_DEFAULT
	}
	return p.Types
}
func (p *ListLogCollectRulesFilter) SetName(val *string) {
	p.Name = val
}
func (p *ListLogCollectRulesFilter) SetTypes(val []string) {
	p.Types = val
}

var fieldIDToName_ListLogCollectRulesFilter = map[int16]string{
	1: "Name",
	2: "Types",
}

func (p *ListLogCollectRulesFilter) IsSetName() bool {
	return p.Name != nil
}

func (p *ListLogCollectRulesFilter) IsSetTypes() bool {
	return p.Types != nil
}

func (p *ListLogCollectRulesFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListLogCollectRulesFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListLogCollectRulesFilter) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *ListLogCollectRulesFilter) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Types = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Types = append(p.Types, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListLogCollectRulesFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListLogCollectRulesFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListLogCollectRulesFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListLogCollectRulesFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypes() {
		if err = oprot.WriteFieldBegin("Types", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Types)); err != nil {
			return err
		}
		for _, v := range p.Types {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListLogCollectRulesFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListLogCollectRulesFilter(%+v)", *p)
}

func (p *ListLogCollectRulesFilter) DeepEqual(ano *ListLogCollectRulesFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Types) {
		return false
	}
	return true
}

func (p *ListLogCollectRulesFilter) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListLogCollectRulesFilter) Field2DeepEqual(src []string) bool {

	if len(p.Types) != len(src) {
		return false
	}
	for i, v := range p.Types {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ListLogCollectRulesResp struct {
	Total int32             `thrift:"Total,1,required" json:"Total"`
	Items []*LogCollectRule `thrift:"Items,2,required" json:"Items"`
}

func NewListLogCollectRulesResp() *ListLogCollectRulesResp {
	return &ListLogCollectRulesResp{}
}

func (p *ListLogCollectRulesResp) GetTotal() (v int32) {
	return p.Total
}

func (p *ListLogCollectRulesResp) GetItems() (v []*LogCollectRule) {
	return p.Items
}
func (p *ListLogCollectRulesResp) SetTotal(val int32) {
	p.Total = val
}
func (p *ListLogCollectRulesResp) SetItems(val []*LogCollectRule) {
	p.Items = val
}

var fieldIDToName_ListLogCollectRulesResp = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListLogCollectRulesResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListLogCollectRulesResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListLogCollectRulesResp[fieldId]))
}

func (p *ListLogCollectRulesResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListLogCollectRulesResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*LogCollectRule, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLogCollectRule()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListLogCollectRulesResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListLogCollectRulesResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListLogCollectRulesResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListLogCollectRulesResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListLogCollectRulesResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListLogCollectRulesResp(%+v)", *p)
}

func (p *ListLogCollectRulesResp) DeepEqual(ano *ListLogCollectRulesResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListLogCollectRulesResp) Field1DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListLogCollectRulesResp) Field2DeepEqual(src []*LogCollectRule) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateLogCollectRuleReq struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Name      string         `thrift:"Name,2,required" json:"Name"`
	ProjectId string         `thrift:"ProjectId,3,required" json:"ProjectId"`
	TopicId   string         `thrift:"TopicId,4,required" json:"TopicId"`
	Type      string         `thrift:"Type,5,required" validate:"eq=ContainerStdout|eq=ContainerFile"`
	FilePath  *string        `thrift:"FilePath,6" json:"FilePath,omitempty"`
	Scope     string         `thrift:"Scope,7,required" validate:"eq=Namespace|eq=Workload"`
	Namespace *string        `thrift:"Namespace,8" json:"Namespace,omitempty"`
	Workloads []*Workload    `thrift:"Workloads,9" json:"Workloads,omitempty"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewCreateLogCollectRuleReq() *CreateLogCollectRuleReq {
	return &CreateLogCollectRuleReq{}
}

func (p *CreateLogCollectRuleReq) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateLogCollectRuleReq) GetName() (v string) {
	return p.Name
}

func (p *CreateLogCollectRuleReq) GetProjectId() (v string) {
	return p.ProjectId
}

func (p *CreateLogCollectRuleReq) GetTopicId() (v string) {
	return p.TopicId
}

func (p *CreateLogCollectRuleReq) GetType() (v string) {
	return p.Type
}

var CreateLogCollectRuleReq_FilePath_DEFAULT string

func (p *CreateLogCollectRuleReq) GetFilePath() (v string) {
	if !p.IsSetFilePath() {
		return CreateLogCollectRuleReq_FilePath_DEFAULT
	}
	return *p.FilePath
}

func (p *CreateLogCollectRuleReq) GetScope() (v string) {
	return p.Scope
}

var CreateLogCollectRuleReq_Namespace_DEFAULT string

func (p *CreateLogCollectRuleReq) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return CreateLogCollectRuleReq_Namespace_DEFAULT
	}
	return *p.Namespace
}

var CreateLogCollectRuleReq_Workloads_DEFAULT []*Workload

func (p *CreateLogCollectRuleReq) GetWorkloads() (v []*Workload) {
	if !p.IsSetWorkloads() {
		return CreateLogCollectRuleReq_Workloads_DEFAULT
	}
	return p.Workloads
}

var CreateLogCollectRuleReq_Top_DEFAULT *base.TopParam

func (p *CreateLogCollectRuleReq) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateLogCollectRuleReq_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateLogCollectRuleReq) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateLogCollectRuleReq) SetName(val string) {
	p.Name = val
}
func (p *CreateLogCollectRuleReq) SetProjectId(val string) {
	p.ProjectId = val
}
func (p *CreateLogCollectRuleReq) SetTopicId(val string) {
	p.TopicId = val
}
func (p *CreateLogCollectRuleReq) SetType(val string) {
	p.Type = val
}
func (p *CreateLogCollectRuleReq) SetFilePath(val *string) {
	p.FilePath = val
}
func (p *CreateLogCollectRuleReq) SetScope(val string) {
	p.Scope = val
}
func (p *CreateLogCollectRuleReq) SetNamespace(val *string) {
	p.Namespace = val
}
func (p *CreateLogCollectRuleReq) SetWorkloads(val []*Workload) {
	p.Workloads = val
}
func (p *CreateLogCollectRuleReq) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateLogCollectRuleReq = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	3:   "ProjectId",
	4:   "TopicId",
	5:   "Type",
	6:   "FilePath",
	7:   "Scope",
	8:   "Namespace",
	9:   "Workloads",
	255: "Top",
}

func (p *CreateLogCollectRuleReq) IsSetFilePath() bool {
	return p.FilePath != nil
}

func (p *CreateLogCollectRuleReq) IsSetNamespace() bool {
	return p.Namespace != nil
}

func (p *CreateLogCollectRuleReq) IsSetWorkloads() bool {
	return p.Workloads != nil
}

func (p *CreateLogCollectRuleReq) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateLogCollectRuleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetProjectId bool = false
	var issetTopicId bool = false
	var issetType bool = false
	var issetScope bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetProjectId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTopicId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetScope = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetProjectId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTopicId {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetScope {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateLogCollectRuleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateLogCollectRuleReq[fieldId]))
}

func (p *CreateLogCollectRuleReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TopicId = v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FilePath = &v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Scope = v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = &v
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Workloads = make([]*Workload, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewWorkload()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Workloads = append(p.Workloads, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateLogCollectRuleReq) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateLogCollectRuleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLogCollectRuleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ProjectId", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProjectId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopicId", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopicId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilePath() {
		if err = oprot.WriteFieldBegin("FilePath", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FilePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Scope", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Scope); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkloads() {
		if err = oprot.WriteFieldBegin("Workloads", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Workloads)); err != nil {
			return err
		}
		for _, v := range p.Workloads {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateLogCollectRuleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLogCollectRuleReq(%+v)", *p)
}

func (p *CreateLogCollectRuleReq) DeepEqual(ano *CreateLogCollectRuleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.ProjectId) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopicId) {
		return false
	}
	if !p.Field5DeepEqual(ano.Type) {
		return false
	}
	if !p.Field6DeepEqual(ano.FilePath) {
		return false
	}
	if !p.Field7DeepEqual(ano.Scope) {
		return false
	}
	if !p.Field8DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field9DeepEqual(ano.Workloads) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateLogCollectRuleReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ProjectId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TopicId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field6DeepEqual(src *string) bool {

	if p.FilePath == src {
		return true
	} else if p.FilePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FilePath, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Scope, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field8DeepEqual(src *string) bool {

	if p.Namespace == src {
		return true
	} else if p.Namespace == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Namespace, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field9DeepEqual(src []*Workload) bool {

	if len(p.Workloads) != len(src) {
		return false
	}
	for i, v := range p.Workloads {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateLogCollectRuleReq) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type CreateLogCollectRuleResp struct {
	ClusterId string `thrift:"ClusterId,1,required" json:"ClusterId"`
	Name      string `thrift:"Name,2,required" json:"Name"`
}

func NewCreateLogCollectRuleResp() *CreateLogCollectRuleResp {
	return &CreateLogCollectRuleResp{}
}

func (p *CreateLogCollectRuleResp) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateLogCollectRuleResp) GetName() (v string) {
	return p.Name
}
func (p *CreateLogCollectRuleResp) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateLogCollectRuleResp) SetName(val string) {
	p.Name = val
}

var fieldIDToName_CreateLogCollectRuleResp = map[int16]string{
	1: "ClusterId",
	2: "Name",
}

func (p *CreateLogCollectRuleResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateLogCollectRuleResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateLogCollectRuleResp[fieldId]))
}

func (p *CreateLogCollectRuleResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateLogCollectRuleResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateLogCollectRuleResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLogCollectRuleResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateLogCollectRuleResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateLogCollectRuleResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateLogCollectRuleResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLogCollectRuleResp(%+v)", *p)
}

func (p *CreateLogCollectRuleResp) DeepEqual(ano *CreateLogCollectRuleResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *CreateLogCollectRuleResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateLogCollectRuleResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

type UpdateLogCollectRuleReq struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Name      string         `thrift:"Name,2,required" json:"Name"`
	Type      string         `thrift:"Type,3,required" validate:"eq=ContainerStdout|eq=ContainerFile"`
	FilePath  *string        `thrift:"FilePath,7" json:"FilePath,omitempty"`
	Scope     string         `thrift:"Scope,8,required" validate:"eq=Namespace|eq=Workload"`
	Namespace *string        `thrift:"Namespace,9" json:"Namespace,omitempty"`
	Workloads []*Workload    `thrift:"Workloads,10" json:"Workloads,omitempty"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewUpdateLogCollectRuleReq() *UpdateLogCollectRuleReq {
	return &UpdateLogCollectRuleReq{}
}

func (p *UpdateLogCollectRuleReq) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *UpdateLogCollectRuleReq) GetName() (v string) {
	return p.Name
}

func (p *UpdateLogCollectRuleReq) GetType() (v string) {
	return p.Type
}

var UpdateLogCollectRuleReq_FilePath_DEFAULT string

func (p *UpdateLogCollectRuleReq) GetFilePath() (v string) {
	if !p.IsSetFilePath() {
		return UpdateLogCollectRuleReq_FilePath_DEFAULT
	}
	return *p.FilePath
}

func (p *UpdateLogCollectRuleReq) GetScope() (v string) {
	return p.Scope
}

var UpdateLogCollectRuleReq_Namespace_DEFAULT string

func (p *UpdateLogCollectRuleReq) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return UpdateLogCollectRuleReq_Namespace_DEFAULT
	}
	return *p.Namespace
}

var UpdateLogCollectRuleReq_Workloads_DEFAULT []*Workload

func (p *UpdateLogCollectRuleReq) GetWorkloads() (v []*Workload) {
	if !p.IsSetWorkloads() {
		return UpdateLogCollectRuleReq_Workloads_DEFAULT
	}
	return p.Workloads
}

var UpdateLogCollectRuleReq_Top_DEFAULT *base.TopParam

func (p *UpdateLogCollectRuleReq) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return UpdateLogCollectRuleReq_Top_DEFAULT
	}
	return p.Top
}
func (p *UpdateLogCollectRuleReq) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *UpdateLogCollectRuleReq) SetName(val string) {
	p.Name = val
}
func (p *UpdateLogCollectRuleReq) SetType(val string) {
	p.Type = val
}
func (p *UpdateLogCollectRuleReq) SetFilePath(val *string) {
	p.FilePath = val
}
func (p *UpdateLogCollectRuleReq) SetScope(val string) {
	p.Scope = val
}
func (p *UpdateLogCollectRuleReq) SetNamespace(val *string) {
	p.Namespace = val
}
func (p *UpdateLogCollectRuleReq) SetWorkloads(val []*Workload) {
	p.Workloads = val
}
func (p *UpdateLogCollectRuleReq) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_UpdateLogCollectRuleReq = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	3:   "Type",
	7:   "FilePath",
	8:   "Scope",
	9:   "Namespace",
	10:  "Workloads",
	255: "Top",
}

func (p *UpdateLogCollectRuleReq) IsSetFilePath() bool {
	return p.FilePath != nil
}

func (p *UpdateLogCollectRuleReq) IsSetNamespace() bool {
	return p.Namespace != nil
}

func (p *UpdateLogCollectRuleReq) IsSetWorkloads() bool {
	return p.Workloads != nil
}

func (p *UpdateLogCollectRuleReq) IsSetTop() bool {
	return p.Top != nil
}

func (p *UpdateLogCollectRuleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetType bool = false
	var issetScope bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetScope = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetScope {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateLogCollectRuleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_UpdateLogCollectRuleReq[fieldId]))
}

func (p *UpdateLogCollectRuleReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FilePath = &v
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Scope = v
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = &v
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Workloads = make([]*Workload, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewWorkload()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Workloads = append(p.Workloads, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateLogCollectRuleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLogCollectRuleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilePath() {
		if err = oprot.WriteFieldBegin("FilePath", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FilePath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Scope", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Scope); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkloads() {
		if err = oprot.WriteFieldBegin("Workloads", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Workloads)); err != nil {
			return err
		}
		for _, v := range p.Workloads {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateLogCollectRuleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateLogCollectRuleReq(%+v)", *p)
}

func (p *UpdateLogCollectRuleReq) DeepEqual(ano *UpdateLogCollectRuleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.FilePath) {
		return false
	}
	if !p.Field8DeepEqual(ano.Scope) {
		return false
	}
	if !p.Field9DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field10DeepEqual(ano.Workloads) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *UpdateLogCollectRuleReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field7DeepEqual(src *string) bool {

	if p.FilePath == src {
		return true
	} else if p.FilePath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FilePath, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Scope, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field9DeepEqual(src *string) bool {

	if p.Namespace == src {
		return true
	} else if p.Namespace == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Namespace, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field10DeepEqual(src []*Workload) bool {

	if len(p.Workloads) != len(src) {
		return false
	}
	for i, v := range p.Workloads {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateLogCollectRuleReq) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteLogCollectRuleReq struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Name      string         `thrift:"Name,2,required" json:"Name"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewDeleteLogCollectRuleReq() *DeleteLogCollectRuleReq {
	return &DeleteLogCollectRuleReq{}
}

func (p *DeleteLogCollectRuleReq) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *DeleteLogCollectRuleReq) GetName() (v string) {
	return p.Name
}

var DeleteLogCollectRuleReq_Top_DEFAULT *base.TopParam

func (p *DeleteLogCollectRuleReq) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return DeleteLogCollectRuleReq_Top_DEFAULT
	}
	return p.Top
}
func (p *DeleteLogCollectRuleReq) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *DeleteLogCollectRuleReq) SetName(val string) {
	p.Name = val
}
func (p *DeleteLogCollectRuleReq) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_DeleteLogCollectRuleReq = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	255: "Top",
}

func (p *DeleteLogCollectRuleReq) IsSetTop() bool {
	return p.Top != nil
}

func (p *DeleteLogCollectRuleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteLogCollectRuleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeleteLogCollectRuleReq[fieldId]))
}

func (p *DeleteLogCollectRuleReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *DeleteLogCollectRuleReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *DeleteLogCollectRuleReq) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteLogCollectRuleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLogCollectRuleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteLogCollectRuleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteLogCollectRuleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteLogCollectRuleReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteLogCollectRuleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteLogCollectRuleReq(%+v)", *p)
}

func (p *DeleteLogCollectRuleReq) DeepEqual(ano *DeleteLogCollectRuleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *DeleteLogCollectRuleReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteLogCollectRuleReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteLogCollectRuleReq) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type GetLogCollectRuleReq struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Name      string         `thrift:"Name,2,required" json:"Name"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewGetLogCollectRuleReq() *GetLogCollectRuleReq {
	return &GetLogCollectRuleReq{}
}

func (p *GetLogCollectRuleReq) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetLogCollectRuleReq) GetName() (v string) {
	return p.Name
}

var GetLogCollectRuleReq_Top_DEFAULT *base.TopParam

func (p *GetLogCollectRuleReq) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetLogCollectRuleReq_Top_DEFAULT
	}
	return p.Top
}
func (p *GetLogCollectRuleReq) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetLogCollectRuleReq) SetName(val string) {
	p.Name = val
}
func (p *GetLogCollectRuleReq) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_GetLogCollectRuleReq = map[int16]string{
	1:   "ClusterId",
	2:   "Name",
	255: "Top",
}

func (p *GetLogCollectRuleReq) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetLogCollectRuleReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLogCollectRuleReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetLogCollectRuleReq[fieldId]))
}

func (p *GetLogCollectRuleReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetLogCollectRuleReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetLogCollectRuleReq) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetLogCollectRuleReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLogCollectRuleReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLogCollectRuleReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLogCollectRuleReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLogCollectRuleReq) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetLogCollectRuleReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLogCollectRuleReq(%+v)", *p)
}

func (p *GetLogCollectRuleReq) DeepEqual(ano *GetLogCollectRuleReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *GetLogCollectRuleReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetLogCollectRuleReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetLogCollectRuleReq) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
