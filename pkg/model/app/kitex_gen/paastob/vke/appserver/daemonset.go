// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type GetDaemonSetResponse struct {
	ClusterId                     string                    `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace                     string                    `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                          string                    `thrift:"Name,3,required" from:"metadata.name"`
	Labels                        []*KeyValuePair           `thrift:"Labels,4,required" from:"metadata.labels"`
	Description                   string                    `thrift:"Description,5" from:"metadata.annotations.<description>"`
	Containers                    []*ContainerConfiguration `thrift:"Containers,6,required" json:"Containers"`
	TerminationGracePeriodSeconds int64                     `thrift:"TerminationGracePeriodSeconds,7,required" from:"spec.template.spec.terminationGracePeriodSeconds"`
	Strategy                      string                    `thrift:"Strategy,8,required" from:"spec.updateStrategy.type"`
	MaxUnavailable                *string                   `thrift:"MaxUnavailable,9" json:"MaxUnavailable,omitempty"`
	PodLabels                     []*KeyValuePair           `thrift:"PodLabels,10,required" from:"spec.template.metadata.labels"`
	DnsPolicy                     string                    `thrift:"DnsPolicy,11,required" from:"spec.template.spec.dnsPolicy"`
	NodeAffinity                  *NodeAffinity             `thrift:"NodeAffinity,12" json:"NodeAffinity,omitempty"`
	Tolerations                   []*Toleration             `thrift:"Tolerations,13,required" json:"Tolerations"`
	PodAffinity                   *PodAffinity              `thrift:"PodAffinity,14" json:"PodAffinity,omitempty"`
	PodAntiAffinity               *PodAntiAffinity          `thrift:"PodAntiAffinity,15" json:"PodAntiAffinity,omitempty"`
	RunAsNonRoot                  bool                      `thrift:"RunAsNonRoot,16,required" from:"spec.template.spec.securityContext.runAsNonRoot"`
	Volumes                       []*Volume                 `thrift:"Volumes,17,required" json:"Volumes"`
	CreateTime                    string                    `thrift:"CreateTime,18,required" from:"metadata.creationTimestamp"`
	UpdateTime                    string                    `thrift:"UpdateTime,19,required" from:"metadata.annotations.<updateTimestamp>"`
	Replicas                      int32                     `thrift:"Replicas,20,required" from:"status.desiredNumberScheduled"`
	ReadyReplicas                 int32                     `thrift:"ReadyReplicas,21,required" from:"status.numberReady"`
	UpdatedReplicas               int32                     `thrift:"UpdatedReplicas,22,required" from:"status.updatedNumberScheduled"`
	AvailableReplicas             int32                     `thrift:"AvailableReplicas,23,required" from:"status.numberAvailable"`
	ImagePullSecrets              []string                  `thrift:"ImagePullSecrets,24" json:"ImagePullSecrets,omitempty"`
	Selector                      []*KeyValuePair           `thrift:"Selector,25,required" from:"spec.selector.matchLabels"`
	Annotations                   []*KeyValuePair           `thrift:"Annotations,26" from:"metadata.annotations"`
	PodAnnotations                []*KeyValuePair           `thrift:"PodAnnotations,27" from:"spec.template.metadata.annotations"`
}

func NewGetDaemonSetResponse() *GetDaemonSetResponse {
	return &GetDaemonSetResponse{

		ClusterId:   "",
		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
		UpdateTime:  "",
	}
}

func (p *GetDaemonSetResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetDaemonSetResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetDaemonSetResponse) GetName() (v string) {
	return p.Name
}

func (p *GetDaemonSetResponse) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var GetDaemonSetResponse_Description_DEFAULT string = ""

func (p *GetDaemonSetResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetDaemonSetResponse_Description_DEFAULT
	}
	return p.Description
}

func (p *GetDaemonSetResponse) GetContainers() (v []*ContainerConfiguration) {
	return p.Containers
}

func (p *GetDaemonSetResponse) GetTerminationGracePeriodSeconds() (v int64) {
	return p.TerminationGracePeriodSeconds
}

func (p *GetDaemonSetResponse) GetStrategy() (v string) {
	return p.Strategy
}

var GetDaemonSetResponse_MaxUnavailable_DEFAULT string

func (p *GetDaemonSetResponse) GetMaxUnavailable() (v string) {
	if !p.IsSetMaxUnavailable() {
		return GetDaemonSetResponse_MaxUnavailable_DEFAULT
	}
	return *p.MaxUnavailable
}

func (p *GetDaemonSetResponse) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}

func (p *GetDaemonSetResponse) GetDnsPolicy() (v string) {
	return p.DnsPolicy
}

var GetDaemonSetResponse_NodeAffinity_DEFAULT *NodeAffinity

func (p *GetDaemonSetResponse) GetNodeAffinity() (v *NodeAffinity) {
	if !p.IsSetNodeAffinity() {
		return GetDaemonSetResponse_NodeAffinity_DEFAULT
	}
	return p.NodeAffinity
}

func (p *GetDaemonSetResponse) GetTolerations() (v []*Toleration) {
	return p.Tolerations
}

var GetDaemonSetResponse_PodAffinity_DEFAULT *PodAffinity

func (p *GetDaemonSetResponse) GetPodAffinity() (v *PodAffinity) {
	if !p.IsSetPodAffinity() {
		return GetDaemonSetResponse_PodAffinity_DEFAULT
	}
	return p.PodAffinity
}

var GetDaemonSetResponse_PodAntiAffinity_DEFAULT *PodAntiAffinity

func (p *GetDaemonSetResponse) GetPodAntiAffinity() (v *PodAntiAffinity) {
	if !p.IsSetPodAntiAffinity() {
		return GetDaemonSetResponse_PodAntiAffinity_DEFAULT
	}
	return p.PodAntiAffinity
}

func (p *GetDaemonSetResponse) GetRunAsNonRoot() (v bool) {
	return p.RunAsNonRoot
}

func (p *GetDaemonSetResponse) GetVolumes() (v []*Volume) {
	return p.Volumes
}

func (p *GetDaemonSetResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetDaemonSetResponse) GetUpdateTime() (v string) {
	return p.UpdateTime
}

func (p *GetDaemonSetResponse) GetReplicas() (v int32) {
	return p.Replicas
}

func (p *GetDaemonSetResponse) GetReadyReplicas() (v int32) {
	return p.ReadyReplicas
}

func (p *GetDaemonSetResponse) GetUpdatedReplicas() (v int32) {
	return p.UpdatedReplicas
}

func (p *GetDaemonSetResponse) GetAvailableReplicas() (v int32) {
	return p.AvailableReplicas
}

var GetDaemonSetResponse_ImagePullSecrets_DEFAULT []string

func (p *GetDaemonSetResponse) GetImagePullSecrets() (v []string) {
	if !p.IsSetImagePullSecrets() {
		return GetDaemonSetResponse_ImagePullSecrets_DEFAULT
	}
	return p.ImagePullSecrets
}

func (p *GetDaemonSetResponse) GetSelector() (v []*KeyValuePair) {
	return p.Selector
}

var GetDaemonSetResponse_Annotations_DEFAULT []*KeyValuePair

func (p *GetDaemonSetResponse) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return GetDaemonSetResponse_Annotations_DEFAULT
	}
	return p.Annotations
}

var GetDaemonSetResponse_PodAnnotations_DEFAULT []*KeyValuePair

func (p *GetDaemonSetResponse) GetPodAnnotations() (v []*KeyValuePair) {
	if !p.IsSetPodAnnotations() {
		return GetDaemonSetResponse_PodAnnotations_DEFAULT
	}
	return p.PodAnnotations
}
func (p *GetDaemonSetResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetDaemonSetResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetDaemonSetResponse) SetName(val string) {
	p.Name = val
}
func (p *GetDaemonSetResponse) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *GetDaemonSetResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetDaemonSetResponse) SetContainers(val []*ContainerConfiguration) {
	p.Containers = val
}
func (p *GetDaemonSetResponse) SetTerminationGracePeriodSeconds(val int64) {
	p.TerminationGracePeriodSeconds = val
}
func (p *GetDaemonSetResponse) SetStrategy(val string) {
	p.Strategy = val
}
func (p *GetDaemonSetResponse) SetMaxUnavailable(val *string) {
	p.MaxUnavailable = val
}
func (p *GetDaemonSetResponse) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}
func (p *GetDaemonSetResponse) SetDnsPolicy(val string) {
	p.DnsPolicy = val
}
func (p *GetDaemonSetResponse) SetNodeAffinity(val *NodeAffinity) {
	p.NodeAffinity = val
}
func (p *GetDaemonSetResponse) SetTolerations(val []*Toleration) {
	p.Tolerations = val
}
func (p *GetDaemonSetResponse) SetPodAffinity(val *PodAffinity) {
	p.PodAffinity = val
}
func (p *GetDaemonSetResponse) SetPodAntiAffinity(val *PodAntiAffinity) {
	p.PodAntiAffinity = val
}
func (p *GetDaemonSetResponse) SetRunAsNonRoot(val bool) {
	p.RunAsNonRoot = val
}
func (p *GetDaemonSetResponse) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *GetDaemonSetResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetDaemonSetResponse) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *GetDaemonSetResponse) SetReplicas(val int32) {
	p.Replicas = val
}
func (p *GetDaemonSetResponse) SetReadyReplicas(val int32) {
	p.ReadyReplicas = val
}
func (p *GetDaemonSetResponse) SetUpdatedReplicas(val int32) {
	p.UpdatedReplicas = val
}
func (p *GetDaemonSetResponse) SetAvailableReplicas(val int32) {
	p.AvailableReplicas = val
}
func (p *GetDaemonSetResponse) SetImagePullSecrets(val []string) {
	p.ImagePullSecrets = val
}
func (p *GetDaemonSetResponse) SetSelector(val []*KeyValuePair) {
	p.Selector = val
}
func (p *GetDaemonSetResponse) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *GetDaemonSetResponse) SetPodAnnotations(val []*KeyValuePair) {
	p.PodAnnotations = val
}

var fieldIDToName_GetDaemonSetResponse = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "Labels",
	5:  "Description",
	6:  "Containers",
	7:  "TerminationGracePeriodSeconds",
	8:  "Strategy",
	9:  "MaxUnavailable",
	10: "PodLabels",
	11: "DnsPolicy",
	12: "NodeAffinity",
	13: "Tolerations",
	14: "PodAffinity",
	15: "PodAntiAffinity",
	16: "RunAsNonRoot",
	17: "Volumes",
	18: "CreateTime",
	19: "UpdateTime",
	20: "Replicas",
	21: "ReadyReplicas",
	22: "UpdatedReplicas",
	23: "AvailableReplicas",
	24: "ImagePullSecrets",
	25: "Selector",
	26: "Annotations",
	27: "PodAnnotations",
}

func (p *GetDaemonSetResponse) IsSetDescription() bool {
	return p.Description != GetDaemonSetResponse_Description_DEFAULT
}

func (p *GetDaemonSetResponse) IsSetMaxUnavailable() bool {
	return p.MaxUnavailable != nil
}

func (p *GetDaemonSetResponse) IsSetNodeAffinity() bool {
	return p.NodeAffinity != nil
}

func (p *GetDaemonSetResponse) IsSetPodAffinity() bool {
	return p.PodAffinity != nil
}

func (p *GetDaemonSetResponse) IsSetPodAntiAffinity() bool {
	return p.PodAntiAffinity != nil
}

func (p *GetDaemonSetResponse) IsSetImagePullSecrets() bool {
	return p.ImagePullSecrets != nil
}

func (p *GetDaemonSetResponse) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *GetDaemonSetResponse) IsSetPodAnnotations() bool {
	return p.PodAnnotations != nil
}

func (p *GetDaemonSetResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetContainers bool = false
	var issetTerminationGracePeriodSeconds bool = false
	var issetStrategy bool = false
	var issetPodLabels bool = false
	var issetDnsPolicy bool = false
	var issetTolerations bool = false
	var issetRunAsNonRoot bool = false
	var issetVolumes bool = false
	var issetCreateTime bool = false
	var issetUpdateTime bool = false
	var issetReplicas bool = false
	var issetReadyReplicas bool = false
	var issetUpdatedReplicas bool = false
	var issetAvailableReplicas bool = false
	var issetSelector bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTerminationGracePeriodSeconds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStrategy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetDnsPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetTolerations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunAsNonRoot = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetReadyReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvailableReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetSelector = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTerminationGracePeriodSeconds {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStrategy {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetDnsPolicy {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetTolerations {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetRunAsNonRoot {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetVolumes {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetReplicas {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetReadyReplicas {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedReplicas {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetAvailableReplicas {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetSelector {
		fieldId = 25
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDaemonSetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetDaemonSetResponse[fieldId]))
}

func (p *GetDaemonSetResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerConfiguration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerConfiguration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TerminationGracePeriodSeconds = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Strategy = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MaxUnavailable = &v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DnsPolicy = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField12(iprot thrift.TProtocol) error {
	p.NodeAffinity = NewNodeAffinity()
	if err := p.NodeAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tolerations = make([]*Toleration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewToleration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Tolerations = append(p.Tolerations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField14(iprot thrift.TProtocol) error {
	p.PodAffinity = NewPodAffinity()
	if err := p.PodAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField15(iprot thrift.TProtocol) error {
	p.PodAntiAffinity = NewPodAntiAffinity()
	if err := p.PodAntiAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RunAsNonRoot = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Replicas = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ReadyReplicas = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.UpdatedReplicas = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AvailableReplicas = v
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImagePullSecrets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ImagePullSecrets = append(p.ImagePullSecrets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField25(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Selector = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Selector = append(p.Selector, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) ReadField27(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodAnnotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodAnnotations = append(p.PodAnnotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDaemonSetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDaemonSetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TerminationGracePeriodSeconds", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TerminationGracePeriodSeconds); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Strategy", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Strategy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxUnavailable() {
		if err = oprot.WriteFieldBegin("MaxUnavailable", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MaxUnavailable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DnsPolicy", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DnsPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAffinity() {
		if err = oprot.WriteFieldBegin("NodeAffinity", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Tolerations", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tolerations)); err != nil {
		return err
	}
	for _, v := range p.Tolerations {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAffinity() {
		if err = oprot.WriteFieldBegin("PodAffinity", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PodAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAntiAffinity() {
		if err = oprot.WriteFieldBegin("PodAntiAffinity", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PodAntiAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunAsNonRoot", thrift.BOOL, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.RunAsNonRoot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
		return err
	}
	for _, v := range p.Volumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Replicas", thrift.I32, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Replicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReadyReplicas", thrift.I32, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ReadyReplicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedReplicas", thrift.I32, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedReplicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvailableReplicas", thrift.I32, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AvailableReplicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetImagePullSecrets() {
		if err = oprot.WriteFieldBegin("ImagePullSecrets", thrift.LIST, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ImagePullSecrets)); err != nil {
			return err
		}
		for _, v := range p.ImagePullSecrets {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Selector", thrift.LIST, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Selector)); err != nil {
		return err
	}
	for _, v := range p.Selector {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *GetDaemonSetResponse) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAnnotations() {
		if err = oprot.WriteFieldBegin("PodAnnotations", thrift.LIST, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodAnnotations)); err != nil {
			return err
		}
		for _, v := range p.PodAnnotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *GetDaemonSetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDaemonSetResponse(%+v)", *p)
}

func (p *GetDaemonSetResponse) DeepEqual(ano *GetDaemonSetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field7DeepEqual(ano.TerminationGracePeriodSeconds) {
		return false
	}
	if !p.Field8DeepEqual(ano.Strategy) {
		return false
	}
	if !p.Field9DeepEqual(ano.MaxUnavailable) {
		return false
	}
	if !p.Field10DeepEqual(ano.PodLabels) {
		return false
	}
	if !p.Field11DeepEqual(ano.DnsPolicy) {
		return false
	}
	if !p.Field12DeepEqual(ano.NodeAffinity) {
		return false
	}
	if !p.Field13DeepEqual(ano.Tolerations) {
		return false
	}
	if !p.Field14DeepEqual(ano.PodAffinity) {
		return false
	}
	if !p.Field15DeepEqual(ano.PodAntiAffinity) {
		return false
	}
	if !p.Field16DeepEqual(ano.RunAsNonRoot) {
		return false
	}
	if !p.Field17DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field18DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field19DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field20DeepEqual(ano.Replicas) {
		return false
	}
	if !p.Field21DeepEqual(ano.ReadyReplicas) {
		return false
	}
	if !p.Field22DeepEqual(ano.UpdatedReplicas) {
		return false
	}
	if !p.Field23DeepEqual(ano.AvailableReplicas) {
		return false
	}
	if !p.Field24DeepEqual(ano.ImagePullSecrets) {
		return false
	}
	if !p.Field25DeepEqual(ano.Selector) {
		return false
	}
	if !p.Field26DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field27DeepEqual(ano.PodAnnotations) {
		return false
	}
	return true
}

func (p *GetDaemonSetResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field6DeepEqual(src []*ContainerConfiguration) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field7DeepEqual(src int64) bool {

	if p.TerminationGracePeriodSeconds != src {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Strategy, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field9DeepEqual(src *string) bool {

	if p.MaxUnavailable == src {
		return true
	} else if p.MaxUnavailable == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MaxUnavailable, *src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field10DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field11DeepEqual(src string) bool {

	if strings.Compare(p.DnsPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field12DeepEqual(src *NodeAffinity) bool {

	if !p.NodeAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field13DeepEqual(src []*Toleration) bool {

	if len(p.Tolerations) != len(src) {
		return false
	}
	for i, v := range p.Tolerations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field14DeepEqual(src *PodAffinity) bool {

	if !p.PodAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field15DeepEqual(src *PodAntiAffinity) bool {

	if !p.PodAntiAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field16DeepEqual(src bool) bool {

	if p.RunAsNonRoot != src {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field17DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field18DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field19DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field20DeepEqual(src int32) bool {

	if p.Replicas != src {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field21DeepEqual(src int32) bool {

	if p.ReadyReplicas != src {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field22DeepEqual(src int32) bool {

	if p.UpdatedReplicas != src {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field23DeepEqual(src int32) bool {

	if p.AvailableReplicas != src {
		return false
	}
	return true
}
func (p *GetDaemonSetResponse) Field24DeepEqual(src []string) bool {

	if len(p.ImagePullSecrets) != len(src) {
		return false
	}
	for i, v := range p.ImagePullSecrets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field25DeepEqual(src []*KeyValuePair) bool {

	if len(p.Selector) != len(src) {
		return false
	}
	for i, v := range p.Selector {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field26DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDaemonSetResponse) Field27DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodAnnotations) != len(src) {
		return false
	}
	for i, v := range p.PodAnnotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ListDaemonSetsResponse struct {
	Total int64            `thrift:"Total,1,required" json:"Total"`
	Items []*DaemonSetItem `thrift:"Items,2,required" json:"Items"`
}

func NewListDaemonSetsResponse() *ListDaemonSetsResponse {
	return &ListDaemonSetsResponse{}
}

func (p *ListDaemonSetsResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListDaemonSetsResponse) GetItems() (v []*DaemonSetItem) {
	return p.Items
}
func (p *ListDaemonSetsResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListDaemonSetsResponse) SetItems(val []*DaemonSetItem) {
	p.Items = val
}

var fieldIDToName_ListDaemonSetsResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListDaemonSetsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListDaemonSetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListDaemonSetsResponse[fieldId]))
}

func (p *ListDaemonSetsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListDaemonSetsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*DaemonSetItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewDaemonSetItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListDaemonSetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDaemonSetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListDaemonSetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListDaemonSetsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListDaemonSetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListDaemonSetsResponse(%+v)", *p)
}

func (p *ListDaemonSetsResponse) DeepEqual(ano *ListDaemonSetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListDaemonSetsResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListDaemonSetsResponse) Field2DeepEqual(src []*DaemonSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DaemonSetItem struct {
	Namespace         string               `thrift:"Namespace,1,required" from:"metadata.namespace"`
	Name              string               `thrift:"Name,2,required" from:"metadata.name"`
	Labels            []*KeyValuePair      `thrift:"Labels,3,required" from:"metadata.labels"`
	Description       string               `thrift:"Description,4,required" from:"metadata.annotations.<description>"`
	CreateTime        string               `thrift:"CreateTime,5,required" from:"metadata.creationTimestamp"`
	Replicas          int32                `thrift:"Replicas,6,required" from:"status.desiredNumberScheduled"`
	ReadyReplicas     int32                `thrift:"ReadyReplicas,7,required" from:"status.numberReady"`
	UpdatedReplicas   int32                `thrift:"UpdatedReplicas,8,required" from:"status.updatedNumberScheduled"`
	AvailableReplicas int32                `thrift:"AvailableReplicas,9,required" from:"status.numberAvailable"`
	Containers        []*LiteContainerItem `thrift:"Containers,10,required" json:"Containers"`
	PodLabels         []*KeyValuePair      `thrift:"PodLabels,11,required" from:"spec.template.metadata.labels"`
}

func NewDaemonSetItem() *DaemonSetItem {
	return &DaemonSetItem{

		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
	}
}

func (p *DaemonSetItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *DaemonSetItem) GetName() (v string) {
	return p.Name
}

func (p *DaemonSetItem) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

func (p *DaemonSetItem) GetDescription() (v string) {
	return p.Description
}

func (p *DaemonSetItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *DaemonSetItem) GetReplicas() (v int32) {
	return p.Replicas
}

func (p *DaemonSetItem) GetReadyReplicas() (v int32) {
	return p.ReadyReplicas
}

func (p *DaemonSetItem) GetUpdatedReplicas() (v int32) {
	return p.UpdatedReplicas
}

func (p *DaemonSetItem) GetAvailableReplicas() (v int32) {
	return p.AvailableReplicas
}

func (p *DaemonSetItem) GetContainers() (v []*LiteContainerItem) {
	return p.Containers
}

func (p *DaemonSetItem) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}
func (p *DaemonSetItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *DaemonSetItem) SetName(val string) {
	p.Name = val
}
func (p *DaemonSetItem) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *DaemonSetItem) SetDescription(val string) {
	p.Description = val
}
func (p *DaemonSetItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *DaemonSetItem) SetReplicas(val int32) {
	p.Replicas = val
}
func (p *DaemonSetItem) SetReadyReplicas(val int32) {
	p.ReadyReplicas = val
}
func (p *DaemonSetItem) SetUpdatedReplicas(val int32) {
	p.UpdatedReplicas = val
}
func (p *DaemonSetItem) SetAvailableReplicas(val int32) {
	p.AvailableReplicas = val
}
func (p *DaemonSetItem) SetContainers(val []*LiteContainerItem) {
	p.Containers = val
}
func (p *DaemonSetItem) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}

var fieldIDToName_DaemonSetItem = map[int16]string{
	1:  "Namespace",
	2:  "Name",
	3:  "Labels",
	4:  "Description",
	5:  "CreateTime",
	6:  "Replicas",
	7:  "ReadyReplicas",
	8:  "UpdatedReplicas",
	9:  "AvailableReplicas",
	10: "Containers",
	11: "PodLabels",
}

func (p *DaemonSetItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetDescription bool = false
	var issetCreateTime bool = false
	var issetReplicas bool = false
	var issetReadyReplicas bool = false
	var issetUpdatedReplicas bool = false
	var issetAvailableReplicas bool = false
	var issetContainers bool = false
	var issetPodLabels bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetReadyReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdatedReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetAvailableReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetReplicas {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetReadyReplicas {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetUpdatedReplicas {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetAvailableReplicas {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DaemonSetItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DaemonSetItem[fieldId]))
}

func (p *DaemonSetItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DaemonSetItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Replicas = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ReadyReplicas = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.UpdatedReplicas = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.AvailableReplicas = v
	}
	return nil
}

func (p *DaemonSetItem) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*LiteContainerItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLiteContainerItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DaemonSetItem) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DaemonSetItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DaemonSetItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DaemonSetItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DaemonSetItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DaemonSetItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DaemonSetItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DaemonSetItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *DaemonSetItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Replicas", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Replicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *DaemonSetItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReadyReplicas", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ReadyReplicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *DaemonSetItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdatedReplicas", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UpdatedReplicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *DaemonSetItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AvailableReplicas", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.AvailableReplicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *DaemonSetItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *DaemonSetItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *DaemonSetItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DaemonSetItem(%+v)", *p)
}

func (p *DaemonSetItem) DeepEqual(ano *DaemonSetItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.Replicas) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReadyReplicas) {
		return false
	}
	if !p.Field8DeepEqual(ano.UpdatedReplicas) {
		return false
	}
	if !p.Field9DeepEqual(ano.AvailableReplicas) {
		return false
	}
	if !p.Field10DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field11DeepEqual(ano.PodLabels) {
		return false
	}
	return true
}

func (p *DaemonSetItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field3DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DaemonSetItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field6DeepEqual(src int32) bool {

	if p.Replicas != src {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field7DeepEqual(src int32) bool {

	if p.ReadyReplicas != src {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field8DeepEqual(src int32) bool {

	if p.UpdatedReplicas != src {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field9DeepEqual(src int32) bool {

	if p.AvailableReplicas != src {
		return false
	}
	return true
}
func (p *DaemonSetItem) Field10DeepEqual(src []*LiteContainerItem) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DaemonSetItem) Field11DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateDaemonSetRequest struct {
	ClusterId                     string                    `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace                     string                    `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                          string                    `thrift:"Name,3,required" from:"metadata.name"`
	Labels                        []*KeyValuePair           `thrift:"Labels,4" from:"metadata.labels"`
	Description                   string                    `thrift:"Description,5" from:"metadata.annotations.<description>,important"`
	Containers                    []*ContainerConfiguration `thrift:"Containers,6" json:"Containers,omitempty"`
	TerminationGracePeriodSeconds int64                     `thrift:"TerminationGracePeriodSeconds,7,required" from:"spec.template.spec.terminationGracePeriodSeconds,important"`
	Strategy                      string                    `thrift:"Strategy,8,required" from:"spec.updateStrategy.type"`
	MaxUnavailable                *string                   `thrift:"MaxUnavailable,9" json:"MaxUnavailable,omitempty"`
	PodLabels                     []*KeyValuePair           `thrift:"PodLabels,10,required" from:"spec.template.metadata.labels"`
	DnsPolicy                     string                    `thrift:"DnsPolicy,11,required" from:"spec.template.spec.dnsPolicy"`
	NodeAffinity                  *NodeAffinity             `thrift:"NodeAffinity,12" json:"NodeAffinity,omitempty"`
	Tolerations                   []*Toleration             `thrift:"Tolerations,13" json:"Tolerations,omitempty"`
	PodAffinity                   *PodAffinity              `thrift:"PodAffinity,14" json:"PodAffinity,omitempty"`
	PodAntiAffinity               *PodAntiAffinity          `thrift:"PodAntiAffinity,15" json:"PodAntiAffinity,omitempty"`
	RunAsNonRoot                  bool                      `thrift:"RunAsNonRoot,16,required" from:"spec.template.spec.securityContext.runAsNonRoot"`
	Volumes                       []*Volume                 `thrift:"Volumes,17" json:"Volumes,omitempty"`
	ImagePullSecrets              []string                  `thrift:"ImagePullSecrets,18" json:"ImagePullSecrets,omitempty"`
	Annotations                   []*KeyValuePair           `thrift:"Annotations,19" from:"metadata.annotations"`
	PodAnnotations                []*KeyValuePair           `thrift:"PodAnnotations,20" from:"spec.template.metadata.annotations"`
	Top                           *base.TopParam            `thrift:"Top,255,required" json:"Top"`
}

func NewCreateDaemonSetRequest() *CreateDaemonSetRequest {
	return &CreateDaemonSetRequest{

		ClusterId:   "",
		Namespace:   "",
		Name:        "",
		Description: "",
	}
}

func (p *CreateDaemonSetRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateDaemonSetRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateDaemonSetRequest) GetName() (v string) {
	return p.Name
}

var CreateDaemonSetRequest_Labels_DEFAULT []*KeyValuePair

func (p *CreateDaemonSetRequest) GetLabels() (v []*KeyValuePair) {
	if !p.IsSetLabels() {
		return CreateDaemonSetRequest_Labels_DEFAULT
	}
	return p.Labels
}

var CreateDaemonSetRequest_Description_DEFAULT string = ""

func (p *CreateDaemonSetRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateDaemonSetRequest_Description_DEFAULT
	}
	return p.Description
}

var CreateDaemonSetRequest_Containers_DEFAULT []*ContainerConfiguration

func (p *CreateDaemonSetRequest) GetContainers() (v []*ContainerConfiguration) {
	if !p.IsSetContainers() {
		return CreateDaemonSetRequest_Containers_DEFAULT
	}
	return p.Containers
}

func (p *CreateDaemonSetRequest) GetTerminationGracePeriodSeconds() (v int64) {
	return p.TerminationGracePeriodSeconds
}

func (p *CreateDaemonSetRequest) GetStrategy() (v string) {
	return p.Strategy
}

var CreateDaemonSetRequest_MaxUnavailable_DEFAULT string

func (p *CreateDaemonSetRequest) GetMaxUnavailable() (v string) {
	if !p.IsSetMaxUnavailable() {
		return CreateDaemonSetRequest_MaxUnavailable_DEFAULT
	}
	return *p.MaxUnavailable
}

func (p *CreateDaemonSetRequest) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}

func (p *CreateDaemonSetRequest) GetDnsPolicy() (v string) {
	return p.DnsPolicy
}

var CreateDaemonSetRequest_NodeAffinity_DEFAULT *NodeAffinity

func (p *CreateDaemonSetRequest) GetNodeAffinity() (v *NodeAffinity) {
	if !p.IsSetNodeAffinity() {
		return CreateDaemonSetRequest_NodeAffinity_DEFAULT
	}
	return p.NodeAffinity
}

var CreateDaemonSetRequest_Tolerations_DEFAULT []*Toleration

func (p *CreateDaemonSetRequest) GetTolerations() (v []*Toleration) {
	if !p.IsSetTolerations() {
		return CreateDaemonSetRequest_Tolerations_DEFAULT
	}
	return p.Tolerations
}

var CreateDaemonSetRequest_PodAffinity_DEFAULT *PodAffinity

func (p *CreateDaemonSetRequest) GetPodAffinity() (v *PodAffinity) {
	if !p.IsSetPodAffinity() {
		return CreateDaemonSetRequest_PodAffinity_DEFAULT
	}
	return p.PodAffinity
}

var CreateDaemonSetRequest_PodAntiAffinity_DEFAULT *PodAntiAffinity

func (p *CreateDaemonSetRequest) GetPodAntiAffinity() (v *PodAntiAffinity) {
	if !p.IsSetPodAntiAffinity() {
		return CreateDaemonSetRequest_PodAntiAffinity_DEFAULT
	}
	return p.PodAntiAffinity
}

func (p *CreateDaemonSetRequest) GetRunAsNonRoot() (v bool) {
	return p.RunAsNonRoot
}

var CreateDaemonSetRequest_Volumes_DEFAULT []*Volume

func (p *CreateDaemonSetRequest) GetVolumes() (v []*Volume) {
	if !p.IsSetVolumes() {
		return CreateDaemonSetRequest_Volumes_DEFAULT
	}
	return p.Volumes
}

var CreateDaemonSetRequest_ImagePullSecrets_DEFAULT []string

func (p *CreateDaemonSetRequest) GetImagePullSecrets() (v []string) {
	if !p.IsSetImagePullSecrets() {
		return CreateDaemonSetRequest_ImagePullSecrets_DEFAULT
	}
	return p.ImagePullSecrets
}

var CreateDaemonSetRequest_Annotations_DEFAULT []*KeyValuePair

func (p *CreateDaemonSetRequest) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return CreateDaemonSetRequest_Annotations_DEFAULT
	}
	return p.Annotations
}

var CreateDaemonSetRequest_PodAnnotations_DEFAULT []*KeyValuePair

func (p *CreateDaemonSetRequest) GetPodAnnotations() (v []*KeyValuePair) {
	if !p.IsSetPodAnnotations() {
		return CreateDaemonSetRequest_PodAnnotations_DEFAULT
	}
	return p.PodAnnotations
}

var CreateDaemonSetRequest_Top_DEFAULT *base.TopParam

func (p *CreateDaemonSetRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateDaemonSetRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateDaemonSetRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateDaemonSetRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateDaemonSetRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateDaemonSetRequest) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *CreateDaemonSetRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateDaemonSetRequest) SetContainers(val []*ContainerConfiguration) {
	p.Containers = val
}
func (p *CreateDaemonSetRequest) SetTerminationGracePeriodSeconds(val int64) {
	p.TerminationGracePeriodSeconds = val
}
func (p *CreateDaemonSetRequest) SetStrategy(val string) {
	p.Strategy = val
}
func (p *CreateDaemonSetRequest) SetMaxUnavailable(val *string) {
	p.MaxUnavailable = val
}
func (p *CreateDaemonSetRequest) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}
func (p *CreateDaemonSetRequest) SetDnsPolicy(val string) {
	p.DnsPolicy = val
}
func (p *CreateDaemonSetRequest) SetNodeAffinity(val *NodeAffinity) {
	p.NodeAffinity = val
}
func (p *CreateDaemonSetRequest) SetTolerations(val []*Toleration) {
	p.Tolerations = val
}
func (p *CreateDaemonSetRequest) SetPodAffinity(val *PodAffinity) {
	p.PodAffinity = val
}
func (p *CreateDaemonSetRequest) SetPodAntiAffinity(val *PodAntiAffinity) {
	p.PodAntiAffinity = val
}
func (p *CreateDaemonSetRequest) SetRunAsNonRoot(val bool) {
	p.RunAsNonRoot = val
}
func (p *CreateDaemonSetRequest) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *CreateDaemonSetRequest) SetImagePullSecrets(val []string) {
	p.ImagePullSecrets = val
}
func (p *CreateDaemonSetRequest) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *CreateDaemonSetRequest) SetPodAnnotations(val []*KeyValuePair) {
	p.PodAnnotations = val
}
func (p *CreateDaemonSetRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateDaemonSetRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Containers",
	7:   "TerminationGracePeriodSeconds",
	8:   "Strategy",
	9:   "MaxUnavailable",
	10:  "PodLabels",
	11:  "DnsPolicy",
	12:  "NodeAffinity",
	13:  "Tolerations",
	14:  "PodAffinity",
	15:  "PodAntiAffinity",
	16:  "RunAsNonRoot",
	17:  "Volumes",
	18:  "ImagePullSecrets",
	19:  "Annotations",
	20:  "PodAnnotations",
	255: "Top",
}

func (p *CreateDaemonSetRequest) IsSetLabels() bool {
	return p.Labels != nil
}

func (p *CreateDaemonSetRequest) IsSetDescription() bool {
	return p.Description != CreateDaemonSetRequest_Description_DEFAULT
}

func (p *CreateDaemonSetRequest) IsSetContainers() bool {
	return p.Containers != nil
}

func (p *CreateDaemonSetRequest) IsSetMaxUnavailable() bool {
	return p.MaxUnavailable != nil
}

func (p *CreateDaemonSetRequest) IsSetNodeAffinity() bool {
	return p.NodeAffinity != nil
}

func (p *CreateDaemonSetRequest) IsSetTolerations() bool {
	return p.Tolerations != nil
}

func (p *CreateDaemonSetRequest) IsSetPodAffinity() bool {
	return p.PodAffinity != nil
}

func (p *CreateDaemonSetRequest) IsSetPodAntiAffinity() bool {
	return p.PodAntiAffinity != nil
}

func (p *CreateDaemonSetRequest) IsSetVolumes() bool {
	return p.Volumes != nil
}

func (p *CreateDaemonSetRequest) IsSetImagePullSecrets() bool {
	return p.ImagePullSecrets != nil
}

func (p *CreateDaemonSetRequest) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *CreateDaemonSetRequest) IsSetPodAnnotations() bool {
	return p.PodAnnotations != nil
}

func (p *CreateDaemonSetRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateDaemonSetRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetTerminationGracePeriodSeconds bool = false
	var issetStrategy bool = false
	var issetPodLabels bool = false
	var issetDnsPolicy bool = false
	var issetRunAsNonRoot bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTerminationGracePeriodSeconds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStrategy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetDnsPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunAsNonRoot = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTerminationGracePeriodSeconds {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStrategy {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetDnsPolicy {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetRunAsNonRoot {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateDaemonSetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateDaemonSetRequest[fieldId]))
}

func (p *CreateDaemonSetRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerConfiguration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerConfiguration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TerminationGracePeriodSeconds = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Strategy = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MaxUnavailable = &v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DnsPolicy = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField12(iprot thrift.TProtocol) error {
	p.NodeAffinity = NewNodeAffinity()
	if err := p.NodeAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Tolerations = make([]*Toleration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewToleration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Tolerations = append(p.Tolerations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField14(iprot thrift.TProtocol) error {
	p.PodAffinity = NewPodAffinity()
	if err := p.PodAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField15(iprot thrift.TProtocol) error {
	p.PodAntiAffinity = NewPodAntiAffinity()
	if err := p.PodAntiAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RunAsNonRoot = v
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImagePullSecrets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ImagePullSecrets = append(p.ImagePullSecrets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodAnnotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodAnnotations = append(p.PodAnnotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateDaemonSetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDaemonSetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLabels() {
		if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
			return err
		}
		for _, v := range p.Labels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetContainers() {
		if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
			return err
		}
		for _, v := range p.Containers {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TerminationGracePeriodSeconds", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TerminationGracePeriodSeconds); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Strategy", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Strategy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxUnavailable() {
		if err = oprot.WriteFieldBegin("MaxUnavailable", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MaxUnavailable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DnsPolicy", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DnsPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAffinity() {
		if err = oprot.WriteFieldBegin("NodeAffinity", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTolerations() {
		if err = oprot.WriteFieldBegin("Tolerations", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tolerations)); err != nil {
			return err
		}
		for _, v := range p.Tolerations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAffinity() {
		if err = oprot.WriteFieldBegin("PodAffinity", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PodAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAntiAffinity() {
		if err = oprot.WriteFieldBegin("PodAntiAffinity", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PodAntiAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunAsNonRoot", thrift.BOOL, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.RunAsNonRoot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetVolumes() {
		if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
			return err
		}
		for _, v := range p.Volumes {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetImagePullSecrets() {
		if err = oprot.WriteFieldBegin("ImagePullSecrets", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ImagePullSecrets)); err != nil {
			return err
		}
		for _, v := range p.ImagePullSecrets {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAnnotations() {
		if err = oprot.WriteFieldBegin("PodAnnotations", thrift.LIST, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodAnnotations)); err != nil {
			return err
		}
		for _, v := range p.PodAnnotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateDaemonSetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDaemonSetRequest(%+v)", *p)
}

func (p *CreateDaemonSetRequest) DeepEqual(ano *CreateDaemonSetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field7DeepEqual(ano.TerminationGracePeriodSeconds) {
		return false
	}
	if !p.Field8DeepEqual(ano.Strategy) {
		return false
	}
	if !p.Field9DeepEqual(ano.MaxUnavailable) {
		return false
	}
	if !p.Field10DeepEqual(ano.PodLabels) {
		return false
	}
	if !p.Field11DeepEqual(ano.DnsPolicy) {
		return false
	}
	if !p.Field12DeepEqual(ano.NodeAffinity) {
		return false
	}
	if !p.Field13DeepEqual(ano.Tolerations) {
		return false
	}
	if !p.Field14DeepEqual(ano.PodAffinity) {
		return false
	}
	if !p.Field15DeepEqual(ano.PodAntiAffinity) {
		return false
	}
	if !p.Field16DeepEqual(ano.RunAsNonRoot) {
		return false
	}
	if !p.Field17DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field18DeepEqual(ano.ImagePullSecrets) {
		return false
	}
	if !p.Field19DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field20DeepEqual(ano.PodAnnotations) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateDaemonSetRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field6DeepEqual(src []*ContainerConfiguration) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field7DeepEqual(src int64) bool {

	if p.TerminationGracePeriodSeconds != src {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Strategy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field9DeepEqual(src *string) bool {

	if p.MaxUnavailable == src {
		return true
	} else if p.MaxUnavailable == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MaxUnavailable, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field10DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field11DeepEqual(src string) bool {

	if strings.Compare(p.DnsPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field12DeepEqual(src *NodeAffinity) bool {

	if !p.NodeAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field13DeepEqual(src []*Toleration) bool {

	if len(p.Tolerations) != len(src) {
		return false
	}
	for i, v := range p.Tolerations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field14DeepEqual(src *PodAffinity) bool {

	if !p.PodAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field15DeepEqual(src *PodAntiAffinity) bool {

	if !p.PodAntiAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field16DeepEqual(src bool) bool {

	if p.RunAsNonRoot != src {
		return false
	}
	return true
}
func (p *CreateDaemonSetRequest) Field17DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field18DeepEqual(src []string) bool {

	if len(p.ImagePullSecrets) != len(src) {
		return false
	}
	for i, v := range p.ImagePullSecrets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field19DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field20DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodAnnotations) != len(src) {
		return false
	}
	for i, v := range p.PodAnnotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateDaemonSetRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
