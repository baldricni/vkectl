// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type GetCronJobResponse struct {
	ClusterId                  string                    `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace                  string                    `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                       string                    `thrift:"Name,3,required" from:"metadata.name"`
	Labels                     []*KeyValuePair           `thrift:"Labels,4,required" from:"metadata.labels"`
	Description                string                    `thrift:"Description,5" from:"metadata.annotations.<description>"`
	Containers                 []*ContainerConfiguration `thrift:"Containers,6,required" json:"Containers"`
	Volumes                    []*Volume                 `thrift:"Volumes,7,required" json:"Volumes"`
	Schedule                   string                    `thrift:"Schedule,8,required" from:"spec.schedule"`
	SuccessfulJobsHistoryLimit *int32                    `thrift:"SuccessfulJobsHistoryLimit,9" from:"spec.successfulJobsHistoryLimit"`
	FailedJobsHistoryLimit     *int32                    `thrift:"FailedJobsHistoryLimit,10" from:"spec.failedJobsHistoryLimit"`
	ConcurrencyPolicy          string                    `thrift:"ConcurrencyPolicy,11,required" json:"ConcurrencyPolicy" default:"Allow" from:"spec.concurrencyPolicy"`
	ActiveDeadlineSeconds      *int64                    `thrift:"ActiveDeadlineSeconds,12" from:"spec.jobTemplate.spec.activeDeadlineSeconds"`
	Completions                *int32                    `thrift:"Completions,13" from:"spec.jobTemplate.spec.completions"`
	Parallelism                *int32                    `thrift:"Parallelism,14" from:"spec.jobTemplate.spec.parallelism"`
	BackoffLimit               *int32                    `thrift:"BackoffLimit,15" from:"spec.jobTemplate.spec.backoffLimit"`
	RestartPolicy              string                    `thrift:"RestartPolicy,16,required" json:"RestartPolicy" default:"Never" from:"spec.jobTemplate.spec.template.spec.restartPolicy"`
	PodLabels                  []*KeyValuePair           `thrift:"PodLabels,17,required" from:"spec.jobTemplate.spec.template.metadata.labels"`
	DnsPolicy                  string                    `thrift:"DnsPolicy,18,required" json:"DnsPolicy" default:"ClusterFirst" from:"spec.jobTemplate.spec.template.spec.dnsPolicy"`
	RunAsNonRoot               bool                      `thrift:"RunAsNonRoot,19,required" from:"spec.jobTemplate.spec.template.spec.securityContext.runAsNonRoot"`
	Suspend                    bool                      `thrift:"Suspend,20,required" from:"spec.suspend"`
	Active                     int32                     `thrift:"Active,21,required" json:"Active"`
	CreateTime                 string                    `thrift:"CreateTime,22,required" from:"metadata.creationTimestamp"`
	LastScheduleTime           string                    `thrift:"LastScheduleTime,23,required" from:"status.lastScheduleTime"`
	ImagePullSecrets           []string                  `thrift:"ImagePullSecrets,24,required" json:"ImagePullSecrets"`
	UpdateTime                 string                    `thrift:"UpdateTime,25,required" from:"metadata.annotations.<updateTimestamp>"`
	NodeAffinity               *NodeAffinity             `thrift:"NodeAffinity,26" json:"NodeAffinity,omitempty"`
	Annotations                []*KeyValuePair           `thrift:"Annotations,27" from:"metadata.annotations"`
	PodAnnotations             []*KeyValuePair           `thrift:"PodAnnotations,28" from:"spec.jobTemplate.spec.template.metadata.annotations"`
	IsVci                      bool                      `thrift:"IsVci,100,required" json:"IsVci"`
}

func NewGetCronJobResponse() *GetCronJobResponse {
	return &GetCronJobResponse{

		ClusterId:         "",
		Namespace:         "",
		Name:              "",
		Description:       "",
		ConcurrencyPolicy: "Allow",
		RestartPolicy:     "Never",
		DnsPolicy:         "ClusterFirst",
		CreateTime:        "",
		UpdateTime:        "",
	}
}

func (p *GetCronJobResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetCronJobResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetCronJobResponse) GetName() (v string) {
	return p.Name
}

func (p *GetCronJobResponse) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var GetCronJobResponse_Description_DEFAULT string = ""

func (p *GetCronJobResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetCronJobResponse_Description_DEFAULT
	}
	return p.Description
}

func (p *GetCronJobResponse) GetContainers() (v []*ContainerConfiguration) {
	return p.Containers
}

func (p *GetCronJobResponse) GetVolumes() (v []*Volume) {
	return p.Volumes
}

func (p *GetCronJobResponse) GetSchedule() (v string) {
	return p.Schedule
}

var GetCronJobResponse_SuccessfulJobsHistoryLimit_DEFAULT int32

func (p *GetCronJobResponse) GetSuccessfulJobsHistoryLimit() (v int32) {
	if !p.IsSetSuccessfulJobsHistoryLimit() {
		return GetCronJobResponse_SuccessfulJobsHistoryLimit_DEFAULT
	}
	return *p.SuccessfulJobsHistoryLimit
}

var GetCronJobResponse_FailedJobsHistoryLimit_DEFAULT int32

func (p *GetCronJobResponse) GetFailedJobsHistoryLimit() (v int32) {
	if !p.IsSetFailedJobsHistoryLimit() {
		return GetCronJobResponse_FailedJobsHistoryLimit_DEFAULT
	}
	return *p.FailedJobsHistoryLimit
}

func (p *GetCronJobResponse) GetConcurrencyPolicy() (v string) {
	return p.ConcurrencyPolicy
}

var GetCronJobResponse_ActiveDeadlineSeconds_DEFAULT int64

func (p *GetCronJobResponse) GetActiveDeadlineSeconds() (v int64) {
	if !p.IsSetActiveDeadlineSeconds() {
		return GetCronJobResponse_ActiveDeadlineSeconds_DEFAULT
	}
	return *p.ActiveDeadlineSeconds
}

var GetCronJobResponse_Completions_DEFAULT int32

func (p *GetCronJobResponse) GetCompletions() (v int32) {
	if !p.IsSetCompletions() {
		return GetCronJobResponse_Completions_DEFAULT
	}
	return *p.Completions
}

var GetCronJobResponse_Parallelism_DEFAULT int32

func (p *GetCronJobResponse) GetParallelism() (v int32) {
	if !p.IsSetParallelism() {
		return GetCronJobResponse_Parallelism_DEFAULT
	}
	return *p.Parallelism
}

var GetCronJobResponse_BackoffLimit_DEFAULT int32

func (p *GetCronJobResponse) GetBackoffLimit() (v int32) {
	if !p.IsSetBackoffLimit() {
		return GetCronJobResponse_BackoffLimit_DEFAULT
	}
	return *p.BackoffLimit
}

func (p *GetCronJobResponse) GetRestartPolicy() (v string) {
	return p.RestartPolicy
}

func (p *GetCronJobResponse) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}

func (p *GetCronJobResponse) GetDnsPolicy() (v string) {
	return p.DnsPolicy
}

func (p *GetCronJobResponse) GetRunAsNonRoot() (v bool) {
	return p.RunAsNonRoot
}

func (p *GetCronJobResponse) GetSuspend() (v bool) {
	return p.Suspend
}

func (p *GetCronJobResponse) GetActive() (v int32) {
	return p.Active
}

func (p *GetCronJobResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetCronJobResponse) GetLastScheduleTime() (v string) {
	return p.LastScheduleTime
}

func (p *GetCronJobResponse) GetImagePullSecrets() (v []string) {
	return p.ImagePullSecrets
}

func (p *GetCronJobResponse) GetUpdateTime() (v string) {
	return p.UpdateTime
}

var GetCronJobResponse_NodeAffinity_DEFAULT *NodeAffinity

func (p *GetCronJobResponse) GetNodeAffinity() (v *NodeAffinity) {
	if !p.IsSetNodeAffinity() {
		return GetCronJobResponse_NodeAffinity_DEFAULT
	}
	return p.NodeAffinity
}

var GetCronJobResponse_Annotations_DEFAULT []*KeyValuePair

func (p *GetCronJobResponse) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return GetCronJobResponse_Annotations_DEFAULT
	}
	return p.Annotations
}

var GetCronJobResponse_PodAnnotations_DEFAULT []*KeyValuePair

func (p *GetCronJobResponse) GetPodAnnotations() (v []*KeyValuePair) {
	if !p.IsSetPodAnnotations() {
		return GetCronJobResponse_PodAnnotations_DEFAULT
	}
	return p.PodAnnotations
}

func (p *GetCronJobResponse) GetIsVci() (v bool) {
	return p.IsVci
}
func (p *GetCronJobResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetCronJobResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetCronJobResponse) SetName(val string) {
	p.Name = val
}
func (p *GetCronJobResponse) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *GetCronJobResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetCronJobResponse) SetContainers(val []*ContainerConfiguration) {
	p.Containers = val
}
func (p *GetCronJobResponse) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *GetCronJobResponse) SetSchedule(val string) {
	p.Schedule = val
}
func (p *GetCronJobResponse) SetSuccessfulJobsHistoryLimit(val *int32) {
	p.SuccessfulJobsHistoryLimit = val
}
func (p *GetCronJobResponse) SetFailedJobsHistoryLimit(val *int32) {
	p.FailedJobsHistoryLimit = val
}
func (p *GetCronJobResponse) SetConcurrencyPolicy(val string) {
	p.ConcurrencyPolicy = val
}
func (p *GetCronJobResponse) SetActiveDeadlineSeconds(val *int64) {
	p.ActiveDeadlineSeconds = val
}
func (p *GetCronJobResponse) SetCompletions(val *int32) {
	p.Completions = val
}
func (p *GetCronJobResponse) SetParallelism(val *int32) {
	p.Parallelism = val
}
func (p *GetCronJobResponse) SetBackoffLimit(val *int32) {
	p.BackoffLimit = val
}
func (p *GetCronJobResponse) SetRestartPolicy(val string) {
	p.RestartPolicy = val
}
func (p *GetCronJobResponse) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}
func (p *GetCronJobResponse) SetDnsPolicy(val string) {
	p.DnsPolicy = val
}
func (p *GetCronJobResponse) SetRunAsNonRoot(val bool) {
	p.RunAsNonRoot = val
}
func (p *GetCronJobResponse) SetSuspend(val bool) {
	p.Suspend = val
}
func (p *GetCronJobResponse) SetActive(val int32) {
	p.Active = val
}
func (p *GetCronJobResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetCronJobResponse) SetLastScheduleTime(val string) {
	p.LastScheduleTime = val
}
func (p *GetCronJobResponse) SetImagePullSecrets(val []string) {
	p.ImagePullSecrets = val
}
func (p *GetCronJobResponse) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *GetCronJobResponse) SetNodeAffinity(val *NodeAffinity) {
	p.NodeAffinity = val
}
func (p *GetCronJobResponse) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *GetCronJobResponse) SetPodAnnotations(val []*KeyValuePair) {
	p.PodAnnotations = val
}
func (p *GetCronJobResponse) SetIsVci(val bool) {
	p.IsVci = val
}

var fieldIDToName_GetCronJobResponse = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Containers",
	7:   "Volumes",
	8:   "Schedule",
	9:   "SuccessfulJobsHistoryLimit",
	10:  "FailedJobsHistoryLimit",
	11:  "ConcurrencyPolicy",
	12:  "ActiveDeadlineSeconds",
	13:  "Completions",
	14:  "Parallelism",
	15:  "BackoffLimit",
	16:  "RestartPolicy",
	17:  "PodLabels",
	18:  "DnsPolicy",
	19:  "RunAsNonRoot",
	20:  "Suspend",
	21:  "Active",
	22:  "CreateTime",
	23:  "LastScheduleTime",
	24:  "ImagePullSecrets",
	25:  "UpdateTime",
	26:  "NodeAffinity",
	27:  "Annotations",
	28:  "PodAnnotations",
	100: "IsVci",
}

func (p *GetCronJobResponse) IsSetDescription() bool {
	return p.Description != GetCronJobResponse_Description_DEFAULT
}

func (p *GetCronJobResponse) IsSetSuccessfulJobsHistoryLimit() bool {
	return p.SuccessfulJobsHistoryLimit != nil
}

func (p *GetCronJobResponse) IsSetFailedJobsHistoryLimit() bool {
	return p.FailedJobsHistoryLimit != nil
}

func (p *GetCronJobResponse) IsSetActiveDeadlineSeconds() bool {
	return p.ActiveDeadlineSeconds != nil
}

func (p *GetCronJobResponse) IsSetCompletions() bool {
	return p.Completions != nil
}

func (p *GetCronJobResponse) IsSetParallelism() bool {
	return p.Parallelism != nil
}

func (p *GetCronJobResponse) IsSetBackoffLimit() bool {
	return p.BackoffLimit != nil
}

func (p *GetCronJobResponse) IsSetNodeAffinity() bool {
	return p.NodeAffinity != nil
}

func (p *GetCronJobResponse) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *GetCronJobResponse) IsSetPodAnnotations() bool {
	return p.PodAnnotations != nil
}

func (p *GetCronJobResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetContainers bool = false
	var issetVolumes bool = false
	var issetSchedule bool = false
	var issetConcurrencyPolicy bool = false
	var issetRestartPolicy bool = false
	var issetPodLabels bool = false
	var issetDnsPolicy bool = false
	var issetRunAsNonRoot bool = false
	var issetSuspend bool = false
	var issetActive bool = false
	var issetCreateTime bool = false
	var issetLastScheduleTime bool = false
	var issetImagePullSecrets bool = false
	var issetUpdateTime bool = false
	var issetIsVci bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchedule = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetConcurrencyPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestartPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetDnsPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunAsNonRoot = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetSuspend = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetActive = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastScheduleTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetImagePullSecrets = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 27:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 28:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsVci = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetVolumes {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSchedule {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetConcurrencyPolicy {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetRestartPolicy {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetDnsPolicy {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetRunAsNonRoot {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetSuspend {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetActive {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetLastScheduleTime {
		fieldId = 23
		goto RequiredFieldNotSetError
	}

	if !issetImagePullSecrets {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 25
		goto RequiredFieldNotSetError
	}

	if !issetIsVci {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCronJobResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetCronJobResponse[fieldId]))
}

func (p *GetCronJobResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerConfiguration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerConfiguration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Schedule = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SuccessfulJobsHistoryLimit = &v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FailedJobsHistoryLimit = &v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ConcurrencyPolicy = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ActiveDeadlineSeconds = &v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Completions = &v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Parallelism = &v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BackoffLimit = &v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RestartPolicy = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DnsPolicy = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RunAsNonRoot = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Suspend = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Active = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastScheduleTime = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImagePullSecrets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ImagePullSecrets = append(p.ImagePullSecrets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *GetCronJobResponse) ReadField26(iprot thrift.TProtocol) error {
	p.NodeAffinity = NewNodeAffinity()
	if err := p.NodeAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField27(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField28(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodAnnotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodAnnotations = append(p.PodAnnotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronJobResponse) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = v
	}
	return nil
}

func (p *GetCronJobResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCronJobResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCronJobResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
		return err
	}
	for _, v := range p.Volumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Schedule", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Schedule); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessfulJobsHistoryLimit() {
		if err = oprot.WriteFieldBegin("SuccessfulJobsHistoryLimit", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SuccessfulJobsHistoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedJobsHistoryLimit() {
		if err = oprot.WriteFieldBegin("FailedJobsHistoryLimit", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FailedJobsHistoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ConcurrencyPolicy", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConcurrencyPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveDeadlineSeconds() {
		if err = oprot.WriteFieldBegin("ActiveDeadlineSeconds", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ActiveDeadlineSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompletions() {
		if err = oprot.WriteFieldBegin("Completions", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Completions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelism() {
		if err = oprot.WriteFieldBegin("Parallelism", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Parallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackoffLimit() {
		if err = oprot.WriteFieldBegin("BackoffLimit", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackoffLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RestartPolicy", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RestartPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DnsPolicy", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DnsPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunAsNonRoot", thrift.BOOL, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.RunAsNonRoot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Suspend", thrift.BOOL, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Suspend); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Active", thrift.I32, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Active); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField23(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastScheduleTime", thrift.STRING, 23); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastScheduleTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImagePullSecrets", thrift.LIST, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ImagePullSecrets)); err != nil {
		return err
	}
	for _, v := range p.ImagePullSecrets {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField25(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 25); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAffinity() {
		if err = oprot.WriteFieldBegin("NodeAffinity", thrift.STRUCT, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAnnotations() {
		if err = oprot.WriteFieldBegin("PodAnnotations", thrift.LIST, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodAnnotations)); err != nil {
			return err
		}
		for _, v := range p.PodAnnotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}

func (p *GetCronJobResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsVci); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *GetCronJobResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCronJobResponse(%+v)", *p)
}

func (p *GetCronJobResponse) DeepEqual(ano *GetCronJobResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field7DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field8DeepEqual(ano.Schedule) {
		return false
	}
	if !p.Field9DeepEqual(ano.SuccessfulJobsHistoryLimit) {
		return false
	}
	if !p.Field10DeepEqual(ano.FailedJobsHistoryLimit) {
		return false
	}
	if !p.Field11DeepEqual(ano.ConcurrencyPolicy) {
		return false
	}
	if !p.Field12DeepEqual(ano.ActiveDeadlineSeconds) {
		return false
	}
	if !p.Field13DeepEqual(ano.Completions) {
		return false
	}
	if !p.Field14DeepEqual(ano.Parallelism) {
		return false
	}
	if !p.Field15DeepEqual(ano.BackoffLimit) {
		return false
	}
	if !p.Field16DeepEqual(ano.RestartPolicy) {
		return false
	}
	if !p.Field17DeepEqual(ano.PodLabels) {
		return false
	}
	if !p.Field18DeepEqual(ano.DnsPolicy) {
		return false
	}
	if !p.Field19DeepEqual(ano.RunAsNonRoot) {
		return false
	}
	if !p.Field20DeepEqual(ano.Suspend) {
		return false
	}
	if !p.Field21DeepEqual(ano.Active) {
		return false
	}
	if !p.Field22DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field23DeepEqual(ano.LastScheduleTime) {
		return false
	}
	if !p.Field24DeepEqual(ano.ImagePullSecrets) {
		return false
	}
	if !p.Field25DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field26DeepEqual(ano.NodeAffinity) {
		return false
	}
	if !p.Field27DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field28DeepEqual(ano.PodAnnotations) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	return true
}

func (p *GetCronJobResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field6DeepEqual(src []*ContainerConfiguration) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field7DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Schedule, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field9DeepEqual(src *int32) bool {

	if p.SuccessfulJobsHistoryLimit == src {
		return true
	} else if p.SuccessfulJobsHistoryLimit == nil || src == nil {
		return false
	}
	if *p.SuccessfulJobsHistoryLimit != *src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field10DeepEqual(src *int32) bool {

	if p.FailedJobsHistoryLimit == src {
		return true
	} else if p.FailedJobsHistoryLimit == nil || src == nil {
		return false
	}
	if *p.FailedJobsHistoryLimit != *src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field11DeepEqual(src string) bool {

	if strings.Compare(p.ConcurrencyPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field12DeepEqual(src *int64) bool {

	if p.ActiveDeadlineSeconds == src {
		return true
	} else if p.ActiveDeadlineSeconds == nil || src == nil {
		return false
	}
	if *p.ActiveDeadlineSeconds != *src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field13DeepEqual(src *int32) bool {

	if p.Completions == src {
		return true
	} else if p.Completions == nil || src == nil {
		return false
	}
	if *p.Completions != *src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field14DeepEqual(src *int32) bool {

	if p.Parallelism == src {
		return true
	} else if p.Parallelism == nil || src == nil {
		return false
	}
	if *p.Parallelism != *src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field15DeepEqual(src *int32) bool {

	if p.BackoffLimit == src {
		return true
	} else if p.BackoffLimit == nil || src == nil {
		return false
	}
	if *p.BackoffLimit != *src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field16DeepEqual(src string) bool {

	if strings.Compare(p.RestartPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field17DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field18DeepEqual(src string) bool {

	if strings.Compare(p.DnsPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field19DeepEqual(src bool) bool {

	if p.RunAsNonRoot != src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field20DeepEqual(src bool) bool {

	if p.Suspend != src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field21DeepEqual(src int32) bool {

	if p.Active != src {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field22DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field23DeepEqual(src string) bool {

	if strings.Compare(p.LastScheduleTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field24DeepEqual(src []string) bool {

	if len(p.ImagePullSecrets) != len(src) {
		return false
	}
	for i, v := range p.ImagePullSecrets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field25DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field26DeepEqual(src *NodeAffinity) bool {

	if !p.NodeAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetCronJobResponse) Field27DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field28DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodAnnotations) != len(src) {
		return false
	}
	for i, v := range p.PodAnnotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetCronJobResponse) Field100DeepEqual(src bool) bool {

	if p.IsVci != src {
		return false
	}
	return true
}

type JobItemFromCronJob struct {
	ClusterId    string `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace    string `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name         string `thrift:"Name,3,required" from:"metadata.name"`
	Active       int32  `thrift:"Active,4,required" from:"status.active"`
	Succeeded    int32  `thrift:"Succeeded,5,required" from:"status.succeeded"`
	Failed       int32  `thrift:"Failed,6,required" from:"status.failed"`
	CreateTime   string `thrift:"CreateTime,7,required" from:"metadata.creationTimestamp"`
	CompleteTime string `thrift:"CompleteTime,8,required" from:"status.completionTime"`
}

func NewJobItemFromCronJob() *JobItemFromCronJob {
	return &JobItemFromCronJob{

		Namespace:    "",
		CreateTime:   "",
		CompleteTime: "",
	}
}

func (p *JobItemFromCronJob) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *JobItemFromCronJob) GetNamespace() (v string) {
	return p.Namespace
}

func (p *JobItemFromCronJob) GetName() (v string) {
	return p.Name
}

func (p *JobItemFromCronJob) GetActive() (v int32) {
	return p.Active
}

func (p *JobItemFromCronJob) GetSucceeded() (v int32) {
	return p.Succeeded
}

func (p *JobItemFromCronJob) GetFailed() (v int32) {
	return p.Failed
}

func (p *JobItemFromCronJob) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *JobItemFromCronJob) GetCompleteTime() (v string) {
	return p.CompleteTime
}
func (p *JobItemFromCronJob) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *JobItemFromCronJob) SetNamespace(val string) {
	p.Namespace = val
}
func (p *JobItemFromCronJob) SetName(val string) {
	p.Name = val
}
func (p *JobItemFromCronJob) SetActive(val int32) {
	p.Active = val
}
func (p *JobItemFromCronJob) SetSucceeded(val int32) {
	p.Succeeded = val
}
func (p *JobItemFromCronJob) SetFailed(val int32) {
	p.Failed = val
}
func (p *JobItemFromCronJob) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *JobItemFromCronJob) SetCompleteTime(val string) {
	p.CompleteTime = val
}

var fieldIDToName_JobItemFromCronJob = map[int16]string{
	1: "ClusterId",
	2: "Namespace",
	3: "Name",
	4: "Active",
	5: "Succeeded",
	6: "Failed",
	7: "CreateTime",
	8: "CompleteTime",
}

func (p *JobItemFromCronJob) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetActive bool = false
	var issetSucceeded bool = false
	var issetFailed bool = false
	var issetCreateTime bool = false
	var issetCompleteTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetActive = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetSucceeded = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailed = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompleteTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetActive {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetSucceeded {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetFailed {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetCompleteTime {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JobItemFromCronJob[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_JobItemFromCronJob[fieldId]))
}

func (p *JobItemFromCronJob) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Active = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Succeeded = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Failed = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *JobItemFromCronJob) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CompleteTime = v
	}
	return nil
}

func (p *JobItemFromCronJob) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JobItemFromCronJob"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Active", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Active); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Succeeded", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Succeeded); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Failed", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Failed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *JobItemFromCronJob) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CompleteTime", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompleteTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *JobItemFromCronJob) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobItemFromCronJob(%+v)", *p)
}

func (p *JobItemFromCronJob) DeepEqual(ano *JobItemFromCronJob) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Active) {
		return false
	}
	if !p.Field5DeepEqual(ano.Succeeded) {
		return false
	}
	if !p.Field6DeepEqual(ano.Failed) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.CompleteTime) {
		return false
	}
	return true
}

func (p *JobItemFromCronJob) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field4DeepEqual(src int32) bool {

	if p.Active != src {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field5DeepEqual(src int32) bool {

	if p.Succeeded != src {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field6DeepEqual(src int32) bool {

	if p.Failed != src {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *JobItemFromCronJob) Field8DeepEqual(src string) bool {

	if strings.Compare(p.CompleteTime, src) != 0 {
		return false
	}
	return true
}

type ListJobsFromCronJobRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace string         `thrift:"Namespace,2" json:"Namespace,omitempty"`
	Name      string         `thrift:"Name,3" json:"Name,omitempty"`
	Start     int32          `thrift:"Start,4" json:"Start,omitempty"`
	Limit     int32          `thrift:"Limit,5" json:"Limit" default:"9999"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewListJobsFromCronJobRequest() *ListJobsFromCronJobRequest {
	return &ListJobsFromCronJobRequest{

		Namespace: "",
		Name:      "",
		Start:     0,
		Limit:     9999,
	}
}

func (p *ListJobsFromCronJobRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListJobsFromCronJobRequest_Namespace_DEFAULT string = ""

func (p *ListJobsFromCronJobRequest) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return ListJobsFromCronJobRequest_Namespace_DEFAULT
	}
	return p.Namespace
}

var ListJobsFromCronJobRequest_Name_DEFAULT string = ""

func (p *ListJobsFromCronJobRequest) GetName() (v string) {
	if !p.IsSetName() {
		return ListJobsFromCronJobRequest_Name_DEFAULT
	}
	return p.Name
}

var ListJobsFromCronJobRequest_Start_DEFAULT int32 = 0

func (p *ListJobsFromCronJobRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListJobsFromCronJobRequest_Start_DEFAULT
	}
	return p.Start
}

var ListJobsFromCronJobRequest_Limit_DEFAULT int32 = 9999

func (p *ListJobsFromCronJobRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListJobsFromCronJobRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListJobsFromCronJobRequest_Top_DEFAULT *base.TopParam

func (p *ListJobsFromCronJobRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListJobsFromCronJobRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListJobsFromCronJobRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListJobsFromCronJobRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ListJobsFromCronJobRequest) SetName(val string) {
	p.Name = val
}
func (p *ListJobsFromCronJobRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListJobsFromCronJobRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListJobsFromCronJobRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListJobsFromCronJobRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Start",
	5:   "Limit",
	255: "Top",
}

func (p *ListJobsFromCronJobRequest) IsSetNamespace() bool {
	return p.Namespace != ListJobsFromCronJobRequest_Namespace_DEFAULT
}

func (p *ListJobsFromCronJobRequest) IsSetName() bool {
	return p.Name != ListJobsFromCronJobRequest_Name_DEFAULT
}

func (p *ListJobsFromCronJobRequest) IsSetStart() bool {
	return p.Start != ListJobsFromCronJobRequest_Start_DEFAULT
}

func (p *ListJobsFromCronJobRequest) IsSetLimit() bool {
	return p.Limit != ListJobsFromCronJobRequest_Limit_DEFAULT
}

func (p *ListJobsFromCronJobRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListJobsFromCronJobRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListJobsFromCronJobRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListJobsFromCronJobRequest[fieldId]))
}

func (p *ListJobsFromCronJobRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListJobsFromCronJobRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ListJobsFromCronJobRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ListJobsFromCronJobRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListJobsFromCronJobRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListJobsFromCronJobRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListJobsFromCronJobRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobsFromCronJobRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListJobsFromCronJobRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListJobsFromCronJobRequest(%+v)", *p)
}

func (p *ListJobsFromCronJobRequest) DeepEqual(ano *ListJobsFromCronJobRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Start) {
		return false
	}
	if !p.Field5DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListJobsFromCronJobRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListJobsFromCronJobRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ListJobsFromCronJobRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ListJobsFromCronJobRequest) Field4DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListJobsFromCronJobRequest) Field5DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListJobsFromCronJobRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListJobsFromCronJobResponse struct {
	Total int64                 `thrift:"Total,1,required" json:"Total"`
	Items []*JobItemFromCronJob `thrift:"Items,2,required" json:"Items"`
}

func NewListJobsFromCronJobResponse() *ListJobsFromCronJobResponse {
	return &ListJobsFromCronJobResponse{}
}

func (p *ListJobsFromCronJobResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListJobsFromCronJobResponse) GetItems() (v []*JobItemFromCronJob) {
	return p.Items
}
func (p *ListJobsFromCronJobResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListJobsFromCronJobResponse) SetItems(val []*JobItemFromCronJob) {
	p.Items = val
}

var fieldIDToName_ListJobsFromCronJobResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListJobsFromCronJobResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListJobsFromCronJobResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListJobsFromCronJobResponse[fieldId]))
}

func (p *ListJobsFromCronJobResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListJobsFromCronJobResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*JobItemFromCronJob, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewJobItemFromCronJob()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListJobsFromCronJobResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobsFromCronJobResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListJobsFromCronJobResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListJobsFromCronJobResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListJobsFromCronJobResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListJobsFromCronJobResponse(%+v)", *p)
}

func (p *ListJobsFromCronJobResponse) DeepEqual(ano *ListJobsFromCronJobResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListJobsFromCronJobResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListJobsFromCronJobResponse) Field2DeepEqual(src []*JobItemFromCronJob) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ListCronJobsResponse struct {
	Total int64          `thrift:"Total,1,required" json:"Total"`
	Items []*CronJobItem `thrift:"Items,2,required" json:"Items"`
}

func NewListCronJobsResponse() *ListCronJobsResponse {
	return &ListCronJobsResponse{}
}

func (p *ListCronJobsResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListCronJobsResponse) GetItems() (v []*CronJobItem) {
	return p.Items
}
func (p *ListCronJobsResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListCronJobsResponse) SetItems(val []*CronJobItem) {
	p.Items = val
}

var fieldIDToName_ListCronJobsResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListCronJobsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListCronJobsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListCronJobsResponse[fieldId]))
}

func (p *ListCronJobsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListCronJobsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*CronJobItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCronJobItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListCronJobsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCronJobsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListCronJobsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListCronJobsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListCronJobsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListCronJobsResponse(%+v)", *p)
}

func (p *ListCronJobsResponse) DeepEqual(ano *ListCronJobsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListCronJobsResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListCronJobsResponse) Field2DeepEqual(src []*CronJobItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CronJobItem struct {
	ClusterId        string               `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace        string               `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name             string               `thrift:"Name,3,required" from:"metadata.name"`
	Labels           []*KeyValuePair      `thrift:"Labels,4,required" from:"metadata.labels"`
	Description      string               `thrift:"Description,5" from:"metadata.annotations.<description>"`
	Active           int32                `thrift:"Active,6,required" json:"Active"`
	LastScheduleTime string               `thrift:"LastScheduleTime,7,required" from:"status.lastScheduleTime"`
	Suspend          bool                 `thrift:"Suspend,8,required" from:"spec.suspend"`
	Parallelism      *int32               `thrift:"Parallelism,9" from:"spec.jobTemplate.spec.parallelism"`
	Containers       []*LiteContainerItem `thrift:"Containers,10,required" json:"Containers"`
	CreateTime       string               `thrift:"CreateTime,11,required" from:"metadata.creationTimestamp"`
	PodLabels        []*KeyValuePair      `thrift:"PodLabels,12,required" from:"spec.jobTemplate.spec.template.metadata.labels"`
}

func NewCronJobItem() *CronJobItem {
	return &CronJobItem{

		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
	}
}

func (p *CronJobItem) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CronJobItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CronJobItem) GetName() (v string) {
	return p.Name
}

func (p *CronJobItem) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var CronJobItem_Description_DEFAULT string = ""

func (p *CronJobItem) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CronJobItem_Description_DEFAULT
	}
	return p.Description
}

func (p *CronJobItem) GetActive() (v int32) {
	return p.Active
}

func (p *CronJobItem) GetLastScheduleTime() (v string) {
	return p.LastScheduleTime
}

func (p *CronJobItem) GetSuspend() (v bool) {
	return p.Suspend
}

var CronJobItem_Parallelism_DEFAULT int32

func (p *CronJobItem) GetParallelism() (v int32) {
	if !p.IsSetParallelism() {
		return CronJobItem_Parallelism_DEFAULT
	}
	return *p.Parallelism
}

func (p *CronJobItem) GetContainers() (v []*LiteContainerItem) {
	return p.Containers
}

func (p *CronJobItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *CronJobItem) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}
func (p *CronJobItem) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CronJobItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CronJobItem) SetName(val string) {
	p.Name = val
}
func (p *CronJobItem) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *CronJobItem) SetDescription(val string) {
	p.Description = val
}
func (p *CronJobItem) SetActive(val int32) {
	p.Active = val
}
func (p *CronJobItem) SetLastScheduleTime(val string) {
	p.LastScheduleTime = val
}
func (p *CronJobItem) SetSuspend(val bool) {
	p.Suspend = val
}
func (p *CronJobItem) SetParallelism(val *int32) {
	p.Parallelism = val
}
func (p *CronJobItem) SetContainers(val []*LiteContainerItem) {
	p.Containers = val
}
func (p *CronJobItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *CronJobItem) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}

var fieldIDToName_CronJobItem = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "Labels",
	5:  "Description",
	6:  "Active",
	7:  "LastScheduleTime",
	8:  "Suspend",
	9:  "Parallelism",
	10: "Containers",
	11: "CreateTime",
	12: "PodLabels",
}

func (p *CronJobItem) IsSetDescription() bool {
	return p.Description != CronJobItem_Description_DEFAULT
}

func (p *CronJobItem) IsSetParallelism() bool {
	return p.Parallelism != nil
}

func (p *CronJobItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetActive bool = false
	var issetLastScheduleTime bool = false
	var issetSuspend bool = false
	var issetContainers bool = false
	var issetCreateTime bool = false
	var issetPodLabels bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetActive = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastScheduleTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSuspend = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetActive {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetLastScheduleTime {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSuspend {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CronJobItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CronJobItem[fieldId]))
}

func (p *CronJobItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CronJobItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CronJobItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CronJobItem) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CronJobItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CronJobItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Active = v
	}
	return nil
}

func (p *CronJobItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastScheduleTime = v
	}
	return nil
}

func (p *CronJobItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Suspend = v
	}
	return nil
}

func (p *CronJobItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Parallelism = &v
	}
	return nil
}

func (p *CronJobItem) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*LiteContainerItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLiteContainerItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CronJobItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CronJobItem) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CronJobItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CronJobItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CronJobItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CronJobItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CronJobItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CronJobItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CronJobItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CronJobItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Active", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Active); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CronJobItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastScheduleTime", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastScheduleTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CronJobItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Suspend", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Suspend); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CronJobItem) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelism() {
		if err = oprot.WriteFieldBegin("Parallelism", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Parallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CronJobItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CronJobItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CronJobItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CronJobItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CronJobItem(%+v)", *p)
}

func (p *CronJobItem) DeepEqual(ano *CronJobItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Active) {
		return false
	}
	if !p.Field7DeepEqual(ano.LastScheduleTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.Suspend) {
		return false
	}
	if !p.Field9DeepEqual(ano.Parallelism) {
		return false
	}
	if !p.Field10DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field11DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.PodLabels) {
		return false
	}
	return true
}

func (p *CronJobItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CronJobItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CronJobItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CronJobItem) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CronJobItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CronJobItem) Field6DeepEqual(src int32) bool {

	if p.Active != src {
		return false
	}
	return true
}
func (p *CronJobItem) Field7DeepEqual(src string) bool {

	if strings.Compare(p.LastScheduleTime, src) != 0 {
		return false
	}
	return true
}
func (p *CronJobItem) Field8DeepEqual(src bool) bool {

	if p.Suspend != src {
		return false
	}
	return true
}
func (p *CronJobItem) Field9DeepEqual(src *int32) bool {

	if p.Parallelism == src {
		return true
	} else if p.Parallelism == nil || src == nil {
		return false
	}
	if *p.Parallelism != *src {
		return false
	}
	return true
}
func (p *CronJobItem) Field10DeepEqual(src []*LiteContainerItem) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CronJobItem) Field11DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *CronJobItem) Field12DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateCronJobRequest struct {
	ClusterId                  string                    `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace                  string                    `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                       string                    `thrift:"Name,3,required" from:"metadata.name"`
	Labels                     []*KeyValuePair           `thrift:"Labels,4,required" from:"metadata.labels"`
	Description                string                    `thrift:"Description,5" from:"metadata.annotations.<description>,important"`
	Containers                 []*ContainerConfiguration `thrift:"Containers,6,required" json:"Containers"`
	Volumes                    []*Volume                 `thrift:"Volumes,7,required" json:"Volumes"`
	Schedule                   string                    `thrift:"Schedule,8,required" from:"spec.schedule"`
	SuccessfulJobsHistoryLimit *int32                    `thrift:"SuccessfulJobsHistoryLimit,9" from:"spec.successfulJobsHistoryLimit"`
	FailedJobsHistoryLimit     *int32                    `thrift:"FailedJobsHistoryLimit,10" from:"spec.failedJobsHistoryLimit"`
	ConcurrencyPolicy          string                    `thrift:"ConcurrencyPolicy,11,required" json:"ConcurrencyPolicy" default:"Allow" from:"spec.concurrencyPolicy"`
	ActiveDeadlineSeconds      *int64                    `thrift:"ActiveDeadlineSeconds,12" from:"spec.jobTemplate.spec.activeDeadlineSeconds"`
	Completions                *int32                    `thrift:"Completions,13" from:"spec.jobTemplate.spec.completions"`
	Parallelism                *int32                    `thrift:"Parallelism,14" from:"spec.jobTemplate.spec.parallelism"`
	BackoffLimit               *int32                    `thrift:"BackoffLimit,15" from:"spec.jobTemplate.spec.backoffLimit"`
	RestartPolicy              string                    `thrift:"RestartPolicy,16,required" json:"RestartPolicy" default:"Never" from:"spec.jobTemplate.spec.template.spec.restartPolicy"`
	PodLabels                  []*KeyValuePair           `thrift:"PodLabels,17,required" from:"spec.jobTemplate.spec.template.metadata.labels"`
	DnsPolicy                  string                    `thrift:"DnsPolicy,18,required" json:"DnsPolicy" default:"ClusterFirst" from:"spec.jobTemplate.spec.template.spec.dnsPolicy"`
	RunAsNonRoot               bool                      `thrift:"RunAsNonRoot,19,required" from:"spec.jobTemplate.spec.template.spec.securityContext.runAsNonRoot"`
	ImagePullSecrets           []string                  `thrift:"ImagePullSecrets,20,required" json:"ImagePullSecrets"`
	NodeAffinity               *NodeAffinity             `thrift:"NodeAffinity,21" json:"NodeAffinity,omitempty"`
	Annotations                []*KeyValuePair           `thrift:"Annotations,22" from:"metadata.annotations"`
	PodAnnotations             []*KeyValuePair           `thrift:"PodAnnotations,23" from:"spec.jobTemplate.spec.template.metadata.annotations"`
	IsVci                      *bool                     `thrift:"IsVci,100" json:"IsVci,omitempty"`
	Top                        *base.TopParam            `thrift:"Top,255,required" json:"Top"`
}

func NewCreateCronJobRequest() *CreateCronJobRequest {
	return &CreateCronJobRequest{

		ClusterId:         "",
		Namespace:         "",
		Name:              "",
		Description:       "",
		ConcurrencyPolicy: "Allow",
		RestartPolicy:     "Never",
		DnsPolicy:         "ClusterFirst",
	}
}

func (p *CreateCronJobRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateCronJobRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateCronJobRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateCronJobRequest) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var CreateCronJobRequest_Description_DEFAULT string = ""

func (p *CreateCronJobRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateCronJobRequest_Description_DEFAULT
	}
	return p.Description
}

func (p *CreateCronJobRequest) GetContainers() (v []*ContainerConfiguration) {
	return p.Containers
}

func (p *CreateCronJobRequest) GetVolumes() (v []*Volume) {
	return p.Volumes
}

func (p *CreateCronJobRequest) GetSchedule() (v string) {
	return p.Schedule
}

var CreateCronJobRequest_SuccessfulJobsHistoryLimit_DEFAULT int32

func (p *CreateCronJobRequest) GetSuccessfulJobsHistoryLimit() (v int32) {
	if !p.IsSetSuccessfulJobsHistoryLimit() {
		return CreateCronJobRequest_SuccessfulJobsHistoryLimit_DEFAULT
	}
	return *p.SuccessfulJobsHistoryLimit
}

var CreateCronJobRequest_FailedJobsHistoryLimit_DEFAULT int32

func (p *CreateCronJobRequest) GetFailedJobsHistoryLimit() (v int32) {
	if !p.IsSetFailedJobsHistoryLimit() {
		return CreateCronJobRequest_FailedJobsHistoryLimit_DEFAULT
	}
	return *p.FailedJobsHistoryLimit
}

func (p *CreateCronJobRequest) GetConcurrencyPolicy() (v string) {
	return p.ConcurrencyPolicy
}

var CreateCronJobRequest_ActiveDeadlineSeconds_DEFAULT int64

func (p *CreateCronJobRequest) GetActiveDeadlineSeconds() (v int64) {
	if !p.IsSetActiveDeadlineSeconds() {
		return CreateCronJobRequest_ActiveDeadlineSeconds_DEFAULT
	}
	return *p.ActiveDeadlineSeconds
}

var CreateCronJobRequest_Completions_DEFAULT int32

func (p *CreateCronJobRequest) GetCompletions() (v int32) {
	if !p.IsSetCompletions() {
		return CreateCronJobRequest_Completions_DEFAULT
	}
	return *p.Completions
}

var CreateCronJobRequest_Parallelism_DEFAULT int32

func (p *CreateCronJobRequest) GetParallelism() (v int32) {
	if !p.IsSetParallelism() {
		return CreateCronJobRequest_Parallelism_DEFAULT
	}
	return *p.Parallelism
}

var CreateCronJobRequest_BackoffLimit_DEFAULT int32

func (p *CreateCronJobRequest) GetBackoffLimit() (v int32) {
	if !p.IsSetBackoffLimit() {
		return CreateCronJobRequest_BackoffLimit_DEFAULT
	}
	return *p.BackoffLimit
}

func (p *CreateCronJobRequest) GetRestartPolicy() (v string) {
	return p.RestartPolicy
}

func (p *CreateCronJobRequest) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}

func (p *CreateCronJobRequest) GetDnsPolicy() (v string) {
	return p.DnsPolicy
}

func (p *CreateCronJobRequest) GetRunAsNonRoot() (v bool) {
	return p.RunAsNonRoot
}

func (p *CreateCronJobRequest) GetImagePullSecrets() (v []string) {
	return p.ImagePullSecrets
}

var CreateCronJobRequest_NodeAffinity_DEFAULT *NodeAffinity

func (p *CreateCronJobRequest) GetNodeAffinity() (v *NodeAffinity) {
	if !p.IsSetNodeAffinity() {
		return CreateCronJobRequest_NodeAffinity_DEFAULT
	}
	return p.NodeAffinity
}

var CreateCronJobRequest_Annotations_DEFAULT []*KeyValuePair

func (p *CreateCronJobRequest) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return CreateCronJobRequest_Annotations_DEFAULT
	}
	return p.Annotations
}

var CreateCronJobRequest_PodAnnotations_DEFAULT []*KeyValuePair

func (p *CreateCronJobRequest) GetPodAnnotations() (v []*KeyValuePair) {
	if !p.IsSetPodAnnotations() {
		return CreateCronJobRequest_PodAnnotations_DEFAULT
	}
	return p.PodAnnotations
}

var CreateCronJobRequest_IsVci_DEFAULT bool

func (p *CreateCronJobRequest) GetIsVci() (v bool) {
	if !p.IsSetIsVci() {
		return CreateCronJobRequest_IsVci_DEFAULT
	}
	return *p.IsVci
}

var CreateCronJobRequest_Top_DEFAULT *base.TopParam

func (p *CreateCronJobRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateCronJobRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateCronJobRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateCronJobRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateCronJobRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateCronJobRequest) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *CreateCronJobRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateCronJobRequest) SetContainers(val []*ContainerConfiguration) {
	p.Containers = val
}
func (p *CreateCronJobRequest) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *CreateCronJobRequest) SetSchedule(val string) {
	p.Schedule = val
}
func (p *CreateCronJobRequest) SetSuccessfulJobsHistoryLimit(val *int32) {
	p.SuccessfulJobsHistoryLimit = val
}
func (p *CreateCronJobRequest) SetFailedJobsHistoryLimit(val *int32) {
	p.FailedJobsHistoryLimit = val
}
func (p *CreateCronJobRequest) SetConcurrencyPolicy(val string) {
	p.ConcurrencyPolicy = val
}
func (p *CreateCronJobRequest) SetActiveDeadlineSeconds(val *int64) {
	p.ActiveDeadlineSeconds = val
}
func (p *CreateCronJobRequest) SetCompletions(val *int32) {
	p.Completions = val
}
func (p *CreateCronJobRequest) SetParallelism(val *int32) {
	p.Parallelism = val
}
func (p *CreateCronJobRequest) SetBackoffLimit(val *int32) {
	p.BackoffLimit = val
}
func (p *CreateCronJobRequest) SetRestartPolicy(val string) {
	p.RestartPolicy = val
}
func (p *CreateCronJobRequest) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}
func (p *CreateCronJobRequest) SetDnsPolicy(val string) {
	p.DnsPolicy = val
}
func (p *CreateCronJobRequest) SetRunAsNonRoot(val bool) {
	p.RunAsNonRoot = val
}
func (p *CreateCronJobRequest) SetImagePullSecrets(val []string) {
	p.ImagePullSecrets = val
}
func (p *CreateCronJobRequest) SetNodeAffinity(val *NodeAffinity) {
	p.NodeAffinity = val
}
func (p *CreateCronJobRequest) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *CreateCronJobRequest) SetPodAnnotations(val []*KeyValuePair) {
	p.PodAnnotations = val
}
func (p *CreateCronJobRequest) SetIsVci(val *bool) {
	p.IsVci = val
}
func (p *CreateCronJobRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateCronJobRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Containers",
	7:   "Volumes",
	8:   "Schedule",
	9:   "SuccessfulJobsHistoryLimit",
	10:  "FailedJobsHistoryLimit",
	11:  "ConcurrencyPolicy",
	12:  "ActiveDeadlineSeconds",
	13:  "Completions",
	14:  "Parallelism",
	15:  "BackoffLimit",
	16:  "RestartPolicy",
	17:  "PodLabels",
	18:  "DnsPolicy",
	19:  "RunAsNonRoot",
	20:  "ImagePullSecrets",
	21:  "NodeAffinity",
	22:  "Annotations",
	23:  "PodAnnotations",
	100: "IsVci",
	255: "Top",
}

func (p *CreateCronJobRequest) IsSetDescription() bool {
	return p.Description != CreateCronJobRequest_Description_DEFAULT
}

func (p *CreateCronJobRequest) IsSetSuccessfulJobsHistoryLimit() bool {
	return p.SuccessfulJobsHistoryLimit != nil
}

func (p *CreateCronJobRequest) IsSetFailedJobsHistoryLimit() bool {
	return p.FailedJobsHistoryLimit != nil
}

func (p *CreateCronJobRequest) IsSetActiveDeadlineSeconds() bool {
	return p.ActiveDeadlineSeconds != nil
}

func (p *CreateCronJobRequest) IsSetCompletions() bool {
	return p.Completions != nil
}

func (p *CreateCronJobRequest) IsSetParallelism() bool {
	return p.Parallelism != nil
}

func (p *CreateCronJobRequest) IsSetBackoffLimit() bool {
	return p.BackoffLimit != nil
}

func (p *CreateCronJobRequest) IsSetNodeAffinity() bool {
	return p.NodeAffinity != nil
}

func (p *CreateCronJobRequest) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *CreateCronJobRequest) IsSetPodAnnotations() bool {
	return p.PodAnnotations != nil
}

func (p *CreateCronJobRequest) IsSetIsVci() bool {
	return p.IsVci != nil
}

func (p *CreateCronJobRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateCronJobRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetContainers bool = false
	var issetVolumes bool = false
	var issetSchedule bool = false
	var issetConcurrencyPolicy bool = false
	var issetRestartPolicy bool = false
	var issetPodLabels bool = false
	var issetDnsPolicy bool = false
	var issetRunAsNonRoot bool = false
	var issetImagePullSecrets bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchedule = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetConcurrencyPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestartPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetDnsPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunAsNonRoot = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetImagePullSecrets = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetVolumes {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSchedule {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetConcurrencyPolicy {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetRestartPolicy {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetDnsPolicy {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetRunAsNonRoot {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetImagePullSecrets {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCronJobRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateCronJobRequest[fieldId]))
}

func (p *CreateCronJobRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerConfiguration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerConfiguration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Schedule = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SuccessfulJobsHistoryLimit = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FailedJobsHistoryLimit = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ConcurrencyPolicy = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ActiveDeadlineSeconds = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Completions = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Parallelism = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BackoffLimit = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RestartPolicy = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DnsPolicy = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RunAsNonRoot = v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImagePullSecrets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ImagePullSecrets = append(p.ImagePullSecrets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField21(iprot thrift.TProtocol) error {
	p.NodeAffinity = NewNodeAffinity()
	if err := p.NodeAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodAnnotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodAnnotations = append(p.PodAnnotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = &v
	}
	return nil
}

func (p *CreateCronJobRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronJobRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCronJobRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
		return err
	}
	for _, v := range p.Volumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Schedule", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Schedule); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessfulJobsHistoryLimit() {
		if err = oprot.WriteFieldBegin("SuccessfulJobsHistoryLimit", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SuccessfulJobsHistoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedJobsHistoryLimit() {
		if err = oprot.WriteFieldBegin("FailedJobsHistoryLimit", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FailedJobsHistoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ConcurrencyPolicy", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ConcurrencyPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveDeadlineSeconds() {
		if err = oprot.WriteFieldBegin("ActiveDeadlineSeconds", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ActiveDeadlineSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompletions() {
		if err = oprot.WriteFieldBegin("Completions", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Completions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelism() {
		if err = oprot.WriteFieldBegin("Parallelism", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Parallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackoffLimit() {
		if err = oprot.WriteFieldBegin("BackoffLimit", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackoffLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RestartPolicy", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RestartPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DnsPolicy", thrift.STRING, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DnsPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunAsNonRoot", thrift.BOOL, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.RunAsNonRoot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImagePullSecrets", thrift.LIST, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ImagePullSecrets)); err != nil {
		return err
	}
	for _, v := range p.ImagePullSecrets {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAffinity() {
		if err = oprot.WriteFieldBegin("NodeAffinity", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAnnotations() {
		if err = oprot.WriteFieldBegin("PodAnnotations", thrift.LIST, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodAnnotations)); err != nil {
			return err
		}
		for _, v := range p.PodAnnotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsVci() {
		if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsVci); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *CreateCronJobRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateCronJobRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCronJobRequest(%+v)", *p)
}

func (p *CreateCronJobRequest) DeepEqual(ano *CreateCronJobRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field7DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field8DeepEqual(ano.Schedule) {
		return false
	}
	if !p.Field9DeepEqual(ano.SuccessfulJobsHistoryLimit) {
		return false
	}
	if !p.Field10DeepEqual(ano.FailedJobsHistoryLimit) {
		return false
	}
	if !p.Field11DeepEqual(ano.ConcurrencyPolicy) {
		return false
	}
	if !p.Field12DeepEqual(ano.ActiveDeadlineSeconds) {
		return false
	}
	if !p.Field13DeepEqual(ano.Completions) {
		return false
	}
	if !p.Field14DeepEqual(ano.Parallelism) {
		return false
	}
	if !p.Field15DeepEqual(ano.BackoffLimit) {
		return false
	}
	if !p.Field16DeepEqual(ano.RestartPolicy) {
		return false
	}
	if !p.Field17DeepEqual(ano.PodLabels) {
		return false
	}
	if !p.Field18DeepEqual(ano.DnsPolicy) {
		return false
	}
	if !p.Field19DeepEqual(ano.RunAsNonRoot) {
		return false
	}
	if !p.Field20DeepEqual(ano.ImagePullSecrets) {
		return false
	}
	if !p.Field21DeepEqual(ano.NodeAffinity) {
		return false
	}
	if !p.Field22DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field23DeepEqual(ano.PodAnnotations) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateCronJobRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field6DeepEqual(src []*ContainerConfiguration) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field7DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Schedule, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field9DeepEqual(src *int32) bool {

	if p.SuccessfulJobsHistoryLimit == src {
		return true
	} else if p.SuccessfulJobsHistoryLimit == nil || src == nil {
		return false
	}
	if *p.SuccessfulJobsHistoryLimit != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field10DeepEqual(src *int32) bool {

	if p.FailedJobsHistoryLimit == src {
		return true
	} else if p.FailedJobsHistoryLimit == nil || src == nil {
		return false
	}
	if *p.FailedJobsHistoryLimit != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field11DeepEqual(src string) bool {

	if strings.Compare(p.ConcurrencyPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field12DeepEqual(src *int64) bool {

	if p.ActiveDeadlineSeconds == src {
		return true
	} else if p.ActiveDeadlineSeconds == nil || src == nil {
		return false
	}
	if *p.ActiveDeadlineSeconds != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field13DeepEqual(src *int32) bool {

	if p.Completions == src {
		return true
	} else if p.Completions == nil || src == nil {
		return false
	}
	if *p.Completions != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field14DeepEqual(src *int32) bool {

	if p.Parallelism == src {
		return true
	} else if p.Parallelism == nil || src == nil {
		return false
	}
	if *p.Parallelism != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field15DeepEqual(src *int32) bool {

	if p.BackoffLimit == src {
		return true
	} else if p.BackoffLimit == nil || src == nil {
		return false
	}
	if *p.BackoffLimit != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field16DeepEqual(src string) bool {

	if strings.Compare(p.RestartPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field17DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field18DeepEqual(src string) bool {

	if strings.Compare(p.DnsPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field19DeepEqual(src bool) bool {

	if p.RunAsNonRoot != src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field20DeepEqual(src []string) bool {

	if len(p.ImagePullSecrets) != len(src) {
		return false
	}
	for i, v := range p.ImagePullSecrets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field21DeepEqual(src *NodeAffinity) bool {

	if !p.NodeAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field22DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field23DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodAnnotations) != len(src) {
		return false
	}
	for i, v := range p.PodAnnotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronJobRequest) Field100DeepEqual(src *bool) bool {

	if p.IsVci == src {
		return true
	} else if p.IsVci == nil || src == nil {
		return false
	}
	if *p.IsVci != *src {
		return false
	}
	return true
}
func (p *CreateCronJobRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type PatchCronJobSuspendRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace string         `thrift:"Namespace,2,required" json:"Namespace"`
	Name      string         `thrift:"Name,3,required" json:"Name"`
	Suspend   bool           `thrift:"Suspend,4,required" json:"Suspend"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewPatchCronJobSuspendRequest() *PatchCronJobSuspendRequest {
	return &PatchCronJobSuspendRequest{}
}

func (p *PatchCronJobSuspendRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *PatchCronJobSuspendRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *PatchCronJobSuspendRequest) GetName() (v string) {
	return p.Name
}

func (p *PatchCronJobSuspendRequest) GetSuspend() (v bool) {
	return p.Suspend
}

var PatchCronJobSuspendRequest_Top_DEFAULT *base.TopParam

func (p *PatchCronJobSuspendRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return PatchCronJobSuspendRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *PatchCronJobSuspendRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *PatchCronJobSuspendRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *PatchCronJobSuspendRequest) SetName(val string) {
	p.Name = val
}
func (p *PatchCronJobSuspendRequest) SetSuspend(val bool) {
	p.Suspend = val
}
func (p *PatchCronJobSuspendRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_PatchCronJobSuspendRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Suspend",
	255: "Top",
}

func (p *PatchCronJobSuspendRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *PatchCronJobSuspendRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetSuspend bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSuspend = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSuspend {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PatchCronJobSuspendRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_PatchCronJobSuspendRequest[fieldId]))
}

func (p *PatchCronJobSuspendRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *PatchCronJobSuspendRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *PatchCronJobSuspendRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PatchCronJobSuspendRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Suspend = v
	}
	return nil
}

func (p *PatchCronJobSuspendRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PatchCronJobSuspendRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchCronJobSuspendRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PatchCronJobSuspendRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PatchCronJobSuspendRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PatchCronJobSuspendRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PatchCronJobSuspendRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Suspend", thrift.BOOL, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Suspend); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PatchCronJobSuspendRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *PatchCronJobSuspendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PatchCronJobSuspendRequest(%+v)", *p)
}

func (p *PatchCronJobSuspendRequest) DeepEqual(ano *PatchCronJobSuspendRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Suspend) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *PatchCronJobSuspendRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *PatchCronJobSuspendRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *PatchCronJobSuspendRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PatchCronJobSuspendRequest) Field4DeepEqual(src bool) bool {

	if p.Suspend != src {
		return false
	}
	return true
}
func (p *PatchCronJobSuspendRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
