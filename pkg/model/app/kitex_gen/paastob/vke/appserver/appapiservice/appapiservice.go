// Code generated by Kitex v0.1.0. DO NOT EDIT.

package appapiservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/paastob/productivity/common"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/paastob/vke/appserver"
)

func serviceInfo() *kitex.ServiceInfo {
	return appAPIServiceServiceInfo
}

var appAPIServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AppAPIService"
	handlerType := (*appserver.AppAPIService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetConfigMap":                         kitex.NewMethodInfo(getConfigMapHandler, newAppAPIServiceGetConfigMapArgs, newAppAPIServiceGetConfigMapResult, false),
		"ListConfigMaps":                       kitex.NewMethodInfo(listConfigMapsHandler, newAppAPIServiceListConfigMapsArgs, newAppAPIServiceListConfigMapsResult, false),
		"CreateConfigMap":                      kitex.NewMethodInfo(createConfigMapHandler, newAppAPIServiceCreateConfigMapArgs, newAppAPIServiceCreateConfigMapResult, false),
		"UpdateConfigMap":                      kitex.NewMethodInfo(updateConfigMapHandler, newAppAPIServiceUpdateConfigMapArgs, newAppAPIServiceUpdateConfigMapResult, false),
		"DeleteConfigMap":                      kitex.NewMethodInfo(deleteConfigMapHandler, newAppAPIServiceDeleteConfigMapArgs, newAppAPIServiceDeleteConfigMapResult, false),
		"GetService":                           kitex.NewMethodInfo(getServiceHandler, newAppAPIServiceGetServiceArgs, newAppAPIServiceGetServiceResult, false),
		"ListServices":                         kitex.NewMethodInfo(listServicesHandler, newAppAPIServiceListServicesArgs, newAppAPIServiceListServicesResult, false),
		"CreateService":                        kitex.NewMethodInfo(createServiceHandler, newAppAPIServiceCreateServiceArgs, newAppAPIServiceCreateServiceResult, false),
		"UpdateService":                        kitex.NewMethodInfo(updateServiceHandler, newAppAPIServiceUpdateServiceArgs, newAppAPIServiceUpdateServiceResult, false),
		"DeleteService":                        kitex.NewMethodInfo(deleteServiceHandler, newAppAPIServiceDeleteServiceArgs, newAppAPIServiceDeleteServiceResult, false),
		"PatchWorkloadImage":                   kitex.NewMethodInfo(patchWorkloadImageHandler, newAppAPIServicePatchWorkloadImageArgs, newAppAPIServicePatchWorkloadImageResult, false),
		"PatchWorkloadReplicas":                kitex.NewMethodInfo(patchWorkloadReplicasHandler, newAppAPIServicePatchWorkloadReplicasArgs, newAppAPIServicePatchWorkloadReplicasResult, false),
		"RestartWorkload":                      kitex.NewMethodInfo(restartWorkloadHandler, newAppAPIServiceRestartWorkloadArgs, newAppAPIServiceRestartWorkloadResult, false),
		"RollbackWorkload":                     kitex.NewMethodInfo(rollbackWorkloadHandler, newAppAPIServiceRollbackWorkloadArgs, newAppAPIServiceRollbackWorkloadResult, false),
		"ListWorkloadPods":                     kitex.NewMethodInfo(listWorkloadPodsHandler, newAppAPIServiceListWorkloadPodsArgs, newAppAPIServiceListWorkloadPodsResult, false),
		"ListWorkloadServices":                 kitex.NewMethodInfo(listWorkloadServicesHandler, newAppAPIServiceListWorkloadServicesArgs, newAppAPIServiceListWorkloadServicesResult, false),
		"ListWorkloadHistories":                kitex.NewMethodInfo(listWorkloadHistoriesHandler, newAppAPIServiceListWorkloadHistoriesArgs, newAppAPIServiceListWorkloadHistoriesResult, false),
		"ListObjectEvents":                     kitex.NewMethodInfo(listObjectEventsHandler, newAppAPIServiceListObjectEventsArgs, newAppAPIServiceListObjectEventsResult, false),
		"PatchWorkloadParallelism":             kitex.NewMethodInfo(patchWorkloadParallelismHandler, newAppAPIServicePatchWorkloadParallelismArgs, newAppAPIServicePatchWorkloadParallelismResult, false),
		"GetContainerLogs":                     kitex.NewMethodInfo(getContainerLogsHandler, newAppAPIServiceGetContainerLogsArgs, newAppAPIServiceGetContainerLogsResult, false),
		"ListWorkloadHorizontalPodAutoscalers": kitex.NewMethodInfo(listWorkloadHorizontalPodAutoscalersHandler, newAppAPIServiceListWorkloadHorizontalPodAutoscalersArgs, newAppAPIServiceListWorkloadHorizontalPodAutoscalersResult, false),
		"GetDeployment":                        kitex.NewMethodInfo(getDeploymentHandler, newAppAPIServiceGetDeploymentArgs, newAppAPIServiceGetDeploymentResult, false),
		"ListDeployments":                      kitex.NewMethodInfo(listDeploymentsHandler, newAppAPIServiceListDeploymentsArgs, newAppAPIServiceListDeploymentsResult, false),
		"CreateDeployment":                     kitex.NewMethodInfo(createDeploymentHandler, newAppAPIServiceCreateDeploymentArgs, newAppAPIServiceCreateDeploymentResult, false),
		"UpdateDeployment":                     kitex.NewMethodInfo(updateDeploymentHandler, newAppAPIServiceUpdateDeploymentArgs, newAppAPIServiceUpdateDeploymentResult, false),
		"DeleteDeployment":                     kitex.NewMethodInfo(deleteDeploymentHandler, newAppAPIServiceDeleteDeploymentArgs, newAppAPIServiceDeleteDeploymentResult, false),
		"GetStatefulSet":                       kitex.NewMethodInfo(getStatefulSetHandler, newAppAPIServiceGetStatefulSetArgs, newAppAPIServiceGetStatefulSetResult, false),
		"ListStatefulSets":                     kitex.NewMethodInfo(listStatefulSetsHandler, newAppAPIServiceListStatefulSetsArgs, newAppAPIServiceListStatefulSetsResult, false),
		"CreateStatefulSet":                    kitex.NewMethodInfo(createStatefulSetHandler, newAppAPIServiceCreateStatefulSetArgs, newAppAPIServiceCreateStatefulSetResult, false),
		"UpdateStatefulSet":                    kitex.NewMethodInfo(updateStatefulSetHandler, newAppAPIServiceUpdateStatefulSetArgs, newAppAPIServiceUpdateStatefulSetResult, false),
		"DeleteStatefulSet":                    kitex.NewMethodInfo(deleteStatefulSetHandler, newAppAPIServiceDeleteStatefulSetArgs, newAppAPIServiceDeleteStatefulSetResult, false),
		"GetJob":                               kitex.NewMethodInfo(getJobHandler, newAppAPIServiceGetJobArgs, newAppAPIServiceGetJobResult, false),
		"ListJobs":                             kitex.NewMethodInfo(listJobsHandler, newAppAPIServiceListJobsArgs, newAppAPIServiceListJobsResult, false),
		"CreateJob":                            kitex.NewMethodInfo(createJobHandler, newAppAPIServiceCreateJobArgs, newAppAPIServiceCreateJobResult, false),
		"UpdateJob":                            kitex.NewMethodInfo(updateJobHandler, newAppAPIServiceUpdateJobArgs, newAppAPIServiceUpdateJobResult, false),
		"DeleteJob":                            kitex.NewMethodInfo(deleteJobHandler, newAppAPIServiceDeleteJobArgs, newAppAPIServiceDeleteJobResult, false),
		"GetSecret":                            kitex.NewMethodInfo(getSecretHandler, newAppAPIServiceGetSecretArgs, newAppAPIServiceGetSecretResult, false),
		"ListSecrets":                          kitex.NewMethodInfo(listSecretsHandler, newAppAPIServiceListSecretsArgs, newAppAPIServiceListSecretsResult, false),
		"CreateSecret":                         kitex.NewMethodInfo(createSecretHandler, newAppAPIServiceCreateSecretArgs, newAppAPIServiceCreateSecretResult, false),
		"UpdateSecret":                         kitex.NewMethodInfo(updateSecretHandler, newAppAPIServiceUpdateSecretArgs, newAppAPIServiceUpdateSecretResult, false),
		"DeleteSecret":                         kitex.NewMethodInfo(deleteSecretHandler, newAppAPIServiceDeleteSecretArgs, newAppAPIServiceDeleteSecretResult, false),
		"GetDaemonSet":                         kitex.NewMethodInfo(getDaemonSetHandler, newAppAPIServiceGetDaemonSetArgs, newAppAPIServiceGetDaemonSetResult, false),
		"ListDaemonSets":                       kitex.NewMethodInfo(listDaemonSetsHandler, newAppAPIServiceListDaemonSetsArgs, newAppAPIServiceListDaemonSetsResult, false),
		"CreateDaemonSet":                      kitex.NewMethodInfo(createDaemonSetHandler, newAppAPIServiceCreateDaemonSetArgs, newAppAPIServiceCreateDaemonSetResult, false),
		"UpdateDaemonSet":                      kitex.NewMethodInfo(updateDaemonSetHandler, newAppAPIServiceUpdateDaemonSetArgs, newAppAPIServiceUpdateDaemonSetResult, false),
		"DeleteDaemonSet":                      kitex.NewMethodInfo(deleteDaemonSetHandler, newAppAPIServiceDeleteDaemonSetArgs, newAppAPIServiceDeleteDaemonSetResult, false),
		"GetCronJob":                           kitex.NewMethodInfo(getCronJobHandler, newAppAPIServiceGetCronJobArgs, newAppAPIServiceGetCronJobResult, false),
		"ListCronJobs":                         kitex.NewMethodInfo(listCronJobsHandler, newAppAPIServiceListCronJobsArgs, newAppAPIServiceListCronJobsResult, false),
		"ListJobsFromCronJob":                  kitex.NewMethodInfo(listJobsFromCronJobHandler, newAppAPIServiceListJobsFromCronJobArgs, newAppAPIServiceListJobsFromCronJobResult, false),
		"CreateCronJob":                        kitex.NewMethodInfo(createCronJobHandler, newAppAPIServiceCreateCronJobArgs, newAppAPIServiceCreateCronJobResult, false),
		"UpdateCronJob":                        kitex.NewMethodInfo(updateCronJobHandler, newAppAPIServiceUpdateCronJobArgs, newAppAPIServiceUpdateCronJobResult, false),
		"DeleteCronJob":                        kitex.NewMethodInfo(deleteCronJobHandler, newAppAPIServiceDeleteCronJobArgs, newAppAPIServiceDeleteCronJobResult, false),
		"PatchCronJobSuspend":                  kitex.NewMethodInfo(patchCronJobSuspendHandler, newAppAPIServicePatchCronJobSuspendArgs, newAppAPIServicePatchCronJobSuspendResult, false),
		"GetResourceYaml":                      kitex.NewMethodInfo(getResourceYamlHandler, newAppAPIServiceGetResourceYamlArgs, newAppAPIServiceGetResourceYamlResult, false),
		"CreateResourceByYaml":                 kitex.NewMethodInfo(createResourceByYamlHandler, newAppAPIServiceCreateResourceByYamlArgs, newAppAPIServiceCreateResourceByYamlResult, false),
		"UpdateResourceByYaml":                 kitex.NewMethodInfo(updateResourceByYamlHandler, newAppAPIServiceUpdateResourceByYamlArgs, newAppAPIServiceUpdateResourceByYamlResult, false),
		"GetHorizontalPodAutoscaler":           kitex.NewMethodInfo(getHorizontalPodAutoscalerHandler, newAppAPIServiceGetHorizontalPodAutoscalerArgs, newAppAPIServiceGetHorizontalPodAutoscalerResult, false),
		"ListHorizontalPodAutoscalers":         kitex.NewMethodInfo(listHorizontalPodAutoscalersHandler, newAppAPIServiceListHorizontalPodAutoscalersArgs, newAppAPIServiceListHorizontalPodAutoscalersResult, false),
		"CreateHorizontalPodAutoscaler":        kitex.NewMethodInfo(createHorizontalPodAutoscalerHandler, newAppAPIServiceCreateHorizontalPodAutoscalerArgs, newAppAPIServiceCreateHorizontalPodAutoscalerResult, false),
		"UpdateHorizontalPodAutoscaler":        kitex.NewMethodInfo(updateHorizontalPodAutoscalerHandler, newAppAPIServiceUpdateHorizontalPodAutoscalerArgs, newAppAPIServiceUpdateHorizontalPodAutoscalerResult, false),
		"DeleteHorizontalPodAutoscaler":        kitex.NewMethodInfo(deleteHorizontalPodAutoscalerHandler, newAppAPIServiceDeleteHorizontalPodAutoscalerArgs, newAppAPIServiceDeleteHorizontalPodAutoscalerResult, false),
		"GetPod":                               kitex.NewMethodInfo(getPodHandler, newAppAPIServiceGetPodArgs, newAppAPIServiceGetPodResult, false),
		"ListPods":                             kitex.NewMethodInfo(listPodsHandler, newAppAPIServiceListPodsArgs, newAppAPIServiceListPodsResult, false),
		"DeletePod":                            kitex.NewMethodInfo(deletePodHandler, newAppAPIServiceDeletePodArgs, newAppAPIServiceDeletePodResult, false),
		"GetAPIGroup":                          kitex.NewMethodInfo(getAPIGroupHandler, newAppAPIServiceGetAPIGroupArgs, newAppAPIServiceGetAPIGroupResult, false),
		"ListAPIGroups":                        kitex.NewMethodInfo(listAPIGroupsHandler, newAppAPIServiceListAPIGroupsArgs, newAppAPIServiceListAPIGroupsResult, false),
		"ListCRDs":                             kitex.NewMethodInfo(listCRDsHandler, newAppAPIServiceListCRDsArgs, newAppAPIServiceListCRDsResult, false),
		"DeleteCRD":                            kitex.NewMethodInfo(deleteCRDHandler, newAppAPIServiceDeleteCRDArgs, newAppAPIServiceDeleteCRDResult, false),
		"GetResource":                          kitex.NewMethodInfo(getResourceHandler, newAppAPIServiceGetResourceArgs, newAppAPIServiceGetResourceResult, false),
		"ListResources":                        kitex.NewMethodInfo(listResourcesHandler, newAppAPIServiceListResourcesArgs, newAppAPIServiceListResourcesResult, false),
		"DeleteResource":                       kitex.NewMethodInfo(deleteResourceHandler, newAppAPIServiceDeleteResourceArgs, newAppAPIServiceDeleteResourceResult, false),
		"ListCharts":                           kitex.NewMethodInfo(listChartsHandler, newAppAPIServiceListChartsArgs, newAppAPIServiceListChartsResult, false),
		"ListChartCategories":                  kitex.NewMethodInfo(listChartCategoriesHandler, newAppAPIServiceListChartCategoriesArgs, newAppAPIServiceListChartCategoriesResult, false),
		"GetChart":                             kitex.NewMethodInfo(getChartHandler, newAppAPIServiceGetChartArgs, newAppAPIServiceGetChartResult, false),
		"ListReleases":                         kitex.NewMethodInfo(listReleasesHandler, newAppAPIServiceListReleasesArgs, newAppAPIServiceListReleasesResult, false),
		"GetRelease":                           kitex.NewMethodInfo(getReleaseHandler, newAppAPIServiceGetReleaseArgs, newAppAPIServiceGetReleaseResult, false),
		"CreateRelease":                        kitex.NewMethodInfo(createReleaseHandler, newAppAPIServiceCreateReleaseArgs, newAppAPIServiceCreateReleaseResult, false),
		"UpdateRelease":                        kitex.NewMethodInfo(updateReleaseHandler, newAppAPIServiceUpdateReleaseArgs, newAppAPIServiceUpdateReleaseResult, false),
		"RollbackRelease":                      kitex.NewMethodInfo(rollbackReleaseHandler, newAppAPIServiceRollbackReleaseArgs, newAppAPIServiceRollbackReleaseResult, false),
		"DeleteRelease":                        kitex.NewMethodInfo(deleteReleaseHandler, newAppAPIServiceDeleteReleaseArgs, newAppAPIServiceDeleteReleaseResult, false),
		"ListCronHorizontalPodAutoscalers":     kitex.NewMethodInfo(listCronHorizontalPodAutoscalersHandler, newAppAPIServiceListCronHorizontalPodAutoscalersArgs, newAppAPIServiceListCronHorizontalPodAutoscalersResult, false),
		"CreateCronHorizontalPodAutoscaler":    kitex.NewMethodInfo(createCronHorizontalPodAutoscalerHandler, newAppAPIServiceCreateCronHorizontalPodAutoscalerArgs, newAppAPIServiceCreateCronHorizontalPodAutoscalerResult, false),
		"UpdateCronHorizontalPodAutoscaler":    kitex.NewMethodInfo(updateCronHorizontalPodAutoscalerHandler, newAppAPIServiceUpdateCronHorizontalPodAutoscalerArgs, newAppAPIServiceUpdateCronHorizontalPodAutoscalerResult, false),
		"DeleteCronHorizontalPodAutoscaler":    kitex.NewMethodInfo(deleteCronHorizontalPodAutoscalerHandler, newAppAPIServiceDeleteCronHorizontalPodAutoscalerArgs, newAppAPIServiceDeleteCronHorizontalPodAutoscalerResult, false),
		"ListLogCollectRules":                  kitex.NewMethodInfo(listLogCollectRulesHandler, newAppAPIServiceListLogCollectRulesArgs, newAppAPIServiceListLogCollectRulesResult, false),
		"CreateLogCollectRule":                 kitex.NewMethodInfo(createLogCollectRuleHandler, newAppAPIServiceCreateLogCollectRuleArgs, newAppAPIServiceCreateLogCollectRuleResult, false),
		"UpdateLogCollectRule":                 kitex.NewMethodInfo(updateLogCollectRuleHandler, newAppAPIServiceUpdateLogCollectRuleArgs, newAppAPIServiceUpdateLogCollectRuleResult, false),
		"DeleteLogCollectRule":                 kitex.NewMethodInfo(deleteLogCollectRuleHandler, newAppAPIServiceDeleteLogCollectRuleArgs, newAppAPIServiceDeleteLogCollectRuleResult, false),
		"GetLogCollectRule":                    kitex.NewMethodInfo(getLogCollectRuleHandler, newAppAPIServiceGetLogCollectRuleArgs, newAppAPIServiceGetLogCollectRuleResult, false),
		"ForwardKubernetesApi":                 kitex.NewMethodInfo(forwardKubernetesApiHandler, newAppAPIServiceForwardKubernetesApiArgs, newAppAPIServiceForwardKubernetesApiResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "appserver",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.1.0",
		Extra:           extra,
	}
	return svcInfo
}

func getConfigMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetConfigMapArgs)
	realResult := result.(*appserver.AppAPIServiceGetConfigMapResult)
	success, err := handler.(appserver.AppAPIService).GetConfigMap(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetConfigMapArgs() interface{} {
	return appserver.NewAppAPIServiceGetConfigMapArgs()
}

func newAppAPIServiceGetConfigMapResult() interface{} {
	return appserver.NewAppAPIServiceGetConfigMapResult()
}

func listConfigMapsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListConfigMapsArgs)
	realResult := result.(*appserver.AppAPIServiceListConfigMapsResult)
	success, err := handler.(appserver.AppAPIService).ListConfigMaps(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListConfigMapsArgs() interface{} {
	return appserver.NewAppAPIServiceListConfigMapsArgs()
}

func newAppAPIServiceListConfigMapsResult() interface{} {
	return appserver.NewAppAPIServiceListConfigMapsResult()
}

func createConfigMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateConfigMapArgs)
	realResult := result.(*appserver.AppAPIServiceCreateConfigMapResult)
	success, err := handler.(appserver.AppAPIService).CreateConfigMap(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateConfigMapArgs() interface{} {
	return appserver.NewAppAPIServiceCreateConfigMapArgs()
}

func newAppAPIServiceCreateConfigMapResult() interface{} {
	return appserver.NewAppAPIServiceCreateConfigMapResult()
}

func updateConfigMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateConfigMapArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateConfigMapResult)
	success, err := handler.(appserver.AppAPIService).UpdateConfigMap(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateConfigMapArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateConfigMapArgs()
}

func newAppAPIServiceUpdateConfigMapResult() interface{} {
	return appserver.NewAppAPIServiceUpdateConfigMapResult()
}

func deleteConfigMapHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteConfigMapArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteConfigMapResult)
	success, err := handler.(appserver.AppAPIService).DeleteConfigMap(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteConfigMapArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteConfigMapArgs()
}

func newAppAPIServiceDeleteConfigMapResult() interface{} {
	return appserver.NewAppAPIServiceDeleteConfigMapResult()
}

func getServiceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetServiceArgs)
	realResult := result.(*appserver.AppAPIServiceGetServiceResult)
	success, err := handler.(appserver.AppAPIService).GetService(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetServiceArgs() interface{} {
	return appserver.NewAppAPIServiceGetServiceArgs()
}

func newAppAPIServiceGetServiceResult() interface{} {
	return appserver.NewAppAPIServiceGetServiceResult()
}

func listServicesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListServicesArgs)
	realResult := result.(*appserver.AppAPIServiceListServicesResult)
	success, err := handler.(appserver.AppAPIService).ListServices(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListServicesArgs() interface{} {
	return appserver.NewAppAPIServiceListServicesArgs()
}

func newAppAPIServiceListServicesResult() interface{} {
	return appserver.NewAppAPIServiceListServicesResult()
}

func createServiceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateServiceArgs)
	realResult := result.(*appserver.AppAPIServiceCreateServiceResult)
	success, err := handler.(appserver.AppAPIService).CreateService(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateServiceArgs() interface{} {
	return appserver.NewAppAPIServiceCreateServiceArgs()
}

func newAppAPIServiceCreateServiceResult() interface{} {
	return appserver.NewAppAPIServiceCreateServiceResult()
}

func updateServiceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateServiceArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateServiceResult)
	success, err := handler.(appserver.AppAPIService).UpdateService(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateServiceArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateServiceArgs()
}

func newAppAPIServiceUpdateServiceResult() interface{} {
	return appserver.NewAppAPIServiceUpdateServiceResult()
}

func deleteServiceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteServiceArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteServiceResult)
	success, err := handler.(appserver.AppAPIService).DeleteService(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteServiceArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteServiceArgs()
}

func newAppAPIServiceDeleteServiceResult() interface{} {
	return appserver.NewAppAPIServiceDeleteServiceResult()
}

func patchWorkloadImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServicePatchWorkloadImageArgs)
	realResult := result.(*appserver.AppAPIServicePatchWorkloadImageResult)
	success, err := handler.(appserver.AppAPIService).PatchWorkloadImage(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServicePatchWorkloadImageArgs() interface{} {
	return appserver.NewAppAPIServicePatchWorkloadImageArgs()
}

func newAppAPIServicePatchWorkloadImageResult() interface{} {
	return appserver.NewAppAPIServicePatchWorkloadImageResult()
}

func patchWorkloadReplicasHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServicePatchWorkloadReplicasArgs)
	realResult := result.(*appserver.AppAPIServicePatchWorkloadReplicasResult)
	success, err := handler.(appserver.AppAPIService).PatchWorkloadReplicas(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServicePatchWorkloadReplicasArgs() interface{} {
	return appserver.NewAppAPIServicePatchWorkloadReplicasArgs()
}

func newAppAPIServicePatchWorkloadReplicasResult() interface{} {
	return appserver.NewAppAPIServicePatchWorkloadReplicasResult()
}

func restartWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceRestartWorkloadArgs)
	realResult := result.(*appserver.AppAPIServiceRestartWorkloadResult)
	success, err := handler.(appserver.AppAPIService).RestartWorkload(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceRestartWorkloadArgs() interface{} {
	return appserver.NewAppAPIServiceRestartWorkloadArgs()
}

func newAppAPIServiceRestartWorkloadResult() interface{} {
	return appserver.NewAppAPIServiceRestartWorkloadResult()
}

func rollbackWorkloadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceRollbackWorkloadArgs)
	realResult := result.(*appserver.AppAPIServiceRollbackWorkloadResult)
	success, err := handler.(appserver.AppAPIService).RollbackWorkload(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceRollbackWorkloadArgs() interface{} {
	return appserver.NewAppAPIServiceRollbackWorkloadArgs()
}

func newAppAPIServiceRollbackWorkloadResult() interface{} {
	return appserver.NewAppAPIServiceRollbackWorkloadResult()
}

func listWorkloadPodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListWorkloadPodsArgs)
	realResult := result.(*appserver.AppAPIServiceListWorkloadPodsResult)
	success, err := handler.(appserver.AppAPIService).ListWorkloadPods(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListWorkloadPodsArgs() interface{} {
	return appserver.NewAppAPIServiceListWorkloadPodsArgs()
}

func newAppAPIServiceListWorkloadPodsResult() interface{} {
	return appserver.NewAppAPIServiceListWorkloadPodsResult()
}

func listWorkloadServicesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListWorkloadServicesArgs)
	realResult := result.(*appserver.AppAPIServiceListWorkloadServicesResult)
	success, err := handler.(appserver.AppAPIService).ListWorkloadServices(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListWorkloadServicesArgs() interface{} {
	return appserver.NewAppAPIServiceListWorkloadServicesArgs()
}

func newAppAPIServiceListWorkloadServicesResult() interface{} {
	return appserver.NewAppAPIServiceListWorkloadServicesResult()
}

func listWorkloadHistoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListWorkloadHistoriesArgs)
	realResult := result.(*appserver.AppAPIServiceListWorkloadHistoriesResult)
	success, err := handler.(appserver.AppAPIService).ListWorkloadHistories(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListWorkloadHistoriesArgs() interface{} {
	return appserver.NewAppAPIServiceListWorkloadHistoriesArgs()
}

func newAppAPIServiceListWorkloadHistoriesResult() interface{} {
	return appserver.NewAppAPIServiceListWorkloadHistoriesResult()
}

func listObjectEventsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListObjectEventsArgs)
	realResult := result.(*appserver.AppAPIServiceListObjectEventsResult)
	success, err := handler.(appserver.AppAPIService).ListObjectEvents(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListObjectEventsArgs() interface{} {
	return appserver.NewAppAPIServiceListObjectEventsArgs()
}

func newAppAPIServiceListObjectEventsResult() interface{} {
	return appserver.NewAppAPIServiceListObjectEventsResult()
}

func patchWorkloadParallelismHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServicePatchWorkloadParallelismArgs)
	realResult := result.(*appserver.AppAPIServicePatchWorkloadParallelismResult)
	success, err := handler.(appserver.AppAPIService).PatchWorkloadParallelism(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServicePatchWorkloadParallelismArgs() interface{} {
	return appserver.NewAppAPIServicePatchWorkloadParallelismArgs()
}

func newAppAPIServicePatchWorkloadParallelismResult() interface{} {
	return appserver.NewAppAPIServicePatchWorkloadParallelismResult()
}

func getContainerLogsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetContainerLogsArgs)
	realResult := result.(*appserver.AppAPIServiceGetContainerLogsResult)
	success, err := handler.(appserver.AppAPIService).GetContainerLogs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetContainerLogsArgs() interface{} {
	return appserver.NewAppAPIServiceGetContainerLogsArgs()
}

func newAppAPIServiceGetContainerLogsResult() interface{} {
	return appserver.NewAppAPIServiceGetContainerLogsResult()
}

func listWorkloadHorizontalPodAutoscalersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs)
	realResult := result.(*appserver.AppAPIServiceListWorkloadHorizontalPodAutoscalersResult)
	success, err := handler.(appserver.AppAPIService).ListWorkloadHorizontalPodAutoscalers(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListWorkloadHorizontalPodAutoscalersArgs() interface{} {
	return appserver.NewAppAPIServiceListWorkloadHorizontalPodAutoscalersArgs()
}

func newAppAPIServiceListWorkloadHorizontalPodAutoscalersResult() interface{} {
	return appserver.NewAppAPIServiceListWorkloadHorizontalPodAutoscalersResult()
}

func getDeploymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetDeploymentArgs)
	realResult := result.(*appserver.AppAPIServiceGetDeploymentResult)
	success, err := handler.(appserver.AppAPIService).GetDeployment(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetDeploymentArgs() interface{} {
	return appserver.NewAppAPIServiceGetDeploymentArgs()
}

func newAppAPIServiceGetDeploymentResult() interface{} {
	return appserver.NewAppAPIServiceGetDeploymentResult()
}

func listDeploymentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListDeploymentsArgs)
	realResult := result.(*appserver.AppAPIServiceListDeploymentsResult)
	success, err := handler.(appserver.AppAPIService).ListDeployments(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListDeploymentsArgs() interface{} {
	return appserver.NewAppAPIServiceListDeploymentsArgs()
}

func newAppAPIServiceListDeploymentsResult() interface{} {
	return appserver.NewAppAPIServiceListDeploymentsResult()
}

func createDeploymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateDeploymentArgs)
	realResult := result.(*appserver.AppAPIServiceCreateDeploymentResult)
	success, err := handler.(appserver.AppAPIService).CreateDeployment(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateDeploymentArgs() interface{} {
	return appserver.NewAppAPIServiceCreateDeploymentArgs()
}

func newAppAPIServiceCreateDeploymentResult() interface{} {
	return appserver.NewAppAPIServiceCreateDeploymentResult()
}

func updateDeploymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateDeploymentArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateDeploymentResult)
	success, err := handler.(appserver.AppAPIService).UpdateDeployment(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateDeploymentArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateDeploymentArgs()
}

func newAppAPIServiceUpdateDeploymentResult() interface{} {
	return appserver.NewAppAPIServiceUpdateDeploymentResult()
}

func deleteDeploymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteDeploymentArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteDeploymentResult)
	success, err := handler.(appserver.AppAPIService).DeleteDeployment(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteDeploymentArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteDeploymentArgs()
}

func newAppAPIServiceDeleteDeploymentResult() interface{} {
	return appserver.NewAppAPIServiceDeleteDeploymentResult()
}

func getStatefulSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetStatefulSetArgs)
	realResult := result.(*appserver.AppAPIServiceGetStatefulSetResult)
	success, err := handler.(appserver.AppAPIService).GetStatefulSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetStatefulSetArgs() interface{} {
	return appserver.NewAppAPIServiceGetStatefulSetArgs()
}

func newAppAPIServiceGetStatefulSetResult() interface{} {
	return appserver.NewAppAPIServiceGetStatefulSetResult()
}

func listStatefulSetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListStatefulSetsArgs)
	realResult := result.(*appserver.AppAPIServiceListStatefulSetsResult)
	success, err := handler.(appserver.AppAPIService).ListStatefulSets(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListStatefulSetsArgs() interface{} {
	return appserver.NewAppAPIServiceListStatefulSetsArgs()
}

func newAppAPIServiceListStatefulSetsResult() interface{} {
	return appserver.NewAppAPIServiceListStatefulSetsResult()
}

func createStatefulSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateStatefulSetArgs)
	realResult := result.(*appserver.AppAPIServiceCreateStatefulSetResult)
	success, err := handler.(appserver.AppAPIService).CreateStatefulSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateStatefulSetArgs() interface{} {
	return appserver.NewAppAPIServiceCreateStatefulSetArgs()
}

func newAppAPIServiceCreateStatefulSetResult() interface{} {
	return appserver.NewAppAPIServiceCreateStatefulSetResult()
}

func updateStatefulSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateStatefulSetArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateStatefulSetResult)
	success, err := handler.(appserver.AppAPIService).UpdateStatefulSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateStatefulSetArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateStatefulSetArgs()
}

func newAppAPIServiceUpdateStatefulSetResult() interface{} {
	return appserver.NewAppAPIServiceUpdateStatefulSetResult()
}

func deleteStatefulSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteStatefulSetArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteStatefulSetResult)
	success, err := handler.(appserver.AppAPIService).DeleteStatefulSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteStatefulSetArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteStatefulSetArgs()
}

func newAppAPIServiceDeleteStatefulSetResult() interface{} {
	return appserver.NewAppAPIServiceDeleteStatefulSetResult()
}

func getJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetJobArgs)
	realResult := result.(*appserver.AppAPIServiceGetJobResult)
	success, err := handler.(appserver.AppAPIService).GetJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetJobArgs() interface{} {
	return appserver.NewAppAPIServiceGetJobArgs()
}

func newAppAPIServiceGetJobResult() interface{} {
	return appserver.NewAppAPIServiceGetJobResult()
}

func listJobsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListJobsArgs)
	realResult := result.(*appserver.AppAPIServiceListJobsResult)
	success, err := handler.(appserver.AppAPIService).ListJobs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListJobsArgs() interface{} {
	return appserver.NewAppAPIServiceListJobsArgs()
}

func newAppAPIServiceListJobsResult() interface{} {
	return appserver.NewAppAPIServiceListJobsResult()
}

func createJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateJobArgs)
	realResult := result.(*appserver.AppAPIServiceCreateJobResult)
	success, err := handler.(appserver.AppAPIService).CreateJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateJobArgs() interface{} {
	return appserver.NewAppAPIServiceCreateJobArgs()
}

func newAppAPIServiceCreateJobResult() interface{} {
	return appserver.NewAppAPIServiceCreateJobResult()
}

func updateJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateJobArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateJobResult)
	success, err := handler.(appserver.AppAPIService).UpdateJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateJobArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateJobArgs()
}

func newAppAPIServiceUpdateJobResult() interface{} {
	return appserver.NewAppAPIServiceUpdateJobResult()
}

func deleteJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteJobArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteJobResult)
	success, err := handler.(appserver.AppAPIService).DeleteJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteJobArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteJobArgs()
}

func newAppAPIServiceDeleteJobResult() interface{} {
	return appserver.NewAppAPIServiceDeleteJobResult()
}

func getSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetSecretArgs)
	realResult := result.(*appserver.AppAPIServiceGetSecretResult)
	success, err := handler.(appserver.AppAPIService).GetSecret(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetSecretArgs() interface{} {
	return appserver.NewAppAPIServiceGetSecretArgs()
}

func newAppAPIServiceGetSecretResult() interface{} {
	return appserver.NewAppAPIServiceGetSecretResult()
}

func listSecretsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListSecretsArgs)
	realResult := result.(*appserver.AppAPIServiceListSecretsResult)
	success, err := handler.(appserver.AppAPIService).ListSecrets(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListSecretsArgs() interface{} {
	return appserver.NewAppAPIServiceListSecretsArgs()
}

func newAppAPIServiceListSecretsResult() interface{} {
	return appserver.NewAppAPIServiceListSecretsResult()
}

func createSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateSecretArgs)
	realResult := result.(*appserver.AppAPIServiceCreateSecretResult)
	success, err := handler.(appserver.AppAPIService).CreateSecret(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateSecretArgs() interface{} {
	return appserver.NewAppAPIServiceCreateSecretArgs()
}

func newAppAPIServiceCreateSecretResult() interface{} {
	return appserver.NewAppAPIServiceCreateSecretResult()
}

func updateSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateSecretArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateSecretResult)
	success, err := handler.(appserver.AppAPIService).UpdateSecret(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateSecretArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateSecretArgs()
}

func newAppAPIServiceUpdateSecretResult() interface{} {
	return appserver.NewAppAPIServiceUpdateSecretResult()
}

func deleteSecretHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteSecretArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteSecretResult)
	success, err := handler.(appserver.AppAPIService).DeleteSecret(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteSecretArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteSecretArgs()
}

func newAppAPIServiceDeleteSecretResult() interface{} {
	return appserver.NewAppAPIServiceDeleteSecretResult()
}

func getDaemonSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetDaemonSetArgs)
	realResult := result.(*appserver.AppAPIServiceGetDaemonSetResult)
	success, err := handler.(appserver.AppAPIService).GetDaemonSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetDaemonSetArgs() interface{} {
	return appserver.NewAppAPIServiceGetDaemonSetArgs()
}

func newAppAPIServiceGetDaemonSetResult() interface{} {
	return appserver.NewAppAPIServiceGetDaemonSetResult()
}

func listDaemonSetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListDaemonSetsArgs)
	realResult := result.(*appserver.AppAPIServiceListDaemonSetsResult)
	success, err := handler.(appserver.AppAPIService).ListDaemonSets(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListDaemonSetsArgs() interface{} {
	return appserver.NewAppAPIServiceListDaemonSetsArgs()
}

func newAppAPIServiceListDaemonSetsResult() interface{} {
	return appserver.NewAppAPIServiceListDaemonSetsResult()
}

func createDaemonSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateDaemonSetArgs)
	realResult := result.(*appserver.AppAPIServiceCreateDaemonSetResult)
	success, err := handler.(appserver.AppAPIService).CreateDaemonSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateDaemonSetArgs() interface{} {
	return appserver.NewAppAPIServiceCreateDaemonSetArgs()
}

func newAppAPIServiceCreateDaemonSetResult() interface{} {
	return appserver.NewAppAPIServiceCreateDaemonSetResult()
}

func updateDaemonSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateDaemonSetArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateDaemonSetResult)
	success, err := handler.(appserver.AppAPIService).UpdateDaemonSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateDaemonSetArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateDaemonSetArgs()
}

func newAppAPIServiceUpdateDaemonSetResult() interface{} {
	return appserver.NewAppAPIServiceUpdateDaemonSetResult()
}

func deleteDaemonSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteDaemonSetArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteDaemonSetResult)
	success, err := handler.(appserver.AppAPIService).DeleteDaemonSet(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteDaemonSetArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteDaemonSetArgs()
}

func newAppAPIServiceDeleteDaemonSetResult() interface{} {
	return appserver.NewAppAPIServiceDeleteDaemonSetResult()
}

func getCronJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetCronJobArgs)
	realResult := result.(*appserver.AppAPIServiceGetCronJobResult)
	success, err := handler.(appserver.AppAPIService).GetCronJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetCronJobArgs() interface{} {
	return appserver.NewAppAPIServiceGetCronJobArgs()
}

func newAppAPIServiceGetCronJobResult() interface{} {
	return appserver.NewAppAPIServiceGetCronJobResult()
}

func listCronJobsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListCronJobsArgs)
	realResult := result.(*appserver.AppAPIServiceListCronJobsResult)
	success, err := handler.(appserver.AppAPIService).ListCronJobs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListCronJobsArgs() interface{} {
	return appserver.NewAppAPIServiceListCronJobsArgs()
}

func newAppAPIServiceListCronJobsResult() interface{} {
	return appserver.NewAppAPIServiceListCronJobsResult()
}

func listJobsFromCronJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListJobsFromCronJobArgs)
	realResult := result.(*appserver.AppAPIServiceListJobsFromCronJobResult)
	success, err := handler.(appserver.AppAPIService).ListJobsFromCronJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListJobsFromCronJobArgs() interface{} {
	return appserver.NewAppAPIServiceListJobsFromCronJobArgs()
}

func newAppAPIServiceListJobsFromCronJobResult() interface{} {
	return appserver.NewAppAPIServiceListJobsFromCronJobResult()
}

func createCronJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateCronJobArgs)
	realResult := result.(*appserver.AppAPIServiceCreateCronJobResult)
	success, err := handler.(appserver.AppAPIService).CreateCronJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateCronJobArgs() interface{} {
	return appserver.NewAppAPIServiceCreateCronJobArgs()
}

func newAppAPIServiceCreateCronJobResult() interface{} {
	return appserver.NewAppAPIServiceCreateCronJobResult()
}

func updateCronJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateCronJobArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateCronJobResult)
	success, err := handler.(appserver.AppAPIService).UpdateCronJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateCronJobArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateCronJobArgs()
}

func newAppAPIServiceUpdateCronJobResult() interface{} {
	return appserver.NewAppAPIServiceUpdateCronJobResult()
}

func deleteCronJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteCronJobArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteCronJobResult)
	success, err := handler.(appserver.AppAPIService).DeleteCronJob(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteCronJobArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteCronJobArgs()
}

func newAppAPIServiceDeleteCronJobResult() interface{} {
	return appserver.NewAppAPIServiceDeleteCronJobResult()
}

func patchCronJobSuspendHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServicePatchCronJobSuspendArgs)
	realResult := result.(*appserver.AppAPIServicePatchCronJobSuspendResult)
	success, err := handler.(appserver.AppAPIService).PatchCronJobSuspend(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServicePatchCronJobSuspendArgs() interface{} {
	return appserver.NewAppAPIServicePatchCronJobSuspendArgs()
}

func newAppAPIServicePatchCronJobSuspendResult() interface{} {
	return appserver.NewAppAPIServicePatchCronJobSuspendResult()
}

func getResourceYamlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetResourceYamlArgs)
	realResult := result.(*appserver.AppAPIServiceGetResourceYamlResult)
	success, err := handler.(appserver.AppAPIService).GetResourceYaml(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetResourceYamlArgs() interface{} {
	return appserver.NewAppAPIServiceGetResourceYamlArgs()
}

func newAppAPIServiceGetResourceYamlResult() interface{} {
	return appserver.NewAppAPIServiceGetResourceYamlResult()
}

func createResourceByYamlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateResourceByYamlArgs)
	realResult := result.(*appserver.AppAPIServiceCreateResourceByYamlResult)
	success, err := handler.(appserver.AppAPIService).CreateResourceByYaml(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateResourceByYamlArgs() interface{} {
	return appserver.NewAppAPIServiceCreateResourceByYamlArgs()
}

func newAppAPIServiceCreateResourceByYamlResult() interface{} {
	return appserver.NewAppAPIServiceCreateResourceByYamlResult()
}

func updateResourceByYamlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateResourceByYamlArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateResourceByYamlResult)
	success, err := handler.(appserver.AppAPIService).UpdateResourceByYaml(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateResourceByYamlArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateResourceByYamlArgs()
}

func newAppAPIServiceUpdateResourceByYamlResult() interface{} {
	return appserver.NewAppAPIServiceUpdateResourceByYamlResult()
}

func getHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceGetHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).GetHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceGetHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceGetHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceGetHorizontalPodAutoscalerResult()
}

func listHorizontalPodAutoscalersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListHorizontalPodAutoscalersArgs)
	realResult := result.(*appserver.AppAPIServiceListHorizontalPodAutoscalersResult)
	success, err := handler.(appserver.AppAPIService).ListHorizontalPodAutoscalers(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListHorizontalPodAutoscalersArgs() interface{} {
	return appserver.NewAppAPIServiceListHorizontalPodAutoscalersArgs()
}

func newAppAPIServiceListHorizontalPodAutoscalersResult() interface{} {
	return appserver.NewAppAPIServiceListHorizontalPodAutoscalersResult()
}

func createHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceCreateHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).CreateHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceCreateHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceCreateHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceCreateHorizontalPodAutoscalerResult()
}

func updateHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).UpdateHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceUpdateHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceUpdateHorizontalPodAutoscalerResult()
}

func deleteHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).DeleteHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceDeleteHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceDeleteHorizontalPodAutoscalerResult()
}

func getPodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetPodArgs)
	realResult := result.(*appserver.AppAPIServiceGetPodResult)
	success, err := handler.(appserver.AppAPIService).GetPod(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetPodArgs() interface{} {
	return appserver.NewAppAPIServiceGetPodArgs()
}

func newAppAPIServiceGetPodResult() interface{} {
	return appserver.NewAppAPIServiceGetPodResult()
}

func listPodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListPodsArgs)
	realResult := result.(*appserver.AppAPIServiceListPodsResult)
	success, err := handler.(appserver.AppAPIService).ListPods(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListPodsArgs() interface{} {
	return appserver.NewAppAPIServiceListPodsArgs()
}

func newAppAPIServiceListPodsResult() interface{} {
	return appserver.NewAppAPIServiceListPodsResult()
}

func deletePodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeletePodArgs)
	realResult := result.(*appserver.AppAPIServiceDeletePodResult)
	success, err := handler.(appserver.AppAPIService).DeletePod(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeletePodArgs() interface{} {
	return appserver.NewAppAPIServiceDeletePodArgs()
}

func newAppAPIServiceDeletePodResult() interface{} {
	return appserver.NewAppAPIServiceDeletePodResult()
}

func getAPIGroupHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetAPIGroupArgs)
	realResult := result.(*appserver.AppAPIServiceGetAPIGroupResult)
	success, err := handler.(appserver.AppAPIService).GetAPIGroup(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetAPIGroupArgs() interface{} {
	return appserver.NewAppAPIServiceGetAPIGroupArgs()
}

func newAppAPIServiceGetAPIGroupResult() interface{} {
	return appserver.NewAppAPIServiceGetAPIGroupResult()
}

func listAPIGroupsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListAPIGroupsArgs)
	realResult := result.(*appserver.AppAPIServiceListAPIGroupsResult)
	success, err := handler.(appserver.AppAPIService).ListAPIGroups(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListAPIGroupsArgs() interface{} {
	return appserver.NewAppAPIServiceListAPIGroupsArgs()
}

func newAppAPIServiceListAPIGroupsResult() interface{} {
	return appserver.NewAppAPIServiceListAPIGroupsResult()
}

func listCRDsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListCRDsArgs)
	realResult := result.(*appserver.AppAPIServiceListCRDsResult)
	success, err := handler.(appserver.AppAPIService).ListCRDs(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListCRDsArgs() interface{} {
	return appserver.NewAppAPIServiceListCRDsArgs()
}

func newAppAPIServiceListCRDsResult() interface{} {
	return appserver.NewAppAPIServiceListCRDsResult()
}

func deleteCRDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteCRDArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteCRDResult)
	success, err := handler.(appserver.AppAPIService).DeleteCRD(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteCRDArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteCRDArgs()
}

func newAppAPIServiceDeleteCRDResult() interface{} {
	return appserver.NewAppAPIServiceDeleteCRDResult()
}

func getResourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetResourceArgs)
	realResult := result.(*appserver.AppAPIServiceGetResourceResult)
	success, err := handler.(appserver.AppAPIService).GetResource(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetResourceArgs() interface{} {
	return appserver.NewAppAPIServiceGetResourceArgs()
}

func newAppAPIServiceGetResourceResult() interface{} {
	return appserver.NewAppAPIServiceGetResourceResult()
}

func listResourcesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListResourcesArgs)
	realResult := result.(*appserver.AppAPIServiceListResourcesResult)
	success, err := handler.(appserver.AppAPIService).ListResources(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListResourcesArgs() interface{} {
	return appserver.NewAppAPIServiceListResourcesArgs()
}

func newAppAPIServiceListResourcesResult() interface{} {
	return appserver.NewAppAPIServiceListResourcesResult()
}

func deleteResourceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteResourceArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteResourceResult)
	success, err := handler.(appserver.AppAPIService).DeleteResource(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteResourceArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteResourceArgs()
}

func newAppAPIServiceDeleteResourceResult() interface{} {
	return appserver.NewAppAPIServiceDeleteResourceResult()
}

func listChartsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListChartsArgs)
	realResult := result.(*appserver.AppAPIServiceListChartsResult)
	success, err := handler.(appserver.AppAPIService).ListCharts(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListChartsArgs() interface{} {
	return appserver.NewAppAPIServiceListChartsArgs()
}

func newAppAPIServiceListChartsResult() interface{} {
	return appserver.NewAppAPIServiceListChartsResult()
}

func listChartCategoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListChartCategoriesArgs)
	realResult := result.(*appserver.AppAPIServiceListChartCategoriesResult)
	success, err := handler.(appserver.AppAPIService).ListChartCategories(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListChartCategoriesArgs() interface{} {
	return appserver.NewAppAPIServiceListChartCategoriesArgs()
}

func newAppAPIServiceListChartCategoriesResult() interface{} {
	return appserver.NewAppAPIServiceListChartCategoriesResult()
}

func getChartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetChartArgs)
	realResult := result.(*appserver.AppAPIServiceGetChartResult)
	success, err := handler.(appserver.AppAPIService).GetChart(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetChartArgs() interface{} {
	return appserver.NewAppAPIServiceGetChartArgs()
}

func newAppAPIServiceGetChartResult() interface{} {
	return appserver.NewAppAPIServiceGetChartResult()
}

func listReleasesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListReleasesArgs)
	realResult := result.(*appserver.AppAPIServiceListReleasesResult)
	success, err := handler.(appserver.AppAPIService).ListReleases(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListReleasesArgs() interface{} {
	return appserver.NewAppAPIServiceListReleasesArgs()
}

func newAppAPIServiceListReleasesResult() interface{} {
	return appserver.NewAppAPIServiceListReleasesResult()
}

func getReleaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetReleaseArgs)
	realResult := result.(*appserver.AppAPIServiceGetReleaseResult)
	success, err := handler.(appserver.AppAPIService).GetRelease(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetReleaseArgs() interface{} {
	return appserver.NewAppAPIServiceGetReleaseArgs()
}

func newAppAPIServiceGetReleaseResult() interface{} {
	return appserver.NewAppAPIServiceGetReleaseResult()
}

func createReleaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateReleaseArgs)
	realResult := result.(*appserver.AppAPIServiceCreateReleaseResult)
	success, err := handler.(appserver.AppAPIService).CreateRelease(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateReleaseArgs() interface{} {
	return appserver.NewAppAPIServiceCreateReleaseArgs()
}

func newAppAPIServiceCreateReleaseResult() interface{} {
	return appserver.NewAppAPIServiceCreateReleaseResult()
}

func updateReleaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateReleaseArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateReleaseResult)
	success, err := handler.(appserver.AppAPIService).UpdateRelease(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateReleaseArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateReleaseArgs()
}

func newAppAPIServiceUpdateReleaseResult() interface{} {
	return appserver.NewAppAPIServiceUpdateReleaseResult()
}

func rollbackReleaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceRollbackReleaseArgs)
	realResult := result.(*appserver.AppAPIServiceRollbackReleaseResult)
	success, err := handler.(appserver.AppAPIService).RollbackRelease(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceRollbackReleaseArgs() interface{} {
	return appserver.NewAppAPIServiceRollbackReleaseArgs()
}

func newAppAPIServiceRollbackReleaseResult() interface{} {
	return appserver.NewAppAPIServiceRollbackReleaseResult()
}

func deleteReleaseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteReleaseArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteReleaseResult)
	success, err := handler.(appserver.AppAPIService).DeleteRelease(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteReleaseArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteReleaseArgs()
}

func newAppAPIServiceDeleteReleaseResult() interface{} {
	return appserver.NewAppAPIServiceDeleteReleaseResult()
}

func listCronHorizontalPodAutoscalersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListCronHorizontalPodAutoscalersArgs)
	realResult := result.(*appserver.AppAPIServiceListCronHorizontalPodAutoscalersResult)
	success, err := handler.(appserver.AppAPIService).ListCronHorizontalPodAutoscalers(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListCronHorizontalPodAutoscalersArgs() interface{} {
	return appserver.NewAppAPIServiceListCronHorizontalPodAutoscalersArgs()
}

func newAppAPIServiceListCronHorizontalPodAutoscalersResult() interface{} {
	return appserver.NewAppAPIServiceListCronHorizontalPodAutoscalersResult()
}

func createCronHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateCronHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceCreateCronHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).CreateCronHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateCronHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceCreateCronHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceCreateCronHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceCreateCronHorizontalPodAutoscalerResult()
}

func updateCronHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateCronHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).UpdateCronHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateCronHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateCronHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceUpdateCronHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceUpdateCronHorizontalPodAutoscalerResult()
}

func deleteCronHorizontalPodAutoscalerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteCronHorizontalPodAutoscalerResult)
	success, err := handler.(appserver.AppAPIService).DeleteCronHorizontalPodAutoscaler(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteCronHorizontalPodAutoscalerArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteCronHorizontalPodAutoscalerArgs()
}

func newAppAPIServiceDeleteCronHorizontalPodAutoscalerResult() interface{} {
	return appserver.NewAppAPIServiceDeleteCronHorizontalPodAutoscalerResult()
}

func listLogCollectRulesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceListLogCollectRulesArgs)
	realResult := result.(*appserver.AppAPIServiceListLogCollectRulesResult)
	success, err := handler.(appserver.AppAPIService).ListLogCollectRules(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceListLogCollectRulesArgs() interface{} {
	return appserver.NewAppAPIServiceListLogCollectRulesArgs()
}

func newAppAPIServiceListLogCollectRulesResult() interface{} {
	return appserver.NewAppAPIServiceListLogCollectRulesResult()
}

func createLogCollectRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceCreateLogCollectRuleArgs)
	realResult := result.(*appserver.AppAPIServiceCreateLogCollectRuleResult)
	success, err := handler.(appserver.AppAPIService).CreateLogCollectRule(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceCreateLogCollectRuleArgs() interface{} {
	return appserver.NewAppAPIServiceCreateLogCollectRuleArgs()
}

func newAppAPIServiceCreateLogCollectRuleResult() interface{} {
	return appserver.NewAppAPIServiceCreateLogCollectRuleResult()
}

func updateLogCollectRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceUpdateLogCollectRuleArgs)
	realResult := result.(*appserver.AppAPIServiceUpdateLogCollectRuleResult)
	success, err := handler.(appserver.AppAPIService).UpdateLogCollectRule(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceUpdateLogCollectRuleArgs() interface{} {
	return appserver.NewAppAPIServiceUpdateLogCollectRuleArgs()
}

func newAppAPIServiceUpdateLogCollectRuleResult() interface{} {
	return appserver.NewAppAPIServiceUpdateLogCollectRuleResult()
}

func deleteLogCollectRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceDeleteLogCollectRuleArgs)
	realResult := result.(*appserver.AppAPIServiceDeleteLogCollectRuleResult)
	success, err := handler.(appserver.AppAPIService).DeleteLogCollectRule(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceDeleteLogCollectRuleArgs() interface{} {
	return appserver.NewAppAPIServiceDeleteLogCollectRuleArgs()
}

func newAppAPIServiceDeleteLogCollectRuleResult() interface{} {
	return appserver.NewAppAPIServiceDeleteLogCollectRuleResult()
}

func getLogCollectRuleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceGetLogCollectRuleArgs)
	realResult := result.(*appserver.AppAPIServiceGetLogCollectRuleResult)
	success, err := handler.(appserver.AppAPIService).GetLogCollectRule(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceGetLogCollectRuleArgs() interface{} {
	return appserver.NewAppAPIServiceGetLogCollectRuleArgs()
}

func newAppAPIServiceGetLogCollectRuleResult() interface{} {
	return appserver.NewAppAPIServiceGetLogCollectRuleResult()
}

func forwardKubernetesApiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*appserver.AppAPIServiceForwardKubernetesApiArgs)
	realResult := result.(*appserver.AppAPIServiceForwardKubernetesApiResult)
	success, err := handler.(appserver.AppAPIService).ForwardKubernetesApi(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *common.Error:
			realResult.Err = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newAppAPIServiceForwardKubernetesApiArgs() interface{} {
	return appserver.NewAppAPIServiceForwardKubernetesApiArgs()
}

func newAppAPIServiceForwardKubernetesApiResult() interface{} {
	return appserver.NewAppAPIServiceForwardKubernetesApiResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetConfigMap(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetConfigMapResponse, err error) {
	var _args appserver.AppAPIServiceGetConfigMapArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetConfigMapResult
	if err = p.c.Call(ctx, "GetConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListConfigMaps(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListConfigMapsResponse, err error) {
	var _args appserver.AppAPIServiceListConfigMapsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListConfigMapsResult
	if err = p.c.Call(ctx, "ListConfigMaps", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateConfigMap(ctx context.Context, req *appserver.CreateConfigMapRequest) (r *appserver.GetConfigMapResponse, err error) {
	var _args appserver.AppAPIServiceCreateConfigMapArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateConfigMapResult
	if err = p.c.Call(ctx, "CreateConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateConfigMap(ctx context.Context, req *appserver.CreateConfigMapRequest) (r *appserver.GetConfigMapResponse, err error) {
	var _args appserver.AppAPIServiceUpdateConfigMapArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateConfigMapResult
	if err = p.c.Call(ctx, "UpdateConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteConfigMap(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteConfigMapArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteConfigMapResult
	if err = p.c.Call(ctx, "DeleteConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetService(ctx context.Context, req *appserver.GetServiceRequest) (r *appserver.GetServiceResponse, err error) {
	var _args appserver.AppAPIServiceGetServiceArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetServiceResult
	if err = p.c.Call(ctx, "GetService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListServices(ctx context.Context, req *appserver.ListServiceRequest) (r *appserver.ListServicesResponse, err error) {
	var _args appserver.AppAPIServiceListServicesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListServicesResult
	if err = p.c.Call(ctx, "ListServices", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateService(ctx context.Context, req *appserver.CreateServiceRequest) (r *appserver.GetServiceResponse, err error) {
	var _args appserver.AppAPIServiceCreateServiceArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateServiceResult
	if err = p.c.Call(ctx, "CreateService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateService(ctx context.Context, req *appserver.CreateServiceRequest) (r *appserver.GetServiceResponse, err error) {
	var _args appserver.AppAPIServiceUpdateServiceArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateServiceResult
	if err = p.c.Call(ctx, "UpdateService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteService(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteServiceArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteServiceResult
	if err = p.c.Call(ctx, "DeleteService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PatchWorkloadImage(ctx context.Context, req *appserver.PatchImageRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServicePatchWorkloadImageArgs
	_args.Req = req
	var _result appserver.AppAPIServicePatchWorkloadImageResult
	if err = p.c.Call(ctx, "PatchWorkloadImage", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PatchWorkloadReplicas(ctx context.Context, req *appserver.PatchReplicasRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServicePatchWorkloadReplicasArgs
	_args.Req = req
	var _result appserver.AppAPIServicePatchWorkloadReplicasResult
	if err = p.c.Call(ctx, "PatchWorkloadReplicas", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RestartWorkload(ctx context.Context, req *appserver.RestartRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceRestartWorkloadArgs
	_args.Req = req
	var _result appserver.AppAPIServiceRestartWorkloadResult
	if err = p.c.Call(ctx, "RestartWorkload", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RollbackWorkload(ctx context.Context, req *appserver.RollbackRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceRollbackWorkloadArgs
	_args.Req = req
	var _result appserver.AppAPIServiceRollbackWorkloadResult
	if err = p.c.Call(ctx, "RollbackWorkload", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListWorkloadPods(ctx context.Context, req *appserver.ListWorkloadObjectsRequest) (r *appserver.ListWorkloadPodsResponse, err error) {
	var _args appserver.AppAPIServiceListWorkloadPodsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListWorkloadPodsResult
	if err = p.c.Call(ctx, "ListWorkloadPods", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListWorkloadServices(ctx context.Context, req *appserver.ListWorkloadObjectsRequest) (r *appserver.ListServicesResponse, err error) {
	var _args appserver.AppAPIServiceListWorkloadServicesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListWorkloadServicesResult
	if err = p.c.Call(ctx, "ListWorkloadServices", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListWorkloadHistories(ctx context.Context, req *appserver.ListWorkloadObjectsRequest) (r *appserver.ListWorkloadHistoriesResponse, err error) {
	var _args appserver.AppAPIServiceListWorkloadHistoriesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListWorkloadHistoriesResult
	if err = p.c.Call(ctx, "ListWorkloadHistories", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListObjectEvents(ctx context.Context, req *appserver.ListObjectEventsRequest) (r *appserver.ListWorkloadEventsResponse, err error) {
	var _args appserver.AppAPIServiceListObjectEventsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListObjectEventsResult
	if err = p.c.Call(ctx, "ListObjectEvents", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PatchWorkloadParallelism(ctx context.Context, req *appserver.PatchParallelismRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServicePatchWorkloadParallelismArgs
	_args.Req = req
	var _result appserver.AppAPIServicePatchWorkloadParallelismResult
	if err = p.c.Call(ctx, "PatchWorkloadParallelism", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetContainerLogs(ctx context.Context, req *appserver.GetContainerLogsRequest) (r *appserver.GetContainerLogsResponse, err error) {
	var _args appserver.AppAPIServiceGetContainerLogsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetContainerLogsResult
	if err = p.c.Call(ctx, "GetContainerLogs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListWorkloadHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListWorkloadObjectsRequest) (r *appserver.ListWorkloadHorizontalPodAutoscalersResponse, err error) {
	var _args appserver.AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListWorkloadHorizontalPodAutoscalersResult
	if err = p.c.Call(ctx, "ListWorkloadHorizontalPodAutoscalers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDeployment(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetDeploymentResponse, err error) {
	var _args appserver.AppAPIServiceGetDeploymentArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetDeploymentResult
	if err = p.c.Call(ctx, "GetDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDeployments(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListDeploymentsResponse, err error) {
	var _args appserver.AppAPIServiceListDeploymentsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListDeploymentsResult
	if err = p.c.Call(ctx, "ListDeployments", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDeployment(ctx context.Context, req *appserver.CreateDeploymentRequest) (r *appserver.GetDeploymentResponse, err error) {
	var _args appserver.AppAPIServiceCreateDeploymentArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateDeploymentResult
	if err = p.c.Call(ctx, "CreateDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDeployment(ctx context.Context, req *appserver.CreateDeploymentRequest) (r *appserver.GetDeploymentResponse, err error) {
	var _args appserver.AppAPIServiceUpdateDeploymentArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateDeploymentResult
	if err = p.c.Call(ctx, "UpdateDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDeployment(ctx context.Context, req *appserver.DeleteRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteDeploymentArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteDeploymentResult
	if err = p.c.Call(ctx, "DeleteDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetStatefulSet(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetStatefulSetResponse, err error) {
	var _args appserver.AppAPIServiceGetStatefulSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetStatefulSetResult
	if err = p.c.Call(ctx, "GetStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListStatefulSets(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListStatefulSetsResponse, err error) {
	var _args appserver.AppAPIServiceListStatefulSetsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListStatefulSetsResult
	if err = p.c.Call(ctx, "ListStatefulSets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateStatefulSet(ctx context.Context, req *appserver.CreateStatefulSetRequest) (r *appserver.GetStatefulSetResponse, err error) {
	var _args appserver.AppAPIServiceCreateStatefulSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateStatefulSetResult
	if err = p.c.Call(ctx, "CreateStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateStatefulSet(ctx context.Context, req *appserver.CreateStatefulSetRequest) (r *appserver.GetStatefulSetResponse, err error) {
	var _args appserver.AppAPIServiceUpdateStatefulSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateStatefulSetResult
	if err = p.c.Call(ctx, "UpdateStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteStatefulSet(ctx context.Context, req *appserver.DeleteRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteStatefulSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteStatefulSetResult
	if err = p.c.Call(ctx, "DeleteStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetJob(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetJobResponse, err error) {
	var _args appserver.AppAPIServiceGetJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetJobResult
	if err = p.c.Call(ctx, "GetJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListJobs(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListJobsResponse, err error) {
	var _args appserver.AppAPIServiceListJobsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListJobsResult
	if err = p.c.Call(ctx, "ListJobs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateJob(ctx context.Context, req *appserver.CreateJobRequest) (r *appserver.GetJobResponse, err error) {
	var _args appserver.AppAPIServiceCreateJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateJobResult
	if err = p.c.Call(ctx, "CreateJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateJob(ctx context.Context, req *appserver.CreateJobRequest) (r *appserver.GetJobResponse, err error) {
	var _args appserver.AppAPIServiceUpdateJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateJobResult
	if err = p.c.Call(ctx, "UpdateJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteJob(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteJobResult
	if err = p.c.Call(ctx, "DeleteJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSecret(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetSecretResponse, err error) {
	var _args appserver.AppAPIServiceGetSecretArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetSecretResult
	if err = p.c.Call(ctx, "GetSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSecrets(ctx context.Context, req *appserver.ListSecretsRequest) (r *appserver.ListSecretsResponse, err error) {
	var _args appserver.AppAPIServiceListSecretsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListSecretsResult
	if err = p.c.Call(ctx, "ListSecrets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSecret(ctx context.Context, req *appserver.CreateSecretRequest) (r *appserver.GetSecretResponse, err error) {
	var _args appserver.AppAPIServiceCreateSecretArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateSecretResult
	if err = p.c.Call(ctx, "CreateSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSecret(ctx context.Context, req *appserver.CreateSecretRequest) (r *appserver.GetSecretResponse, err error) {
	var _args appserver.AppAPIServiceUpdateSecretArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateSecretResult
	if err = p.c.Call(ctx, "UpdateSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSecret(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteSecretArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteSecretResult
	if err = p.c.Call(ctx, "DeleteSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDaemonSet(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetDaemonSetResponse, err error) {
	var _args appserver.AppAPIServiceGetDaemonSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetDaemonSetResult
	if err = p.c.Call(ctx, "GetDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListDaemonSets(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListDaemonSetsResponse, err error) {
	var _args appserver.AppAPIServiceListDaemonSetsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListDaemonSetsResult
	if err = p.c.Call(ctx, "ListDaemonSets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDaemonSet(ctx context.Context, req *appserver.CreateDaemonSetRequest) (r *appserver.GetDaemonSetResponse, err error) {
	var _args appserver.AppAPIServiceCreateDaemonSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateDaemonSetResult
	if err = p.c.Call(ctx, "CreateDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateDaemonSet(ctx context.Context, req *appserver.CreateDaemonSetRequest) (r *appserver.GetDaemonSetResponse, err error) {
	var _args appserver.AppAPIServiceUpdateDaemonSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateDaemonSetResult
	if err = p.c.Call(ctx, "UpdateDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteDaemonSet(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteDaemonSetArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteDaemonSetResult
	if err = p.c.Call(ctx, "DeleteDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCronJob(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetCronJobResponse, err error) {
	var _args appserver.AppAPIServiceGetCronJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetCronJobResult
	if err = p.c.Call(ctx, "GetCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCronJobs(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListCronJobsResponse, err error) {
	var _args appserver.AppAPIServiceListCronJobsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListCronJobsResult
	if err = p.c.Call(ctx, "ListCronJobs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListJobsFromCronJob(ctx context.Context, req *appserver.ListJobsFromCronJobRequest) (r *appserver.ListJobsFromCronJobResponse, err error) {
	var _args appserver.AppAPIServiceListJobsFromCronJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListJobsFromCronJobResult
	if err = p.c.Call(ctx, "ListJobsFromCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCronJob(ctx context.Context, req *appserver.CreateCronJobRequest) (r *appserver.GetCronJobResponse, err error) {
	var _args appserver.AppAPIServiceCreateCronJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateCronJobResult
	if err = p.c.Call(ctx, "CreateCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCronJob(ctx context.Context, req *appserver.CreateCronJobRequest) (r *appserver.GetCronJobResponse, err error) {
	var _args appserver.AppAPIServiceUpdateCronJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateCronJobResult
	if err = p.c.Call(ctx, "UpdateCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCronJob(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteCronJobArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteCronJobResult
	if err = p.c.Call(ctx, "DeleteCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PatchCronJobSuspend(ctx context.Context, req *appserver.PatchCronJobSuspendRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServicePatchCronJobSuspendArgs
	_args.Req = req
	var _result appserver.AppAPIServicePatchCronJobSuspendResult
	if err = p.c.Call(ctx, "PatchCronJobSuspend", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetResourceYaml(ctx context.Context, req *appserver.GetResourceYamlRequest) (r *appserver.GetResourceYamlResponse, err error) {
	var _args appserver.AppAPIServiceGetResourceYamlArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetResourceYamlResult
	if err = p.c.Call(ctx, "GetResourceYaml", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateResourceByYaml(ctx context.Context, req *appserver.CreateResourceByYamlRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceCreateResourceByYamlArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateResourceByYamlResult
	if err = p.c.Call(ctx, "CreateResourceByYaml", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateResourceByYaml(ctx context.Context, req *appserver.UpdateResourceByYamlRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceUpdateResourceByYamlArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateResourceByYamlResult
	if err = p.c.Call(ctx, "UpdateResourceByYaml", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetHorizontalPodAutoscalerResponse, err error) {
	var _args appserver.AppAPIServiceGetHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "GetHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListHorizontalPodAutoscalersResponse, err error) {
	var _args appserver.AppAPIServiceListHorizontalPodAutoscalersArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListHorizontalPodAutoscalersResult
	if err = p.c.Call(ctx, "ListHorizontalPodAutoscalers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateHorizontalPodAutoscalerRequest) (r *appserver.GetHorizontalPodAutoscalerResponse, err error) {
	var _args appserver.AppAPIServiceCreateHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "CreateHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateHorizontalPodAutoscalerRequest) (r *appserver.GetHorizontalPodAutoscalerResponse, err error) {
	var _args appserver.AppAPIServiceUpdateHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "UpdateHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "DeleteHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPod(ctx context.Context, req *appserver.GetRequest) (r *appserver.GetPodResponse, err error) {
	var _args appserver.AppAPIServiceGetPodArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetPodResult
	if err = p.c.Call(ctx, "GetPod", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPods(ctx context.Context, req *appserver.ListPodsRequest) (r *appserver.ListPodsResponse, err error) {
	var _args appserver.AppAPIServiceListPodsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListPodsResult
	if err = p.c.Call(ctx, "ListPods", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePod(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeletePodArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeletePodResult
	if err = p.c.Call(ctx, "DeletePod", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAPIGroup(ctx context.Context, req *appserver.GetAPIGroupRequest) (r *appserver.GetAPIGroupResponse, err error) {
	var _args appserver.AppAPIServiceGetAPIGroupArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetAPIGroupResult
	if err = p.c.Call(ctx, "GetAPIGroup", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAPIGroups(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListAPIGroupsResponse, err error) {
	var _args appserver.AppAPIServiceListAPIGroupsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListAPIGroupsResult
	if err = p.c.Call(ctx, "ListAPIGroups", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCRDs(ctx context.Context, req *appserver.ListRequest) (r *appserver.ListCRDsResponse, err error) {
	var _args appserver.AppAPIServiceListCRDsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListCRDsResult
	if err = p.c.Call(ctx, "ListCRDs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCRD(ctx context.Context, req *appserver.DeleteCRDRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteCRDArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteCRDResult
	if err = p.c.Call(ctx, "DeleteCRD", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetResource(ctx context.Context, req *appserver.GetResourceRequest) (r *appserver.ResourceItem, err error) {
	var _args appserver.AppAPIServiceGetResourceArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetResourceResult
	if err = p.c.Call(ctx, "GetResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListResources(ctx context.Context, req *appserver.ListResourcesRequest) (r *appserver.ListResourcesResponse, err error) {
	var _args appserver.AppAPIServiceListResourcesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListResourcesResult
	if err = p.c.Call(ctx, "ListResources", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteResource(ctx context.Context, req *appserver.GetResourceRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteResourceArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteResourceResult
	if err = p.c.Call(ctx, "DeleteResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCharts(ctx context.Context, req *appserver.ListChartsRequest) (r *appserver.ListChartsResponse, err error) {
	var _args appserver.AppAPIServiceListChartsArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListChartsResult
	if err = p.c.Call(ctx, "ListCharts", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListChartCategories(ctx context.Context, req *appserver.ListChartCategoriesRequest) (r *appserver.ListChartCategoriesResponse, err error) {
	var _args appserver.AppAPIServiceListChartCategoriesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListChartCategoriesResult
	if err = p.c.Call(ctx, "ListChartCategories", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetChart(ctx context.Context, req *appserver.GetChartRequest) (r *appserver.GetChartResponse, err error) {
	var _args appserver.AppAPIServiceGetChartArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetChartResult
	if err = p.c.Call(ctx, "GetChart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReleases(ctx context.Context, req *appserver.ListReleasesRequest) (r *appserver.ListReleasesResponse, err error) {
	var _args appserver.AppAPIServiceListReleasesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListReleasesResult
	if err = p.c.Call(ctx, "ListReleases", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetRelease(ctx context.Context, req *appserver.GetReleaseRequest) (r *appserver.GetReleaseResponse, err error) {
	var _args appserver.AppAPIServiceGetReleaseArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetReleaseResult
	if err = p.c.Call(ctx, "GetRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateRelease(ctx context.Context, req *appserver.CreateReleaseRequest) (r *appserver.CreateReleaseResponse, err error) {
	var _args appserver.AppAPIServiceCreateReleaseArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateReleaseResult
	if err = p.c.Call(ctx, "CreateRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateRelease(ctx context.Context, req *appserver.CreateReleaseRequest) (r *appserver.CreateReleaseResponse, err error) {
	var _args appserver.AppAPIServiceUpdateReleaseArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateReleaseResult
	if err = p.c.Call(ctx, "UpdateRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RollbackRelease(ctx context.Context, req *appserver.RollbackReleaseRequest) (r *appserver.CreateReleaseResponse, err error) {
	var _args appserver.AppAPIServiceRollbackReleaseArgs
	_args.Req = req
	var _result appserver.AppAPIServiceRollbackReleaseResult
	if err = p.c.Call(ctx, "RollbackRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteRelease(ctx context.Context, req *appserver.DeleteReleaseRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteReleaseArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteReleaseResult
	if err = p.c.Call(ctx, "DeleteRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCronHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListWorkloadObjectsRequest) (r *appserver.ListCronHorizontalPodAutoscalersResponse, err error) {
	var _args appserver.AppAPIServiceListCronHorizontalPodAutoscalersArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListCronHorizontalPodAutoscalersResult
	if err = p.c.Call(ctx, "ListCronHorizontalPodAutoscalers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateCronHorizontalPodAutoscalerRequest) (r *appserver.GetCronHorizontalPodAutoscalerResponse, err error) {
	var _args appserver.AppAPIServiceCreateCronHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateCronHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "CreateCronHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateCronHorizontalPodAutoscalerRequest) (r *appserver.GetCronHorizontalPodAutoscalerResponse, err error) {
	var _args appserver.AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateCronHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "UpdateCronHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteCronHorizontalPodAutoscalerResult
	if err = p.c.Call(ctx, "DeleteCronHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListLogCollectRules(ctx context.Context, req *appserver.ListLogCollectRulesReq) (r *appserver.ListLogCollectRulesResp, err error) {
	var _args appserver.AppAPIServiceListLogCollectRulesArgs
	_args.Req = req
	var _result appserver.AppAPIServiceListLogCollectRulesResult
	if err = p.c.Call(ctx, "ListLogCollectRules", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLogCollectRule(ctx context.Context, req *appserver.CreateLogCollectRuleReq) (r *appserver.CreateLogCollectRuleResp, err error) {
	var _args appserver.AppAPIServiceCreateLogCollectRuleArgs
	_args.Req = req
	var _result appserver.AppAPIServiceCreateLogCollectRuleResult
	if err = p.c.Call(ctx, "CreateLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateLogCollectRule(ctx context.Context, req *appserver.UpdateLogCollectRuleReq) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceUpdateLogCollectRuleArgs
	_args.Req = req
	var _result appserver.AppAPIServiceUpdateLogCollectRuleResult
	if err = p.c.Call(ctx, "UpdateLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteLogCollectRule(ctx context.Context, req *appserver.DeleteLogCollectRuleReq) (r *appserver.EmptyResponse, err error) {
	var _args appserver.AppAPIServiceDeleteLogCollectRuleArgs
	_args.Req = req
	var _result appserver.AppAPIServiceDeleteLogCollectRuleResult
	if err = p.c.Call(ctx, "DeleteLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLogCollectRule(ctx context.Context, req *appserver.GetLogCollectRuleReq) (r *appserver.LogCollectRule, err error) {
	var _args appserver.AppAPIServiceGetLogCollectRuleArgs
	_args.Req = req
	var _result appserver.AppAPIServiceGetLogCollectRuleResult
	if err = p.c.Call(ctx, "GetLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ForwardKubernetesApi(ctx context.Context, req *appserver.ForwardKubernetesApiRequest) (r *appserver.ForwardKubernetesApiResponse, err error) {
	var _args appserver.AppAPIServiceForwardKubernetesApiArgs
	_args.Req = req
	var _result appserver.AppAPIServiceForwardKubernetesApiResult
	if err = p.c.Call(ctx, "ForwardKubernetesApi", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}
