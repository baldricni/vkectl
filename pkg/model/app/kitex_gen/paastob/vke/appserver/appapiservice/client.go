// Code generated by Kitex v0.1.0. DO NOT EDIT.

package appapiservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/paastob/vke/appserver"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetConfigMap(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetConfigMapResponse, err error)
	ListConfigMaps(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListConfigMapsResponse, err error)
	CreateConfigMap(ctx context.Context, req *appserver.CreateConfigMapRequest, callOptions ...callopt.Option) (r *appserver.GetConfigMapResponse, err error)
	UpdateConfigMap(ctx context.Context, req *appserver.CreateConfigMapRequest, callOptions ...callopt.Option) (r *appserver.GetConfigMapResponse, err error)
	DeleteConfigMap(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetService(ctx context.Context, req *appserver.GetServiceRequest, callOptions ...callopt.Option) (r *appserver.GetServiceResponse, err error)
	ListServices(ctx context.Context, req *appserver.ListServiceRequest, callOptions ...callopt.Option) (r *appserver.ListServicesResponse, err error)
	CreateService(ctx context.Context, req *appserver.CreateServiceRequest, callOptions ...callopt.Option) (r *appserver.GetServiceResponse, err error)
	UpdateService(ctx context.Context, req *appserver.CreateServiceRequest, callOptions ...callopt.Option) (r *appserver.GetServiceResponse, err error)
	DeleteService(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	PatchWorkloadImage(ctx context.Context, req *appserver.PatchImageRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	PatchWorkloadReplicas(ctx context.Context, req *appserver.PatchReplicasRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	RestartWorkload(ctx context.Context, req *appserver.RestartRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	RollbackWorkload(ctx context.Context, req *appserver.RollbackRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	ListWorkloadPods(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadPodsResponse, err error)
	ListWorkloadServices(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListServicesResponse, err error)
	ListWorkloadHistories(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadHistoriesResponse, err error)
	ListObjectEvents(ctx context.Context, req *appserver.ListObjectEventsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadEventsResponse, err error)
	PatchWorkloadParallelism(ctx context.Context, req *appserver.PatchParallelismRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetContainerLogs(ctx context.Context, req *appserver.GetContainerLogsRequest, callOptions ...callopt.Option) (r *appserver.GetContainerLogsResponse, err error)
	ListWorkloadHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadHorizontalPodAutoscalersResponse, err error)
	GetDeployment(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetDeploymentResponse, err error)
	ListDeployments(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListDeploymentsResponse, err error)
	CreateDeployment(ctx context.Context, req *appserver.CreateDeploymentRequest, callOptions ...callopt.Option) (r *appserver.GetDeploymentResponse, err error)
	UpdateDeployment(ctx context.Context, req *appserver.CreateDeploymentRequest, callOptions ...callopt.Option) (r *appserver.GetDeploymentResponse, err error)
	DeleteDeployment(ctx context.Context, req *appserver.DeleteRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetStatefulSet(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetStatefulSetResponse, err error)
	ListStatefulSets(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListStatefulSetsResponse, err error)
	CreateStatefulSet(ctx context.Context, req *appserver.CreateStatefulSetRequest, callOptions ...callopt.Option) (r *appserver.GetStatefulSetResponse, err error)
	UpdateStatefulSet(ctx context.Context, req *appserver.CreateStatefulSetRequest, callOptions ...callopt.Option) (r *appserver.GetStatefulSetResponse, err error)
	DeleteStatefulSet(ctx context.Context, req *appserver.DeleteRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetJobResponse, err error)
	ListJobs(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListJobsResponse, err error)
	CreateJob(ctx context.Context, req *appserver.CreateJobRequest, callOptions ...callopt.Option) (r *appserver.GetJobResponse, err error)
	UpdateJob(ctx context.Context, req *appserver.CreateJobRequest, callOptions ...callopt.Option) (r *appserver.GetJobResponse, err error)
	DeleteJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetSecret(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetSecretResponse, err error)
	ListSecrets(ctx context.Context, req *appserver.ListSecretsRequest, callOptions ...callopt.Option) (r *appserver.ListSecretsResponse, err error)
	CreateSecret(ctx context.Context, req *appserver.CreateSecretRequest, callOptions ...callopt.Option) (r *appserver.GetSecretResponse, err error)
	UpdateSecret(ctx context.Context, req *appserver.CreateSecretRequest, callOptions ...callopt.Option) (r *appserver.GetSecretResponse, err error)
	DeleteSecret(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetDaemonSet(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetDaemonSetResponse, err error)
	ListDaemonSets(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListDaemonSetsResponse, err error)
	CreateDaemonSet(ctx context.Context, req *appserver.CreateDaemonSetRequest, callOptions ...callopt.Option) (r *appserver.GetDaemonSetResponse, err error)
	UpdateDaemonSet(ctx context.Context, req *appserver.CreateDaemonSetRequest, callOptions ...callopt.Option) (r *appserver.GetDaemonSetResponse, err error)
	DeleteDaemonSet(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetCronJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetCronJobResponse, err error)
	ListCronJobs(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListCronJobsResponse, err error)
	ListJobsFromCronJob(ctx context.Context, req *appserver.ListJobsFromCronJobRequest, callOptions ...callopt.Option) (r *appserver.ListJobsFromCronJobResponse, err error)
	CreateCronJob(ctx context.Context, req *appserver.CreateCronJobRequest, callOptions ...callopt.Option) (r *appserver.GetCronJobResponse, err error)
	UpdateCronJob(ctx context.Context, req *appserver.CreateCronJobRequest, callOptions ...callopt.Option) (r *appserver.GetCronJobResponse, err error)
	DeleteCronJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	PatchCronJobSuspend(ctx context.Context, req *appserver.PatchCronJobSuspendRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetResourceYaml(ctx context.Context, req *appserver.GetResourceYamlRequest, callOptions ...callopt.Option) (r *appserver.GetResourceYamlResponse, err error)
	CreateResourceByYaml(ctx context.Context, req *appserver.CreateResourceByYamlRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	UpdateResourceByYaml(ctx context.Context, req *appserver.UpdateResourceByYamlRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetHorizontalPodAutoscalerResponse, err error)
	ListHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListHorizontalPodAutoscalersResponse, err error)
	CreateHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetHorizontalPodAutoscalerResponse, err error)
	UpdateHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetHorizontalPodAutoscalerResponse, err error)
	DeleteHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetPod(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetPodResponse, err error)
	ListPods(ctx context.Context, req *appserver.ListPodsRequest, callOptions ...callopt.Option) (r *appserver.ListPodsResponse, err error)
	DeletePod(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetAPIGroup(ctx context.Context, req *appserver.GetAPIGroupRequest, callOptions ...callopt.Option) (r *appserver.GetAPIGroupResponse, err error)
	ListAPIGroups(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListAPIGroupsResponse, err error)
	ListCRDs(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListCRDsResponse, err error)
	DeleteCRD(ctx context.Context, req *appserver.DeleteCRDRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetResource(ctx context.Context, req *appserver.GetResourceRequest, callOptions ...callopt.Option) (r *appserver.ResourceItem, err error)
	ListResources(ctx context.Context, req *appserver.ListResourcesRequest, callOptions ...callopt.Option) (r *appserver.ListResourcesResponse, err error)
	DeleteResource(ctx context.Context, req *appserver.GetResourceRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	ListCharts(ctx context.Context, req *appserver.ListChartsRequest, callOptions ...callopt.Option) (r *appserver.ListChartsResponse, err error)
	ListChartCategories(ctx context.Context, req *appserver.ListChartCategoriesRequest, callOptions ...callopt.Option) (r *appserver.ListChartCategoriesResponse, err error)
	GetChart(ctx context.Context, req *appserver.GetChartRequest, callOptions ...callopt.Option) (r *appserver.GetChartResponse, err error)
	ListReleases(ctx context.Context, req *appserver.ListReleasesRequest, callOptions ...callopt.Option) (r *appserver.ListReleasesResponse, err error)
	GetRelease(ctx context.Context, req *appserver.GetReleaseRequest, callOptions ...callopt.Option) (r *appserver.GetReleaseResponse, err error)
	CreateRelease(ctx context.Context, req *appserver.CreateReleaseRequest, callOptions ...callopt.Option) (r *appserver.CreateReleaseResponse, err error)
	UpdateRelease(ctx context.Context, req *appserver.CreateReleaseRequest, callOptions ...callopt.Option) (r *appserver.CreateReleaseResponse, err error)
	RollbackRelease(ctx context.Context, req *appserver.RollbackReleaseRequest, callOptions ...callopt.Option) (r *appserver.CreateReleaseResponse, err error)
	DeleteRelease(ctx context.Context, req *appserver.DeleteReleaseRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	ListCronHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListCronHorizontalPodAutoscalersResponse, err error)
	CreateCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateCronHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetCronHorizontalPodAutoscalerResponse, err error)
	UpdateCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateCronHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetCronHorizontalPodAutoscalerResponse, err error)
	DeleteCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	ListLogCollectRules(ctx context.Context, req *appserver.ListLogCollectRulesReq, callOptions ...callopt.Option) (r *appserver.ListLogCollectRulesResp, err error)
	CreateLogCollectRule(ctx context.Context, req *appserver.CreateLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.CreateLogCollectRuleResp, err error)
	UpdateLogCollectRule(ctx context.Context, req *appserver.UpdateLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	DeleteLogCollectRule(ctx context.Context, req *appserver.DeleteLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error)
	GetLogCollectRule(ctx context.Context, req *appserver.GetLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.LogCollectRule, err error)
	ForwardKubernetesApi(ctx context.Context, req *appserver.ForwardKubernetesApiRequest, callOptions ...callopt.Option) (r *appserver.ForwardKubernetesApiResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kAppAPIServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kAppAPIServiceClient struct {
	*kClient
}

func (p *kAppAPIServiceClient) GetConfigMap(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetConfigMapResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetConfigMap(ctx, req)
}

func (p *kAppAPIServiceClient) ListConfigMaps(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListConfigMapsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListConfigMaps(ctx, req)
}

func (p *kAppAPIServiceClient) CreateConfigMap(ctx context.Context, req *appserver.CreateConfigMapRequest, callOptions ...callopt.Option) (r *appserver.GetConfigMapResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateConfigMap(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateConfigMap(ctx context.Context, req *appserver.CreateConfigMapRequest, callOptions ...callopt.Option) (r *appserver.GetConfigMapResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateConfigMap(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteConfigMap(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteConfigMap(ctx, req)
}

func (p *kAppAPIServiceClient) GetService(ctx context.Context, req *appserver.GetServiceRequest, callOptions ...callopt.Option) (r *appserver.GetServiceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetService(ctx, req)
}

func (p *kAppAPIServiceClient) ListServices(ctx context.Context, req *appserver.ListServiceRequest, callOptions ...callopt.Option) (r *appserver.ListServicesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListServices(ctx, req)
}

func (p *kAppAPIServiceClient) CreateService(ctx context.Context, req *appserver.CreateServiceRequest, callOptions ...callopt.Option) (r *appserver.GetServiceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateService(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateService(ctx context.Context, req *appserver.CreateServiceRequest, callOptions ...callopt.Option) (r *appserver.GetServiceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateService(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteService(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteService(ctx, req)
}

func (p *kAppAPIServiceClient) PatchWorkloadImage(ctx context.Context, req *appserver.PatchImageRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchWorkloadImage(ctx, req)
}

func (p *kAppAPIServiceClient) PatchWorkloadReplicas(ctx context.Context, req *appserver.PatchReplicasRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchWorkloadReplicas(ctx, req)
}

func (p *kAppAPIServiceClient) RestartWorkload(ctx context.Context, req *appserver.RestartRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RestartWorkload(ctx, req)
}

func (p *kAppAPIServiceClient) RollbackWorkload(ctx context.Context, req *appserver.RollbackRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RollbackWorkload(ctx, req)
}

func (p *kAppAPIServiceClient) ListWorkloadPods(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadPodsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListWorkloadPods(ctx, req)
}

func (p *kAppAPIServiceClient) ListWorkloadServices(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListServicesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListWorkloadServices(ctx, req)
}

func (p *kAppAPIServiceClient) ListWorkloadHistories(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadHistoriesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListWorkloadHistories(ctx, req)
}

func (p *kAppAPIServiceClient) ListObjectEvents(ctx context.Context, req *appserver.ListObjectEventsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadEventsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListObjectEvents(ctx, req)
}

func (p *kAppAPIServiceClient) PatchWorkloadParallelism(ctx context.Context, req *appserver.PatchParallelismRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchWorkloadParallelism(ctx, req)
}

func (p *kAppAPIServiceClient) GetContainerLogs(ctx context.Context, req *appserver.GetContainerLogsRequest, callOptions ...callopt.Option) (r *appserver.GetContainerLogsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetContainerLogs(ctx, req)
}

func (p *kAppAPIServiceClient) ListWorkloadHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListWorkloadHorizontalPodAutoscalersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListWorkloadHorizontalPodAutoscalers(ctx, req)
}

func (p *kAppAPIServiceClient) GetDeployment(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetDeploymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDeployment(ctx, req)
}

func (p *kAppAPIServiceClient) ListDeployments(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListDeploymentsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDeployments(ctx, req)
}

func (p *kAppAPIServiceClient) CreateDeployment(ctx context.Context, req *appserver.CreateDeploymentRequest, callOptions ...callopt.Option) (r *appserver.GetDeploymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDeployment(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateDeployment(ctx context.Context, req *appserver.CreateDeploymentRequest, callOptions ...callopt.Option) (r *appserver.GetDeploymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDeployment(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteDeployment(ctx context.Context, req *appserver.DeleteRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDeployment(ctx, req)
}

func (p *kAppAPIServiceClient) GetStatefulSet(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetStatefulSetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetStatefulSet(ctx, req)
}

func (p *kAppAPIServiceClient) ListStatefulSets(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListStatefulSetsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListStatefulSets(ctx, req)
}

func (p *kAppAPIServiceClient) CreateStatefulSet(ctx context.Context, req *appserver.CreateStatefulSetRequest, callOptions ...callopt.Option) (r *appserver.GetStatefulSetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateStatefulSet(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateStatefulSet(ctx context.Context, req *appserver.CreateStatefulSetRequest, callOptions ...callopt.Option) (r *appserver.GetStatefulSetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateStatefulSet(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteStatefulSet(ctx context.Context, req *appserver.DeleteRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteStatefulSet(ctx, req)
}

func (p *kAppAPIServiceClient) GetJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetJob(ctx, req)
}

func (p *kAppAPIServiceClient) ListJobs(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListJobsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListJobs(ctx, req)
}

func (p *kAppAPIServiceClient) CreateJob(ctx context.Context, req *appserver.CreateJobRequest, callOptions ...callopt.Option) (r *appserver.GetJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateJob(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateJob(ctx context.Context, req *appserver.CreateJobRequest, callOptions ...callopt.Option) (r *appserver.GetJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateJob(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteJob(ctx, req)
}

func (p *kAppAPIServiceClient) GetSecret(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetSecretResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSecret(ctx, req)
}

func (p *kAppAPIServiceClient) ListSecrets(ctx context.Context, req *appserver.ListSecretsRequest, callOptions ...callopt.Option) (r *appserver.ListSecretsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSecrets(ctx, req)
}

func (p *kAppAPIServiceClient) CreateSecret(ctx context.Context, req *appserver.CreateSecretRequest, callOptions ...callopt.Option) (r *appserver.GetSecretResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSecret(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateSecret(ctx context.Context, req *appserver.CreateSecretRequest, callOptions ...callopt.Option) (r *appserver.GetSecretResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateSecret(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteSecret(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteSecret(ctx, req)
}

func (p *kAppAPIServiceClient) GetDaemonSet(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetDaemonSetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDaemonSet(ctx, req)
}

func (p *kAppAPIServiceClient) ListDaemonSets(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListDaemonSetsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListDaemonSets(ctx, req)
}

func (p *kAppAPIServiceClient) CreateDaemonSet(ctx context.Context, req *appserver.CreateDaemonSetRequest, callOptions ...callopt.Option) (r *appserver.GetDaemonSetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDaemonSet(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateDaemonSet(ctx context.Context, req *appserver.CreateDaemonSetRequest, callOptions ...callopt.Option) (r *appserver.GetDaemonSetResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDaemonSet(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteDaemonSet(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDaemonSet(ctx, req)
}

func (p *kAppAPIServiceClient) GetCronJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetCronJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCronJob(ctx, req)
}

func (p *kAppAPIServiceClient) ListCronJobs(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListCronJobsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCronJobs(ctx, req)
}

func (p *kAppAPIServiceClient) ListJobsFromCronJob(ctx context.Context, req *appserver.ListJobsFromCronJobRequest, callOptions ...callopt.Option) (r *appserver.ListJobsFromCronJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListJobsFromCronJob(ctx, req)
}

func (p *kAppAPIServiceClient) CreateCronJob(ctx context.Context, req *appserver.CreateCronJobRequest, callOptions ...callopt.Option) (r *appserver.GetCronJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCronJob(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateCronJob(ctx context.Context, req *appserver.CreateCronJobRequest, callOptions ...callopt.Option) (r *appserver.GetCronJobResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCronJob(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteCronJob(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCronJob(ctx, req)
}

func (p *kAppAPIServiceClient) PatchCronJobSuspend(ctx context.Context, req *appserver.PatchCronJobSuspendRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PatchCronJobSuspend(ctx, req)
}

func (p *kAppAPIServiceClient) GetResourceYaml(ctx context.Context, req *appserver.GetResourceYamlRequest, callOptions ...callopt.Option) (r *appserver.GetResourceYamlResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetResourceYaml(ctx, req)
}

func (p *kAppAPIServiceClient) CreateResourceByYaml(ctx context.Context, req *appserver.CreateResourceByYamlRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateResourceByYaml(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateResourceByYaml(ctx context.Context, req *appserver.UpdateResourceByYamlRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateResourceByYaml(ctx, req)
}

func (p *kAppAPIServiceClient) GetHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetHorizontalPodAutoscalerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) ListHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListHorizontalPodAutoscalersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListHorizontalPodAutoscalers(ctx, req)
}

func (p *kAppAPIServiceClient) CreateHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetHorizontalPodAutoscalerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetHorizontalPodAutoscalerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) GetPod(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.GetPodResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPod(ctx, req)
}

func (p *kAppAPIServiceClient) ListPods(ctx context.Context, req *appserver.ListPodsRequest, callOptions ...callopt.Option) (r *appserver.ListPodsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListPods(ctx, req)
}

func (p *kAppAPIServiceClient) DeletePod(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePod(ctx, req)
}

func (p *kAppAPIServiceClient) GetAPIGroup(ctx context.Context, req *appserver.GetAPIGroupRequest, callOptions ...callopt.Option) (r *appserver.GetAPIGroupResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAPIGroup(ctx, req)
}

func (p *kAppAPIServiceClient) ListAPIGroups(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListAPIGroupsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListAPIGroups(ctx, req)
}

func (p *kAppAPIServiceClient) ListCRDs(ctx context.Context, req *appserver.ListRequest, callOptions ...callopt.Option) (r *appserver.ListCRDsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCRDs(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteCRD(ctx context.Context, req *appserver.DeleteCRDRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCRD(ctx, req)
}

func (p *kAppAPIServiceClient) GetResource(ctx context.Context, req *appserver.GetResourceRequest, callOptions ...callopt.Option) (r *appserver.ResourceItem, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetResource(ctx, req)
}

func (p *kAppAPIServiceClient) ListResources(ctx context.Context, req *appserver.ListResourcesRequest, callOptions ...callopt.Option) (r *appserver.ListResourcesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListResources(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteResource(ctx context.Context, req *appserver.GetResourceRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteResource(ctx, req)
}

func (p *kAppAPIServiceClient) ListCharts(ctx context.Context, req *appserver.ListChartsRequest, callOptions ...callopt.Option) (r *appserver.ListChartsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCharts(ctx, req)
}

func (p *kAppAPIServiceClient) ListChartCategories(ctx context.Context, req *appserver.ListChartCategoriesRequest, callOptions ...callopt.Option) (r *appserver.ListChartCategoriesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListChartCategories(ctx, req)
}

func (p *kAppAPIServiceClient) GetChart(ctx context.Context, req *appserver.GetChartRequest, callOptions ...callopt.Option) (r *appserver.GetChartResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetChart(ctx, req)
}

func (p *kAppAPIServiceClient) ListReleases(ctx context.Context, req *appserver.ListReleasesRequest, callOptions ...callopt.Option) (r *appserver.ListReleasesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListReleases(ctx, req)
}

func (p *kAppAPIServiceClient) GetRelease(ctx context.Context, req *appserver.GetReleaseRequest, callOptions ...callopt.Option) (r *appserver.GetReleaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetRelease(ctx, req)
}

func (p *kAppAPIServiceClient) CreateRelease(ctx context.Context, req *appserver.CreateReleaseRequest, callOptions ...callopt.Option) (r *appserver.CreateReleaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateRelease(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateRelease(ctx context.Context, req *appserver.CreateReleaseRequest, callOptions ...callopt.Option) (r *appserver.CreateReleaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateRelease(ctx, req)
}

func (p *kAppAPIServiceClient) RollbackRelease(ctx context.Context, req *appserver.RollbackReleaseRequest, callOptions ...callopt.Option) (r *appserver.CreateReleaseResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RollbackRelease(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteRelease(ctx context.Context, req *appserver.DeleteReleaseRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteRelease(ctx, req)
}

func (p *kAppAPIServiceClient) ListCronHorizontalPodAutoscalers(ctx context.Context, req *appserver.ListWorkloadObjectsRequest, callOptions ...callopt.Option) (r *appserver.ListCronHorizontalPodAutoscalersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCronHorizontalPodAutoscalers(ctx, req)
}

func (p *kAppAPIServiceClient) CreateCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateCronHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetCronHorizontalPodAutoscalerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCronHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.CreateCronHorizontalPodAutoscalerRequest, callOptions ...callopt.Option) (r *appserver.GetCronHorizontalPodAutoscalerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCronHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteCronHorizontalPodAutoscaler(ctx context.Context, req *appserver.GetRequest, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCronHorizontalPodAutoscaler(ctx, req)
}

func (p *kAppAPIServiceClient) ListLogCollectRules(ctx context.Context, req *appserver.ListLogCollectRulesReq, callOptions ...callopt.Option) (r *appserver.ListLogCollectRulesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListLogCollectRules(ctx, req)
}

func (p *kAppAPIServiceClient) CreateLogCollectRule(ctx context.Context, req *appserver.CreateLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.CreateLogCollectRuleResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateLogCollectRule(ctx, req)
}

func (p *kAppAPIServiceClient) UpdateLogCollectRule(ctx context.Context, req *appserver.UpdateLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateLogCollectRule(ctx, req)
}

func (p *kAppAPIServiceClient) DeleteLogCollectRule(ctx context.Context, req *appserver.DeleteLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.EmptyResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteLogCollectRule(ctx, req)
}

func (p *kAppAPIServiceClient) GetLogCollectRule(ctx context.Context, req *appserver.GetLogCollectRuleReq, callOptions ...callopt.Option) (r *appserver.LogCollectRule, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLogCollectRule(ctx, req)
}

func (p *kAppAPIServiceClient) ForwardKubernetesApi(ctx context.Context, req *appserver.ForwardKubernetesApiRequest, callOptions ...callopt.Option) (r *appserver.ForwardKubernetesApiResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ForwardKubernetesApi(ctx, req)
}
