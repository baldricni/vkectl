// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type Toleration struct {
	Key               string  `thrift:"Key,1,required" json:"Key"`
	Operator          string  `thrift:"Operator,2" json:"Operator,omitempty"`
	Value             *string `thrift:"Value,3" json:"Value,omitempty"`
	Effect            string  `thrift:"Effect,4" json:"Effect,omitempty"`
	TolerationSeconds *int64  `thrift:"TolerationSeconds,5" json:"TolerationSeconds,omitempty"`
}

func NewToleration() *Toleration {
	return &Toleration{

		Operator: "",
		Effect:   "",
	}
}

func (p *Toleration) GetKey() (v string) {
	return p.Key
}

var Toleration_Operator_DEFAULT string = ""

func (p *Toleration) GetOperator() (v string) {
	if !p.IsSetOperator() {
		return Toleration_Operator_DEFAULT
	}
	return p.Operator
}

var Toleration_Value_DEFAULT string

func (p *Toleration) GetValue() (v string) {
	if !p.IsSetValue() {
		return Toleration_Value_DEFAULT
	}
	return *p.Value
}

var Toleration_Effect_DEFAULT string = ""

func (p *Toleration) GetEffect() (v string) {
	if !p.IsSetEffect() {
		return Toleration_Effect_DEFAULT
	}
	return p.Effect
}

var Toleration_TolerationSeconds_DEFAULT int64

func (p *Toleration) GetTolerationSeconds() (v int64) {
	if !p.IsSetTolerationSeconds() {
		return Toleration_TolerationSeconds_DEFAULT
	}
	return *p.TolerationSeconds
}
func (p *Toleration) SetKey(val string) {
	p.Key = val
}
func (p *Toleration) SetOperator(val string) {
	p.Operator = val
}
func (p *Toleration) SetValue(val *string) {
	p.Value = val
}
func (p *Toleration) SetEffect(val string) {
	p.Effect = val
}
func (p *Toleration) SetTolerationSeconds(val *int64) {
	p.TolerationSeconds = val
}

var fieldIDToName_Toleration = map[int16]string{
	1: "Key",
	2: "Operator",
	3: "Value",
	4: "Effect",
	5: "TolerationSeconds",
}

func (p *Toleration) IsSetOperator() bool {
	return p.Operator != Toleration_Operator_DEFAULT
}

func (p *Toleration) IsSetValue() bool {
	return p.Value != nil
}

func (p *Toleration) IsSetEffect() bool {
	return p.Effect != Toleration_Effect_DEFAULT
}

func (p *Toleration) IsSetTolerationSeconds() bool {
	return p.TolerationSeconds != nil
}

func (p *Toleration) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Toleration[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Toleration[fieldId]))
}

func (p *Toleration) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Key = v
	}
	return nil
}

func (p *Toleration) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Operator = v
	}
	return nil
}

func (p *Toleration) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = &v
	}
	return nil
}

func (p *Toleration) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Effect = v
	}
	return nil
}

func (p *Toleration) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TolerationSeconds = &v
	}
	return nil
}

func (p *Toleration) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Toleration"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Toleration) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Toleration) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperator() {
		if err = oprot.WriteFieldBegin("Operator", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Operator); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Toleration) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("Value", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Toleration) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEffect() {
		if err = oprot.WriteFieldBegin("Effect", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Effect); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Toleration) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTolerationSeconds() {
		if err = oprot.WriteFieldBegin("TolerationSeconds", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TolerationSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Toleration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Toleration(%+v)", *p)
}

func (p *Toleration) DeepEqual(ano *Toleration) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Operator) {
		return false
	}
	if !p.Field3DeepEqual(ano.Value) {
		return false
	}
	if !p.Field4DeepEqual(ano.Effect) {
		return false
	}
	if !p.Field5DeepEqual(ano.TolerationSeconds) {
		return false
	}
	return true
}

func (p *Toleration) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *Toleration) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Operator, src) != 0 {
		return false
	}
	return true
}
func (p *Toleration) Field3DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *Toleration) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Effect, src) != 0 {
		return false
	}
	return true
}
func (p *Toleration) Field5DeepEqual(src *int64) bool {

	if p.TolerationSeconds == src {
		return true
	} else if p.TolerationSeconds == nil || src == nil {
		return false
	}
	if *p.TolerationSeconds != *src {
		return false
	}
	return true
}

type PodAntiAffinity struct {
	RequiredTerms  []*PodAffinityTerm         `thrift:"RequiredTerms,1" json:"RequiredTerms,omitempty"`
	PreferredTerms []*WeightedPodAffinityTerm `thrift:"PreferredTerms,2" json:"PreferredTerms,omitempty"`
}

func NewPodAntiAffinity() *PodAntiAffinity {
	return &PodAntiAffinity{}
}

var PodAntiAffinity_RequiredTerms_DEFAULT []*PodAffinityTerm

func (p *PodAntiAffinity) GetRequiredTerms() (v []*PodAffinityTerm) {
	if !p.IsSetRequiredTerms() {
		return PodAntiAffinity_RequiredTerms_DEFAULT
	}
	return p.RequiredTerms
}

var PodAntiAffinity_PreferredTerms_DEFAULT []*WeightedPodAffinityTerm

func (p *PodAntiAffinity) GetPreferredTerms() (v []*WeightedPodAffinityTerm) {
	if !p.IsSetPreferredTerms() {
		return PodAntiAffinity_PreferredTerms_DEFAULT
	}
	return p.PreferredTerms
}
func (p *PodAntiAffinity) SetRequiredTerms(val []*PodAffinityTerm) {
	p.RequiredTerms = val
}
func (p *PodAntiAffinity) SetPreferredTerms(val []*WeightedPodAffinityTerm) {
	p.PreferredTerms = val
}

var fieldIDToName_PodAntiAffinity = map[int16]string{
	1: "RequiredTerms",
	2: "PreferredTerms",
}

func (p *PodAntiAffinity) IsSetRequiredTerms() bool {
	return p.RequiredTerms != nil
}

func (p *PodAntiAffinity) IsSetPreferredTerms() bool {
	return p.PreferredTerms != nil
}

func (p *PodAntiAffinity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PodAntiAffinity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PodAntiAffinity) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.RequiredTerms = make([]*PodAffinityTerm, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPodAffinityTerm()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.RequiredTerms = append(p.RequiredTerms, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodAntiAffinity) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PreferredTerms = make([]*WeightedPodAffinityTerm, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewWeightedPodAffinityTerm()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PreferredTerms = append(p.PreferredTerms, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodAntiAffinity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PodAntiAffinity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PodAntiAffinity) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequiredTerms() {
		if err = oprot.WriteFieldBegin("RequiredTerms", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RequiredTerms)); err != nil {
			return err
		}
		for _, v := range p.RequiredTerms {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PodAntiAffinity) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredTerms() {
		if err = oprot.WriteFieldBegin("PreferredTerms", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreferredTerms)); err != nil {
			return err
		}
		for _, v := range p.PreferredTerms {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PodAntiAffinity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PodAntiAffinity(%+v)", *p)
}

func (p *PodAntiAffinity) DeepEqual(ano *PodAntiAffinity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RequiredTerms) {
		return false
	}
	if !p.Field2DeepEqual(ano.PreferredTerms) {
		return false
	}
	return true
}

func (p *PodAntiAffinity) Field1DeepEqual(src []*PodAffinityTerm) bool {

	if len(p.RequiredTerms) != len(src) {
		return false
	}
	for i, v := range p.RequiredTerms {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodAntiAffinity) Field2DeepEqual(src []*WeightedPodAffinityTerm) bool {

	if len(p.PreferredTerms) != len(src) {
		return false
	}
	for i, v := range p.PreferredTerms {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PodAffinity struct {
	RequiredTerms  []*PodAffinityTerm         `thrift:"RequiredTerms,1" json:"RequiredTerms,omitempty"`
	PreferredTerms []*WeightedPodAffinityTerm `thrift:"PreferredTerms,2" json:"PreferredTerms,omitempty"`
}

func NewPodAffinity() *PodAffinity {
	return &PodAffinity{}
}

var PodAffinity_RequiredTerms_DEFAULT []*PodAffinityTerm

func (p *PodAffinity) GetRequiredTerms() (v []*PodAffinityTerm) {
	if !p.IsSetRequiredTerms() {
		return PodAffinity_RequiredTerms_DEFAULT
	}
	return p.RequiredTerms
}

var PodAffinity_PreferredTerms_DEFAULT []*WeightedPodAffinityTerm

func (p *PodAffinity) GetPreferredTerms() (v []*WeightedPodAffinityTerm) {
	if !p.IsSetPreferredTerms() {
		return PodAffinity_PreferredTerms_DEFAULT
	}
	return p.PreferredTerms
}
func (p *PodAffinity) SetRequiredTerms(val []*PodAffinityTerm) {
	p.RequiredTerms = val
}
func (p *PodAffinity) SetPreferredTerms(val []*WeightedPodAffinityTerm) {
	p.PreferredTerms = val
}

var fieldIDToName_PodAffinity = map[int16]string{
	1: "RequiredTerms",
	2: "PreferredTerms",
}

func (p *PodAffinity) IsSetRequiredTerms() bool {
	return p.RequiredTerms != nil
}

func (p *PodAffinity) IsSetPreferredTerms() bool {
	return p.PreferredTerms != nil
}

func (p *PodAffinity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PodAffinity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PodAffinity) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.RequiredTerms = make([]*PodAffinityTerm, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPodAffinityTerm()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.RequiredTerms = append(p.RequiredTerms, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodAffinity) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PreferredTerms = make([]*WeightedPodAffinityTerm, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewWeightedPodAffinityTerm()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PreferredTerms = append(p.PreferredTerms, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodAffinity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PodAffinity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PodAffinity) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequiredTerms() {
		if err = oprot.WriteFieldBegin("RequiredTerms", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RequiredTerms)); err != nil {
			return err
		}
		for _, v := range p.RequiredTerms {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PodAffinity) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredTerms() {
		if err = oprot.WriteFieldBegin("PreferredTerms", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreferredTerms)); err != nil {
			return err
		}
		for _, v := range p.PreferredTerms {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PodAffinity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PodAffinity(%+v)", *p)
}

func (p *PodAffinity) DeepEqual(ano *PodAffinity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RequiredTerms) {
		return false
	}
	if !p.Field2DeepEqual(ano.PreferredTerms) {
		return false
	}
	return true
}

func (p *PodAffinity) Field1DeepEqual(src []*PodAffinityTerm) bool {

	if len(p.RequiredTerms) != len(src) {
		return false
	}
	for i, v := range p.RequiredTerms {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodAffinity) Field2DeepEqual(src []*WeightedPodAffinityTerm) bool {

	if len(p.PreferredTerms) != len(src) {
		return false
	}
	for i, v := range p.PreferredTerms {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type WeightedPodAffinityTerm struct {
	Namespace        string                      `thrift:"Namespace,1,required" json:"Namespace"`
	MatchExpressions []*LabelSelectorRequirement `thrift:"MatchExpressions,2" json:"MatchExpressions,omitempty"`
	MatchLabels      []*KeyValuePair             `thrift:"MatchLabels,3" json:"MatchLabels,omitempty"`
	TopologyKey      string                      `thrift:"TopologyKey,4,required" json:"TopologyKey"`
	Weight           int32                       `thrift:"Weight,5,required" json:"Weight"`
}

func NewWeightedPodAffinityTerm() *WeightedPodAffinityTerm {
	return &WeightedPodAffinityTerm{

		TopologyKey: "kubernetes.io/hostname",
	}
}

func (p *WeightedPodAffinityTerm) GetNamespace() (v string) {
	return p.Namespace
}

var WeightedPodAffinityTerm_MatchExpressions_DEFAULT []*LabelSelectorRequirement

func (p *WeightedPodAffinityTerm) GetMatchExpressions() (v []*LabelSelectorRequirement) {
	if !p.IsSetMatchExpressions() {
		return WeightedPodAffinityTerm_MatchExpressions_DEFAULT
	}
	return p.MatchExpressions
}

var WeightedPodAffinityTerm_MatchLabels_DEFAULT []*KeyValuePair

func (p *WeightedPodAffinityTerm) GetMatchLabels() (v []*KeyValuePair) {
	if !p.IsSetMatchLabels() {
		return WeightedPodAffinityTerm_MatchLabels_DEFAULT
	}
	return p.MatchLabels
}

func (p *WeightedPodAffinityTerm) GetTopologyKey() (v string) {
	return p.TopologyKey
}

func (p *WeightedPodAffinityTerm) GetWeight() (v int32) {
	return p.Weight
}
func (p *WeightedPodAffinityTerm) SetNamespace(val string) {
	p.Namespace = val
}
func (p *WeightedPodAffinityTerm) SetMatchExpressions(val []*LabelSelectorRequirement) {
	p.MatchExpressions = val
}
func (p *WeightedPodAffinityTerm) SetMatchLabels(val []*KeyValuePair) {
	p.MatchLabels = val
}
func (p *WeightedPodAffinityTerm) SetTopologyKey(val string) {
	p.TopologyKey = val
}
func (p *WeightedPodAffinityTerm) SetWeight(val int32) {
	p.Weight = val
}

var fieldIDToName_WeightedPodAffinityTerm = map[int16]string{
	1: "Namespace",
	2: "MatchExpressions",
	3: "MatchLabels",
	4: "TopologyKey",
	5: "Weight",
}

func (p *WeightedPodAffinityTerm) IsSetMatchExpressions() bool {
	return p.MatchExpressions != nil
}

func (p *WeightedPodAffinityTerm) IsSetMatchLabels() bool {
	return p.MatchLabels != nil
}

func (p *WeightedPodAffinityTerm) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetTopologyKey bool = false
	var issetWeight bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTopologyKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetWeight = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTopologyKey {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetWeight {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_WeightedPodAffinityTerm[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_WeightedPodAffinityTerm[fieldId]))
}

func (p *WeightedPodAffinityTerm) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *WeightedPodAffinityTerm) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MatchExpressions = make([]*LabelSelectorRequirement, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLabelSelectorRequirement()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MatchExpressions = append(p.MatchExpressions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *WeightedPodAffinityTerm) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MatchLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MatchLabels = append(p.MatchLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *WeightedPodAffinityTerm) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TopologyKey = v
	}
	return nil
}

func (p *WeightedPodAffinityTerm) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Weight = v
	}
	return nil
}

func (p *WeightedPodAffinityTerm) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("WeightedPodAffinityTerm"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *WeightedPodAffinityTerm) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *WeightedPodAffinityTerm) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchExpressions() {
		if err = oprot.WriteFieldBegin("MatchExpressions", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchExpressions)); err != nil {
			return err
		}
		for _, v := range p.MatchExpressions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *WeightedPodAffinityTerm) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchLabels() {
		if err = oprot.WriteFieldBegin("MatchLabels", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchLabels)); err != nil {
			return err
		}
		for _, v := range p.MatchLabels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *WeightedPodAffinityTerm) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopologyKey", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopologyKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *WeightedPodAffinityTerm) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Weight", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Weight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *WeightedPodAffinityTerm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WeightedPodAffinityTerm(%+v)", *p)
}

func (p *WeightedPodAffinityTerm) DeepEqual(ano *WeightedPodAffinityTerm) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field2DeepEqual(ano.MatchExpressions) {
		return false
	}
	if !p.Field3DeepEqual(ano.MatchLabels) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopologyKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.Weight) {
		return false
	}
	return true
}

func (p *WeightedPodAffinityTerm) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *WeightedPodAffinityTerm) Field2DeepEqual(src []*LabelSelectorRequirement) bool {

	if len(p.MatchExpressions) != len(src) {
		return false
	}
	for i, v := range p.MatchExpressions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *WeightedPodAffinityTerm) Field3DeepEqual(src []*KeyValuePair) bool {

	if len(p.MatchLabels) != len(src) {
		return false
	}
	for i, v := range p.MatchLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *WeightedPodAffinityTerm) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TopologyKey, src) != 0 {
		return false
	}
	return true
}
func (p *WeightedPodAffinityTerm) Field5DeepEqual(src int32) bool {

	if p.Weight != src {
		return false
	}
	return true
}

type PodAffinityTerm struct {
	Namespace        string                      `thrift:"Namespace,1,required" json:"Namespace"`
	MatchExpressions []*LabelSelectorRequirement `thrift:"MatchExpressions,2" json:"MatchExpressions,omitempty"`
	MatchLabels      []*KeyValuePair             `thrift:"MatchLabels,3" json:"MatchLabels,omitempty"`
	TopologyKey      string                      `thrift:"TopologyKey,4,required" json:"TopologyKey"`
}

func NewPodAffinityTerm() *PodAffinityTerm {
	return &PodAffinityTerm{

		TopologyKey: "kubernetes.io/hostname",
	}
}

func (p *PodAffinityTerm) GetNamespace() (v string) {
	return p.Namespace
}

var PodAffinityTerm_MatchExpressions_DEFAULT []*LabelSelectorRequirement

func (p *PodAffinityTerm) GetMatchExpressions() (v []*LabelSelectorRequirement) {
	if !p.IsSetMatchExpressions() {
		return PodAffinityTerm_MatchExpressions_DEFAULT
	}
	return p.MatchExpressions
}

var PodAffinityTerm_MatchLabels_DEFAULT []*KeyValuePair

func (p *PodAffinityTerm) GetMatchLabels() (v []*KeyValuePair) {
	if !p.IsSetMatchLabels() {
		return PodAffinityTerm_MatchLabels_DEFAULT
	}
	return p.MatchLabels
}

func (p *PodAffinityTerm) GetTopologyKey() (v string) {
	return p.TopologyKey
}
func (p *PodAffinityTerm) SetNamespace(val string) {
	p.Namespace = val
}
func (p *PodAffinityTerm) SetMatchExpressions(val []*LabelSelectorRequirement) {
	p.MatchExpressions = val
}
func (p *PodAffinityTerm) SetMatchLabels(val []*KeyValuePair) {
	p.MatchLabels = val
}
func (p *PodAffinityTerm) SetTopologyKey(val string) {
	p.TopologyKey = val
}

var fieldIDToName_PodAffinityTerm = map[int16]string{
	1: "Namespace",
	2: "MatchExpressions",
	3: "MatchLabels",
	4: "TopologyKey",
}

func (p *PodAffinityTerm) IsSetMatchExpressions() bool {
	return p.MatchExpressions != nil
}

func (p *PodAffinityTerm) IsSetMatchLabels() bool {
	return p.MatchLabels != nil
}

func (p *PodAffinityTerm) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetTopologyKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTopologyKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTopologyKey {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PodAffinityTerm[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_PodAffinityTerm[fieldId]))
}

func (p *PodAffinityTerm) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *PodAffinityTerm) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MatchExpressions = make([]*LabelSelectorRequirement, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewLabelSelectorRequirement()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MatchExpressions = append(p.MatchExpressions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodAffinityTerm) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MatchLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MatchLabels = append(p.MatchLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodAffinityTerm) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TopologyKey = v
	}
	return nil
}

func (p *PodAffinityTerm) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PodAffinityTerm"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PodAffinityTerm) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PodAffinityTerm) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchExpressions() {
		if err = oprot.WriteFieldBegin("MatchExpressions", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchExpressions)); err != nil {
			return err
		}
		for _, v := range p.MatchExpressions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PodAffinityTerm) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchLabels() {
		if err = oprot.WriteFieldBegin("MatchLabels", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchLabels)); err != nil {
			return err
		}
		for _, v := range p.MatchLabels {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PodAffinityTerm) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TopologyKey", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TopologyKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PodAffinityTerm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PodAffinityTerm(%+v)", *p)
}

func (p *PodAffinityTerm) DeepEqual(ano *PodAffinityTerm) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field2DeepEqual(ano.MatchExpressions) {
		return false
	}
	if !p.Field3DeepEqual(ano.MatchLabels) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopologyKey) {
		return false
	}
	return true
}

func (p *PodAffinityTerm) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *PodAffinityTerm) Field2DeepEqual(src []*LabelSelectorRequirement) bool {

	if len(p.MatchExpressions) != len(src) {
		return false
	}
	for i, v := range p.MatchExpressions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodAffinityTerm) Field3DeepEqual(src []*KeyValuePair) bool {

	if len(p.MatchLabels) != len(src) {
		return false
	}
	for i, v := range p.MatchLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodAffinityTerm) Field4DeepEqual(src string) bool {

	if strings.Compare(p.TopologyKey, src) != 0 {
		return false
	}
	return true
}

type LabelSelectorRequirement struct {
	Key      string  `thrift:"Key,1,required" json:"Key"`
	Operator string  `thrift:"Operator,2,required" json:"Operator"`
	Values   *string `thrift:"Values,3" json:"Values,omitempty"`
}

func NewLabelSelectorRequirement() *LabelSelectorRequirement {
	return &LabelSelectorRequirement{}
}

func (p *LabelSelectorRequirement) GetKey() (v string) {
	return p.Key
}

func (p *LabelSelectorRequirement) GetOperator() (v string) {
	return p.Operator
}

var LabelSelectorRequirement_Values_DEFAULT string

func (p *LabelSelectorRequirement) GetValues() (v string) {
	if !p.IsSetValues() {
		return LabelSelectorRequirement_Values_DEFAULT
	}
	return *p.Values
}
func (p *LabelSelectorRequirement) SetKey(val string) {
	p.Key = val
}
func (p *LabelSelectorRequirement) SetOperator(val string) {
	p.Operator = val
}
func (p *LabelSelectorRequirement) SetValues(val *string) {
	p.Values = val
}

var fieldIDToName_LabelSelectorRequirement = map[int16]string{
	1: "Key",
	2: "Operator",
	3: "Values",
}

func (p *LabelSelectorRequirement) IsSetValues() bool {
	return p.Values != nil
}

func (p *LabelSelectorRequirement) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false
	var issetOperator bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOperator = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOperator {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LabelSelectorRequirement[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_LabelSelectorRequirement[fieldId]))
}

func (p *LabelSelectorRequirement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Key = v
	}
	return nil
}

func (p *LabelSelectorRequirement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Operator = v
	}
	return nil
}

func (p *LabelSelectorRequirement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Values = &v
	}
	return nil
}

func (p *LabelSelectorRequirement) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LabelSelectorRequirement"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LabelSelectorRequirement) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LabelSelectorRequirement) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Operator", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Operator); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LabelSelectorRequirement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValues() {
		if err = oprot.WriteFieldBegin("Values", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Values); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LabelSelectorRequirement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LabelSelectorRequirement(%+v)", *p)
}

func (p *LabelSelectorRequirement) DeepEqual(ano *LabelSelectorRequirement) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Operator) {
		return false
	}
	if !p.Field3DeepEqual(ano.Values) {
		return false
	}
	return true
}

func (p *LabelSelectorRequirement) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *LabelSelectorRequirement) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Operator, src) != 0 {
		return false
	}
	return true
}
func (p *LabelSelectorRequirement) Field3DeepEqual(src *string) bool {

	if p.Values == src {
		return true
	} else if p.Values == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Values, *src) != 0 {
		return false
	}
	return true
}

type NodeAffinity struct {
	RequiredTerms  []*NodeSelectorTerm        `thrift:"RequiredTerms,1" json:"RequiredTerms,omitempty"`
	PreferredTerms []*PreferredSchedulingTerm `thrift:"PreferredTerms,2" json:"PreferredTerms,omitempty"`
}

func NewNodeAffinity() *NodeAffinity {
	return &NodeAffinity{}
}

var NodeAffinity_RequiredTerms_DEFAULT []*NodeSelectorTerm

func (p *NodeAffinity) GetRequiredTerms() (v []*NodeSelectorTerm) {
	if !p.IsSetRequiredTerms() {
		return NodeAffinity_RequiredTerms_DEFAULT
	}
	return p.RequiredTerms
}

var NodeAffinity_PreferredTerms_DEFAULT []*PreferredSchedulingTerm

func (p *NodeAffinity) GetPreferredTerms() (v []*PreferredSchedulingTerm) {
	if !p.IsSetPreferredTerms() {
		return NodeAffinity_PreferredTerms_DEFAULT
	}
	return p.PreferredTerms
}
func (p *NodeAffinity) SetRequiredTerms(val []*NodeSelectorTerm) {
	p.RequiredTerms = val
}
func (p *NodeAffinity) SetPreferredTerms(val []*PreferredSchedulingTerm) {
	p.PreferredTerms = val
}

var fieldIDToName_NodeAffinity = map[int16]string{
	1: "RequiredTerms",
	2: "PreferredTerms",
}

func (p *NodeAffinity) IsSetRequiredTerms() bool {
	return p.RequiredTerms != nil
}

func (p *NodeAffinity) IsSetPreferredTerms() bool {
	return p.PreferredTerms != nil
}

func (p *NodeAffinity) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodeAffinity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NodeAffinity) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.RequiredTerms = make([]*NodeSelectorTerm, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodeSelectorTerm()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.RequiredTerms = append(p.RequiredTerms, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodeAffinity) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PreferredTerms = make([]*PreferredSchedulingTerm, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPreferredSchedulingTerm()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PreferredTerms = append(p.PreferredTerms, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodeAffinity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeAffinity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodeAffinity) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequiredTerms() {
		if err = oprot.WriteFieldBegin("RequiredTerms", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RequiredTerms)); err != nil {
			return err
		}
		for _, v := range p.RequiredTerms {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodeAffinity) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredTerms() {
		if err = oprot.WriteFieldBegin("PreferredTerms", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PreferredTerms)); err != nil {
			return err
		}
		for _, v := range p.PreferredTerms {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodeAffinity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeAffinity(%+v)", *p)
}

func (p *NodeAffinity) DeepEqual(ano *NodeAffinity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RequiredTerms) {
		return false
	}
	if !p.Field2DeepEqual(ano.PreferredTerms) {
		return false
	}
	return true
}

func (p *NodeAffinity) Field1DeepEqual(src []*NodeSelectorTerm) bool {

	if len(p.RequiredTerms) != len(src) {
		return false
	}
	for i, v := range p.RequiredTerms {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *NodeAffinity) Field2DeepEqual(src []*PreferredSchedulingTerm) bool {

	if len(p.PreferredTerms) != len(src) {
		return false
	}
	for i, v := range p.PreferredTerms {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PreferredSchedulingTerm struct {
	Weight           int32                      `thrift:"Weight,1,required" json:"Weight"`
	MatchExpressions []*NodeSelectorRequirement `thrift:"MatchExpressions,2" json:"MatchExpressions,omitempty"`
}

func NewPreferredSchedulingTerm() *PreferredSchedulingTerm {
	return &PreferredSchedulingTerm{}
}

func (p *PreferredSchedulingTerm) GetWeight() (v int32) {
	return p.Weight
}

var PreferredSchedulingTerm_MatchExpressions_DEFAULT []*NodeSelectorRequirement

func (p *PreferredSchedulingTerm) GetMatchExpressions() (v []*NodeSelectorRequirement) {
	if !p.IsSetMatchExpressions() {
		return PreferredSchedulingTerm_MatchExpressions_DEFAULT
	}
	return p.MatchExpressions
}
func (p *PreferredSchedulingTerm) SetWeight(val int32) {
	p.Weight = val
}
func (p *PreferredSchedulingTerm) SetMatchExpressions(val []*NodeSelectorRequirement) {
	p.MatchExpressions = val
}

var fieldIDToName_PreferredSchedulingTerm = map[int16]string{
	1: "Weight",
	2: "MatchExpressions",
}

func (p *PreferredSchedulingTerm) IsSetMatchExpressions() bool {
	return p.MatchExpressions != nil
}

func (p *PreferredSchedulingTerm) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWeight bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWeight = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWeight {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PreferredSchedulingTerm[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_PreferredSchedulingTerm[fieldId]))
}

func (p *PreferredSchedulingTerm) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Weight = v
	}
	return nil
}

func (p *PreferredSchedulingTerm) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MatchExpressions = make([]*NodeSelectorRequirement, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodeSelectorRequirement()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MatchExpressions = append(p.MatchExpressions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PreferredSchedulingTerm) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PreferredSchedulingTerm"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PreferredSchedulingTerm) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Weight", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Weight); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PreferredSchedulingTerm) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchExpressions() {
		if err = oprot.WriteFieldBegin("MatchExpressions", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchExpressions)); err != nil {
			return err
		}
		for _, v := range p.MatchExpressions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PreferredSchedulingTerm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PreferredSchedulingTerm(%+v)", *p)
}

func (p *PreferredSchedulingTerm) DeepEqual(ano *PreferredSchedulingTerm) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Weight) {
		return false
	}
	if !p.Field2DeepEqual(ano.MatchExpressions) {
		return false
	}
	return true
}

func (p *PreferredSchedulingTerm) Field1DeepEqual(src int32) bool {

	if p.Weight != src {
		return false
	}
	return true
}
func (p *PreferredSchedulingTerm) Field2DeepEqual(src []*NodeSelectorRequirement) bool {

	if len(p.MatchExpressions) != len(src) {
		return false
	}
	for i, v := range p.MatchExpressions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type NodeSelectorTerm struct {
	MatchExpressions []*NodeSelectorRequirement `thrift:"MatchExpressions,1" json:"MatchExpressions,omitempty"`
}

func NewNodeSelectorTerm() *NodeSelectorTerm {
	return &NodeSelectorTerm{}
}

var NodeSelectorTerm_MatchExpressions_DEFAULT []*NodeSelectorRequirement

func (p *NodeSelectorTerm) GetMatchExpressions() (v []*NodeSelectorRequirement) {
	if !p.IsSetMatchExpressions() {
		return NodeSelectorTerm_MatchExpressions_DEFAULT
	}
	return p.MatchExpressions
}
func (p *NodeSelectorTerm) SetMatchExpressions(val []*NodeSelectorRequirement) {
	p.MatchExpressions = val
}

var fieldIDToName_NodeSelectorTerm = map[int16]string{
	1: "MatchExpressions",
}

func (p *NodeSelectorTerm) IsSetMatchExpressions() bool {
	return p.MatchExpressions != nil
}

func (p *NodeSelectorTerm) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodeSelectorTerm[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NodeSelectorTerm) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.MatchExpressions = make([]*NodeSelectorRequirement, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewNodeSelectorRequirement()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.MatchExpressions = append(p.MatchExpressions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NodeSelectorTerm) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeSelectorTerm"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodeSelectorTerm) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMatchExpressions() {
		if err = oprot.WriteFieldBegin("MatchExpressions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchExpressions)); err != nil {
			return err
		}
		for _, v := range p.MatchExpressions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodeSelectorTerm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeSelectorTerm(%+v)", *p)
}

func (p *NodeSelectorTerm) DeepEqual(ano *NodeSelectorTerm) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MatchExpressions) {
		return false
	}
	return true
}

func (p *NodeSelectorTerm) Field1DeepEqual(src []*NodeSelectorRequirement) bool {

	if len(p.MatchExpressions) != len(src) {
		return false
	}
	for i, v := range p.MatchExpressions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type NodeSelectorRequirement struct {
	Key      string  `thrift:"Key,1,required" json:"Key"`
	Operator string  `thrift:"Operator,2,required" json:"Operator"`
	Values   *string `thrift:"Values,3" json:"Values,omitempty"`
}

func NewNodeSelectorRequirement() *NodeSelectorRequirement {
	return &NodeSelectorRequirement{}
}

func (p *NodeSelectorRequirement) GetKey() (v string) {
	return p.Key
}

func (p *NodeSelectorRequirement) GetOperator() (v string) {
	return p.Operator
}

var NodeSelectorRequirement_Values_DEFAULT string

func (p *NodeSelectorRequirement) GetValues() (v string) {
	if !p.IsSetValues() {
		return NodeSelectorRequirement_Values_DEFAULT
	}
	return *p.Values
}
func (p *NodeSelectorRequirement) SetKey(val string) {
	p.Key = val
}
func (p *NodeSelectorRequirement) SetOperator(val string) {
	p.Operator = val
}
func (p *NodeSelectorRequirement) SetValues(val *string) {
	p.Values = val
}

var fieldIDToName_NodeSelectorRequirement = map[int16]string{
	1: "Key",
	2: "Operator",
	3: "Values",
}

func (p *NodeSelectorRequirement) IsSetValues() bool {
	return p.Values != nil
}

func (p *NodeSelectorRequirement) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKey bool = false
	var issetOperator bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOperator = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKey {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOperator {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NodeSelectorRequirement[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NodeSelectorRequirement[fieldId]))
}

func (p *NodeSelectorRequirement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Key = v
	}
	return nil
}

func (p *NodeSelectorRequirement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Operator = v
	}
	return nil
}

func (p *NodeSelectorRequirement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Values = &v
	}
	return nil
}

func (p *NodeSelectorRequirement) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NodeSelectorRequirement"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NodeSelectorRequirement) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Key", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Key); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NodeSelectorRequirement) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Operator", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Operator); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NodeSelectorRequirement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValues() {
		if err = oprot.WriteFieldBegin("Values", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Values); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NodeSelectorRequirement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NodeSelectorRequirement(%+v)", *p)
}

func (p *NodeSelectorRequirement) DeepEqual(ano *NodeSelectorRequirement) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Operator) {
		return false
	}
	if !p.Field3DeepEqual(ano.Values) {
		return false
	}
	return true
}

func (p *NodeSelectorRequirement) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Key, src) != 0 {
		return false
	}
	return true
}
func (p *NodeSelectorRequirement) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Operator, src) != 0 {
		return false
	}
	return true
}
func (p *NodeSelectorRequirement) Field3DeepEqual(src *string) bool {

	if p.Values == src {
		return true
	} else if p.Values == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Values, *src) != 0 {
		return false
	}
	return true
}

type ContainerConfiguration struct {
	Name            string           `thrift:"Name,1,required" from:"name"`
	Image           string           `thrift:"Image,2,required" from:"image"`
	ImagePullPolicy string           `thrift:"ImagePullPolicy,3,required" from:"imagePullPolicy"`
	CpuRequest      string           `thrift:"CpuRequest,4" from:"resources.requests.cpu"`
	CpuLimit        string           `thrift:"CpuLimit,5" from:"resources.limits.cpu"`
	MemoryRequest   string           `thrift:"MemoryRequest,6" from:"resources.requests.memory"`
	MemoryLimit     string           `thrift:"MemoryLimit,7" from:"resources.limits.memory"`
	Privileged      bool             `thrift:"Privileged,8,required" from:"securityContext.privileged"`
	InitContainer   bool             `thrift:"InitContainer,9,required" json:"InitContainer"`
	Ports           []*ContainerPort `thrift:"Ports,10" json:"Ports,omitempty"`
	Env             []*Env           `thrift:"Env,11" json:"Env,omitempty"`
	VolumeMounts    []*VolumeMount   `thrift:"VolumeMounts,13" json:"VolumeMounts,omitempty"`
	Command         []string         `thrift:"Command,14" from:"command"`
	Arguments       []string         `thrift:"Arguments,15" from:"args"`
	PostStart       []string         `thrift:"PostStart,16" from:"lifecycle.postStart.exec.command"`
	PreStop         []string         `thrift:"PreStop,17" from:"lifecycle.preStop.exec.command"`
	LivenessProbe   *Probe           `thrift:"LivenessProbe,18" json:"LivenessProbe,omitempty"`
	ReadinessProbe  *Probe           `thrift:"ReadinessProbe,19" json:"ReadinessProbe,omitempty"`
	StartupProbe    *Probe           `thrift:"StartupProbe,20" json:"StartupProbe,omitempty"`
	GpuLimit        string           `thrift:"GpuLimit,21" from:"resources.limits.nvidia#com/gpu"`
}

func NewContainerConfiguration() *ContainerConfiguration {
	return &ContainerConfiguration{

		CpuRequest:    "",
		CpuLimit:      "",
		MemoryRequest: "",
		MemoryLimit:   "",
		GpuLimit:      "",
	}
}

func (p *ContainerConfiguration) GetName() (v string) {
	return p.Name
}

func (p *ContainerConfiguration) GetImage() (v string) {
	return p.Image
}

func (p *ContainerConfiguration) GetImagePullPolicy() (v string) {
	return p.ImagePullPolicy
}

var ContainerConfiguration_CpuRequest_DEFAULT string = ""

func (p *ContainerConfiguration) GetCpuRequest() (v string) {
	if !p.IsSetCpuRequest() {
		return ContainerConfiguration_CpuRequest_DEFAULT
	}
	return p.CpuRequest
}

var ContainerConfiguration_CpuLimit_DEFAULT string = ""

func (p *ContainerConfiguration) GetCpuLimit() (v string) {
	if !p.IsSetCpuLimit() {
		return ContainerConfiguration_CpuLimit_DEFAULT
	}
	return p.CpuLimit
}

var ContainerConfiguration_MemoryRequest_DEFAULT string = ""

func (p *ContainerConfiguration) GetMemoryRequest() (v string) {
	if !p.IsSetMemoryRequest() {
		return ContainerConfiguration_MemoryRequest_DEFAULT
	}
	return p.MemoryRequest
}

var ContainerConfiguration_MemoryLimit_DEFAULT string = ""

func (p *ContainerConfiguration) GetMemoryLimit() (v string) {
	if !p.IsSetMemoryLimit() {
		return ContainerConfiguration_MemoryLimit_DEFAULT
	}
	return p.MemoryLimit
}

func (p *ContainerConfiguration) GetPrivileged() (v bool) {
	return p.Privileged
}

func (p *ContainerConfiguration) GetInitContainer() (v bool) {
	return p.InitContainer
}

var ContainerConfiguration_Ports_DEFAULT []*ContainerPort

func (p *ContainerConfiguration) GetPorts() (v []*ContainerPort) {
	if !p.IsSetPorts() {
		return ContainerConfiguration_Ports_DEFAULT
	}
	return p.Ports
}

var ContainerConfiguration_Env_DEFAULT []*Env

func (p *ContainerConfiguration) GetEnv() (v []*Env) {
	if !p.IsSetEnv() {
		return ContainerConfiguration_Env_DEFAULT
	}
	return p.Env
}

var ContainerConfiguration_VolumeMounts_DEFAULT []*VolumeMount

func (p *ContainerConfiguration) GetVolumeMounts() (v []*VolumeMount) {
	if !p.IsSetVolumeMounts() {
		return ContainerConfiguration_VolumeMounts_DEFAULT
	}
	return p.VolumeMounts
}

var ContainerConfiguration_Command_DEFAULT []string

func (p *ContainerConfiguration) GetCommand() (v []string) {
	if !p.IsSetCommand() {
		return ContainerConfiguration_Command_DEFAULT
	}
	return p.Command
}

var ContainerConfiguration_Arguments_DEFAULT []string

func (p *ContainerConfiguration) GetArguments() (v []string) {
	if !p.IsSetArguments() {
		return ContainerConfiguration_Arguments_DEFAULT
	}
	return p.Arguments
}

var ContainerConfiguration_PostStart_DEFAULT []string

func (p *ContainerConfiguration) GetPostStart() (v []string) {
	if !p.IsSetPostStart() {
		return ContainerConfiguration_PostStart_DEFAULT
	}
	return p.PostStart
}

var ContainerConfiguration_PreStop_DEFAULT []string

func (p *ContainerConfiguration) GetPreStop() (v []string) {
	if !p.IsSetPreStop() {
		return ContainerConfiguration_PreStop_DEFAULT
	}
	return p.PreStop
}

var ContainerConfiguration_LivenessProbe_DEFAULT *Probe

func (p *ContainerConfiguration) GetLivenessProbe() (v *Probe) {
	if !p.IsSetLivenessProbe() {
		return ContainerConfiguration_LivenessProbe_DEFAULT
	}
	return p.LivenessProbe
}

var ContainerConfiguration_ReadinessProbe_DEFAULT *Probe

func (p *ContainerConfiguration) GetReadinessProbe() (v *Probe) {
	if !p.IsSetReadinessProbe() {
		return ContainerConfiguration_ReadinessProbe_DEFAULT
	}
	return p.ReadinessProbe
}

var ContainerConfiguration_StartupProbe_DEFAULT *Probe

func (p *ContainerConfiguration) GetStartupProbe() (v *Probe) {
	if !p.IsSetStartupProbe() {
		return ContainerConfiguration_StartupProbe_DEFAULT
	}
	return p.StartupProbe
}

var ContainerConfiguration_GpuLimit_DEFAULT string = ""

func (p *ContainerConfiguration) GetGpuLimit() (v string) {
	if !p.IsSetGpuLimit() {
		return ContainerConfiguration_GpuLimit_DEFAULT
	}
	return p.GpuLimit
}
func (p *ContainerConfiguration) SetName(val string) {
	p.Name = val
}
func (p *ContainerConfiguration) SetImage(val string) {
	p.Image = val
}
func (p *ContainerConfiguration) SetImagePullPolicy(val string) {
	p.ImagePullPolicy = val
}
func (p *ContainerConfiguration) SetCpuRequest(val string) {
	p.CpuRequest = val
}
func (p *ContainerConfiguration) SetCpuLimit(val string) {
	p.CpuLimit = val
}
func (p *ContainerConfiguration) SetMemoryRequest(val string) {
	p.MemoryRequest = val
}
func (p *ContainerConfiguration) SetMemoryLimit(val string) {
	p.MemoryLimit = val
}
func (p *ContainerConfiguration) SetPrivileged(val bool) {
	p.Privileged = val
}
func (p *ContainerConfiguration) SetInitContainer(val bool) {
	p.InitContainer = val
}
func (p *ContainerConfiguration) SetPorts(val []*ContainerPort) {
	p.Ports = val
}
func (p *ContainerConfiguration) SetEnv(val []*Env) {
	p.Env = val
}
func (p *ContainerConfiguration) SetVolumeMounts(val []*VolumeMount) {
	p.VolumeMounts = val
}
func (p *ContainerConfiguration) SetCommand(val []string) {
	p.Command = val
}
func (p *ContainerConfiguration) SetArguments(val []string) {
	p.Arguments = val
}
func (p *ContainerConfiguration) SetPostStart(val []string) {
	p.PostStart = val
}
func (p *ContainerConfiguration) SetPreStop(val []string) {
	p.PreStop = val
}
func (p *ContainerConfiguration) SetLivenessProbe(val *Probe) {
	p.LivenessProbe = val
}
func (p *ContainerConfiguration) SetReadinessProbe(val *Probe) {
	p.ReadinessProbe = val
}
func (p *ContainerConfiguration) SetStartupProbe(val *Probe) {
	p.StartupProbe = val
}
func (p *ContainerConfiguration) SetGpuLimit(val string) {
	p.GpuLimit = val
}

var fieldIDToName_ContainerConfiguration = map[int16]string{
	1:  "Name",
	2:  "Image",
	3:  "ImagePullPolicy",
	4:  "CpuRequest",
	5:  "CpuLimit",
	6:  "MemoryRequest",
	7:  "MemoryLimit",
	8:  "Privileged",
	9:  "InitContainer",
	10: "Ports",
	11: "Env",
	13: "VolumeMounts",
	14: "Command",
	15: "Arguments",
	16: "PostStart",
	17: "PreStop",
	18: "LivenessProbe",
	19: "ReadinessProbe",
	20: "StartupProbe",
	21: "GpuLimit",
}

func (p *ContainerConfiguration) IsSetCpuRequest() bool {
	return p.CpuRequest != ContainerConfiguration_CpuRequest_DEFAULT
}

func (p *ContainerConfiguration) IsSetCpuLimit() bool {
	return p.CpuLimit != ContainerConfiguration_CpuLimit_DEFAULT
}

func (p *ContainerConfiguration) IsSetMemoryRequest() bool {
	return p.MemoryRequest != ContainerConfiguration_MemoryRequest_DEFAULT
}

func (p *ContainerConfiguration) IsSetMemoryLimit() bool {
	return p.MemoryLimit != ContainerConfiguration_MemoryLimit_DEFAULT
}

func (p *ContainerConfiguration) IsSetPorts() bool {
	return p.Ports != nil
}

func (p *ContainerConfiguration) IsSetEnv() bool {
	return p.Env != nil
}

func (p *ContainerConfiguration) IsSetVolumeMounts() bool {
	return p.VolumeMounts != nil
}

func (p *ContainerConfiguration) IsSetCommand() bool {
	return p.Command != nil
}

func (p *ContainerConfiguration) IsSetArguments() bool {
	return p.Arguments != nil
}

func (p *ContainerConfiguration) IsSetPostStart() bool {
	return p.PostStart != nil
}

func (p *ContainerConfiguration) IsSetPreStop() bool {
	return p.PreStop != nil
}

func (p *ContainerConfiguration) IsSetLivenessProbe() bool {
	return p.LivenessProbe != nil
}

func (p *ContainerConfiguration) IsSetReadinessProbe() bool {
	return p.ReadinessProbe != nil
}

func (p *ContainerConfiguration) IsSetStartupProbe() bool {
	return p.StartupProbe != nil
}

func (p *ContainerConfiguration) IsSetGpuLimit() bool {
	return p.GpuLimit != ContainerConfiguration_GpuLimit_DEFAULT
}

func (p *ContainerConfiguration) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetImage bool = false
	var issetImagePullPolicy bool = false
	var issetPrivileged bool = false
	var issetInitContainer bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetImagePullPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivileged = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetInitContainer = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetImagePullPolicy {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPrivileged {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetInitContainer {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContainerConfiguration[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ContainerConfiguration[fieldId]))
}

func (p *ContainerConfiguration) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Image = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ImagePullPolicy = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuRequest = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuLimit = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryRequest = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryLimit = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Privileged = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.InitContainer = v
	}
	return nil
}

func (p *ContainerConfiguration) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ports = make([]*ContainerPort, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerPort()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Ports = append(p.Ports, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Env = make([]*Env, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewEnv()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Env = append(p.Env, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.VolumeMounts = make([]*VolumeMount, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolumeMount()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.VolumeMounts = append(p.VolumeMounts, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Command = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Command = append(p.Command, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Arguments = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Arguments = append(p.Arguments, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PostStart = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PostStart = append(p.PostStart, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PreStop = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PreStop = append(p.PreStop, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField18(iprot thrift.TProtocol) error {
	p.LivenessProbe = NewProbe()
	if err := p.LivenessProbe.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField19(iprot thrift.TProtocol) error {
	p.ReadinessProbe = NewProbe()
	if err := p.ReadinessProbe.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField20(iprot thrift.TProtocol) error {
	p.StartupProbe = NewProbe()
	if err := p.StartupProbe.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ContainerConfiguration) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GpuLimit = v
	}
	return nil
}

func (p *ContainerConfiguration) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContainerConfiguration"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContainerConfiguration) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Image", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Image); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImagePullPolicy", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ImagePullPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuRequest() {
		if err = oprot.WriteFieldBegin("CpuRequest", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CpuRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpuLimit() {
		if err = oprot.WriteFieldBegin("CpuLimit", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CpuLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryRequest() {
		if err = oprot.WriteFieldBegin("MemoryRequest", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemoryRequest); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetMemoryLimit() {
		if err = oprot.WriteFieldBegin("MemoryLimit", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.MemoryLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Privileged", thrift.BOOL, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Privileged); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InitContainer", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.InitContainer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPorts() {
		if err = oprot.WriteFieldBegin("Ports", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ports)); err != nil {
			return err
		}
		for _, v := range p.Ports {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnv() {
		if err = oprot.WriteFieldBegin("Env", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Env)); err != nil {
			return err
		}
		for _, v := range p.Env {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVolumeMounts() {
		if err = oprot.WriteFieldBegin("VolumeMounts", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VolumeMounts)); err != nil {
			return err
		}
		for _, v := range p.VolumeMounts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommand() {
		if err = oprot.WriteFieldBegin("Command", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Command)); err != nil {
			return err
		}
		for _, v := range p.Command {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetArguments() {
		if err = oprot.WriteFieldBegin("Arguments", thrift.LIST, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Arguments)); err != nil {
			return err
		}
		for _, v := range p.Arguments {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPostStart() {
		if err = oprot.WriteFieldBegin("PostStart", thrift.LIST, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PostStart)); err != nil {
			return err
		}
		for _, v := range p.PostStart {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreStop() {
		if err = oprot.WriteFieldBegin("PreStop", thrift.LIST, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.PreStop)); err != nil {
			return err
		}
		for _, v := range p.PreStop {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetLivenessProbe() {
		if err = oprot.WriteFieldBegin("LivenessProbe", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LivenessProbe.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadinessProbe() {
		if err = oprot.WriteFieldBegin("ReadinessProbe", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ReadinessProbe.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartupProbe() {
		if err = oprot.WriteFieldBegin("StartupProbe", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StartupProbe.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *ContainerConfiguration) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetGpuLimit() {
		if err = oprot.WriteFieldBegin("GpuLimit", thrift.STRING, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.GpuLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *ContainerConfiguration) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContainerConfiguration(%+v)", *p)
}

func (p *ContainerConfiguration) DeepEqual(ano *ContainerConfiguration) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Image) {
		return false
	}
	if !p.Field3DeepEqual(ano.ImagePullPolicy) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpuRequest) {
		return false
	}
	if !p.Field5DeepEqual(ano.CpuLimit) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemoryRequest) {
		return false
	}
	if !p.Field7DeepEqual(ano.MemoryLimit) {
		return false
	}
	if !p.Field8DeepEqual(ano.Privileged) {
		return false
	}
	if !p.Field9DeepEqual(ano.InitContainer) {
		return false
	}
	if !p.Field10DeepEqual(ano.Ports) {
		return false
	}
	if !p.Field11DeepEqual(ano.Env) {
		return false
	}
	if !p.Field13DeepEqual(ano.VolumeMounts) {
		return false
	}
	if !p.Field14DeepEqual(ano.Command) {
		return false
	}
	if !p.Field15DeepEqual(ano.Arguments) {
		return false
	}
	if !p.Field16DeepEqual(ano.PostStart) {
		return false
	}
	if !p.Field17DeepEqual(ano.PreStop) {
		return false
	}
	if !p.Field18DeepEqual(ano.LivenessProbe) {
		return false
	}
	if !p.Field19DeepEqual(ano.ReadinessProbe) {
		return false
	}
	if !p.Field20DeepEqual(ano.StartupProbe) {
		return false
	}
	if !p.Field21DeepEqual(ano.GpuLimit) {
		return false
	}
	return true
}

func (p *ContainerConfiguration) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Image, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ImagePullPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CpuRequest, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CpuLimit, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field6DeepEqual(src string) bool {

	if strings.Compare(p.MemoryRequest, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field7DeepEqual(src string) bool {

	if strings.Compare(p.MemoryLimit, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field8DeepEqual(src bool) bool {

	if p.Privileged != src {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field9DeepEqual(src bool) bool {

	if p.InitContainer != src {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field10DeepEqual(src []*ContainerPort) bool {

	if len(p.Ports) != len(src) {
		return false
	}
	for i, v := range p.Ports {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field11DeepEqual(src []*Env) bool {

	if len(p.Env) != len(src) {
		return false
	}
	for i, v := range p.Env {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field13DeepEqual(src []*VolumeMount) bool {

	if len(p.VolumeMounts) != len(src) {
		return false
	}
	for i, v := range p.VolumeMounts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field14DeepEqual(src []string) bool {

	if len(p.Command) != len(src) {
		return false
	}
	for i, v := range p.Command {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field15DeepEqual(src []string) bool {

	if len(p.Arguments) != len(src) {
		return false
	}
	for i, v := range p.Arguments {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field16DeepEqual(src []string) bool {

	if len(p.PostStart) != len(src) {
		return false
	}
	for i, v := range p.PostStart {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field17DeepEqual(src []string) bool {

	if len(p.PreStop) != len(src) {
		return false
	}
	for i, v := range p.PreStop {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ContainerConfiguration) Field18DeepEqual(src *Probe) bool {

	if !p.LivenessProbe.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field19DeepEqual(src *Probe) bool {

	if !p.ReadinessProbe.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field20DeepEqual(src *Probe) bool {

	if !p.StartupProbe.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ContainerConfiguration) Field21DeepEqual(src string) bool {

	if strings.Compare(p.GpuLimit, src) != 0 {
		return false
	}
	return true
}

type Probe struct {
	Kind                string          `thrift:"Kind,1,required" json:"Kind"`
	Scheme              *string         `thrift:"Scheme,2" from:"httpGet.scheme"`
	HttpHeaders         []*KeyValuePair `thrift:"HttpHeaders,3" json:"HttpHeaders,omitempty"`
	Path                *string         `thrift:"Path,4" from:"httpGet.path"`
	Port                *int32          `thrift:"Port,5" from:"httpGet.port"`
	InitialDelaySeconds int32           `thrift:"InitialDelaySeconds,6,required" from:"initialDelaySeconds"`
	TimeoutSeconds      int32           `thrift:"TimeoutSeconds,7,required" from:"timeoutSeconds"`
	PeriodSeconds       int32           `thrift:"PeriodSeconds,8,required" from:"periodSeconds"`
	SuccessThreshold    int32           `thrift:"SuccessThreshold,9,required" from:"successThreshold"`
	FailureThreshold    int32           `thrift:"FailureThreshold,10,required" from:"failureThreshold"`
	Command             []string        `thrift:"Command,11" from:"exec.command"`
}

func NewProbe() *Probe {
	return &Probe{}
}

func (p *Probe) GetKind() (v string) {
	return p.Kind
}

var Probe_Scheme_DEFAULT string

func (p *Probe) GetScheme() (v string) {
	if !p.IsSetScheme() {
		return Probe_Scheme_DEFAULT
	}
	return *p.Scheme
}

var Probe_HttpHeaders_DEFAULT []*KeyValuePair

func (p *Probe) GetHttpHeaders() (v []*KeyValuePair) {
	if !p.IsSetHttpHeaders() {
		return Probe_HttpHeaders_DEFAULT
	}
	return p.HttpHeaders
}

var Probe_Path_DEFAULT string

func (p *Probe) GetPath() (v string) {
	if !p.IsSetPath() {
		return Probe_Path_DEFAULT
	}
	return *p.Path
}

var Probe_Port_DEFAULT int32

func (p *Probe) GetPort() (v int32) {
	if !p.IsSetPort() {
		return Probe_Port_DEFAULT
	}
	return *p.Port
}

func (p *Probe) GetInitialDelaySeconds() (v int32) {
	return p.InitialDelaySeconds
}

func (p *Probe) GetTimeoutSeconds() (v int32) {
	return p.TimeoutSeconds
}

func (p *Probe) GetPeriodSeconds() (v int32) {
	return p.PeriodSeconds
}

func (p *Probe) GetSuccessThreshold() (v int32) {
	return p.SuccessThreshold
}

func (p *Probe) GetFailureThreshold() (v int32) {
	return p.FailureThreshold
}

var Probe_Command_DEFAULT []string

func (p *Probe) GetCommand() (v []string) {
	if !p.IsSetCommand() {
		return Probe_Command_DEFAULT
	}
	return p.Command
}
func (p *Probe) SetKind(val string) {
	p.Kind = val
}
func (p *Probe) SetScheme(val *string) {
	p.Scheme = val
}
func (p *Probe) SetHttpHeaders(val []*KeyValuePair) {
	p.HttpHeaders = val
}
func (p *Probe) SetPath(val *string) {
	p.Path = val
}
func (p *Probe) SetPort(val *int32) {
	p.Port = val
}
func (p *Probe) SetInitialDelaySeconds(val int32) {
	p.InitialDelaySeconds = val
}
func (p *Probe) SetTimeoutSeconds(val int32) {
	p.TimeoutSeconds = val
}
func (p *Probe) SetPeriodSeconds(val int32) {
	p.PeriodSeconds = val
}
func (p *Probe) SetSuccessThreshold(val int32) {
	p.SuccessThreshold = val
}
func (p *Probe) SetFailureThreshold(val int32) {
	p.FailureThreshold = val
}
func (p *Probe) SetCommand(val []string) {
	p.Command = val
}

var fieldIDToName_Probe = map[int16]string{
	1:  "Kind",
	2:  "Scheme",
	3:  "HttpHeaders",
	4:  "Path",
	5:  "Port",
	6:  "InitialDelaySeconds",
	7:  "TimeoutSeconds",
	8:  "PeriodSeconds",
	9:  "SuccessThreshold",
	10: "FailureThreshold",
	11: "Command",
}

func (p *Probe) IsSetScheme() bool {
	return p.Scheme != nil
}

func (p *Probe) IsSetHttpHeaders() bool {
	return p.HttpHeaders != nil
}

func (p *Probe) IsSetPath() bool {
	return p.Path != nil
}

func (p *Probe) IsSetPort() bool {
	return p.Port != nil
}

func (p *Probe) IsSetCommand() bool {
	return p.Command != nil
}

func (p *Probe) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKind bool = false
	var issetInitialDelaySeconds bool = false
	var issetTimeoutSeconds bool = false
	var issetPeriodSeconds bool = false
	var issetSuccessThreshold bool = false
	var issetFailureThreshold bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetInitialDelaySeconds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimeoutSeconds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetPeriodSeconds = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetSuccessThreshold = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailureThreshold = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKind {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInitialDelaySeconds {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTimeoutSeconds {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetPeriodSeconds {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetSuccessThreshold {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetFailureThreshold {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Probe[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Probe[fieldId]))
}

func (p *Probe) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *Probe) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Scheme = &v
	}
	return nil
}

func (p *Probe) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.HttpHeaders = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.HttpHeaders = append(p.HttpHeaders, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Probe) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Path = &v
	}
	return nil
}

func (p *Probe) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Port = &v
	}
	return nil
}

func (p *Probe) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.InitialDelaySeconds = v
	}
	return nil
}

func (p *Probe) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TimeoutSeconds = v
	}
	return nil
}

func (p *Probe) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PeriodSeconds = v
	}
	return nil
}

func (p *Probe) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SuccessThreshold = v
	}
	return nil
}

func (p *Probe) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.FailureThreshold = v
	}
	return nil
}

func (p *Probe) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Command = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Command = append(p.Command, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Probe) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Probe"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Probe) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Probe) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheme() {
		if err = oprot.WriteFieldBegin("Scheme", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Scheme); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Probe) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHttpHeaders() {
		if err = oprot.WriteFieldBegin("HttpHeaders", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HttpHeaders)); err != nil {
			return err
		}
		for _, v := range p.HttpHeaders {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Probe) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("Path", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Probe) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err = oprot.WriteFieldBegin("Port", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Port); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Probe) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("InitialDelaySeconds", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.InitialDelaySeconds); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Probe) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TimeoutSeconds", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TimeoutSeconds); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Probe) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PeriodSeconds", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PeriodSeconds); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Probe) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SuccessThreshold", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.SuccessThreshold); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Probe) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FailureThreshold", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.FailureThreshold); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Probe) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommand() {
		if err = oprot.WriteFieldBegin("Command", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Command)); err != nil {
			return err
		}
		for _, v := range p.Command {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Probe) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Probe(%+v)", *p)
}

func (p *Probe) DeepEqual(ano *Probe) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field2DeepEqual(ano.Scheme) {
		return false
	}
	if !p.Field3DeepEqual(ano.HttpHeaders) {
		return false
	}
	if !p.Field4DeepEqual(ano.Path) {
		return false
	}
	if !p.Field5DeepEqual(ano.Port) {
		return false
	}
	if !p.Field6DeepEqual(ano.InitialDelaySeconds) {
		return false
	}
	if !p.Field7DeepEqual(ano.TimeoutSeconds) {
		return false
	}
	if !p.Field8DeepEqual(ano.PeriodSeconds) {
		return false
	}
	if !p.Field9DeepEqual(ano.SuccessThreshold) {
		return false
	}
	if !p.Field10DeepEqual(ano.FailureThreshold) {
		return false
	}
	if !p.Field11DeepEqual(ano.Command) {
		return false
	}
	return true
}

func (p *Probe) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *Probe) Field2DeepEqual(src *string) bool {

	if p.Scheme == src {
		return true
	} else if p.Scheme == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Scheme, *src) != 0 {
		return false
	}
	return true
}
func (p *Probe) Field3DeepEqual(src []*KeyValuePair) bool {

	if len(p.HttpHeaders) != len(src) {
		return false
	}
	for i, v := range p.HttpHeaders {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Probe) Field4DeepEqual(src *string) bool {

	if p.Path == src {
		return true
	} else if p.Path == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Path, *src) != 0 {
		return false
	}
	return true
}
func (p *Probe) Field5DeepEqual(src *int32) bool {

	if p.Port == src {
		return true
	} else if p.Port == nil || src == nil {
		return false
	}
	if *p.Port != *src {
		return false
	}
	return true
}
func (p *Probe) Field6DeepEqual(src int32) bool {

	if p.InitialDelaySeconds != src {
		return false
	}
	return true
}
func (p *Probe) Field7DeepEqual(src int32) bool {

	if p.TimeoutSeconds != src {
		return false
	}
	return true
}
func (p *Probe) Field8DeepEqual(src int32) bool {

	if p.PeriodSeconds != src {
		return false
	}
	return true
}
func (p *Probe) Field9DeepEqual(src int32) bool {

	if p.SuccessThreshold != src {
		return false
	}
	return true
}
func (p *Probe) Field10DeepEqual(src int32) bool {

	if p.FailureThreshold != src {
		return false
	}
	return true
}
func (p *Probe) Field11DeepEqual(src []string) bool {

	if len(p.Command) != len(src) {
		return false
	}
	for i, v := range p.Command {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type VolumeMount struct {
	Name      string `thrift:"Name,1,required" json:"Name"`
	MountPath string `thrift:"MountPath,2,required" json:"MountPath"`
	ReadOnly  bool   `thrift:"ReadOnly,3,required" json:"ReadOnly"`
}

func NewVolumeMount() *VolumeMount {
	return &VolumeMount{}
}

func (p *VolumeMount) GetName() (v string) {
	return p.Name
}

func (p *VolumeMount) GetMountPath() (v string) {
	return p.MountPath
}

func (p *VolumeMount) GetReadOnly() (v bool) {
	return p.ReadOnly
}
func (p *VolumeMount) SetName(val string) {
	p.Name = val
}
func (p *VolumeMount) SetMountPath(val string) {
	p.MountPath = val
}
func (p *VolumeMount) SetReadOnly(val bool) {
	p.ReadOnly = val
}

var fieldIDToName_VolumeMount = map[int16]string{
	1: "Name",
	2: "MountPath",
	3: "ReadOnly",
}

func (p *VolumeMount) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetMountPath bool = false
	var issetReadOnly bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetMountPath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetReadOnly = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMountPath {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetReadOnly {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VolumeMount[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_VolumeMount[fieldId]))
}

func (p *VolumeMount) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *VolumeMount) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MountPath = v
	}
	return nil
}

func (p *VolumeMount) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.ReadOnly = v
	}
	return nil
}

func (p *VolumeMount) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VolumeMount"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VolumeMount) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VolumeMount) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MountPath", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MountPath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VolumeMount) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReadOnly", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.ReadOnly); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VolumeMount) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VolumeMount(%+v)", *p)
}

func (p *VolumeMount) DeepEqual(ano *VolumeMount) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.MountPath) {
		return false
	}
	if !p.Field3DeepEqual(ano.ReadOnly) {
		return false
	}
	return true
}

func (p *VolumeMount) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeMount) Field2DeepEqual(src string) bool {

	if strings.Compare(p.MountPath, src) != 0 {
		return false
	}
	return true
}
func (p *VolumeMount) Field3DeepEqual(src bool) bool {

	if p.ReadOnly != src {
		return false
	}
	return true
}

type Volume struct {
	Kind       string   `thrift:"Kind,1,required" json:"Kind"`
	Name       string   `thrift:"Name,2,required" json:"Name"`
	SourceName *string  `thrift:"SourceName,3" json:"SourceName,omitempty"`
	ConfigKeys []string `thrift:"ConfigKeys,4" json:"ConfigKeys,omitempty"`
	Path       string   `thrift:"Path,5" json:"Path,omitempty"`
	Type       string   `thrift:"Type,6" validate:"len=0|eq=DirectoryOrCreate|eq=Directory|eq=FileOrCreate|eq=File|eq=Socket|eq=CharDevice|eq=BlockDevice"`
}

func NewVolume() *Volume {
	return &Volume{

		Path: "",
		Type: "DirectoryOrCreate",
	}
}

func (p *Volume) GetKind() (v string) {
	return p.Kind
}

func (p *Volume) GetName() (v string) {
	return p.Name
}

var Volume_SourceName_DEFAULT string

func (p *Volume) GetSourceName() (v string) {
	if !p.IsSetSourceName() {
		return Volume_SourceName_DEFAULT
	}
	return *p.SourceName
}

var Volume_ConfigKeys_DEFAULT []string

func (p *Volume) GetConfigKeys() (v []string) {
	if !p.IsSetConfigKeys() {
		return Volume_ConfigKeys_DEFAULT
	}
	return p.ConfigKeys
}

var Volume_Path_DEFAULT string = ""

func (p *Volume) GetPath() (v string) {
	if !p.IsSetPath() {
		return Volume_Path_DEFAULT
	}
	return p.Path
}

var Volume_Type_DEFAULT string = "DirectoryOrCreate"

func (p *Volume) GetType() (v string) {
	if !p.IsSetType() {
		return Volume_Type_DEFAULT
	}
	return p.Type
}
func (p *Volume) SetKind(val string) {
	p.Kind = val
}
func (p *Volume) SetName(val string) {
	p.Name = val
}
func (p *Volume) SetSourceName(val *string) {
	p.SourceName = val
}
func (p *Volume) SetConfigKeys(val []string) {
	p.ConfigKeys = val
}
func (p *Volume) SetPath(val string) {
	p.Path = val
}
func (p *Volume) SetType(val string) {
	p.Type = val
}

var fieldIDToName_Volume = map[int16]string{
	1: "Kind",
	2: "Name",
	3: "SourceName",
	4: "ConfigKeys",
	5: "Path",
	6: "Type",
}

func (p *Volume) IsSetSourceName() bool {
	return p.SourceName != nil
}

func (p *Volume) IsSetConfigKeys() bool {
	return p.ConfigKeys != nil
}

func (p *Volume) IsSetPath() bool {
	return p.Path != Volume_Path_DEFAULT
}

func (p *Volume) IsSetType() bool {
	return p.Type != Volume_Type_DEFAULT
}

func (p *Volume) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKind bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKind {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Volume[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Volume[fieldId]))
}

func (p *Volume) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *Volume) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Volume) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SourceName = &v
	}
	return nil
}

func (p *Volume) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ConfigKeys = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ConfigKeys = append(p.ConfigKeys, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *Volume) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Path = v
	}
	return nil
}

func (p *Volume) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *Volume) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Volume"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Volume) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Volume) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Volume) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceName() {
		if err = oprot.WriteFieldBegin("SourceName", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Volume) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigKeys() {
		if err = oprot.WriteFieldBegin("ConfigKeys", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ConfigKeys)); err != nil {
			return err
		}
		for _, v := range p.ConfigKeys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Volume) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err = oprot.WriteFieldBegin("Path", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Path); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Volume) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Volume) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Volume(%+v)", *p)
}

func (p *Volume) DeepEqual(ano *Volume) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.SourceName) {
		return false
	}
	if !p.Field4DeepEqual(ano.ConfigKeys) {
		return false
	}
	if !p.Field5DeepEqual(ano.Path) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *Volume) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *Volume) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Volume) Field3DeepEqual(src *string) bool {

	if p.SourceName == src {
		return true
	} else if p.SourceName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceName, *src) != 0 {
		return false
	}
	return true
}
func (p *Volume) Field4DeepEqual(src []string) bool {

	if len(p.ConfigKeys) != len(src) {
		return false
	}
	for i, v := range p.ConfigKeys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Volume) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Path, src) != 0 {
		return false
	}
	return true
}
func (p *Volume) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}

type Env struct {
	Kind       string  `thrift:"Kind,1,required" json:"Kind"`
	Name       *string `thrift:"Name,2" json:"Name,omitempty"`
	Value      *string `thrift:"Value,3" json:"Value,omitempty"`
	FieldPath  *string `thrift:"FieldPath,4" json:"FieldPath,omitempty"`
	Resource   *string `thrift:"Resource,5" json:"Resource,omitempty"`
	ConfigName *string `thrift:"ConfigName,6" json:"ConfigName,omitempty"`
	ConfigKey  *string `thrift:"ConfigKey,7" json:"ConfigKey,omitempty"`
}

func NewEnv() *Env {
	return &Env{}
}

func (p *Env) GetKind() (v string) {
	return p.Kind
}

var Env_Name_DEFAULT string

func (p *Env) GetName() (v string) {
	if !p.IsSetName() {
		return Env_Name_DEFAULT
	}
	return *p.Name
}

var Env_Value_DEFAULT string

func (p *Env) GetValue() (v string) {
	if !p.IsSetValue() {
		return Env_Value_DEFAULT
	}
	return *p.Value
}

var Env_FieldPath_DEFAULT string

func (p *Env) GetFieldPath() (v string) {
	if !p.IsSetFieldPath() {
		return Env_FieldPath_DEFAULT
	}
	return *p.FieldPath
}

var Env_Resource_DEFAULT string

func (p *Env) GetResource() (v string) {
	if !p.IsSetResource() {
		return Env_Resource_DEFAULT
	}
	return *p.Resource
}

var Env_ConfigName_DEFAULT string

func (p *Env) GetConfigName() (v string) {
	if !p.IsSetConfigName() {
		return Env_ConfigName_DEFAULT
	}
	return *p.ConfigName
}

var Env_ConfigKey_DEFAULT string

func (p *Env) GetConfigKey() (v string) {
	if !p.IsSetConfigKey() {
		return Env_ConfigKey_DEFAULT
	}
	return *p.ConfigKey
}
func (p *Env) SetKind(val string) {
	p.Kind = val
}
func (p *Env) SetName(val *string) {
	p.Name = val
}
func (p *Env) SetValue(val *string) {
	p.Value = val
}
func (p *Env) SetFieldPath(val *string) {
	p.FieldPath = val
}
func (p *Env) SetResource(val *string) {
	p.Resource = val
}
func (p *Env) SetConfigName(val *string) {
	p.ConfigName = val
}
func (p *Env) SetConfigKey(val *string) {
	p.ConfigKey = val
}

var fieldIDToName_Env = map[int16]string{
	1: "Kind",
	2: "Name",
	3: "Value",
	4: "FieldPath",
	5: "Resource",
	6: "ConfigName",
	7: "ConfigKey",
}

func (p *Env) IsSetName() bool {
	return p.Name != nil
}

func (p *Env) IsSetValue() bool {
	return p.Value != nil
}

func (p *Env) IsSetFieldPath() bool {
	return p.FieldPath != nil
}

func (p *Env) IsSetResource() bool {
	return p.Resource != nil
}

func (p *Env) IsSetConfigName() bool {
	return p.ConfigName != nil
}

func (p *Env) IsSetConfigKey() bool {
	return p.ConfigKey != nil
}

func (p *Env) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetKind bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetKind {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Env[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Env[fieldId]))
}

func (p *Env) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *Env) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Env) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Value = &v
	}
	return nil
}

func (p *Env) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FieldPath = &v
	}
	return nil
}

func (p *Env) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Resource = &v
	}
	return nil
}

func (p *Env) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ConfigName = &v
	}
	return nil
}

func (p *Env) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ConfigKey = &v
	}
	return nil
}

func (p *Env) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Env"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Env) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Env) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Env) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("Value", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Env) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldPath() {
		if err = oprot.WriteFieldBegin("FieldPath", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FieldPath); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Env) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err = oprot.WriteFieldBegin("Resource", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Resource); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Env) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigName() {
		if err = oprot.WriteFieldBegin("ConfigName", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConfigName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Env) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetConfigKey() {
		if err = oprot.WriteFieldBegin("ConfigKey", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConfigKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Env) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Env(%+v)", *p)
}

func (p *Env) DeepEqual(ano *Env) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Value) {
		return false
	}
	if !p.Field4DeepEqual(ano.FieldPath) {
		return false
	}
	if !p.Field5DeepEqual(ano.Resource) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConfigName) {
		return false
	}
	if !p.Field7DeepEqual(ano.ConfigKey) {
		return false
	}
	return true
}

func (p *Env) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *Env) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Env) Field3DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *Env) Field4DeepEqual(src *string) bool {

	if p.FieldPath == src {
		return true
	} else if p.FieldPath == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FieldPath, *src) != 0 {
		return false
	}
	return true
}
func (p *Env) Field5DeepEqual(src *string) bool {

	if p.Resource == src {
		return true
	} else if p.Resource == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Resource, *src) != 0 {
		return false
	}
	return true
}
func (p *Env) Field6DeepEqual(src *string) bool {

	if p.ConfigName == src {
		return true
	} else if p.ConfigName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ConfigName, *src) != 0 {
		return false
	}
	return true
}
func (p *Env) Field7DeepEqual(src *string) bool {

	if p.ConfigKey == src {
		return true
	} else if p.ConfigKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ConfigKey, *src) != 0 {
		return false
	}
	return true
}

type ContainerPort struct {
	Protocol      string `thrift:"Protocol,1,required" json:"Protocol"`
	ContainerPort int32  `thrift:"ContainerPort,2,required" json:"ContainerPort"`
}

func NewContainerPort() *ContainerPort {
	return &ContainerPort{}
}

func (p *ContainerPort) GetProtocol() (v string) {
	return p.Protocol
}

func (p *ContainerPort) GetContainerPort() (v int32) {
	return p.ContainerPort
}
func (p *ContainerPort) SetProtocol(val string) {
	p.Protocol = val
}
func (p *ContainerPort) SetContainerPort(val int32) {
	p.ContainerPort = val
}

var fieldIDToName_ContainerPort = map[int16]string{
	1: "Protocol",
	2: "ContainerPort",
}

func (p *ContainerPort) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetProtocol bool = false
	var issetContainerPort bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocol = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainerPort = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetProtocol {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetContainerPort {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContainerPort[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ContainerPort[fieldId]))
}

func (p *ContainerPort) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Protocol = v
	}
	return nil
}

func (p *ContainerPort) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ContainerPort = v
	}
	return nil
}

func (p *ContainerPort) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContainerPort"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContainerPort) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Protocol", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Protocol); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContainerPort) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ContainerPort", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ContainerPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContainerPort) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContainerPort(%+v)", *p)
}

func (p *ContainerPort) DeepEqual(ano *ContainerPort) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Protocol) {
		return false
	}
	if !p.Field2DeepEqual(ano.ContainerPort) {
		return false
	}
	return true
}

func (p *ContainerPort) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Protocol, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerPort) Field2DeepEqual(src int32) bool {

	if p.ContainerPort != src {
		return false
	}
	return true
}

type PodItem struct {
	Name        string           `thrift:"Name,1,required" from:"metadata.name"`
	Status      string           `thrift:"Status,2,required" json:"Status"`
	NodeIp      string           `thrift:"NodeIp,3,required" from:"status.hostIP"`
	PodIp       string           `thrift:"PodIp,4,required" from:"status.podIP"`
	Restart     int32            `thrift:"Restart,5,required" json:"Restart"`
	RunningTime string           `thrift:"RunningTime,6,required" json:"RunningTime"`
	CreateTime  string           `thrift:"CreateTime,7,required" from:"metadata.creationTimestamp"`
	Containers  []*ContainerItem `thrift:"Containers,8,required" json:"Containers"`
	Namespace   string           `thrift:"Namespace,9,required" from:"metadata.namespace"`
	Labels      []*KeyValuePair  `thrift:"Labels,10,required" from:"metadata.labels"`
	Description string           `thrift:"Description,11,required" from:"metadata.annotations.<description>"`
	Conditions  []*PodCondition  `thrift:"Conditions,12,required" json:"Conditions"`
	IsVci       bool             `thrift:"IsVci,100,required" json:"IsVci"`
}

func NewPodItem() *PodItem {
	return &PodItem{

		Name:        "",
		NodeIp:      "",
		PodIp:       "",
		CreateTime:  "",
		Namespace:   "",
		Description: "",
	}
}

func (p *PodItem) GetName() (v string) {
	return p.Name
}

func (p *PodItem) GetStatus() (v string) {
	return p.Status
}

func (p *PodItem) GetNodeIp() (v string) {
	return p.NodeIp
}

func (p *PodItem) GetPodIp() (v string) {
	return p.PodIp
}

func (p *PodItem) GetRestart() (v int32) {
	return p.Restart
}

func (p *PodItem) GetRunningTime() (v string) {
	return p.RunningTime
}

func (p *PodItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *PodItem) GetContainers() (v []*ContainerItem) {
	return p.Containers
}

func (p *PodItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *PodItem) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

func (p *PodItem) GetDescription() (v string) {
	return p.Description
}

func (p *PodItem) GetConditions() (v []*PodCondition) {
	return p.Conditions
}

func (p *PodItem) GetIsVci() (v bool) {
	return p.IsVci
}
func (p *PodItem) SetName(val string) {
	p.Name = val
}
func (p *PodItem) SetStatus(val string) {
	p.Status = val
}
func (p *PodItem) SetNodeIp(val string) {
	p.NodeIp = val
}
func (p *PodItem) SetPodIp(val string) {
	p.PodIp = val
}
func (p *PodItem) SetRestart(val int32) {
	p.Restart = val
}
func (p *PodItem) SetRunningTime(val string) {
	p.RunningTime = val
}
func (p *PodItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *PodItem) SetContainers(val []*ContainerItem) {
	p.Containers = val
}
func (p *PodItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *PodItem) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *PodItem) SetDescription(val string) {
	p.Description = val
}
func (p *PodItem) SetConditions(val []*PodCondition) {
	p.Conditions = val
}
func (p *PodItem) SetIsVci(val bool) {
	p.IsVci = val
}

var fieldIDToName_PodItem = map[int16]string{
	1:   "Name",
	2:   "Status",
	3:   "NodeIp",
	4:   "PodIp",
	5:   "Restart",
	6:   "RunningTime",
	7:   "CreateTime",
	8:   "Containers",
	9:   "Namespace",
	10:  "Labels",
	11:  "Description",
	12:  "Conditions",
	100: "IsVci",
}

func (p *PodItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetStatus bool = false
	var issetNodeIp bool = false
	var issetPodIp bool = false
	var issetRestart bool = false
	var issetRunningTime bool = false
	var issetCreateTime bool = false
	var issetContainers bool = false
	var issetNamespace bool = false
	var issetLabels bool = false
	var issetDescription bool = false
	var issetConditions bool = false
	var issetIsVci bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeIp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodIp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestart = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunningTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetConditions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsVci = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNodeIp {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPodIp {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetRestart {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetRunningTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetConditions {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetIsVci {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PodItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_PodItem[fieldId]))
}

func (p *PodItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PodItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *PodItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeIp = v
	}
	return nil
}

func (p *PodItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodIp = v
	}
	return nil
}

func (p *PodItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Restart = v
	}
	return nil
}

func (p *PodItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RunningTime = v
	}
	return nil
}

func (p *PodItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *PodItem) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *PodItem) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *PodItem) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Conditions = make([]*PodCondition, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPodCondition()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Conditions = append(p.Conditions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PodItem) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = v
	}
	return nil
}

func (p *PodItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PodItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PodItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PodItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PodItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeIp", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodeIp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PodItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodIp", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PodIp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PodItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Restart", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Restart); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PodItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunningTime", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RunningTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PodItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *PodItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PodItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *PodItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *PodItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *PodItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Conditions", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Conditions)); err != nil {
		return err
	}
	for _, v := range p.Conditions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *PodItem) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsVci); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *PodItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PodItem(%+v)", *p)
}

func (p *PodItem) DeepEqual(ano *PodItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field3DeepEqual(ano.NodeIp) {
		return false
	}
	if !p.Field4DeepEqual(ano.PodIp) {
		return false
	}
	if !p.Field5DeepEqual(ano.Restart) {
		return false
	}
	if !p.Field6DeepEqual(ano.RunningTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field9DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field10DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field11DeepEqual(ano.Description) {
		return false
	}
	if !p.Field12DeepEqual(ano.Conditions) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	return true
}

func (p *PodItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.NodeIp, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PodIp, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field5DeepEqual(src int32) bool {

	if p.Restart != src {
		return false
	}
	return true
}
func (p *PodItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.RunningTime, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field7DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field8DeepEqual(src []*ContainerItem) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodItem) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field10DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodItem) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *PodItem) Field12DeepEqual(src []*PodCondition) bool {

	if len(p.Conditions) != len(src) {
		return false
	}
	for i, v := range p.Conditions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PodItem) Field100DeepEqual(src bool) bool {

	if p.IsVci != src {
		return false
	}
	return true
}

type ContainerItem struct {
	Name          string           `thrift:"Name,1,required" json:"Name"`
	State         string           `thrift:"State,2,required" json:"State"`
	Image         string           `thrift:"Image,3,required" json:"Image"`
	CpuRequest    string           `thrift:"CpuRequest,4,required" json:"CpuRequest"`
	CpuLimit      string           `thrift:"CpuLimit,5,required" json:"CpuLimit"`
	MemoryRequest string           `thrift:"MemoryRequest,6,required" json:"MemoryRequest"`
	MemoryLimit   string           `thrift:"MemoryLimit,7,required" json:"MemoryLimit"`
	RestartCount  int32            `thrift:"RestartCount,8,required" json:"RestartCount"`
	RunningTime   *string          `thrift:"RunningTime,9" json:"RunningTime,omitempty"`
	StartTime     *string          `thrift:"StartTime,10" json:"StartTime,omitempty"`
	ExitCode      *int32           `thrift:"ExitCode,11" json:"ExitCode,omitempty"`
	Reason        *string          `thrift:"Reason,12" json:"Reason,omitempty"`
	FinishTime    *string          `thrift:"FinishTime,13" json:"FinishTime,omitempty"`
	GpuLimit      string           `thrift:"GpuLimit,14,required" json:"GpuLimit"`
	Ports         []*ContainerPort `thrift:"Ports,15,required" json:"Ports"`
}

func NewContainerItem() *ContainerItem {
	return &ContainerItem{}
}

func (p *ContainerItem) GetName() (v string) {
	return p.Name
}

func (p *ContainerItem) GetState() (v string) {
	return p.State
}

func (p *ContainerItem) GetImage() (v string) {
	return p.Image
}

func (p *ContainerItem) GetCpuRequest() (v string) {
	return p.CpuRequest
}

func (p *ContainerItem) GetCpuLimit() (v string) {
	return p.CpuLimit
}

func (p *ContainerItem) GetMemoryRequest() (v string) {
	return p.MemoryRequest
}

func (p *ContainerItem) GetMemoryLimit() (v string) {
	return p.MemoryLimit
}

func (p *ContainerItem) GetRestartCount() (v int32) {
	return p.RestartCount
}

var ContainerItem_RunningTime_DEFAULT string

func (p *ContainerItem) GetRunningTime() (v string) {
	if !p.IsSetRunningTime() {
		return ContainerItem_RunningTime_DEFAULT
	}
	return *p.RunningTime
}

var ContainerItem_StartTime_DEFAULT string

func (p *ContainerItem) GetStartTime() (v string) {
	if !p.IsSetStartTime() {
		return ContainerItem_StartTime_DEFAULT
	}
	return *p.StartTime
}

var ContainerItem_ExitCode_DEFAULT int32

func (p *ContainerItem) GetExitCode() (v int32) {
	if !p.IsSetExitCode() {
		return ContainerItem_ExitCode_DEFAULT
	}
	return *p.ExitCode
}

var ContainerItem_Reason_DEFAULT string

func (p *ContainerItem) GetReason() (v string) {
	if !p.IsSetReason() {
		return ContainerItem_Reason_DEFAULT
	}
	return *p.Reason
}

var ContainerItem_FinishTime_DEFAULT string

func (p *ContainerItem) GetFinishTime() (v string) {
	if !p.IsSetFinishTime() {
		return ContainerItem_FinishTime_DEFAULT
	}
	return *p.FinishTime
}

func (p *ContainerItem) GetGpuLimit() (v string) {
	return p.GpuLimit
}

func (p *ContainerItem) GetPorts() (v []*ContainerPort) {
	return p.Ports
}
func (p *ContainerItem) SetName(val string) {
	p.Name = val
}
func (p *ContainerItem) SetState(val string) {
	p.State = val
}
func (p *ContainerItem) SetImage(val string) {
	p.Image = val
}
func (p *ContainerItem) SetCpuRequest(val string) {
	p.CpuRequest = val
}
func (p *ContainerItem) SetCpuLimit(val string) {
	p.CpuLimit = val
}
func (p *ContainerItem) SetMemoryRequest(val string) {
	p.MemoryRequest = val
}
func (p *ContainerItem) SetMemoryLimit(val string) {
	p.MemoryLimit = val
}
func (p *ContainerItem) SetRestartCount(val int32) {
	p.RestartCount = val
}
func (p *ContainerItem) SetRunningTime(val *string) {
	p.RunningTime = val
}
func (p *ContainerItem) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *ContainerItem) SetExitCode(val *int32) {
	p.ExitCode = val
}
func (p *ContainerItem) SetReason(val *string) {
	p.Reason = val
}
func (p *ContainerItem) SetFinishTime(val *string) {
	p.FinishTime = val
}
func (p *ContainerItem) SetGpuLimit(val string) {
	p.GpuLimit = val
}
func (p *ContainerItem) SetPorts(val []*ContainerPort) {
	p.Ports = val
}

var fieldIDToName_ContainerItem = map[int16]string{
	1:  "Name",
	2:  "State",
	3:  "Image",
	4:  "CpuRequest",
	5:  "CpuLimit",
	6:  "MemoryRequest",
	7:  "MemoryLimit",
	8:  "RestartCount",
	9:  "RunningTime",
	10: "StartTime",
	11: "ExitCode",
	12: "Reason",
	13: "FinishTime",
	14: "GpuLimit",
	15: "Ports",
}

func (p *ContainerItem) IsSetRunningTime() bool {
	return p.RunningTime != nil
}

func (p *ContainerItem) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *ContainerItem) IsSetExitCode() bool {
	return p.ExitCode != nil
}

func (p *ContainerItem) IsSetReason() bool {
	return p.Reason != nil
}

func (p *ContainerItem) IsSetFinishTime() bool {
	return p.FinishTime != nil
}

func (p *ContainerItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetState bool = false
	var issetImage bool = false
	var issetCpuRequest bool = false
	var issetCpuLimit bool = false
	var issetMemoryRequest bool = false
	var issetMemoryLimit bool = false
	var issetRestartCount bool = false
	var issetGpuLimit bool = false
	var issetPorts bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetState = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCpuRequest = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCpuLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetMemoryRequest = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetMemoryLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestartCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetGpuLimit = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetPorts = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetState {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCpuRequest {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCpuLimit {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetMemoryRequest {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetMemoryLimit {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetRestartCount {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetGpuLimit {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetPorts {
		fieldId = 15
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContainerItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ContainerItem[fieldId]))
}

func (p *ContainerItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ContainerItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.State = v
	}
	return nil
}

func (p *ContainerItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Image = v
	}
	return nil
}

func (p *ContainerItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuRequest = v
	}
	return nil
}

func (p *ContainerItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CpuLimit = v
	}
	return nil
}

func (p *ContainerItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryRequest = v
	}
	return nil
}

func (p *ContainerItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MemoryLimit = v
	}
	return nil
}

func (p *ContainerItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.RestartCount = v
	}
	return nil
}

func (p *ContainerItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RunningTime = &v
	}
	return nil
}

func (p *ContainerItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = &v
	}
	return nil
}

func (p *ContainerItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ExitCode = &v
	}
	return nil
}

func (p *ContainerItem) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Reason = &v
	}
	return nil
}

func (p *ContainerItem) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FinishTime = &v
	}
	return nil
}

func (p *ContainerItem) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GpuLimit = v
	}
	return nil
}

func (p *ContainerItem) ReadField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ports = make([]*ContainerPort, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerPort()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Ports = append(p.Ports, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ContainerItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContainerItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContainerItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ContainerItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("State", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ContainerItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Image", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Image); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContainerItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CpuRequest", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CpuRequest); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContainerItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CpuLimit", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CpuLimit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ContainerItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemoryRequest", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemoryRequest); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ContainerItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("MemoryLimit", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MemoryLimit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ContainerItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RestartCount", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RestartCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ContainerItem) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunningTime() {
		if err = oprot.WriteFieldBegin("RunningTime", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RunningTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ContainerItem) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ContainerItem) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetExitCode() {
		if err = oprot.WriteFieldBegin("ExitCode", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ExitCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ContainerItem) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetReason() {
		if err = oprot.WriteFieldBegin("Reason", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *ContainerItem) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishTime() {
		if err = oprot.WriteFieldBegin("FinishTime", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FinishTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *ContainerItem) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("GpuLimit", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GpuLimit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *ContainerItem) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Ports", thrift.LIST, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ports)); err != nil {
		return err
	}
	for _, v := range p.Ports {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *ContainerItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContainerItem(%+v)", *p)
}

func (p *ContainerItem) DeepEqual(ano *ContainerItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.State) {
		return false
	}
	if !p.Field3DeepEqual(ano.Image) {
		return false
	}
	if !p.Field4DeepEqual(ano.CpuRequest) {
		return false
	}
	if !p.Field5DeepEqual(ano.CpuLimit) {
		return false
	}
	if !p.Field6DeepEqual(ano.MemoryRequest) {
		return false
	}
	if !p.Field7DeepEqual(ano.MemoryLimit) {
		return false
	}
	if !p.Field8DeepEqual(ano.RestartCount) {
		return false
	}
	if !p.Field9DeepEqual(ano.RunningTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.ExitCode) {
		return false
	}
	if !p.Field12DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field13DeepEqual(ano.FinishTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.GpuLimit) {
		return false
	}
	if !p.Field15DeepEqual(ano.Ports) {
		return false
	}
	return true
}

func (p *ContainerItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Image, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CpuRequest, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CpuLimit, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.MemoryRequest, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field7DeepEqual(src string) bool {

	if strings.Compare(p.MemoryLimit, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field8DeepEqual(src int32) bool {

	if p.RestartCount != src {
		return false
	}
	return true
}
func (p *ContainerItem) Field9DeepEqual(src *string) bool {

	if p.RunningTime == src {
		return true
	} else if p.RunningTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RunningTime, *src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field10DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field11DeepEqual(src *int32) bool {

	if p.ExitCode == src {
		return true
	} else if p.ExitCode == nil || src == nil {
		return false
	}
	if *p.ExitCode != *src {
		return false
	}
	return true
}
func (p *ContainerItem) Field12DeepEqual(src *string) bool {

	if p.Reason == src {
		return true
	} else if p.Reason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reason, *src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field13DeepEqual(src *string) bool {

	if p.FinishTime == src {
		return true
	} else if p.FinishTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FinishTime, *src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field14DeepEqual(src string) bool {

	if strings.Compare(p.GpuLimit, src) != 0 {
		return false
	}
	return true
}
func (p *ContainerItem) Field15DeepEqual(src []*ContainerPort) bool {

	if len(p.Ports) != len(src) {
		return false
	}
	for i, v := range p.Ports {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type LiteContainerItem struct {
	Name  string `thrift:"Name,1,required" json:"Name"`
	Image string `thrift:"Image,2,required" json:"Image"`
}

func NewLiteContainerItem() *LiteContainerItem {
	return &LiteContainerItem{}
}

func (p *LiteContainerItem) GetName() (v string) {
	return p.Name
}

func (p *LiteContainerItem) GetImage() (v string) {
	return p.Image
}
func (p *LiteContainerItem) SetName(val string) {
	p.Name = val
}
func (p *LiteContainerItem) SetImage(val string) {
	p.Image = val
}

var fieldIDToName_LiteContainerItem = map[int16]string{
	1: "Name",
	2: "Image",
}

func (p *LiteContainerItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetImage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetImage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetImage {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiteContainerItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_LiteContainerItem[fieldId]))
}

func (p *LiteContainerItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *LiteContainerItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Image = v
	}
	return nil
}

func (p *LiteContainerItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LiteContainerItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiteContainerItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LiteContainerItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Image", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Image); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LiteContainerItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiteContainerItem(%+v)", *p)
}

func (p *LiteContainerItem) DeepEqual(ano *LiteContainerItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Image) {
		return false
	}
	return true
}

func (p *LiteContainerItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *LiteContainerItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Image, src) != 0 {
		return false
	}
	return true
}

type GetPodResponse struct {
	ClusterId   string           `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace   string           `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name        string           `thrift:"Name,3,required" from:"metadata.name"`
	Labels      []*KeyValuePair  `thrift:"Labels,4,required" from:"metadata.labels"`
	CreateTime  string           `thrift:"CreateTime,5,required" from:"metadata.creationTimestamp"`
	Status      string           `thrift:"Status,6,required" json:"Status"`
	Phase       string           `thrift:"Phase,7,required" from:"status.phase"`
	NodeIp      string           `thrift:"NodeIp,8,required" from:"status.hostIP"`
	PodIp       string           `thrift:"PodIp,9,required" from:"status.podIP"`
	Restart     int32            `thrift:"Restart,10,required" json:"Restart"`
	Conditions  []*PodCondition  `thrift:"Conditions,11,required" json:"Conditions"`
	Volumes     []*Volume        `thrift:"Volumes,12,required" json:"Volumes"`
	Containers  []*ContainerItem `thrift:"Containers,13,required" json:"Containers"`
	Annotations []*KeyValuePair  `thrift:"Annotations,14" from:"metadata.annotations"`
	IsVci       bool             `thrift:"IsVci,100,required" json:"IsVci"`
}

func NewGetPodResponse() *GetPodResponse {
	return &GetPodResponse{

		ClusterId:  "",
		Namespace:  "",
		Name:       "",
		CreateTime: "",
		Phase:      "",
		NodeIp:     "",
		PodIp:      "",
	}
}

func (p *GetPodResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetPodResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetPodResponse) GetName() (v string) {
	return p.Name
}

func (p *GetPodResponse) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

func (p *GetPodResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetPodResponse) GetStatus() (v string) {
	return p.Status
}

func (p *GetPodResponse) GetPhase() (v string) {
	return p.Phase
}

func (p *GetPodResponse) GetNodeIp() (v string) {
	return p.NodeIp
}

func (p *GetPodResponse) GetPodIp() (v string) {
	return p.PodIp
}

func (p *GetPodResponse) GetRestart() (v int32) {
	return p.Restart
}

func (p *GetPodResponse) GetConditions() (v []*PodCondition) {
	return p.Conditions
}

func (p *GetPodResponse) GetVolumes() (v []*Volume) {
	return p.Volumes
}

func (p *GetPodResponse) GetContainers() (v []*ContainerItem) {
	return p.Containers
}

var GetPodResponse_Annotations_DEFAULT []*KeyValuePair

func (p *GetPodResponse) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return GetPodResponse_Annotations_DEFAULT
	}
	return p.Annotations
}

func (p *GetPodResponse) GetIsVci() (v bool) {
	return p.IsVci
}
func (p *GetPodResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetPodResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetPodResponse) SetName(val string) {
	p.Name = val
}
func (p *GetPodResponse) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *GetPodResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetPodResponse) SetStatus(val string) {
	p.Status = val
}
func (p *GetPodResponse) SetPhase(val string) {
	p.Phase = val
}
func (p *GetPodResponse) SetNodeIp(val string) {
	p.NodeIp = val
}
func (p *GetPodResponse) SetPodIp(val string) {
	p.PodIp = val
}
func (p *GetPodResponse) SetRestart(val int32) {
	p.Restart = val
}
func (p *GetPodResponse) SetConditions(val []*PodCondition) {
	p.Conditions = val
}
func (p *GetPodResponse) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *GetPodResponse) SetContainers(val []*ContainerItem) {
	p.Containers = val
}
func (p *GetPodResponse) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *GetPodResponse) SetIsVci(val bool) {
	p.IsVci = val
}

var fieldIDToName_GetPodResponse = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "CreateTime",
	6:   "Status",
	7:   "Phase",
	8:   "NodeIp",
	9:   "PodIp",
	10:  "Restart",
	11:  "Conditions",
	12:  "Volumes",
	13:  "Containers",
	14:  "Annotations",
	100: "IsVci",
}

func (p *GetPodResponse) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *GetPodResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetCreateTime bool = false
	var issetStatus bool = false
	var issetPhase bool = false
	var issetNodeIp bool = false
	var issetPodIp bool = false
	var issetRestart bool = false
	var issetConditions bool = false
	var issetVolumes bool = false
	var issetContainers bool = false
	var issetIsVci bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetPhase = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetNodeIp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodIp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestart = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetConditions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsVci = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetPhase {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetNodeIp {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetPodIp {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetRestart {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetConditions {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetVolumes {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetIsVci {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPodResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetPodResponse[fieldId]))
}

func (p *GetPodResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetPodResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetPodResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetPodResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPodResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetPodResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetPodResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Phase = v
	}
	return nil
}

func (p *GetPodResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeIp = v
	}
	return nil
}

func (p *GetPodResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PodIp = v
	}
	return nil
}

func (p *GetPodResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Restart = v
	}
	return nil
}

func (p *GetPodResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Conditions = make([]*PodCondition, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPodCondition()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Conditions = append(p.Conditions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPodResponse) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPodResponse) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPodResponse) ReadField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPodResponse) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = v
	}
	return nil
}

func (p *GetPodResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPodResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPodResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPodResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetPodResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetPodResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetPodResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetPodResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetPodResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Phase", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Phase); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetPodResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("NodeIp", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NodeIp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetPodResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodIp", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PodIp); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetPodResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Restart", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Restart); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetPodResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Conditions", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Conditions)); err != nil {
		return err
	}
	for _, v := range p.Conditions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetPodResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
		return err
	}
	for _, v := range p.Volumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetPodResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetPodResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetPodResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsVci); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *GetPodResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPodResponse(%+v)", *p)
}

func (p *GetPodResponse) DeepEqual(ano *GetPodResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	if !p.Field7DeepEqual(ano.Phase) {
		return false
	}
	if !p.Field8DeepEqual(ano.NodeIp) {
		return false
	}
	if !p.Field9DeepEqual(ano.PodIp) {
		return false
	}
	if !p.Field10DeepEqual(ano.Restart) {
		return false
	}
	if !p.Field11DeepEqual(ano.Conditions) {
		return false
	}
	if !p.Field12DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field13DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field14DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	return true
}

func (p *GetPodResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPodResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Phase, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.NodeIp, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.PodIp, src) != 0 {
		return false
	}
	return true
}
func (p *GetPodResponse) Field10DeepEqual(src int32) bool {

	if p.Restart != src {
		return false
	}
	return true
}
func (p *GetPodResponse) Field11DeepEqual(src []*PodCondition) bool {

	if len(p.Conditions) != len(src) {
		return false
	}
	for i, v := range p.Conditions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPodResponse) Field12DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPodResponse) Field13DeepEqual(src []*ContainerItem) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPodResponse) Field14DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetPodResponse) Field100DeepEqual(src bool) bool {

	if p.IsVci != src {
		return false
	}
	return true
}

type PodCondition struct {
	Type               string `thrift:"Type,1,required" from:"type"`
	Status             string `thrift:"Status,2,required" from:"status"`
	LastProbeTime      string `thrift:"LastProbeTime,3,required" from:"lastProbeTime"`
	LastTransitionTime string `thrift:"LastTransitionTime,4,required" from:"lastTransitionTime"`
	Reason             string `thrift:"Reason,5,required" from:"reason"`
	Message            string `thrift:"Message,6,required" from:"message"`
}

func NewPodCondition() *PodCondition {
	return &PodCondition{}
}

func (p *PodCondition) GetType() (v string) {
	return p.Type
}

func (p *PodCondition) GetStatus() (v string) {
	return p.Status
}

func (p *PodCondition) GetLastProbeTime() (v string) {
	return p.LastProbeTime
}

func (p *PodCondition) GetLastTransitionTime() (v string) {
	return p.LastTransitionTime
}

func (p *PodCondition) GetReason() (v string) {
	return p.Reason
}

func (p *PodCondition) GetMessage() (v string) {
	return p.Message
}
func (p *PodCondition) SetType(val string) {
	p.Type = val
}
func (p *PodCondition) SetStatus(val string) {
	p.Status = val
}
func (p *PodCondition) SetLastProbeTime(val string) {
	p.LastProbeTime = val
}
func (p *PodCondition) SetLastTransitionTime(val string) {
	p.LastTransitionTime = val
}
func (p *PodCondition) SetReason(val string) {
	p.Reason = val
}
func (p *PodCondition) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_PodCondition = map[int16]string{
	1: "Type",
	2: "Status",
	3: "LastProbeTime",
	4: "LastTransitionTime",
	5: "Reason",
	6: "Message",
}

func (p *PodCondition) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetType bool = false
	var issetStatus bool = false
	var issetLastProbeTime bool = false
	var issetLastTransitionTime bool = false
	var issetReason bool = false
	var issetMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastProbeTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastTransitionTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetReason = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLastProbeTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLastTransitionTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetReason {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetMessage {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PodCondition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_PodCondition[fieldId]))
}

func (p *PodCondition) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *PodCondition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *PodCondition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastProbeTime = v
	}
	return nil
}

func (p *PodCondition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastTransitionTime = v
	}
	return nil
}

func (p *PodCondition) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Reason = v
	}
	return nil
}

func (p *PodCondition) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *PodCondition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PodCondition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PodCondition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PodCondition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PodCondition) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastProbeTime", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastProbeTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PodCondition) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastTransitionTime", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastTransitionTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PodCondition) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Reason", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Reason); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PodCondition) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Message", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PodCondition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PodCondition(%+v)", *p)
}

func (p *PodCondition) DeepEqual(ano *PodCondition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastProbeTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.LastTransitionTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.Reason) {
		return false
	}
	if !p.Field6DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *PodCondition) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *PodCondition) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *PodCondition) Field3DeepEqual(src string) bool {

	if strings.Compare(p.LastProbeTime, src) != 0 {
		return false
	}
	return true
}
func (p *PodCondition) Field4DeepEqual(src string) bool {

	if strings.Compare(p.LastTransitionTime, src) != 0 {
		return false
	}
	return true
}
func (p *PodCondition) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Reason, src) != 0 {
		return false
	}
	return true
}
func (p *PodCondition) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type ListPodsRequest struct {
	ClusterId      string          `thrift:"ClusterId,1,required" json:"ClusterId"`
	NodeName       string          `thrift:"NodeName,2" json:"NodeName,omitempty"`
	Namespace      string          `thrift:"Namespace,3" json:"Namespace,omitempty"`
	ControllerKind string          `thrift:"ControllerKind,4" json:"ControllerKind,omitempty"`
	ControllerName string          `thrift:"ControllerName,5" json:"ControllerName,omitempty"`
	Start          int32           `thrift:"Start,6" json:"Start,omitempty"`
	Limit          int32           `thrift:"Limit,7" json:"Limit" default:"10"`
	Keyword        string          `thrift:"Keyword,8" json:"Keyword,omitempty"`
	Selector       []*KeyValuePair `thrift:"Selector,9" json:"Selector,omitempty"`
	Filter         *ListPodsFilter `thrift:"Filter,10" json:"Filter,omitempty"`
	IsVci          *bool           `thrift:"IsVci,100" json:"IsVci,omitempty"`
	Top            *base.TopParam  `thrift:"Top,255,required" json:"Top"`
}

func NewListPodsRequest() *ListPodsRequest {
	return &ListPodsRequest{

		NodeName:       "",
		Namespace:      "",
		ControllerKind: "",
		ControllerName: "",
		Start:          0,
		Limit:          10,
		Keyword:        "",
	}
}

func (p *ListPodsRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListPodsRequest_NodeName_DEFAULT string = ""

func (p *ListPodsRequest) GetNodeName() (v string) {
	if !p.IsSetNodeName() {
		return ListPodsRequest_NodeName_DEFAULT
	}
	return p.NodeName
}

var ListPodsRequest_Namespace_DEFAULT string = ""

func (p *ListPodsRequest) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return ListPodsRequest_Namespace_DEFAULT
	}
	return p.Namespace
}

var ListPodsRequest_ControllerKind_DEFAULT string = ""

func (p *ListPodsRequest) GetControllerKind() (v string) {
	if !p.IsSetControllerKind() {
		return ListPodsRequest_ControllerKind_DEFAULT
	}
	return p.ControllerKind
}

var ListPodsRequest_ControllerName_DEFAULT string = ""

func (p *ListPodsRequest) GetControllerName() (v string) {
	if !p.IsSetControllerName() {
		return ListPodsRequest_ControllerName_DEFAULT
	}
	return p.ControllerName
}

var ListPodsRequest_Start_DEFAULT int32 = 0

func (p *ListPodsRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListPodsRequest_Start_DEFAULT
	}
	return p.Start
}

var ListPodsRequest_Limit_DEFAULT int32 = 10

func (p *ListPodsRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListPodsRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListPodsRequest_Keyword_DEFAULT string = ""

func (p *ListPodsRequest) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ListPodsRequest_Keyword_DEFAULT
	}
	return p.Keyword
}

var ListPodsRequest_Selector_DEFAULT []*KeyValuePair

func (p *ListPodsRequest) GetSelector() (v []*KeyValuePair) {
	if !p.IsSetSelector() {
		return ListPodsRequest_Selector_DEFAULT
	}
	return p.Selector
}

var ListPodsRequest_Filter_DEFAULT *ListPodsFilter

func (p *ListPodsRequest) GetFilter() (v *ListPodsFilter) {
	if !p.IsSetFilter() {
		return ListPodsRequest_Filter_DEFAULT
	}
	return p.Filter
}

var ListPodsRequest_IsVci_DEFAULT bool

func (p *ListPodsRequest) GetIsVci() (v bool) {
	if !p.IsSetIsVci() {
		return ListPodsRequest_IsVci_DEFAULT
	}
	return *p.IsVci
}

var ListPodsRequest_Top_DEFAULT *base.TopParam

func (p *ListPodsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListPodsRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListPodsRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListPodsRequest) SetNodeName(val string) {
	p.NodeName = val
}
func (p *ListPodsRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ListPodsRequest) SetControllerKind(val string) {
	p.ControllerKind = val
}
func (p *ListPodsRequest) SetControllerName(val string) {
	p.ControllerName = val
}
func (p *ListPodsRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListPodsRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListPodsRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *ListPodsRequest) SetSelector(val []*KeyValuePair) {
	p.Selector = val
}
func (p *ListPodsRequest) SetFilter(val *ListPodsFilter) {
	p.Filter = val
}
func (p *ListPodsRequest) SetIsVci(val *bool) {
	p.IsVci = val
}
func (p *ListPodsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListPodsRequest = map[int16]string{
	1:   "ClusterId",
	2:   "NodeName",
	3:   "Namespace",
	4:   "ControllerKind",
	5:   "ControllerName",
	6:   "Start",
	7:   "Limit",
	8:   "Keyword",
	9:   "Selector",
	10:  "Filter",
	100: "IsVci",
	255: "Top",
}

func (p *ListPodsRequest) IsSetNodeName() bool {
	return p.NodeName != ListPodsRequest_NodeName_DEFAULT
}

func (p *ListPodsRequest) IsSetNamespace() bool {
	return p.Namespace != ListPodsRequest_Namespace_DEFAULT
}

func (p *ListPodsRequest) IsSetControllerKind() bool {
	return p.ControllerKind != ListPodsRequest_ControllerKind_DEFAULT
}

func (p *ListPodsRequest) IsSetControllerName() bool {
	return p.ControllerName != ListPodsRequest_ControllerName_DEFAULT
}

func (p *ListPodsRequest) IsSetStart() bool {
	return p.Start != ListPodsRequest_Start_DEFAULT
}

func (p *ListPodsRequest) IsSetLimit() bool {
	return p.Limit != ListPodsRequest_Limit_DEFAULT
}

func (p *ListPodsRequest) IsSetKeyword() bool {
	return p.Keyword != ListPodsRequest_Keyword_DEFAULT
}

func (p *ListPodsRequest) IsSetSelector() bool {
	return p.Selector != nil
}

func (p *ListPodsRequest) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *ListPodsRequest) IsSetIsVci() bool {
	return p.IsVci != nil
}

func (p *ListPodsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListPodsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPodsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListPodsRequest[fieldId]))
}

func (p *ListPodsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.NodeName = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ControllerKind = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ControllerName = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = v
	}
	return nil
}

func (p *ListPodsRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Selector = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Selector = append(p.Selector, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListPodsRequest) ReadField10(iprot thrift.TProtocol) error {
	p.Filter = NewListPodsFilter()
	if err := p.Filter.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListPodsRequest) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = &v
	}
	return nil
}

func (p *ListPodsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListPodsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPodsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPodsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPodsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeName() {
		if err = oprot.WriteFieldBegin("NodeName", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.NodeName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPodsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListPodsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetControllerKind() {
		if err = oprot.WriteFieldBegin("ControllerKind", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ControllerKind); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListPodsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetControllerName() {
		if err = oprot.WriteFieldBegin("ControllerName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ControllerName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListPodsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListPodsRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ListPodsRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("Keyword", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ListPodsRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSelector() {
		if err = oprot.WriteFieldBegin("Selector", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Selector)); err != nil {
			return err
		}
		for _, v := range p.Selector {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ListPodsRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilter() {
		if err = oprot.WriteFieldBegin("Filter", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filter.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ListPodsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsVci() {
		if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsVci); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *ListPodsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListPodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPodsRequest(%+v)", *p)
}

func (p *ListPodsRequest) DeepEqual(ano *ListPodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.NodeName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field4DeepEqual(ano.ControllerKind) {
		return false
	}
	if !p.Field5DeepEqual(ano.ControllerName) {
		return false
	}
	if !p.Field6DeepEqual(ano.Start) {
		return false
	}
	if !p.Field7DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field8DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field9DeepEqual(ano.Selector) {
		return false
	}
	if !p.Field10DeepEqual(ano.Filter) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListPodsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.NodeName, src) != 0 {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ControllerKind, src) != 0 {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ControllerName, src) != 0 {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field6DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field7DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field9DeepEqual(src []*KeyValuePair) bool {

	if len(p.Selector) != len(src) {
		return false
	}
	for i, v := range p.Selector {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListPodsRequest) Field10DeepEqual(src *ListPodsFilter) bool {

	if !p.Filter.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field100DeepEqual(src *bool) bool {

	if p.IsVci == src {
		return true
	} else if p.IsVci == nil || src == nil {
		return false
	}
	if *p.IsVci != *src {
		return false
	}
	return true
}
func (p *ListPodsRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListPodsFilter struct {
	Statuses []string `thrift:"Statuses,1" json:"Statuses,omitempty"`
}

func NewListPodsFilter() *ListPodsFilter {
	return &ListPodsFilter{}
}

var ListPodsFilter_Statuses_DEFAULT []string

func (p *ListPodsFilter) GetStatuses() (v []string) {
	if !p.IsSetStatuses() {
		return ListPodsFilter_Statuses_DEFAULT
	}
	return p.Statuses
}
func (p *ListPodsFilter) SetStatuses(val []string) {
	p.Statuses = val
}

var fieldIDToName_ListPodsFilter = map[int16]string{
	1: "Statuses",
}

func (p *ListPodsFilter) IsSetStatuses() bool {
	return p.Statuses != nil
}

func (p *ListPodsFilter) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPodsFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPodsFilter) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Statuses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Statuses = append(p.Statuses, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListPodsFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPodsFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPodsFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatuses() {
		if err = oprot.WriteFieldBegin("Statuses", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Statuses)); err != nil {
			return err
		}
		for _, v := range p.Statuses {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPodsFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPodsFilter(%+v)", *p)
}

func (p *ListPodsFilter) DeepEqual(ano *ListPodsFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Statuses) {
		return false
	}
	return true
}

func (p *ListPodsFilter) Field1DeepEqual(src []string) bool {

	if len(p.Statuses) != len(src) {
		return false
	}
	for i, v := range p.Statuses {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ListPodsResponse struct {
	Total int64      `thrift:"Total,1,required" json:"Total"`
	Items []*PodItem `thrift:"Items,2,required" json:"Items"`
}

func NewListPodsResponse() *ListPodsResponse {
	return &ListPodsResponse{}
}

func (p *ListPodsResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListPodsResponse) GetItems() (v []*PodItem) {
	return p.Items
}
func (p *ListPodsResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListPodsResponse) SetItems(val []*PodItem) {
	p.Items = val
}

var fieldIDToName_ListPodsResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListPodsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPodsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListPodsResponse[fieldId]))
}

func (p *ListPodsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListPodsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*PodItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPodItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListPodsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPodsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPodsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListPodsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListPodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPodsResponse(%+v)", *p)
}

func (p *ListPodsResponse) DeepEqual(ano *ListPodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListPodsResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListPodsResponse) Field2DeepEqual(src []*PodItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
