// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type File struct {
	Name    string `thrift:"Name,1,required" json:"Name"`
	Content string `thrift:"Content,2,required" json:"Content"`
}

func NewFile() *File {
	return &File{}
}

func (p *File) GetName() (v string) {
	return p.Name
}

func (p *File) GetContent() (v string) {
	return p.Content
}
func (p *File) SetName(val string) {
	p.Name = val
}
func (p *File) SetContent(val string) {
	p.Content = val
}

var fieldIDToName_File = map[int16]string{
	1: "Name",
	2: "Content",
}

func (p *File) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetContent bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetContent = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetContent {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_File[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_File[fieldId]))
}

func (p *File) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *File) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *File) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("File"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *File) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *File) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *File) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("File(%+v)", *p)
}

func (p *File) DeepEqual(ano *File) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *File) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *File) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

type DockerConfigJson struct {
	RegistryServer string `thrift:"RegistryServer,1,required" json:"RegistryServer"`
	UserName       string `thrift:"UserName,2,required" json:"UserName"`
	Password       string `thrift:"Password,3,required" json:"Password"`
}

func NewDockerConfigJson() *DockerConfigJson {
	return &DockerConfigJson{}
}

func (p *DockerConfigJson) GetRegistryServer() (v string) {
	return p.RegistryServer
}

func (p *DockerConfigJson) GetUserName() (v string) {
	return p.UserName
}

func (p *DockerConfigJson) GetPassword() (v string) {
	return p.Password
}
func (p *DockerConfigJson) SetRegistryServer(val string) {
	p.RegistryServer = val
}
func (p *DockerConfigJson) SetUserName(val string) {
	p.UserName = val
}
func (p *DockerConfigJson) SetPassword(val string) {
	p.Password = val
}

var fieldIDToName_DockerConfigJson = map[int16]string{
	1: "RegistryServer",
	2: "UserName",
	3: "Password",
}

func (p *DockerConfigJson) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRegistryServer bool = false
	var issetUserName bool = false
	var issetPassword bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRegistryServer = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPassword = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRegistryServer {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUserName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPassword {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DockerConfigJson[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DockerConfigJson[fieldId]))
}

func (p *DockerConfigJson) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RegistryServer = v
	}
	return nil
}

func (p *DockerConfigJson) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserName = v
	}
	return nil
}

func (p *DockerConfigJson) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = v
	}
	return nil
}

func (p *DockerConfigJson) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DockerConfigJson"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DockerConfigJson) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RegistryServer", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RegistryServer); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DockerConfigJson) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DockerConfigJson) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Password", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Password); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DockerConfigJson) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DockerConfigJson(%+v)", *p)
}

func (p *DockerConfigJson) DeepEqual(ano *DockerConfigJson) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RegistryServer) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Password) {
		return false
	}
	return true
}

func (p *DockerConfigJson) Field1DeepEqual(src string) bool {

	if strings.Compare(p.RegistryServer, src) != 0 {
		return false
	}
	return true
}
func (p *DockerConfigJson) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserName, src) != 0 {
		return false
	}
	return true
}
func (p *DockerConfigJson) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Password, src) != 0 {
		return false
	}
	return true
}

type Tls struct {
	Cert       *File `thrift:"Cert,1,required" json:"Cert"`
	PrivateKey *File `thrift:"PrivateKey,2,required" json:"PrivateKey"`
}

func NewTls() *Tls {
	return &Tls{}
}

var Tls_Cert_DEFAULT *File

func (p *Tls) GetCert() (v *File) {
	if !p.IsSetCert() {
		return Tls_Cert_DEFAULT
	}
	return p.Cert
}

var Tls_PrivateKey_DEFAULT *File

func (p *Tls) GetPrivateKey() (v *File) {
	if !p.IsSetPrivateKey() {
		return Tls_PrivateKey_DEFAULT
	}
	return p.PrivateKey
}
func (p *Tls) SetCert(val *File) {
	p.Cert = val
}
func (p *Tls) SetPrivateKey(val *File) {
	p.PrivateKey = val
}

var fieldIDToName_Tls = map[int16]string{
	1: "Cert",
	2: "PrivateKey",
}

func (p *Tls) IsSetCert() bool {
	return p.Cert != nil
}

func (p *Tls) IsSetPrivateKey() bool {
	return p.PrivateKey != nil
}

func (p *Tls) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCert bool = false
	var issetPrivateKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCert = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPrivateKey = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCert {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPrivateKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Tls[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Tls[fieldId]))
}

func (p *Tls) ReadField1(iprot thrift.TProtocol) error {
	p.Cert = NewFile()
	if err := p.Cert.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Tls) ReadField2(iprot thrift.TProtocol) error {
	p.PrivateKey = NewFile()
	if err := p.PrivateKey.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Tls) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Tls"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Tls) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Cert", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Cert.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Tls) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PrivateKey", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PrivateKey.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Tls) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tls(%+v)", *p)
}

func (p *Tls) DeepEqual(ano *Tls) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Cert) {
		return false
	}
	if !p.Field2DeepEqual(ano.PrivateKey) {
		return false
	}
	return true
}

func (p *Tls) Field1DeepEqual(src *File) bool {

	if !p.Cert.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Tls) Field2DeepEqual(src *File) bool {

	if !p.PrivateKey.DeepEqual(src) {
		return false
	}
	return true
}

type SecrectItem struct {
	ClusterId      string          `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace      string          `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name           string          `thrift:"Name,3,required" from:"metadata.name"`
	Labels         []*KeyValuePair `thrift:"Labels,4,required" from:"metadata.labels"`
	Description    string          `thrift:"Description,5" from:"metadata.annotations.<description>"`
	CreateTime     string          `thrift:"CreateTime,6,required" from:"metadata.creationTimestamp"`
	ReferenceCount int32           `thrift:"ReferenceCount,7,required" json:"ReferenceCount"`
	Type           string          `thrift:"Type,8,required" from:"type"`
}

func NewSecrectItem() *SecrectItem {
	return &SecrectItem{

		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
	}
}

func (p *SecrectItem) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *SecrectItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *SecrectItem) GetName() (v string) {
	return p.Name
}

func (p *SecrectItem) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var SecrectItem_Description_DEFAULT string = ""

func (p *SecrectItem) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return SecrectItem_Description_DEFAULT
	}
	return p.Description
}

func (p *SecrectItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *SecrectItem) GetReferenceCount() (v int32) {
	return p.ReferenceCount
}

func (p *SecrectItem) GetType() (v string) {
	return p.Type
}
func (p *SecrectItem) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *SecrectItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *SecrectItem) SetName(val string) {
	p.Name = val
}
func (p *SecrectItem) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *SecrectItem) SetDescription(val string) {
	p.Description = val
}
func (p *SecrectItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *SecrectItem) SetReferenceCount(val int32) {
	p.ReferenceCount = val
}
func (p *SecrectItem) SetType(val string) {
	p.Type = val
}

var fieldIDToName_SecrectItem = map[int16]string{
	1: "ClusterId",
	2: "Namespace",
	3: "Name",
	4: "Labels",
	5: "Description",
	6: "CreateTime",
	7: "ReferenceCount",
	8: "Type",
}

func (p *SecrectItem) IsSetDescription() bool {
	return p.Description != SecrectItem_Description_DEFAULT
}

func (p *SecrectItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetCreateTime bool = false
	var issetReferenceCount bool = false
	var issetType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferenceCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetReferenceCount {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SecrectItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_SecrectItem[fieldId]))
}

func (p *SecrectItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *SecrectItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *SecrectItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *SecrectItem) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *SecrectItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *SecrectItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *SecrectItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ReferenceCount = v
	}
	return nil
}

func (p *SecrectItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *SecrectItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SecrectItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SecrectItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SecrectItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SecrectItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SecrectItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *SecrectItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SecrectItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *SecrectItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReferenceCount", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ReferenceCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *SecrectItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *SecrectItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecrectItem(%+v)", *p)
}

func (p *SecrectItem) DeepEqual(ano *SecrectItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReferenceCount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *SecrectItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *SecrectItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *SecrectItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *SecrectItem) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SecrectItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *SecrectItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *SecrectItem) Field7DeepEqual(src int32) bool {

	if p.ReferenceCount != src {
		return false
	}
	return true
}
func (p *SecrectItem) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}

type GetSecretResponse struct {
	ClusterId        string            `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace        string            `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name             string            `thrift:"Name,3,required" from:"metadata.name"`
	Labels           []*KeyValuePair   `thrift:"Labels,4,required" from:"metadata.labels"`
	Description      string            `thrift:"Description,5" from:"metadata.annotations.<description>"`
	CreateTime       string            `thrift:"CreateTime,6,required" from:"metadata.creationTimestamp"`
	UpdateTime       string            `thrift:"UpdateTime,7" from:"metadata.annotations.<updateTimestamp>"`
	ReferenceCount   int32             `thrift:"ReferenceCount,8,required" json:"ReferenceCount"`
	References       []*Reference      `thrift:"References,9,required" json:"References"`
	Type             string            `thrift:"Type,10,required" from:"type"`
	Data             []*KeyValuePair   `thrift:"Data,11,required" json:"Data"`
	DockerConfigJson *DockerConfigJson `thrift:"DockerConfigJson,12" json:"DockerConfigJson,omitempty"`
	Tls              *Tls              `thrift:"Tls,13" json:"Tls,omitempty"`
}

func NewGetSecretResponse() *GetSecretResponse {
	return &GetSecretResponse{

		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
		UpdateTime:  "",
	}
}

func (p *GetSecretResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetSecretResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetSecretResponse) GetName() (v string) {
	return p.Name
}

func (p *GetSecretResponse) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var GetSecretResponse_Description_DEFAULT string = ""

func (p *GetSecretResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetSecretResponse_Description_DEFAULT
	}
	return p.Description
}

func (p *GetSecretResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

var GetSecretResponse_UpdateTime_DEFAULT string = ""

func (p *GetSecretResponse) GetUpdateTime() (v string) {
	if !p.IsSetUpdateTime() {
		return GetSecretResponse_UpdateTime_DEFAULT
	}
	return p.UpdateTime
}

func (p *GetSecretResponse) GetReferenceCount() (v int32) {
	return p.ReferenceCount
}

func (p *GetSecretResponse) GetReferences() (v []*Reference) {
	return p.References
}

func (p *GetSecretResponse) GetType() (v string) {
	return p.Type
}

func (p *GetSecretResponse) GetData() (v []*KeyValuePair) {
	return p.Data
}

var GetSecretResponse_DockerConfigJson_DEFAULT *DockerConfigJson

func (p *GetSecretResponse) GetDockerConfigJson() (v *DockerConfigJson) {
	if !p.IsSetDockerConfigJson() {
		return GetSecretResponse_DockerConfigJson_DEFAULT
	}
	return p.DockerConfigJson
}

var GetSecretResponse_Tls_DEFAULT *Tls

func (p *GetSecretResponse) GetTls() (v *Tls) {
	if !p.IsSetTls() {
		return GetSecretResponse_Tls_DEFAULT
	}
	return p.Tls
}
func (p *GetSecretResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetSecretResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetSecretResponse) SetName(val string) {
	p.Name = val
}
func (p *GetSecretResponse) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *GetSecretResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetSecretResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetSecretResponse) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *GetSecretResponse) SetReferenceCount(val int32) {
	p.ReferenceCount = val
}
func (p *GetSecretResponse) SetReferences(val []*Reference) {
	p.References = val
}
func (p *GetSecretResponse) SetType(val string) {
	p.Type = val
}
func (p *GetSecretResponse) SetData(val []*KeyValuePair) {
	p.Data = val
}
func (p *GetSecretResponse) SetDockerConfigJson(val *DockerConfigJson) {
	p.DockerConfigJson = val
}
func (p *GetSecretResponse) SetTls(val *Tls) {
	p.Tls = val
}

var fieldIDToName_GetSecretResponse = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "Labels",
	5:  "Description",
	6:  "CreateTime",
	7:  "UpdateTime",
	8:  "ReferenceCount",
	9:  "References",
	10: "Type",
	11: "Data",
	12: "DockerConfigJson",
	13: "Tls",
}

func (p *GetSecretResponse) IsSetDescription() bool {
	return p.Description != GetSecretResponse_Description_DEFAULT
}

func (p *GetSecretResponse) IsSetUpdateTime() bool {
	return p.UpdateTime != GetSecretResponse_UpdateTime_DEFAULT
}

func (p *GetSecretResponse) IsSetDockerConfigJson() bool {
	return p.DockerConfigJson != nil
}

func (p *GetSecretResponse) IsSetTls() bool {
	return p.Tls != nil
}

func (p *GetSecretResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetCreateTime bool = false
	var issetReferenceCount bool = false
	var issetReferences bool = false
	var issetType bool = false
	var issetData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferenceCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferences = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetData = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetReferenceCount {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetReferences {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetData {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetSecretResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetSecretResponse[fieldId]))
}

func (p *GetSecretResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetSecretResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ReferenceCount = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.References = make([]*Reference, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewReference()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.References = append(p.References, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetSecretResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *GetSecretResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetSecretResponse) ReadField12(iprot thrift.TProtocol) error {
	p.DockerConfigJson = NewDockerConfigJson()
	if err := p.DockerConfigJson.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetSecretResponse) ReadField13(iprot thrift.TProtocol) error {
	p.Tls = NewTls()
	if err := p.Tls.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetSecretResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSecretResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetSecretResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetSecretResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetSecretResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetSecretResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetSecretResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetSecretResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetSecretResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateTime() {
		if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetSecretResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReferenceCount", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ReferenceCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetSecretResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("References", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.References)); err != nil {
		return err
	}
	for _, v := range p.References {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetSecretResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetSecretResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Data", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetSecretResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDockerConfigJson() {
		if err = oprot.WriteFieldBegin("DockerConfigJson", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DockerConfigJson.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetSecretResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetTls() {
		if err = oprot.WriteFieldBegin("Tls", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Tls.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetSecretResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSecretResponse(%+v)", *p)
}

func (p *GetSecretResponse) DeepEqual(ano *GetSecretResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.ReferenceCount) {
		return false
	}
	if !p.Field9DeepEqual(ano.References) {
		return false
	}
	if !p.Field10DeepEqual(ano.Type) {
		return false
	}
	if !p.Field11DeepEqual(ano.Data) {
		return false
	}
	if !p.Field12DeepEqual(ano.DockerConfigJson) {
		return false
	}
	if !p.Field13DeepEqual(ano.Tls) {
		return false
	}
	return true
}

func (p *GetSecretResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSecretResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field7DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field8DeepEqual(src int32) bool {

	if p.ReferenceCount != src {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field9DeepEqual(src []*Reference) bool {

	if len(p.References) != len(src) {
		return false
	}
	for i, v := range p.References {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSecretResponse) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field11DeepEqual(src []*KeyValuePair) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetSecretResponse) Field12DeepEqual(src *DockerConfigJson) bool {

	if !p.DockerConfigJson.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetSecretResponse) Field13DeepEqual(src *Tls) bool {

	if !p.Tls.DeepEqual(src) {
		return false
	}
	return true
}

type ListSecretsResponse struct {
	Total int64          `thrift:"Total,1,required" json:"Total"`
	Items []*SecrectItem `thrift:"Items,2,required" json:"Items"`
}

func NewListSecretsResponse() *ListSecretsResponse {
	return &ListSecretsResponse{}
}

func (p *ListSecretsResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListSecretsResponse) GetItems() (v []*SecrectItem) {
	return p.Items
}
func (p *ListSecretsResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListSecretsResponse) SetItems(val []*SecrectItem) {
	p.Items = val
}

var fieldIDToName_ListSecretsResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListSecretsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSecretsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListSecretsResponse[fieldId]))
}

func (p *ListSecretsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListSecretsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*SecrectItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSecrectItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListSecretsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSecretsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSecretsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListSecretsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListSecretsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSecretsResponse(%+v)", *p)
}

func (p *ListSecretsResponse) DeepEqual(ano *ListSecretsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListSecretsResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListSecretsResponse) Field2DeepEqual(src []*SecrectItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateSecretRequest struct {
	ClusterId        string            `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace        string            `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name             string            `thrift:"Name,3,required" from:"metadata.name"`
	Labels           []*KeyValuePair   `thrift:"Labels,4,required" from:"metadata.labels"`
	Description      string            `thrift:"Description,5" from:"metadata.annotations.<description>,important"`
	Type             string            `thrift:"Type,6,required" from:"type" validate:"eq=Opaque|eq=kubernetes.io/dockerconfigjson|eq=kubernetes.io/tls"`
	Data             []*KeyValuePair   `thrift:"Data,7,required" json:"Data"`
	DockerConfigJson *DockerConfigJson `thrift:"DockerConfigJson,8" json:"DockerConfigJson,omitempty"`
	Tls              *Tls              `thrift:"Tls,9" json:"Tls,omitempty"`
	Top              *base.TopParam    `thrift:"Top,255,required" json:"Top"`
}

func NewCreateSecretRequest() *CreateSecretRequest {
	return &CreateSecretRequest{

		Namespace:   "",
		Name:        "",
		Description: "",
	}
}

func (p *CreateSecretRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateSecretRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateSecretRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateSecretRequest) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var CreateSecretRequest_Description_DEFAULT string = ""

func (p *CreateSecretRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateSecretRequest_Description_DEFAULT
	}
	return p.Description
}

func (p *CreateSecretRequest) GetType() (v string) {
	return p.Type
}

func (p *CreateSecretRequest) GetData() (v []*KeyValuePair) {
	return p.Data
}

var CreateSecretRequest_DockerConfigJson_DEFAULT *DockerConfigJson

func (p *CreateSecretRequest) GetDockerConfigJson() (v *DockerConfigJson) {
	if !p.IsSetDockerConfigJson() {
		return CreateSecretRequest_DockerConfigJson_DEFAULT
	}
	return p.DockerConfigJson
}

var CreateSecretRequest_Tls_DEFAULT *Tls

func (p *CreateSecretRequest) GetTls() (v *Tls) {
	if !p.IsSetTls() {
		return CreateSecretRequest_Tls_DEFAULT
	}
	return p.Tls
}

var CreateSecretRequest_Top_DEFAULT *base.TopParam

func (p *CreateSecretRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateSecretRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateSecretRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateSecretRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateSecretRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateSecretRequest) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *CreateSecretRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateSecretRequest) SetType(val string) {
	p.Type = val
}
func (p *CreateSecretRequest) SetData(val []*KeyValuePair) {
	p.Data = val
}
func (p *CreateSecretRequest) SetDockerConfigJson(val *DockerConfigJson) {
	p.DockerConfigJson = val
}
func (p *CreateSecretRequest) SetTls(val *Tls) {
	p.Tls = val
}
func (p *CreateSecretRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateSecretRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Type",
	7:   "Data",
	8:   "DockerConfigJson",
	9:   "Tls",
	255: "Top",
}

func (p *CreateSecretRequest) IsSetDescription() bool {
	return p.Description != CreateSecretRequest_Description_DEFAULT
}

func (p *CreateSecretRequest) IsSetDockerConfigJson() bool {
	return p.DockerConfigJson != nil
}

func (p *CreateSecretRequest) IsSetTls() bool {
	return p.Tls != nil
}

func (p *CreateSecretRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateSecretRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetType bool = false
	var issetData bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetData = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetData {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateSecretRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateSecretRequest[fieldId]))
}

func (p *CreateSecretRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateSecretRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateSecretRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateSecretRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateSecretRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateSecretRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *CreateSecretRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateSecretRequest) ReadField8(iprot thrift.TProtocol) error {
	p.DockerConfigJson = NewDockerConfigJson()
	if err := p.DockerConfigJson.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateSecretRequest) ReadField9(iprot thrift.TProtocol) error {
	p.Tls = NewTls()
	if err := p.Tls.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateSecretRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateSecretRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSecretRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateSecretRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Data", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDockerConfigJson() {
		if err = oprot.WriteFieldBegin("DockerConfigJson", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DockerConfigJson.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTls() {
		if err = oprot.WriteFieldBegin("Tls", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Tls.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateSecretRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateSecretRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSecretRequest(%+v)", *p)
}

func (p *CreateSecretRequest) DeepEqual(ano *CreateSecretRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.Data) {
		return false
	}
	if !p.Field8DeepEqual(ano.DockerConfigJson) {
		return false
	}
	if !p.Field9DeepEqual(ano.Tls) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateSecretRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateSecretRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field7DeepEqual(src []*KeyValuePair) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateSecretRequest) Field8DeepEqual(src *DockerConfigJson) bool {

	if !p.DockerConfigJson.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field9DeepEqual(src *Tls) bool {

	if !p.Tls.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateSecretRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListSecretsRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace string         `thrift:"Namespace,2" json:"Namespace,omitempty"`
	Start     int32          `thrift:"Start,3" json:"Start,omitempty"`
	Limit     int32          `thrift:"Limit,4" json:"Limit" default:"9999"`
	Keyword   string         `thrift:"Keyword,5" json:"Keyword,omitempty"`
	Type      string         `thrift:"Type,6" json:"Type,omitempty"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewListSecretsRequest() *ListSecretsRequest {
	return &ListSecretsRequest{

		Namespace: "",
		Start:     0,
		Limit:     9999,
		Keyword:   "",
		Type:      "",
	}
}

func (p *ListSecretsRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListSecretsRequest_Namespace_DEFAULT string = ""

func (p *ListSecretsRequest) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return ListSecretsRequest_Namespace_DEFAULT
	}
	return p.Namespace
}

var ListSecretsRequest_Start_DEFAULT int32 = 0

func (p *ListSecretsRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListSecretsRequest_Start_DEFAULT
	}
	return p.Start
}

var ListSecretsRequest_Limit_DEFAULT int32 = 9999

func (p *ListSecretsRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListSecretsRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListSecretsRequest_Keyword_DEFAULT string = ""

func (p *ListSecretsRequest) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ListSecretsRequest_Keyword_DEFAULT
	}
	return p.Keyword
}

var ListSecretsRequest_Type_DEFAULT string = ""

func (p *ListSecretsRequest) GetType() (v string) {
	if !p.IsSetType() {
		return ListSecretsRequest_Type_DEFAULT
	}
	return p.Type
}

var ListSecretsRequest_Top_DEFAULT *base.TopParam

func (p *ListSecretsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListSecretsRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListSecretsRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListSecretsRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ListSecretsRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListSecretsRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListSecretsRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *ListSecretsRequest) SetType(val string) {
	p.Type = val
}
func (p *ListSecretsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListSecretsRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Start",
	4:   "Limit",
	5:   "Keyword",
	6:   "Type",
	255: "Top",
}

func (p *ListSecretsRequest) IsSetNamespace() bool {
	return p.Namespace != ListSecretsRequest_Namespace_DEFAULT
}

func (p *ListSecretsRequest) IsSetStart() bool {
	return p.Start != ListSecretsRequest_Start_DEFAULT
}

func (p *ListSecretsRequest) IsSetLimit() bool {
	return p.Limit != ListSecretsRequest_Limit_DEFAULT
}

func (p *ListSecretsRequest) IsSetKeyword() bool {
	return p.Keyword != ListSecretsRequest_Keyword_DEFAULT
}

func (p *ListSecretsRequest) IsSetType() bool {
	return p.Type != ListSecretsRequest_Type_DEFAULT
}

func (p *ListSecretsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListSecretsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSecretsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListSecretsRequest[fieldId]))
}

func (p *ListSecretsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListSecretsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ListSecretsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListSecretsRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListSecretsRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = v
	}
	return nil
}

func (p *ListSecretsRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ListSecretsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListSecretsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSecretsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSecretsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListSecretsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListSecretsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListSecretsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListSecretsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("Keyword", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListSecretsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("Type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListSecretsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSecretsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSecretsRequest(%+v)", *p)
}

func (p *ListSecretsRequest) DeepEqual(ano *ListSecretsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Start) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field5DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListSecretsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListSecretsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ListSecretsRequest) Field3DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListSecretsRequest) Field4DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListSecretsRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *ListSecretsRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ListSecretsRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
