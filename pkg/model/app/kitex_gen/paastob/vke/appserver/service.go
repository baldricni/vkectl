// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type ServicePort struct {
	Name       string `thrift:"Name,1,required" json:"Name"`
	Protocol   string `thrift:"Protocol,2,required" json:"Protocol"`
	Port       int32  `thrift:"Port,3,required" json:"Port"`
	TargetPort int32  `thrift:"TargetPort,4,required" json:"TargetPort"`
	NodePort   int32  `thrift:"NodePort,5" json:"NodePort,omitempty"`
}

func NewServicePort() *ServicePort {
	return &ServicePort{

		NodePort: 0,
	}
}

func (p *ServicePort) GetName() (v string) {
	return p.Name
}

func (p *ServicePort) GetProtocol() (v string) {
	return p.Protocol
}

func (p *ServicePort) GetPort() (v int32) {
	return p.Port
}

func (p *ServicePort) GetTargetPort() (v int32) {
	return p.TargetPort
}

var ServicePort_NodePort_DEFAULT int32 = 0

func (p *ServicePort) GetNodePort() (v int32) {
	if !p.IsSetNodePort() {
		return ServicePort_NodePort_DEFAULT
	}
	return p.NodePort
}
func (p *ServicePort) SetName(val string) {
	p.Name = val
}
func (p *ServicePort) SetProtocol(val string) {
	p.Protocol = val
}
func (p *ServicePort) SetPort(val int32) {
	p.Port = val
}
func (p *ServicePort) SetTargetPort(val int32) {
	p.TargetPort = val
}
func (p *ServicePort) SetNodePort(val int32) {
	p.NodePort = val
}

var fieldIDToName_ServicePort = map[int16]string{
	1: "Name",
	2: "Protocol",
	3: "Port",
	4: "TargetPort",
	5: "NodePort",
}

func (p *ServicePort) IsSetNodePort() bool {
	return p.NodePort != ServicePort_NodePort_DEFAULT
}

func (p *ServicePort) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetProtocol bool = false
	var issetPort bool = false
	var issetTargetPort bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetProtocol = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPort = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetTargetPort = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetProtocol {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPort {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTargetPort {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServicePort[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ServicePort[fieldId]))
}

func (p *ServicePort) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ServicePort) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Protocol = v
	}
	return nil
}

func (p *ServicePort) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Port = v
	}
	return nil
}

func (p *ServicePort) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TargetPort = v
	}
	return nil
}

func (p *ServicePort) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.NodePort = v
	}
	return nil
}

func (p *ServicePort) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ServicePort"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServicePort) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServicePort) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Protocol", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Protocol); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ServicePort) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Port", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Port); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ServicePort) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TargetPort", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TargetPort); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ServicePort) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodePort() {
		if err = oprot.WriteFieldBegin("NodePort", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.NodePort); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ServicePort) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServicePort(%+v)", *p)
}

func (p *ServicePort) DeepEqual(ano *ServicePort) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Protocol) {
		return false
	}
	if !p.Field3DeepEqual(ano.Port) {
		return false
	}
	if !p.Field4DeepEqual(ano.TargetPort) {
		return false
	}
	if !p.Field5DeepEqual(ano.NodePort) {
		return false
	}
	return true
}

func (p *ServicePort) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ServicePort) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Protocol, src) != 0 {
		return false
	}
	return true
}
func (p *ServicePort) Field3DeepEqual(src int32) bool {

	if p.Port != src {
		return false
	}
	return true
}
func (p *ServicePort) Field4DeepEqual(src int32) bool {

	if p.TargetPort != src {
		return false
	}
	return true
}
func (p *ServicePort) Field5DeepEqual(src int32) bool {

	if p.NodePort != src {
		return false
	}
	return true
}

type LoadBalancer struct {
	Name           string       `thrift:"Name,1,required" json:"Name"`
	AddressType    string       `thrift:"AddressType,2,required" json:"AddressType" default:"PUBLIC"`
	IspType        string       `thrift:"IspType,3" json:"IspType,omitempty"`
	SubnetId       string       `thrift:"SubnetId,4" json:"SubnetId,omitempty"`
	BandWidth      int32        `thrift:"BandWidth,5" json:"BandWidth" default:"10"`
	IpVersion      string       `thrift:"IpVersion,6" json:"IpVersion,omitempty" default:"ipv4"`
	LoadBalancerId *string      `thrift:"LoadBalancerId,7" json:"LoadBalancerId,omitempty"`
	Scheduler      string       `thrift:"Scheduler,8,required" from:"metadata.annotations.<LBScheduler>" json:"Scheduler" default:"wrr"`
	HealthCheck    *HealthCheck `thrift:"HealthCheck,9" json:"HealthCheck,omitempty"`
	PassThrough    bool         `thrift:"PassThrough,10" json:"PassThrough,omitempty"`
}

func NewLoadBalancer() *LoadBalancer {
	return &LoadBalancer{

		Name:        "",
		AddressType: "PUBLIC",
		IspType:     "",
		SubnetId:    "",
		BandWidth:   10,
		IpVersion:   "ipv4",
		Scheduler:   "wrr",
		PassThrough: false,
	}
}

func (p *LoadBalancer) GetName() (v string) {
	return p.Name
}

func (p *LoadBalancer) GetAddressType() (v string) {
	return p.AddressType
}

var LoadBalancer_IspType_DEFAULT string = ""

func (p *LoadBalancer) GetIspType() (v string) {
	if !p.IsSetIspType() {
		return LoadBalancer_IspType_DEFAULT
	}
	return p.IspType
}

var LoadBalancer_SubnetId_DEFAULT string = ""

func (p *LoadBalancer) GetSubnetId() (v string) {
	if !p.IsSetSubnetId() {
		return LoadBalancer_SubnetId_DEFAULT
	}
	return p.SubnetId
}

var LoadBalancer_BandWidth_DEFAULT int32 = 10

func (p *LoadBalancer) GetBandWidth() (v int32) {
	if !p.IsSetBandWidth() {
		return LoadBalancer_BandWidth_DEFAULT
	}
	return p.BandWidth
}

var LoadBalancer_IpVersion_DEFAULT string = "ipv4"

func (p *LoadBalancer) GetIpVersion() (v string) {
	if !p.IsSetIpVersion() {
		return LoadBalancer_IpVersion_DEFAULT
	}
	return p.IpVersion
}

var LoadBalancer_LoadBalancerId_DEFAULT string

func (p *LoadBalancer) GetLoadBalancerId() (v string) {
	if !p.IsSetLoadBalancerId() {
		return LoadBalancer_LoadBalancerId_DEFAULT
	}
	return *p.LoadBalancerId
}

func (p *LoadBalancer) GetScheduler() (v string) {
	return p.Scheduler
}

var LoadBalancer_HealthCheck_DEFAULT *HealthCheck

func (p *LoadBalancer) GetHealthCheck() (v *HealthCheck) {
	if !p.IsSetHealthCheck() {
		return LoadBalancer_HealthCheck_DEFAULT
	}
	return p.HealthCheck
}

var LoadBalancer_PassThrough_DEFAULT bool = false

func (p *LoadBalancer) GetPassThrough() (v bool) {
	if !p.IsSetPassThrough() {
		return LoadBalancer_PassThrough_DEFAULT
	}
	return p.PassThrough
}
func (p *LoadBalancer) SetName(val string) {
	p.Name = val
}
func (p *LoadBalancer) SetAddressType(val string) {
	p.AddressType = val
}
func (p *LoadBalancer) SetIspType(val string) {
	p.IspType = val
}
func (p *LoadBalancer) SetSubnetId(val string) {
	p.SubnetId = val
}
func (p *LoadBalancer) SetBandWidth(val int32) {
	p.BandWidth = val
}
func (p *LoadBalancer) SetIpVersion(val string) {
	p.IpVersion = val
}
func (p *LoadBalancer) SetLoadBalancerId(val *string) {
	p.LoadBalancerId = val
}
func (p *LoadBalancer) SetScheduler(val string) {
	p.Scheduler = val
}
func (p *LoadBalancer) SetHealthCheck(val *HealthCheck) {
	p.HealthCheck = val
}
func (p *LoadBalancer) SetPassThrough(val bool) {
	p.PassThrough = val
}

var fieldIDToName_LoadBalancer = map[int16]string{
	1:  "Name",
	2:  "AddressType",
	3:  "IspType",
	4:  "SubnetId",
	5:  "BandWidth",
	6:  "IpVersion",
	7:  "LoadBalancerId",
	8:  "Scheduler",
	9:  "HealthCheck",
	10: "PassThrough",
}

func (p *LoadBalancer) IsSetIspType() bool {
	return p.IspType != LoadBalancer_IspType_DEFAULT
}

func (p *LoadBalancer) IsSetSubnetId() bool {
	return p.SubnetId != LoadBalancer_SubnetId_DEFAULT
}

func (p *LoadBalancer) IsSetBandWidth() bool {
	return p.BandWidth != LoadBalancer_BandWidth_DEFAULT
}

func (p *LoadBalancer) IsSetIpVersion() bool {
	return p.IpVersion != LoadBalancer_IpVersion_DEFAULT
}

func (p *LoadBalancer) IsSetLoadBalancerId() bool {
	return p.LoadBalancerId != nil
}

func (p *LoadBalancer) IsSetHealthCheck() bool {
	return p.HealthCheck != nil
}

func (p *LoadBalancer) IsSetPassThrough() bool {
	return p.PassThrough != LoadBalancer_PassThrough_DEFAULT
}

func (p *LoadBalancer) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetAddressType bool = false
	var issetScheduler bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAddressType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetScheduler = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAddressType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetScheduler {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LoadBalancer[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_LoadBalancer[fieldId]))
}

func (p *LoadBalancer) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *LoadBalancer) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AddressType = v
	}
	return nil
}

func (p *LoadBalancer) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IspType = v
	}
	return nil
}

func (p *LoadBalancer) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SubnetId = v
	}
	return nil
}

func (p *LoadBalancer) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BandWidth = v
	}
	return nil
}

func (p *LoadBalancer) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IpVersion = v
	}
	return nil
}

func (p *LoadBalancer) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LoadBalancerId = &v
	}
	return nil
}

func (p *LoadBalancer) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Scheduler = v
	}
	return nil
}

func (p *LoadBalancer) ReadField9(iprot thrift.TProtocol) error {
	p.HealthCheck = NewHealthCheck()
	if err := p.HealthCheck.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *LoadBalancer) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.PassThrough = v
	}
	return nil
}

func (p *LoadBalancer) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LoadBalancer"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LoadBalancer) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LoadBalancer) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AddressType", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AddressType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LoadBalancer) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIspType() {
		if err = oprot.WriteFieldBegin("IspType", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.IspType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LoadBalancer) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubnetId() {
		if err = oprot.WriteFieldBegin("SubnetId", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.SubnetId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LoadBalancer) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBandWidth() {
		if err = oprot.WriteFieldBegin("BandWidth", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.BandWidth); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LoadBalancer) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIpVersion() {
		if err = oprot.WriteFieldBegin("IpVersion", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.IpVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *LoadBalancer) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadBalancerId() {
		if err = oprot.WriteFieldBegin("LoadBalancerId", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LoadBalancerId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *LoadBalancer) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Scheduler", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Scheduler); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *LoadBalancer) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetHealthCheck() {
		if err = oprot.WriteFieldBegin("HealthCheck", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HealthCheck.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *LoadBalancer) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassThrough() {
		if err = oprot.WriteFieldBegin("PassThrough", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.PassThrough); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *LoadBalancer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoadBalancer(%+v)", *p)
}

func (p *LoadBalancer) DeepEqual(ano *LoadBalancer) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.AddressType) {
		return false
	}
	if !p.Field3DeepEqual(ano.IspType) {
		return false
	}
	if !p.Field4DeepEqual(ano.SubnetId) {
		return false
	}
	if !p.Field5DeepEqual(ano.BandWidth) {
		return false
	}
	if !p.Field6DeepEqual(ano.IpVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.LoadBalancerId) {
		return false
	}
	if !p.Field8DeepEqual(ano.Scheduler) {
		return false
	}
	if !p.Field9DeepEqual(ano.HealthCheck) {
		return false
	}
	if !p.Field10DeepEqual(ano.PassThrough) {
		return false
	}
	return true
}

func (p *LoadBalancer) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field2DeepEqual(src string) bool {

	if strings.Compare(p.AddressType, src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field3DeepEqual(src string) bool {

	if strings.Compare(p.IspType, src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field4DeepEqual(src string) bool {

	if strings.Compare(p.SubnetId, src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field5DeepEqual(src int32) bool {

	if p.BandWidth != src {
		return false
	}
	return true
}
func (p *LoadBalancer) Field6DeepEqual(src string) bool {

	if strings.Compare(p.IpVersion, src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field7DeepEqual(src *string) bool {

	if p.LoadBalancerId == src {
		return true
	} else if p.LoadBalancerId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LoadBalancerId, *src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Scheduler, src) != 0 {
		return false
	}
	return true
}
func (p *LoadBalancer) Field9DeepEqual(src *HealthCheck) bool {

	if !p.HealthCheck.DeepEqual(src) {
		return false
	}
	return true
}
func (p *LoadBalancer) Field10DeepEqual(src bool) bool {

	if p.PassThrough != src {
		return false
	}
	return true
}

type Listener struct {
	Scheduler   string       `thrift:"Scheduler,1,required" from:"metadata.annotations.<LBScheduler>" json:"Scheduler" default:"wrr"`
	HealthCheck *HealthCheck `thrift:"HealthCheck,2" json:"HealthCheck,omitempty"`
}

func NewListener() *Listener {
	return &Listener{

		Scheduler: "wrr",
	}
}

func (p *Listener) GetScheduler() (v string) {
	return p.Scheduler
}

var Listener_HealthCheck_DEFAULT *HealthCheck

func (p *Listener) GetHealthCheck() (v *HealthCheck) {
	if !p.IsSetHealthCheck() {
		return Listener_HealthCheck_DEFAULT
	}
	return p.HealthCheck
}
func (p *Listener) SetScheduler(val string) {
	p.Scheduler = val
}
func (p *Listener) SetHealthCheck(val *HealthCheck) {
	p.HealthCheck = val
}

var fieldIDToName_Listener = map[int16]string{
	1: "Scheduler",
	2: "HealthCheck",
}

func (p *Listener) IsSetHealthCheck() bool {
	return p.HealthCheck != nil
}

func (p *Listener) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetScheduler bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetScheduler = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetScheduler {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Listener[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Listener[fieldId]))
}

func (p *Listener) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Scheduler = v
	}
	return nil
}

func (p *Listener) ReadField2(iprot thrift.TProtocol) error {
	p.HealthCheck = NewHealthCheck()
	if err := p.HealthCheck.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Listener) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Listener"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Listener) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Scheduler", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Scheduler); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Listener) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHealthCheck() {
		if err = oprot.WriteFieldBegin("HealthCheck", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.HealthCheck.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Listener) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Listener(%+v)", *p)
}

func (p *Listener) DeepEqual(ano *Listener) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Scheduler) {
		return false
	}
	if !p.Field2DeepEqual(ano.HealthCheck) {
		return false
	}
	return true
}

func (p *Listener) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Scheduler, src) != 0 {
		return false
	}
	return true
}
func (p *Listener) Field2DeepEqual(src *HealthCheck) bool {

	if !p.HealthCheck.DeepEqual(src) {
		return false
	}
	return true
}

type MetallbLoadbalancer struct {
	LoadBalancerIP string `thrift:"LoadBalancerIP,1,required" json:"LoadBalancerIP"`
}

func NewMetallbLoadbalancer() *MetallbLoadbalancer {
	return &MetallbLoadbalancer{}
}

func (p *MetallbLoadbalancer) GetLoadBalancerIP() (v string) {
	return p.LoadBalancerIP
}
func (p *MetallbLoadbalancer) SetLoadBalancerIP(val string) {
	p.LoadBalancerIP = val
}

var fieldIDToName_MetallbLoadbalancer = map[int16]string{
	1: "LoadBalancerIP",
}

func (p *MetallbLoadbalancer) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetLoadBalancerIP bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetLoadBalancerIP = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetLoadBalancerIP {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetallbLoadbalancer[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_MetallbLoadbalancer[fieldId]))
}

func (p *MetallbLoadbalancer) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LoadBalancerIP = v
	}
	return nil
}

func (p *MetallbLoadbalancer) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MetallbLoadbalancer"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetallbLoadbalancer) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LoadBalancerIP", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LoadBalancerIP); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MetallbLoadbalancer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetallbLoadbalancer(%+v)", *p)
}

func (p *MetallbLoadbalancer) DeepEqual(ano *MetallbLoadbalancer) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LoadBalancerIP) {
		return false
	}
	return true
}

func (p *MetallbLoadbalancer) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LoadBalancerIP, src) != 0 {
		return false
	}
	return true
}

type MultiCloudLoadbalancer struct {
	AddressType string  `thrift:"AddressType,1,required" json:"AddressType"`
	TkeSubnetID *string `thrift:"TkeSubnetID,2" json:"TkeSubnetID,omitempty"`
}

func NewMultiCloudLoadbalancer() *MultiCloudLoadbalancer {
	return &MultiCloudLoadbalancer{

		AddressType: "PUBLIC",
	}
}

func (p *MultiCloudLoadbalancer) GetAddressType() (v string) {
	return p.AddressType
}

var MultiCloudLoadbalancer_TkeSubnetID_DEFAULT string

func (p *MultiCloudLoadbalancer) GetTkeSubnetID() (v string) {
	if !p.IsSetTkeSubnetID() {
		return MultiCloudLoadbalancer_TkeSubnetID_DEFAULT
	}
	return *p.TkeSubnetID
}
func (p *MultiCloudLoadbalancer) SetAddressType(val string) {
	p.AddressType = val
}
func (p *MultiCloudLoadbalancer) SetTkeSubnetID(val *string) {
	p.TkeSubnetID = val
}

var fieldIDToName_MultiCloudLoadbalancer = map[int16]string{
	1: "AddressType",
	2: "TkeSubnetID",
}

func (p *MultiCloudLoadbalancer) IsSetTkeSubnetID() bool {
	return p.TkeSubnetID != nil
}

func (p *MultiCloudLoadbalancer) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAddressType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAddressType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAddressType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiCloudLoadbalancer[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_MultiCloudLoadbalancer[fieldId]))
}

func (p *MultiCloudLoadbalancer) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AddressType = v
	}
	return nil
}

func (p *MultiCloudLoadbalancer) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TkeSubnetID = &v
	}
	return nil
}

func (p *MultiCloudLoadbalancer) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MultiCloudLoadbalancer"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiCloudLoadbalancer) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AddressType", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AddressType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MultiCloudLoadbalancer) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTkeSubnetID() {
		if err = oprot.WriteFieldBegin("TkeSubnetID", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TkeSubnetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MultiCloudLoadbalancer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiCloudLoadbalancer(%+v)", *p)
}

func (p *MultiCloudLoadbalancer) DeepEqual(ano *MultiCloudLoadbalancer) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddressType) {
		return false
	}
	if !p.Field2DeepEqual(ano.TkeSubnetID) {
		return false
	}
	return true
}

func (p *MultiCloudLoadbalancer) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AddressType, src) != 0 {
		return false
	}
	return true
}
func (p *MultiCloudLoadbalancer) Field2DeepEqual(src *string) bool {

	if p.TkeSubnetID == src {
		return true
	} else if p.TkeSubnetID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TkeSubnetID, *src) != 0 {
		return false
	}
	return true
}

type HealthCheck struct {
	Timeout            int32 `thrift:"Timeout,1,required" json:"Timeout" default:"2"`
	Interval           int32 `thrift:"Interval,2,required" json:"Interval" default:"2"`
	HealthyThreshold   int32 `thrift:"HealthyThreshold,3,required" json:"HealthyThreshold" default:"3"`
	UnhealthyThreshold int32 `thrift:"UnhealthyThreshold,4,required" json:"UnhealthyThreshold" default:"3"`
}

func NewHealthCheck() *HealthCheck {
	return &HealthCheck{

		Timeout:            2,
		Interval:           2,
		HealthyThreshold:   3,
		UnhealthyThreshold: 3,
	}
}

func (p *HealthCheck) GetTimeout() (v int32) {
	return p.Timeout
}

func (p *HealthCheck) GetInterval() (v int32) {
	return p.Interval
}

func (p *HealthCheck) GetHealthyThreshold() (v int32) {
	return p.HealthyThreshold
}

func (p *HealthCheck) GetUnhealthyThreshold() (v int32) {
	return p.UnhealthyThreshold
}
func (p *HealthCheck) SetTimeout(val int32) {
	p.Timeout = val
}
func (p *HealthCheck) SetInterval(val int32) {
	p.Interval = val
}
func (p *HealthCheck) SetHealthyThreshold(val int32) {
	p.HealthyThreshold = val
}
func (p *HealthCheck) SetUnhealthyThreshold(val int32) {
	p.UnhealthyThreshold = val
}

var fieldIDToName_HealthCheck = map[int16]string{
	1: "Timeout",
	2: "Interval",
	3: "HealthyThreshold",
	4: "UnhealthyThreshold",
}

func (p *HealthCheck) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTimeout bool = false
	var issetInterval bool = false
	var issetHealthyThreshold bool = false
	var issetUnhealthyThreshold bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTimeout = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetInterval = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetHealthyThreshold = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnhealthyThreshold = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTimeout {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInterval {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHealthyThreshold {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetUnhealthyThreshold {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HealthCheck[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_HealthCheck[fieldId]))
}

func (p *HealthCheck) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Timeout = v
	}
	return nil
}

func (p *HealthCheck) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Interval = v
	}
	return nil
}

func (p *HealthCheck) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.HealthyThreshold = v
	}
	return nil
}

func (p *HealthCheck) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.UnhealthyThreshold = v
	}
	return nil
}

func (p *HealthCheck) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("HealthCheck"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HealthCheck) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Timeout", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Timeout); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HealthCheck) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Interval", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Interval); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *HealthCheck) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HealthyThreshold", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.HealthyThreshold); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *HealthCheck) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UnhealthyThreshold", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.UnhealthyThreshold); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *HealthCheck) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HealthCheck(%+v)", *p)
}

func (p *HealthCheck) DeepEqual(ano *HealthCheck) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Timeout) {
		return false
	}
	if !p.Field2DeepEqual(ano.Interval) {
		return false
	}
	if !p.Field3DeepEqual(ano.HealthyThreshold) {
		return false
	}
	if !p.Field4DeepEqual(ano.UnhealthyThreshold) {
		return false
	}
	return true
}

func (p *HealthCheck) Field1DeepEqual(src int32) bool {

	if p.Timeout != src {
		return false
	}
	return true
}
func (p *HealthCheck) Field2DeepEqual(src int32) bool {

	if p.Interval != src {
		return false
	}
	return true
}
func (p *HealthCheck) Field3DeepEqual(src int32) bool {

	if p.HealthyThreshold != src {
		return false
	}
	return true
}
func (p *HealthCheck) Field4DeepEqual(src int32) bool {

	if p.UnhealthyThreshold != src {
		return false
	}
	return true
}

type ServiceItem struct {
	Namespace      string          `thrift:"Namespace,1,required" from:"metadata.namespace"`
	Name           string          `thrift:"Name,2,required" from:"metadata.name"`
	Labels         []*KeyValuePair `thrift:"Labels,3,required" from:"metadata.labels"`
	Description    string          `thrift:"Description,4" from:"metadata.annotations.<description>"`
	CreateTime     string          `thrift:"CreateTime,5" from:"metadata.creationTimestamp"`
	Type           string          `thrift:"Type,6,required" from:"spec.type"`
	ReferenceCount int32           `thrift:"ReferenceCount,7,required" json:"ReferenceCount"`
	Ports          []*ServicePort  `thrift:"Ports,8,required" json:"Ports"`
	ClusterIP      string          `thrift:"ClusterIP,9,required" from:"spec.clusterIP"`
	AccessIp       *string         `thrift:"AccessIp,10" json:"AccessIp,omitempty"`
}

func NewServiceItem() *ServiceItem {
	return &ServiceItem{

		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
		ClusterIP:   "",
	}
}

func (p *ServiceItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *ServiceItem) GetName() (v string) {
	return p.Name
}

func (p *ServiceItem) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var ServiceItem_Description_DEFAULT string = ""

func (p *ServiceItem) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return ServiceItem_Description_DEFAULT
	}
	return p.Description
}

var ServiceItem_CreateTime_DEFAULT string = ""

func (p *ServiceItem) GetCreateTime() (v string) {
	if !p.IsSetCreateTime() {
		return ServiceItem_CreateTime_DEFAULT
	}
	return p.CreateTime
}

func (p *ServiceItem) GetType() (v string) {
	return p.Type
}

func (p *ServiceItem) GetReferenceCount() (v int32) {
	return p.ReferenceCount
}

func (p *ServiceItem) GetPorts() (v []*ServicePort) {
	return p.Ports
}

func (p *ServiceItem) GetClusterIP() (v string) {
	return p.ClusterIP
}

var ServiceItem_AccessIp_DEFAULT string

func (p *ServiceItem) GetAccessIp() (v string) {
	if !p.IsSetAccessIp() {
		return ServiceItem_AccessIp_DEFAULT
	}
	return *p.AccessIp
}
func (p *ServiceItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ServiceItem) SetName(val string) {
	p.Name = val
}
func (p *ServiceItem) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *ServiceItem) SetDescription(val string) {
	p.Description = val
}
func (p *ServiceItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *ServiceItem) SetType(val string) {
	p.Type = val
}
func (p *ServiceItem) SetReferenceCount(val int32) {
	p.ReferenceCount = val
}
func (p *ServiceItem) SetPorts(val []*ServicePort) {
	p.Ports = val
}
func (p *ServiceItem) SetClusterIP(val string) {
	p.ClusterIP = val
}
func (p *ServiceItem) SetAccessIp(val *string) {
	p.AccessIp = val
}

var fieldIDToName_ServiceItem = map[int16]string{
	1:  "Namespace",
	2:  "Name",
	3:  "Labels",
	4:  "Description",
	5:  "CreateTime",
	6:  "Type",
	7:  "ReferenceCount",
	8:  "Ports",
	9:  "ClusterIP",
	10: "AccessIp",
}

func (p *ServiceItem) IsSetDescription() bool {
	return p.Description != ServiceItem_Description_DEFAULT
}

func (p *ServiceItem) IsSetCreateTime() bool {
	return p.CreateTime != ServiceItem_CreateTime_DEFAULT
}

func (p *ServiceItem) IsSetAccessIp() bool {
	return p.AccessIp != nil
}

func (p *ServiceItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetType bool = false
	var issetReferenceCount bool = false
	var issetPorts bool = false
	var issetClusterIP bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferenceCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetPorts = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterIP = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetReferenceCount {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetPorts {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetClusterIP {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServiceItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ServiceItem[fieldId]))
}

func (p *ServiceItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ServiceItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ServiceItem) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *ServiceItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *ServiceItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *ServiceItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ReferenceCount = v
	}
	return nil
}

func (p *ServiceItem) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ports = make([]*ServicePort, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewServicePort()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Ports = append(p.Ports, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterIP = v
	}
	return nil
}

func (p *ServiceItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccessIp = &v
	}
	return nil
}

func (p *ServiceItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ServiceItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServiceItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServiceItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ServiceItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ServiceItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ServiceItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ServiceItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ServiceItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReferenceCount", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ReferenceCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ServiceItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Ports", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ports)); err != nil {
		return err
	}
	for _, v := range p.Ports {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ServiceItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterIP", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterIP); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ServiceItem) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessIp() {
		if err = oprot.WriteFieldBegin("AccessIp", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ServiceItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceItem(%+v)", *p)
}

func (p *ServiceItem) DeepEqual(ano *ServiceItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReferenceCount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Ports) {
		return false
	}
	if !p.Field9DeepEqual(ano.ClusterIP) {
		return false
	}
	if !p.Field10DeepEqual(ano.AccessIp) {
		return false
	}
	return true
}

func (p *ServiceItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceItem) Field3DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ServiceItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceItem) Field7DeepEqual(src int32) bool {

	if p.ReferenceCount != src {
		return false
	}
	return true
}
func (p *ServiceItem) Field8DeepEqual(src []*ServicePort) bool {

	if len(p.Ports) != len(src) {
		return false
	}
	for i, v := range p.Ports {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ServiceItem) Field9DeepEqual(src string) bool {

	if strings.Compare(p.ClusterIP, src) != 0 {
		return false
	}
	return true
}
func (p *ServiceItem) Field10DeepEqual(src *string) bool {

	if p.AccessIp == src {
		return true
	} else if p.AccessIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessIp, *src) != 0 {
		return false
	}
	return true
}

type ListServiceRequest struct {
	ClusterId     string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace     string         `thrift:"Namespace,2" json:"Namespace,omitempty"`
	Start         int32          `thrift:"Start,3" json:"Start,omitempty"`
	Limit         int32          `thrift:"Limit,4" json:"Limit" default:"9999"`
	Keyword       string         `thrift:"Keyword,5" json:"Keyword,omitempty"`
	ReferenceKind string         `thrift:"ReferenceKind,6,required" validate:"eq=Workload|eq=Pod" json:"ReferenceKind" default:"Pod"`
	Top           *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewListServiceRequest() *ListServiceRequest {
	return &ListServiceRequest{

		Namespace:     "",
		Start:         0,
		Limit:         9999,
		Keyword:       "",
		ReferenceKind: "Pod",
	}
}

func (p *ListServiceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

var ListServiceRequest_Namespace_DEFAULT string = ""

func (p *ListServiceRequest) GetNamespace() (v string) {
	if !p.IsSetNamespace() {
		return ListServiceRequest_Namespace_DEFAULT
	}
	return p.Namespace
}

var ListServiceRequest_Start_DEFAULT int32 = 0

func (p *ListServiceRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListServiceRequest_Start_DEFAULT
	}
	return p.Start
}

var ListServiceRequest_Limit_DEFAULT int32 = 9999

func (p *ListServiceRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListServiceRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListServiceRequest_Keyword_DEFAULT string = ""

func (p *ListServiceRequest) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ListServiceRequest_Keyword_DEFAULT
	}
	return p.Keyword
}

func (p *ListServiceRequest) GetReferenceKind() (v string) {
	return p.ReferenceKind
}

var ListServiceRequest_Top_DEFAULT *base.TopParam

func (p *ListServiceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListServiceRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListServiceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListServiceRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ListServiceRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListServiceRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListServiceRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *ListServiceRequest) SetReferenceKind(val string) {
	p.ReferenceKind = val
}
func (p *ListServiceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListServiceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Start",
	4:   "Limit",
	5:   "Keyword",
	6:   "ReferenceKind",
	255: "Top",
}

func (p *ListServiceRequest) IsSetNamespace() bool {
	return p.Namespace != ListServiceRequest_Namespace_DEFAULT
}

func (p *ListServiceRequest) IsSetStart() bool {
	return p.Start != ListServiceRequest_Start_DEFAULT
}

func (p *ListServiceRequest) IsSetLimit() bool {
	return p.Limit != ListServiceRequest_Limit_DEFAULT
}

func (p *ListServiceRequest) IsSetKeyword() bool {
	return p.Keyword != ListServiceRequest_Keyword_DEFAULT
}

func (p *ListServiceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListServiceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetReferenceKind bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferenceKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetReferenceKind {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListServiceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListServiceRequest[fieldId]))
}

func (p *ListServiceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListServiceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ListServiceRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListServiceRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListServiceRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = v
	}
	return nil
}

func (p *ListServiceRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReferenceKind = v
	}
	return nil
}

func (p *ListServiceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListServiceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListServiceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListServiceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListServiceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNamespace() {
		if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Namespace); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListServiceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListServiceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListServiceRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("Keyword", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListServiceRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReferenceKind", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReferenceKind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListServiceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListServiceRequest(%+v)", *p)
}

func (p *ListServiceRequest) DeepEqual(ano *ListServiceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Start) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field5DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field6DeepEqual(ano.ReferenceKind) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListServiceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListServiceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ListServiceRequest) Field3DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListServiceRequest) Field4DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListServiceRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *ListServiceRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.ReferenceKind, src) != 0 {
		return false
	}
	return true
}
func (p *ListServiceRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type GetServiceRequest struct {
	ClusterId     string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace     string         `thrift:"Namespace,2,required" json:"Namespace"`
	Name          string         `thrift:"Name,3,required" json:"Name"`
	ReferenceKind string         `thrift:"ReferenceKind,4,required" validate:"eq=Workload|eq=Pod" json:"ReferenceKind" default:"Pod"`
	LbProvider    string         `thrift:"LbProvider,5" json:"LbProvider,omitempty"`
	Top           *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewGetServiceRequest() *GetServiceRequest {
	return &GetServiceRequest{

		ReferenceKind: "Pod",
		LbProvider:    "vke",
	}
}

func (p *GetServiceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetServiceRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetServiceRequest) GetName() (v string) {
	return p.Name
}

func (p *GetServiceRequest) GetReferenceKind() (v string) {
	return p.ReferenceKind
}

var GetServiceRequest_LbProvider_DEFAULT string = "vke"

func (p *GetServiceRequest) GetLbProvider() (v string) {
	if !p.IsSetLbProvider() {
		return GetServiceRequest_LbProvider_DEFAULT
	}
	return p.LbProvider
}

var GetServiceRequest_Top_DEFAULT *base.TopParam

func (p *GetServiceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetServiceRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *GetServiceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetServiceRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetServiceRequest) SetName(val string) {
	p.Name = val
}
func (p *GetServiceRequest) SetReferenceKind(val string) {
	p.ReferenceKind = val
}
func (p *GetServiceRequest) SetLbProvider(val string) {
	p.LbProvider = val
}
func (p *GetServiceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_GetServiceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "ReferenceKind",
	5:   "LbProvider",
	255: "Top",
}

func (p *GetServiceRequest) IsSetLbProvider() bool {
	return p.LbProvider != GetServiceRequest_LbProvider_DEFAULT
}

func (p *GetServiceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetServiceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetReferenceKind bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferenceKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetReferenceKind {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetServiceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetServiceRequest[fieldId]))
}

func (p *GetServiceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetServiceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetServiceRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetServiceRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ReferenceKind = v
	}
	return nil
}

func (p *GetServiceRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LbProvider = v
	}
	return nil
}

func (p *GetServiceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetServiceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetServiceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetServiceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetServiceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetServiceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReferenceKind", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ReferenceKind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetServiceRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLbProvider() {
		if err = oprot.WriteFieldBegin("LbProvider", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.LbProvider); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetServiceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServiceRequest(%+v)", *p)
}

func (p *GetServiceRequest) DeepEqual(ano *GetServiceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.ReferenceKind) {
		return false
	}
	if !p.Field5DeepEqual(ano.LbProvider) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *GetServiceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ReferenceKind, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.LbProvider, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type GetServiceResponse struct {
	Namespace              string                  `thrift:"Namespace,1,required" from:"metadata.namespace"`
	Name                   string                  `thrift:"Name,2,required" from:"metadata.name"`
	Labels                 []*KeyValuePair         `thrift:"Labels,3,required" from:"metadata.labels"`
	Description            string                  `thrift:"Description,4" from:"metadata.annotations.<description>"`
	CreateTime             string                  `thrift:"CreateTime,5" from:"metadata.creationTimestamp"`
	UpdateTime             string                  `thrift:"UpdateTime,6" from:"metadata.annotations.<updateTimestamp>"`
	Ports                  []*ServicePort          `thrift:"Ports,7,required" json:"Ports"`
	Type                   string                  `thrift:"Type,8,required" from:"spec.type"`
	Selector               []*KeyValuePair         `thrift:"Selector,9,required" from:"spec.selector"`
	AccessIp               *string                 `thrift:"AccessIp,10" json:"AccessIp,omitempty"`
	SessionAffinityTimeOut *int32                  `thrift:"SessionAffinityTimeOut,11" from:"spec.sessionAffinityConfig.clientIP.timeoutSeconds"`
	ReferenceCount         int32                   `thrift:"ReferenceCount,12,required" json:"ReferenceCount"`
	References             []*Reference            `thrift:"References,13,required" json:"References"`
	LoadBalancerId         *string                 `thrift:"LoadBalancerId,14" json:"LoadBalancerId,omitempty"`
	LoadBalancer           *LoadBalancer           `thrift:"LoadBalancer,15" json:"LoadBalancer,omitempty"`
	Listener               *Listener               `thrift:"Listener,16" json:"Listener,omitempty"`
	ClusterIP              string                  `thrift:"ClusterIP,17" from:"spec.clusterIP"`
	ExternalTrafficPolicy  *string                 `thrift:"ExternalTrafficPolicy,18" from:"spec.externalTrafficPolicy"`
	LbProvider             string                  `thrift:"LbProvider,19" json:"LbProvider,omitempty"`
	MetallbLoadbalancer    *MetallbLoadbalancer    `thrift:"MetallbLoadbalancer,20" json:"MetallbLoadbalancer,omitempty"`
	MultiCloudLoadbalancer *MultiCloudLoadbalancer `thrift:"MultiCloudLoadbalancer,21" json:"MultiCloudLoadbalancer,omitempty"`
	Uid                    string                  `thrift:"Uid,22,required" from:"metadata.uid"`
}

func NewGetServiceResponse() *GetServiceResponse {
	return &GetServiceResponse{

		Namespace:   "",
		Name:        "",
		Description: "",
		CreateTime:  "",
		UpdateTime:  "",
		ClusterIP:   "",
		LbProvider:  "vke",
	}
}

func (p *GetServiceResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetServiceResponse) GetName() (v string) {
	return p.Name
}

func (p *GetServiceResponse) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var GetServiceResponse_Description_DEFAULT string = ""

func (p *GetServiceResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetServiceResponse_Description_DEFAULT
	}
	return p.Description
}

var GetServiceResponse_CreateTime_DEFAULT string = ""

func (p *GetServiceResponse) GetCreateTime() (v string) {
	if !p.IsSetCreateTime() {
		return GetServiceResponse_CreateTime_DEFAULT
	}
	return p.CreateTime
}

var GetServiceResponse_UpdateTime_DEFAULT string = ""

func (p *GetServiceResponse) GetUpdateTime() (v string) {
	if !p.IsSetUpdateTime() {
		return GetServiceResponse_UpdateTime_DEFAULT
	}
	return p.UpdateTime
}

func (p *GetServiceResponse) GetPorts() (v []*ServicePort) {
	return p.Ports
}

func (p *GetServiceResponse) GetType() (v string) {
	return p.Type
}

func (p *GetServiceResponse) GetSelector() (v []*KeyValuePair) {
	return p.Selector
}

var GetServiceResponse_AccessIp_DEFAULT string

func (p *GetServiceResponse) GetAccessIp() (v string) {
	if !p.IsSetAccessIp() {
		return GetServiceResponse_AccessIp_DEFAULT
	}
	return *p.AccessIp
}

var GetServiceResponse_SessionAffinityTimeOut_DEFAULT int32

func (p *GetServiceResponse) GetSessionAffinityTimeOut() (v int32) {
	if !p.IsSetSessionAffinityTimeOut() {
		return GetServiceResponse_SessionAffinityTimeOut_DEFAULT
	}
	return *p.SessionAffinityTimeOut
}

func (p *GetServiceResponse) GetReferenceCount() (v int32) {
	return p.ReferenceCount
}

func (p *GetServiceResponse) GetReferences() (v []*Reference) {
	return p.References
}

var GetServiceResponse_LoadBalancerId_DEFAULT string

func (p *GetServiceResponse) GetLoadBalancerId() (v string) {
	if !p.IsSetLoadBalancerId() {
		return GetServiceResponse_LoadBalancerId_DEFAULT
	}
	return *p.LoadBalancerId
}

var GetServiceResponse_LoadBalancer_DEFAULT *LoadBalancer

func (p *GetServiceResponse) GetLoadBalancer() (v *LoadBalancer) {
	if !p.IsSetLoadBalancer() {
		return GetServiceResponse_LoadBalancer_DEFAULT
	}
	return p.LoadBalancer
}

var GetServiceResponse_Listener_DEFAULT *Listener

func (p *GetServiceResponse) GetListener() (v *Listener) {
	if !p.IsSetListener() {
		return GetServiceResponse_Listener_DEFAULT
	}
	return p.Listener
}

var GetServiceResponse_ClusterIP_DEFAULT string = ""

func (p *GetServiceResponse) GetClusterIP() (v string) {
	if !p.IsSetClusterIP() {
		return GetServiceResponse_ClusterIP_DEFAULT
	}
	return p.ClusterIP
}

var GetServiceResponse_ExternalTrafficPolicy_DEFAULT string

func (p *GetServiceResponse) GetExternalTrafficPolicy() (v string) {
	if !p.IsSetExternalTrafficPolicy() {
		return GetServiceResponse_ExternalTrafficPolicy_DEFAULT
	}
	return *p.ExternalTrafficPolicy
}

var GetServiceResponse_LbProvider_DEFAULT string = "vke"

func (p *GetServiceResponse) GetLbProvider() (v string) {
	if !p.IsSetLbProvider() {
		return GetServiceResponse_LbProvider_DEFAULT
	}
	return p.LbProvider
}

var GetServiceResponse_MetallbLoadbalancer_DEFAULT *MetallbLoadbalancer

func (p *GetServiceResponse) GetMetallbLoadbalancer() (v *MetallbLoadbalancer) {
	if !p.IsSetMetallbLoadbalancer() {
		return GetServiceResponse_MetallbLoadbalancer_DEFAULT
	}
	return p.MetallbLoadbalancer
}

var GetServiceResponse_MultiCloudLoadbalancer_DEFAULT *MultiCloudLoadbalancer

func (p *GetServiceResponse) GetMultiCloudLoadbalancer() (v *MultiCloudLoadbalancer) {
	if !p.IsSetMultiCloudLoadbalancer() {
		return GetServiceResponse_MultiCloudLoadbalancer_DEFAULT
	}
	return p.MultiCloudLoadbalancer
}

func (p *GetServiceResponse) GetUid() (v string) {
	return p.Uid
}
func (p *GetServiceResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetServiceResponse) SetName(val string) {
	p.Name = val
}
func (p *GetServiceResponse) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *GetServiceResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetServiceResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetServiceResponse) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *GetServiceResponse) SetPorts(val []*ServicePort) {
	p.Ports = val
}
func (p *GetServiceResponse) SetType(val string) {
	p.Type = val
}
func (p *GetServiceResponse) SetSelector(val []*KeyValuePair) {
	p.Selector = val
}
func (p *GetServiceResponse) SetAccessIp(val *string) {
	p.AccessIp = val
}
func (p *GetServiceResponse) SetSessionAffinityTimeOut(val *int32) {
	p.SessionAffinityTimeOut = val
}
func (p *GetServiceResponse) SetReferenceCount(val int32) {
	p.ReferenceCount = val
}
func (p *GetServiceResponse) SetReferences(val []*Reference) {
	p.References = val
}
func (p *GetServiceResponse) SetLoadBalancerId(val *string) {
	p.LoadBalancerId = val
}
func (p *GetServiceResponse) SetLoadBalancer(val *LoadBalancer) {
	p.LoadBalancer = val
}
func (p *GetServiceResponse) SetListener(val *Listener) {
	p.Listener = val
}
func (p *GetServiceResponse) SetClusterIP(val string) {
	p.ClusterIP = val
}
func (p *GetServiceResponse) SetExternalTrafficPolicy(val *string) {
	p.ExternalTrafficPolicy = val
}
func (p *GetServiceResponse) SetLbProvider(val string) {
	p.LbProvider = val
}
func (p *GetServiceResponse) SetMetallbLoadbalancer(val *MetallbLoadbalancer) {
	p.MetallbLoadbalancer = val
}
func (p *GetServiceResponse) SetMultiCloudLoadbalancer(val *MultiCloudLoadbalancer) {
	p.MultiCloudLoadbalancer = val
}
func (p *GetServiceResponse) SetUid(val string) {
	p.Uid = val
}

var fieldIDToName_GetServiceResponse = map[int16]string{
	1:  "Namespace",
	2:  "Name",
	3:  "Labels",
	4:  "Description",
	5:  "CreateTime",
	6:  "UpdateTime",
	7:  "Ports",
	8:  "Type",
	9:  "Selector",
	10: "AccessIp",
	11: "SessionAffinityTimeOut",
	12: "ReferenceCount",
	13: "References",
	14: "LoadBalancerId",
	15: "LoadBalancer",
	16: "Listener",
	17: "ClusterIP",
	18: "ExternalTrafficPolicy",
	19: "LbProvider",
	20: "MetallbLoadbalancer",
	21: "MultiCloudLoadbalancer",
	22: "Uid",
}

func (p *GetServiceResponse) IsSetDescription() bool {
	return p.Description != GetServiceResponse_Description_DEFAULT
}

func (p *GetServiceResponse) IsSetCreateTime() bool {
	return p.CreateTime != GetServiceResponse_CreateTime_DEFAULT
}

func (p *GetServiceResponse) IsSetUpdateTime() bool {
	return p.UpdateTime != GetServiceResponse_UpdateTime_DEFAULT
}

func (p *GetServiceResponse) IsSetAccessIp() bool {
	return p.AccessIp != nil
}

func (p *GetServiceResponse) IsSetSessionAffinityTimeOut() bool {
	return p.SessionAffinityTimeOut != nil
}

func (p *GetServiceResponse) IsSetLoadBalancerId() bool {
	return p.LoadBalancerId != nil
}

func (p *GetServiceResponse) IsSetLoadBalancer() bool {
	return p.LoadBalancer != nil
}

func (p *GetServiceResponse) IsSetListener() bool {
	return p.Listener != nil
}

func (p *GetServiceResponse) IsSetClusterIP() bool {
	return p.ClusterIP != GetServiceResponse_ClusterIP_DEFAULT
}

func (p *GetServiceResponse) IsSetExternalTrafficPolicy() bool {
	return p.ExternalTrafficPolicy != nil
}

func (p *GetServiceResponse) IsSetLbProvider() bool {
	return p.LbProvider != GetServiceResponse_LbProvider_DEFAULT
}

func (p *GetServiceResponse) IsSetMetallbLoadbalancer() bool {
	return p.MetallbLoadbalancer != nil
}

func (p *GetServiceResponse) IsSetMultiCloudLoadbalancer() bool {
	return p.MultiCloudLoadbalancer != nil
}

func (p *GetServiceResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetPorts bool = false
	var issetType bool = false
	var issetSelector bool = false
	var issetReferenceCount bool = false
	var issetReferences bool = false
	var issetUid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetPorts = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetSelector = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferenceCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetReferences = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetUid = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPorts {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetSelector {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetReferenceCount {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetReferences {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetUid {
		fieldId = 22
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetServiceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetServiceResponse[fieldId]))
}

func (p *GetServiceResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ports = make([]*ServicePort, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewServicePort()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Ports = append(p.Ports, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Selector = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Selector = append(p.Selector, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AccessIp = &v
	}
	return nil
}

func (p *GetServiceResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SessionAffinityTimeOut = &v
	}
	return nil
}

func (p *GetServiceResponse) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ReferenceCount = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.References = make([]*Reference, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewReference()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.References = append(p.References, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LoadBalancerId = &v
	}
	return nil
}

func (p *GetServiceResponse) ReadField15(iprot thrift.TProtocol) error {
	p.LoadBalancer = NewLoadBalancer()
	if err := p.LoadBalancer.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField16(iprot thrift.TProtocol) error {
	p.Listener = NewListener()
	if err := p.Listener.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterIP = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExternalTrafficPolicy = &v
	}
	return nil
}

func (p *GetServiceResponse) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LbProvider = v
	}
	return nil
}

func (p *GetServiceResponse) ReadField20(iprot thrift.TProtocol) error {
	p.MetallbLoadbalancer = NewMetallbLoadbalancer()
	if err := p.MetallbLoadbalancer.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField21(iprot thrift.TProtocol) error {
	p.MultiCloudLoadbalancer = NewMultiCloudLoadbalancer()
	if err := p.MultiCloudLoadbalancer.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetServiceResponse) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetServiceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetServiceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetServiceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetServiceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetServiceResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetServiceResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetServiceResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.CreateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetServiceResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateTime() {
		if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.UpdateTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetServiceResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Ports", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ports)); err != nil {
		return err
	}
	for _, v := range p.Ports {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetServiceResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetServiceResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Selector", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Selector)); err != nil {
		return err
	}
	for _, v := range p.Selector {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetServiceResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessIp() {
		if err = oprot.WriteFieldBegin("AccessIp", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessIp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetServiceResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionAffinityTimeOut() {
		if err = oprot.WriteFieldBegin("SessionAffinityTimeOut", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SessionAffinityTimeOut); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetServiceResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ReferenceCount", thrift.I32, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ReferenceCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetServiceResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("References", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.References)); err != nil {
		return err
	}
	for _, v := range p.References {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetServiceResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadBalancerId() {
		if err = oprot.WriteFieldBegin("LoadBalancerId", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LoadBalancerId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetServiceResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadBalancer() {
		if err = oprot.WriteFieldBegin("LoadBalancer", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadBalancer.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetServiceResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetListener() {
		if err = oprot.WriteFieldBegin("Listener", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Listener.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetServiceResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterIP() {
		if err = oprot.WriteFieldBegin("ClusterIP", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ClusterIP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetServiceResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalTrafficPolicy() {
		if err = oprot.WriteFieldBegin("ExternalTrafficPolicy", thrift.STRING, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExternalTrafficPolicy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetServiceResponse) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetLbProvider() {
		if err = oprot.WriteFieldBegin("LbProvider", thrift.STRING, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.LbProvider); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GetServiceResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetallbLoadbalancer() {
		if err = oprot.WriteFieldBegin("MetallbLoadbalancer", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MetallbLoadbalancer.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *GetServiceResponse) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiCloudLoadbalancer() {
		if err = oprot.WriteFieldBegin("MultiCloudLoadbalancer", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MultiCloudLoadbalancer.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *GetServiceResponse) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Uid", thrift.STRING, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *GetServiceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetServiceResponse(%+v)", *p)
}

func (p *GetServiceResponse) DeepEqual(ano *GetServiceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.Ports) {
		return false
	}
	if !p.Field8DeepEqual(ano.Type) {
		return false
	}
	if !p.Field9DeepEqual(ano.Selector) {
		return false
	}
	if !p.Field10DeepEqual(ano.AccessIp) {
		return false
	}
	if !p.Field11DeepEqual(ano.SessionAffinityTimeOut) {
		return false
	}
	if !p.Field12DeepEqual(ano.ReferenceCount) {
		return false
	}
	if !p.Field13DeepEqual(ano.References) {
		return false
	}
	if !p.Field14DeepEqual(ano.LoadBalancerId) {
		return false
	}
	if !p.Field15DeepEqual(ano.LoadBalancer) {
		return false
	}
	if !p.Field16DeepEqual(ano.Listener) {
		return false
	}
	if !p.Field17DeepEqual(ano.ClusterIP) {
		return false
	}
	if !p.Field18DeepEqual(ano.ExternalTrafficPolicy) {
		return false
	}
	if !p.Field19DeepEqual(ano.LbProvider) {
		return false
	}
	if !p.Field20DeepEqual(ano.MetallbLoadbalancer) {
		return false
	}
	if !p.Field21DeepEqual(ano.MultiCloudLoadbalancer) {
		return false
	}
	if !p.Field22DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *GetServiceResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field3DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetServiceResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field7DeepEqual(src []*ServicePort) bool {

	if len(p.Ports) != len(src) {
		return false
	}
	for i, v := range p.Ports {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetServiceResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field9DeepEqual(src []*KeyValuePair) bool {

	if len(p.Selector) != len(src) {
		return false
	}
	for i, v := range p.Selector {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetServiceResponse) Field10DeepEqual(src *string) bool {

	if p.AccessIp == src {
		return true
	} else if p.AccessIp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessIp, *src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field11DeepEqual(src *int32) bool {

	if p.SessionAffinityTimeOut == src {
		return true
	} else if p.SessionAffinityTimeOut == nil || src == nil {
		return false
	}
	if *p.SessionAffinityTimeOut != *src {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field12DeepEqual(src int32) bool {

	if p.ReferenceCount != src {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field13DeepEqual(src []*Reference) bool {

	if len(p.References) != len(src) {
		return false
	}
	for i, v := range p.References {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetServiceResponse) Field14DeepEqual(src *string) bool {

	if p.LoadBalancerId == src {
		return true
	} else if p.LoadBalancerId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LoadBalancerId, *src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field15DeepEqual(src *LoadBalancer) bool {

	if !p.LoadBalancer.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field16DeepEqual(src *Listener) bool {

	if !p.Listener.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field17DeepEqual(src string) bool {

	if strings.Compare(p.ClusterIP, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field18DeepEqual(src *string) bool {

	if p.ExternalTrafficPolicy == src {
		return true
	} else if p.ExternalTrafficPolicy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExternalTrafficPolicy, *src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field19DeepEqual(src string) bool {

	if strings.Compare(p.LbProvider, src) != 0 {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field20DeepEqual(src *MetallbLoadbalancer) bool {

	if !p.MetallbLoadbalancer.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field21DeepEqual(src *MultiCloudLoadbalancer) bool {

	if !p.MultiCloudLoadbalancer.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetServiceResponse) Field22DeepEqual(src string) bool {

	if strings.Compare(p.Uid, src) != 0 {
		return false
	}
	return true
}

type ListServicesResponse struct {
	Total int64          `thrift:"Total,1,required" json:"Total"`
	Items []*ServiceItem `thrift:"Items,2,required" json:"Items"`
}

func NewListServicesResponse() *ListServicesResponse {
	return &ListServicesResponse{}
}

func (p *ListServicesResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListServicesResponse) GetItems() (v []*ServiceItem) {
	return p.Items
}
func (p *ListServicesResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListServicesResponse) SetItems(val []*ServiceItem) {
	p.Items = val
}

var fieldIDToName_ListServicesResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListServicesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListServicesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListServicesResponse[fieldId]))
}

func (p *ListServicesResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListServicesResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ServiceItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewServiceItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListServicesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListServicesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListServicesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListServicesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListServicesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListServicesResponse(%+v)", *p)
}

func (p *ListServicesResponse) DeepEqual(ano *ListServicesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListServicesResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListServicesResponse) Field2DeepEqual(src []*ServiceItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateServiceRequest struct {
	ClusterId              string                  `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace              string                  `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                   string                  `thrift:"Name,3,required" from:"metadata.name"`
	Labels                 []*KeyValuePair         `thrift:"Labels,4,required" from:"metadata.labels"`
	Description            string                  `thrift:"Description,5" from:"metadata.annotations.<description>,important"`
	Ports                  []*ServicePort          `thrift:"Ports,6,required" json:"Ports"`
	Type                   string                  `thrift:"Type,7,required" from:"spec.type" validate:"eq=ClusterIP|eq=NodePort|eq=LoadBalancer"`
	Selector               []*KeyValuePair         `thrift:"Selector,8" from:"spec.selector"`
	SessionAffinityTimeOut *int32                  `thrift:"SessionAffinityTimeOut,9" from:"spec.sessionAffinityConfig.clientIP.timeoutSeconds"`
	LoadBalancerId         *string                 `thrift:"LoadBalancerId,10" json:"LoadBalancerId,omitempty"`
	LoadBalancer           *LoadBalancer           `thrift:"LoadBalancer,11" json:"LoadBalancer,omitempty"`
	Listener               *Listener               `thrift:"Listener,12" json:"Listener,omitempty"`
	ClusterIP              string                  `thrift:"ClusterIP,13" from:"spec.clusterIP"`
	ExternalTrafficPolicy  *string                 `thrift:"ExternalTrafficPolicy,14" from:"spec.externalTrafficPolicy"`
	LbProvider             string                  `thrift:"LbProvider,15" json:"LbProvider,omitempty"`
	MetallbLoadbalancer    *MetallbLoadbalancer    `thrift:"MetallbLoadbalancer,16" json:"MetallbLoadbalancer,omitempty"`
	MultiCloudLoadbalancer *MultiCloudLoadbalancer `thrift:"MultiCloudLoadbalancer,17" json:"MultiCloudLoadbalancer,omitempty"`
	Top                    *base.TopParam          `thrift:"Top,255,required" json:"Top"`
}

func NewCreateServiceRequest() *CreateServiceRequest {
	return &CreateServiceRequest{

		Namespace:   "",
		Name:        "",
		Description: "",
		ClusterIP:   "",
		LbProvider:  "vke",
	}
}

func (p *CreateServiceRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateServiceRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateServiceRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateServiceRequest) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var CreateServiceRequest_Description_DEFAULT string = ""

func (p *CreateServiceRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateServiceRequest_Description_DEFAULT
	}
	return p.Description
}

func (p *CreateServiceRequest) GetPorts() (v []*ServicePort) {
	return p.Ports
}

func (p *CreateServiceRequest) GetType() (v string) {
	return p.Type
}

var CreateServiceRequest_Selector_DEFAULT []*KeyValuePair

func (p *CreateServiceRequest) GetSelector() (v []*KeyValuePair) {
	if !p.IsSetSelector() {
		return CreateServiceRequest_Selector_DEFAULT
	}
	return p.Selector
}

var CreateServiceRequest_SessionAffinityTimeOut_DEFAULT int32

func (p *CreateServiceRequest) GetSessionAffinityTimeOut() (v int32) {
	if !p.IsSetSessionAffinityTimeOut() {
		return CreateServiceRequest_SessionAffinityTimeOut_DEFAULT
	}
	return *p.SessionAffinityTimeOut
}

var CreateServiceRequest_LoadBalancerId_DEFAULT string

func (p *CreateServiceRequest) GetLoadBalancerId() (v string) {
	if !p.IsSetLoadBalancerId() {
		return CreateServiceRequest_LoadBalancerId_DEFAULT
	}
	return *p.LoadBalancerId
}

var CreateServiceRequest_LoadBalancer_DEFAULT *LoadBalancer

func (p *CreateServiceRequest) GetLoadBalancer() (v *LoadBalancer) {
	if !p.IsSetLoadBalancer() {
		return CreateServiceRequest_LoadBalancer_DEFAULT
	}
	return p.LoadBalancer
}

var CreateServiceRequest_Listener_DEFAULT *Listener

func (p *CreateServiceRequest) GetListener() (v *Listener) {
	if !p.IsSetListener() {
		return CreateServiceRequest_Listener_DEFAULT
	}
	return p.Listener
}

var CreateServiceRequest_ClusterIP_DEFAULT string = ""

func (p *CreateServiceRequest) GetClusterIP() (v string) {
	if !p.IsSetClusterIP() {
		return CreateServiceRequest_ClusterIP_DEFAULT
	}
	return p.ClusterIP
}

var CreateServiceRequest_ExternalTrafficPolicy_DEFAULT string

func (p *CreateServiceRequest) GetExternalTrafficPolicy() (v string) {
	if !p.IsSetExternalTrafficPolicy() {
		return CreateServiceRequest_ExternalTrafficPolicy_DEFAULT
	}
	return *p.ExternalTrafficPolicy
}

var CreateServiceRequest_LbProvider_DEFAULT string = "vke"

func (p *CreateServiceRequest) GetLbProvider() (v string) {
	if !p.IsSetLbProvider() {
		return CreateServiceRequest_LbProvider_DEFAULT
	}
	return p.LbProvider
}

var CreateServiceRequest_MetallbLoadbalancer_DEFAULT *MetallbLoadbalancer

func (p *CreateServiceRequest) GetMetallbLoadbalancer() (v *MetallbLoadbalancer) {
	if !p.IsSetMetallbLoadbalancer() {
		return CreateServiceRequest_MetallbLoadbalancer_DEFAULT
	}
	return p.MetallbLoadbalancer
}

var CreateServiceRequest_MultiCloudLoadbalancer_DEFAULT *MultiCloudLoadbalancer

func (p *CreateServiceRequest) GetMultiCloudLoadbalancer() (v *MultiCloudLoadbalancer) {
	if !p.IsSetMultiCloudLoadbalancer() {
		return CreateServiceRequest_MultiCloudLoadbalancer_DEFAULT
	}
	return p.MultiCloudLoadbalancer
}

var CreateServiceRequest_Top_DEFAULT *base.TopParam

func (p *CreateServiceRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateServiceRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateServiceRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateServiceRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateServiceRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateServiceRequest) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *CreateServiceRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateServiceRequest) SetPorts(val []*ServicePort) {
	p.Ports = val
}
func (p *CreateServiceRequest) SetType(val string) {
	p.Type = val
}
func (p *CreateServiceRequest) SetSelector(val []*KeyValuePair) {
	p.Selector = val
}
func (p *CreateServiceRequest) SetSessionAffinityTimeOut(val *int32) {
	p.SessionAffinityTimeOut = val
}
func (p *CreateServiceRequest) SetLoadBalancerId(val *string) {
	p.LoadBalancerId = val
}
func (p *CreateServiceRequest) SetLoadBalancer(val *LoadBalancer) {
	p.LoadBalancer = val
}
func (p *CreateServiceRequest) SetListener(val *Listener) {
	p.Listener = val
}
func (p *CreateServiceRequest) SetClusterIP(val string) {
	p.ClusterIP = val
}
func (p *CreateServiceRequest) SetExternalTrafficPolicy(val *string) {
	p.ExternalTrafficPolicy = val
}
func (p *CreateServiceRequest) SetLbProvider(val string) {
	p.LbProvider = val
}
func (p *CreateServiceRequest) SetMetallbLoadbalancer(val *MetallbLoadbalancer) {
	p.MetallbLoadbalancer = val
}
func (p *CreateServiceRequest) SetMultiCloudLoadbalancer(val *MultiCloudLoadbalancer) {
	p.MultiCloudLoadbalancer = val
}
func (p *CreateServiceRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateServiceRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Ports",
	7:   "Type",
	8:   "Selector",
	9:   "SessionAffinityTimeOut",
	10:  "LoadBalancerId",
	11:  "LoadBalancer",
	12:  "Listener",
	13:  "ClusterIP",
	14:  "ExternalTrafficPolicy",
	15:  "LbProvider",
	16:  "MetallbLoadbalancer",
	17:  "MultiCloudLoadbalancer",
	255: "Top",
}

func (p *CreateServiceRequest) IsSetDescription() bool {
	return p.Description != CreateServiceRequest_Description_DEFAULT
}

func (p *CreateServiceRequest) IsSetSelector() bool {
	return p.Selector != nil
}

func (p *CreateServiceRequest) IsSetSessionAffinityTimeOut() bool {
	return p.SessionAffinityTimeOut != nil
}

func (p *CreateServiceRequest) IsSetLoadBalancerId() bool {
	return p.LoadBalancerId != nil
}

func (p *CreateServiceRequest) IsSetLoadBalancer() bool {
	return p.LoadBalancer != nil
}

func (p *CreateServiceRequest) IsSetListener() bool {
	return p.Listener != nil
}

func (p *CreateServiceRequest) IsSetClusterIP() bool {
	return p.ClusterIP != CreateServiceRequest_ClusterIP_DEFAULT
}

func (p *CreateServiceRequest) IsSetExternalTrafficPolicy() bool {
	return p.ExternalTrafficPolicy != nil
}

func (p *CreateServiceRequest) IsSetLbProvider() bool {
	return p.LbProvider != CreateServiceRequest_LbProvider_DEFAULT
}

func (p *CreateServiceRequest) IsSetMetallbLoadbalancer() bool {
	return p.MetallbLoadbalancer != nil
}

func (p *CreateServiceRequest) IsSetMultiCloudLoadbalancer() bool {
	return p.MultiCloudLoadbalancer != nil
}

func (p *CreateServiceRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateServiceRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetPorts bool = false
	var issetType bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPorts = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPorts {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateServiceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateServiceRequest[fieldId]))
}

func (p *CreateServiceRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Ports = make([]*ServicePort, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewServicePort()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Ports = append(p.Ports, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Type = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Selector = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Selector = append(p.Selector, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.SessionAffinityTimeOut = &v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LoadBalancerId = &v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField11(iprot thrift.TProtocol) error {
	p.LoadBalancer = NewLoadBalancer()
	if err := p.LoadBalancer.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField12(iprot thrift.TProtocol) error {
	p.Listener = NewListener()
	if err := p.Listener.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterIP = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ExternalTrafficPolicy = &v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LbProvider = v
	}
	return nil
}

func (p *CreateServiceRequest) ReadField16(iprot thrift.TProtocol) error {
	p.MetallbLoadbalancer = NewMetallbLoadbalancer()
	if err := p.MetallbLoadbalancer.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField17(iprot thrift.TProtocol) error {
	p.MultiCloudLoadbalancer = NewMultiCloudLoadbalancer()
	if err := p.MultiCloudLoadbalancer.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateServiceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateServiceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateServiceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Ports", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ports)); err != nil {
		return err
	}
	for _, v := range p.Ports {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Type", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSelector() {
		if err = oprot.WriteFieldBegin("Selector", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Selector)); err != nil {
			return err
		}
		for _, v := range p.Selector {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionAffinityTimeOut() {
		if err = oprot.WriteFieldBegin("SessionAffinityTimeOut", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SessionAffinityTimeOut); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadBalancerId() {
		if err = oprot.WriteFieldBegin("LoadBalancerId", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LoadBalancerId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadBalancer() {
		if err = oprot.WriteFieldBegin("LoadBalancer", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LoadBalancer.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetListener() {
		if err = oprot.WriteFieldBegin("Listener", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Listener.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetClusterIP() {
		if err = oprot.WriteFieldBegin("ClusterIP", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.ClusterIP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalTrafficPolicy() {
		if err = oprot.WriteFieldBegin("ExternalTrafficPolicy", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExternalTrafficPolicy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetLbProvider() {
		if err = oprot.WriteFieldBegin("LbProvider", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.LbProvider); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetallbLoadbalancer() {
		if err = oprot.WriteFieldBegin("MetallbLoadbalancer", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MetallbLoadbalancer.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiCloudLoadbalancer() {
		if err = oprot.WriteFieldBegin("MultiCloudLoadbalancer", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MultiCloudLoadbalancer.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CreateServiceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateServiceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateServiceRequest(%+v)", *p)
}

func (p *CreateServiceRequest) DeepEqual(ano *CreateServiceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Ports) {
		return false
	}
	if !p.Field7DeepEqual(ano.Type) {
		return false
	}
	if !p.Field8DeepEqual(ano.Selector) {
		return false
	}
	if !p.Field9DeepEqual(ano.SessionAffinityTimeOut) {
		return false
	}
	if !p.Field10DeepEqual(ano.LoadBalancerId) {
		return false
	}
	if !p.Field11DeepEqual(ano.LoadBalancer) {
		return false
	}
	if !p.Field12DeepEqual(ano.Listener) {
		return false
	}
	if !p.Field13DeepEqual(ano.ClusterIP) {
		return false
	}
	if !p.Field14DeepEqual(ano.ExternalTrafficPolicy) {
		return false
	}
	if !p.Field15DeepEqual(ano.LbProvider) {
		return false
	}
	if !p.Field16DeepEqual(ano.MetallbLoadbalancer) {
		return false
	}
	if !p.Field17DeepEqual(ano.MultiCloudLoadbalancer) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateServiceRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateServiceRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field6DeepEqual(src []*ServicePort) bool {

	if len(p.Ports) != len(src) {
		return false
	}
	for i, v := range p.Ports {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateServiceRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field8DeepEqual(src []*KeyValuePair) bool {

	if len(p.Selector) != len(src) {
		return false
	}
	for i, v := range p.Selector {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateServiceRequest) Field9DeepEqual(src *int32) bool {

	if p.SessionAffinityTimeOut == src {
		return true
	} else if p.SessionAffinityTimeOut == nil || src == nil {
		return false
	}
	if *p.SessionAffinityTimeOut != *src {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field10DeepEqual(src *string) bool {

	if p.LoadBalancerId == src {
		return true
	} else if p.LoadBalancerId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LoadBalancerId, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field11DeepEqual(src *LoadBalancer) bool {

	if !p.LoadBalancer.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field12DeepEqual(src *Listener) bool {

	if !p.Listener.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field13DeepEqual(src string) bool {

	if strings.Compare(p.ClusterIP, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field14DeepEqual(src *string) bool {

	if p.ExternalTrafficPolicy == src {
		return true
	} else if p.ExternalTrafficPolicy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExternalTrafficPolicy, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field15DeepEqual(src string) bool {

	if strings.Compare(p.LbProvider, src) != 0 {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field16DeepEqual(src *MetallbLoadbalancer) bool {

	if !p.MetallbLoadbalancer.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field17DeepEqual(src *MultiCloudLoadbalancer) bool {

	if !p.MultiCloudLoadbalancer.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateServiceRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
