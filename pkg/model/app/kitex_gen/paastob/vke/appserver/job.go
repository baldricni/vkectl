// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type GetJobResponse struct {
	ClusterId             string                    `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace             string                    `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                  string                    `thrift:"Name,3,required" from:"metadata.name"`
	Labels                []*KeyValuePair           `thrift:"Labels,4,required" from:"metadata.labels"`
	Description           string                    `thrift:"Description,5" from:"metadata.annotations.<description>"`
	Containers            []*ContainerConfiguration `thrift:"Containers,6,required" json:"Containers"`
	Volumes               []*Volume                 `thrift:"Volumes,7,required" json:"Volumes"`
	Completions           *int32                    `thrift:"Completions,8" from:"spec.completions"`
	Parallelism           *int32                    `thrift:"Parallelism,9" from:"spec.parallelism"`
	ActiveDeadlineSeconds *int64                    `thrift:"ActiveDeadlineSeconds,10" from:"spec.activeDeadlineSeconds"`
	BackoffLimit          *int32                    `thrift:"BackoffLimit,11" from:"spec.backoffLimit"`
	RestartPolicy         string                    `thrift:"RestartPolicy,12,required" from:"spec.template.spec.restartPolicy"`
	PodLabels             []*KeyValuePair           `thrift:"PodLabels,13,required" from:"spec.template.metadata.labels"`
	DnsPolicy             string                    `thrift:"DnsPolicy,14,required" json:"DnsPolicy" default:"ClusterFirst" from:"spec.template.spec.dnsPolicy"`
	RunAsNonRoot          bool                      `thrift:"RunAsNonRoot,15,required" from:"spec.template.spec.securityContext.runAsNonRoot"`
	StartTime             string                    `thrift:"StartTime,16,required" from:"status.startTime"`
	CompleteTime          string                    `thrift:"CompleteTime,17,required" from:"status.completionTime"`
	Active                int32                     `thrift:"Active,18,required" from:"status.active"`
	Succeeded             int32                     `thrift:"Succeeded,19,required" from:"status.succeeded"`
	Failed                int32                     `thrift:"Failed,20,required" from:"status.failed"`
	ImagePullSecrets      []string                  `thrift:"ImagePullSecrets,21,required" json:"ImagePullSecrets"`
	Selector              []*KeyValuePair           `thrift:"Selector,22,required" from:"spec.selector.matchLabels"`
	NodeAffinity          *NodeAffinity             `thrift:"NodeAffinity,23" json:"NodeAffinity,omitempty"`
	Annotations           []*KeyValuePair           `thrift:"Annotations,24" from:"metadata.annotations"`
	PodAnnotations        []*KeyValuePair           `thrift:"PodAnnotations,25" from:"spec.template.metadata.annotations"`
	IsVci                 bool                      `thrift:"IsVci,100,required" json:"IsVci"`
}

func NewGetJobResponse() *GetJobResponse {
	return &GetJobResponse{

		ClusterId:    "",
		Namespace:    "",
		Name:         "",
		Description:  "",
		DnsPolicy:    "ClusterFirst",
		StartTime:    "",
		CompleteTime: "",
	}
}

func (p *GetJobResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetJobResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetJobResponse) GetName() (v string) {
	return p.Name
}

func (p *GetJobResponse) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var GetJobResponse_Description_DEFAULT string = ""

func (p *GetJobResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetJobResponse_Description_DEFAULT
	}
	return p.Description
}

func (p *GetJobResponse) GetContainers() (v []*ContainerConfiguration) {
	return p.Containers
}

func (p *GetJobResponse) GetVolumes() (v []*Volume) {
	return p.Volumes
}

var GetJobResponse_Completions_DEFAULT int32

func (p *GetJobResponse) GetCompletions() (v int32) {
	if !p.IsSetCompletions() {
		return GetJobResponse_Completions_DEFAULT
	}
	return *p.Completions
}

var GetJobResponse_Parallelism_DEFAULT int32

func (p *GetJobResponse) GetParallelism() (v int32) {
	if !p.IsSetParallelism() {
		return GetJobResponse_Parallelism_DEFAULT
	}
	return *p.Parallelism
}

var GetJobResponse_ActiveDeadlineSeconds_DEFAULT int64

func (p *GetJobResponse) GetActiveDeadlineSeconds() (v int64) {
	if !p.IsSetActiveDeadlineSeconds() {
		return GetJobResponse_ActiveDeadlineSeconds_DEFAULT
	}
	return *p.ActiveDeadlineSeconds
}

var GetJobResponse_BackoffLimit_DEFAULT int32

func (p *GetJobResponse) GetBackoffLimit() (v int32) {
	if !p.IsSetBackoffLimit() {
		return GetJobResponse_BackoffLimit_DEFAULT
	}
	return *p.BackoffLimit
}

func (p *GetJobResponse) GetRestartPolicy() (v string) {
	return p.RestartPolicy
}

func (p *GetJobResponse) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}

func (p *GetJobResponse) GetDnsPolicy() (v string) {
	return p.DnsPolicy
}

func (p *GetJobResponse) GetRunAsNonRoot() (v bool) {
	return p.RunAsNonRoot
}

func (p *GetJobResponse) GetStartTime() (v string) {
	return p.StartTime
}

func (p *GetJobResponse) GetCompleteTime() (v string) {
	return p.CompleteTime
}

func (p *GetJobResponse) GetActive() (v int32) {
	return p.Active
}

func (p *GetJobResponse) GetSucceeded() (v int32) {
	return p.Succeeded
}

func (p *GetJobResponse) GetFailed() (v int32) {
	return p.Failed
}

func (p *GetJobResponse) GetImagePullSecrets() (v []string) {
	return p.ImagePullSecrets
}

func (p *GetJobResponse) GetSelector() (v []*KeyValuePair) {
	return p.Selector
}

var GetJobResponse_NodeAffinity_DEFAULT *NodeAffinity

func (p *GetJobResponse) GetNodeAffinity() (v *NodeAffinity) {
	if !p.IsSetNodeAffinity() {
		return GetJobResponse_NodeAffinity_DEFAULT
	}
	return p.NodeAffinity
}

var GetJobResponse_Annotations_DEFAULT []*KeyValuePair

func (p *GetJobResponse) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return GetJobResponse_Annotations_DEFAULT
	}
	return p.Annotations
}

var GetJobResponse_PodAnnotations_DEFAULT []*KeyValuePair

func (p *GetJobResponse) GetPodAnnotations() (v []*KeyValuePair) {
	if !p.IsSetPodAnnotations() {
		return GetJobResponse_PodAnnotations_DEFAULT
	}
	return p.PodAnnotations
}

func (p *GetJobResponse) GetIsVci() (v bool) {
	return p.IsVci
}
func (p *GetJobResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetJobResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetJobResponse) SetName(val string) {
	p.Name = val
}
func (p *GetJobResponse) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *GetJobResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetJobResponse) SetContainers(val []*ContainerConfiguration) {
	p.Containers = val
}
func (p *GetJobResponse) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *GetJobResponse) SetCompletions(val *int32) {
	p.Completions = val
}
func (p *GetJobResponse) SetParallelism(val *int32) {
	p.Parallelism = val
}
func (p *GetJobResponse) SetActiveDeadlineSeconds(val *int64) {
	p.ActiveDeadlineSeconds = val
}
func (p *GetJobResponse) SetBackoffLimit(val *int32) {
	p.BackoffLimit = val
}
func (p *GetJobResponse) SetRestartPolicy(val string) {
	p.RestartPolicy = val
}
func (p *GetJobResponse) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}
func (p *GetJobResponse) SetDnsPolicy(val string) {
	p.DnsPolicy = val
}
func (p *GetJobResponse) SetRunAsNonRoot(val bool) {
	p.RunAsNonRoot = val
}
func (p *GetJobResponse) SetStartTime(val string) {
	p.StartTime = val
}
func (p *GetJobResponse) SetCompleteTime(val string) {
	p.CompleteTime = val
}
func (p *GetJobResponse) SetActive(val int32) {
	p.Active = val
}
func (p *GetJobResponse) SetSucceeded(val int32) {
	p.Succeeded = val
}
func (p *GetJobResponse) SetFailed(val int32) {
	p.Failed = val
}
func (p *GetJobResponse) SetImagePullSecrets(val []string) {
	p.ImagePullSecrets = val
}
func (p *GetJobResponse) SetSelector(val []*KeyValuePair) {
	p.Selector = val
}
func (p *GetJobResponse) SetNodeAffinity(val *NodeAffinity) {
	p.NodeAffinity = val
}
func (p *GetJobResponse) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *GetJobResponse) SetPodAnnotations(val []*KeyValuePair) {
	p.PodAnnotations = val
}
func (p *GetJobResponse) SetIsVci(val bool) {
	p.IsVci = val
}

var fieldIDToName_GetJobResponse = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Containers",
	7:   "Volumes",
	8:   "Completions",
	9:   "Parallelism",
	10:  "ActiveDeadlineSeconds",
	11:  "BackoffLimit",
	12:  "RestartPolicy",
	13:  "PodLabels",
	14:  "DnsPolicy",
	15:  "RunAsNonRoot",
	16:  "StartTime",
	17:  "CompleteTime",
	18:  "Active",
	19:  "Succeeded",
	20:  "Failed",
	21:  "ImagePullSecrets",
	22:  "Selector",
	23:  "NodeAffinity",
	24:  "Annotations",
	25:  "PodAnnotations",
	100: "IsVci",
}

func (p *GetJobResponse) IsSetDescription() bool {
	return p.Description != GetJobResponse_Description_DEFAULT
}

func (p *GetJobResponse) IsSetCompletions() bool {
	return p.Completions != nil
}

func (p *GetJobResponse) IsSetParallelism() bool {
	return p.Parallelism != nil
}

func (p *GetJobResponse) IsSetActiveDeadlineSeconds() bool {
	return p.ActiveDeadlineSeconds != nil
}

func (p *GetJobResponse) IsSetBackoffLimit() bool {
	return p.BackoffLimit != nil
}

func (p *GetJobResponse) IsSetNodeAffinity() bool {
	return p.NodeAffinity != nil
}

func (p *GetJobResponse) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *GetJobResponse) IsSetPodAnnotations() bool {
	return p.PodAnnotations != nil
}

func (p *GetJobResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetContainers bool = false
	var issetVolumes bool = false
	var issetRestartPolicy bool = false
	var issetPodLabels bool = false
	var issetDnsPolicy bool = false
	var issetRunAsNonRoot bool = false
	var issetStartTime bool = false
	var issetCompleteTime bool = false
	var issetActive bool = false
	var issetSucceeded bool = false
	var issetFailed bool = false
	var issetImagePullSecrets bool = false
	var issetSelector bool = false
	var issetIsVci bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestartPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetDnsPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunAsNonRoot = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompleteTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetActive = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
				issetSucceeded = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailed = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 21:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
				issetImagePullSecrets = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
				issetSelector = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 25:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsVci = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetVolumes {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetRestartPolicy {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetDnsPolicy {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetRunAsNonRoot {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetCompleteTime {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetActive {
		fieldId = 18
		goto RequiredFieldNotSetError
	}

	if !issetSucceeded {
		fieldId = 19
		goto RequiredFieldNotSetError
	}

	if !issetFailed {
		fieldId = 20
		goto RequiredFieldNotSetError
	}

	if !issetImagePullSecrets {
		fieldId = 21
		goto RequiredFieldNotSetError
	}

	if !issetSelector {
		fieldId = 22
		goto RequiredFieldNotSetError
	}

	if !issetIsVci {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetJobResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetJobResponse[fieldId]))
}

func (p *GetJobResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetJobResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetJobResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetJobResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetJobResponse) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerConfiguration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerConfiguration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Completions = &v
	}
	return nil
}

func (p *GetJobResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Parallelism = &v
	}
	return nil
}

func (p *GetJobResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ActiveDeadlineSeconds = &v
	}
	return nil
}

func (p *GetJobResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BackoffLimit = &v
	}
	return nil
}

func (p *GetJobResponse) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RestartPolicy = v
	}
	return nil
}

func (p *GetJobResponse) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DnsPolicy = v
	}
	return nil
}

func (p *GetJobResponse) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RunAsNonRoot = v
	}
	return nil
}

func (p *GetJobResponse) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *GetJobResponse) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CompleteTime = v
	}
	return nil
}

func (p *GetJobResponse) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Active = v
	}
	return nil
}

func (p *GetJobResponse) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Succeeded = v
	}
	return nil
}

func (p *GetJobResponse) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Failed = v
	}
	return nil
}

func (p *GetJobResponse) ReadField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImagePullSecrets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ImagePullSecrets = append(p.ImagePullSecrets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Selector = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Selector = append(p.Selector, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField23(iprot thrift.TProtocol) error {
	p.NodeAffinity = NewNodeAffinity()
	if err := p.NodeAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField25(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodAnnotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodAnnotations = append(p.PodAnnotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetJobResponse) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = v
	}
	return nil
}

func (p *GetJobResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetJobResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetJobResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetJobResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetJobResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetJobResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetJobResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetJobResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetJobResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
		return err
	}
	for _, v := range p.Volumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetJobResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompletions() {
		if err = oprot.WriteFieldBegin("Completions", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Completions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetJobResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelism() {
		if err = oprot.WriteFieldBegin("Parallelism", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Parallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetJobResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveDeadlineSeconds() {
		if err = oprot.WriteFieldBegin("ActiveDeadlineSeconds", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ActiveDeadlineSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetJobResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackoffLimit() {
		if err = oprot.WriteFieldBegin("BackoffLimit", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackoffLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetJobResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RestartPolicy", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RestartPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetJobResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetJobResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DnsPolicy", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DnsPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetJobResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunAsNonRoot", thrift.BOOL, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.RunAsNonRoot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetJobResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetJobResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CompleteTime", thrift.STRING, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompleteTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetJobResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Active", thrift.I32, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Active); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetJobResponse) writeField19(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Succeeded", thrift.I32, 19); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Succeeded); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *GetJobResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Failed", thrift.I32, 20); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Failed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *GetJobResponse) writeField21(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImagePullSecrets", thrift.LIST, 21); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ImagePullSecrets)); err != nil {
		return err
	}
	for _, v := range p.ImagePullSecrets {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}

func (p *GetJobResponse) writeField22(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Selector", thrift.LIST, 22); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Selector)); err != nil {
		return err
	}
	for _, v := range p.Selector {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}

func (p *GetJobResponse) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAffinity() {
		if err = oprot.WriteFieldBegin("NodeAffinity", thrift.STRUCT, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}

func (p *GetJobResponse) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *GetJobResponse) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAnnotations() {
		if err = oprot.WriteFieldBegin("PodAnnotations", thrift.LIST, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodAnnotations)); err != nil {
			return err
		}
		for _, v := range p.PodAnnotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *GetJobResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsVci); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *GetJobResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetJobResponse(%+v)", *p)
}

func (p *GetJobResponse) DeepEqual(ano *GetJobResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field7DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field8DeepEqual(ano.Completions) {
		return false
	}
	if !p.Field9DeepEqual(ano.Parallelism) {
		return false
	}
	if !p.Field10DeepEqual(ano.ActiveDeadlineSeconds) {
		return false
	}
	if !p.Field11DeepEqual(ano.BackoffLimit) {
		return false
	}
	if !p.Field12DeepEqual(ano.RestartPolicy) {
		return false
	}
	if !p.Field13DeepEqual(ano.PodLabels) {
		return false
	}
	if !p.Field14DeepEqual(ano.DnsPolicy) {
		return false
	}
	if !p.Field15DeepEqual(ano.RunAsNonRoot) {
		return false
	}
	if !p.Field16DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field17DeepEqual(ano.CompleteTime) {
		return false
	}
	if !p.Field18DeepEqual(ano.Active) {
		return false
	}
	if !p.Field19DeepEqual(ano.Succeeded) {
		return false
	}
	if !p.Field20DeepEqual(ano.Failed) {
		return false
	}
	if !p.Field21DeepEqual(ano.ImagePullSecrets) {
		return false
	}
	if !p.Field22DeepEqual(ano.Selector) {
		return false
	}
	if !p.Field23DeepEqual(ano.NodeAffinity) {
		return false
	}
	if !p.Field24DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field25DeepEqual(ano.PodAnnotations) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	return true
}

func (p *GetJobResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field6DeepEqual(src []*ContainerConfiguration) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field7DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field8DeepEqual(src *int32) bool {

	if p.Completions == src {
		return true
	} else if p.Completions == nil || src == nil {
		return false
	}
	if *p.Completions != *src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field9DeepEqual(src *int32) bool {

	if p.Parallelism == src {
		return true
	} else if p.Parallelism == nil || src == nil {
		return false
	}
	if *p.Parallelism != *src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field10DeepEqual(src *int64) bool {

	if p.ActiveDeadlineSeconds == src {
		return true
	} else if p.ActiveDeadlineSeconds == nil || src == nil {
		return false
	}
	if *p.ActiveDeadlineSeconds != *src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field11DeepEqual(src *int32) bool {

	if p.BackoffLimit == src {
		return true
	} else if p.BackoffLimit == nil || src == nil {
		return false
	}
	if *p.BackoffLimit != *src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field12DeepEqual(src string) bool {

	if strings.Compare(p.RestartPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field13DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field14DeepEqual(src string) bool {

	if strings.Compare(p.DnsPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field15DeepEqual(src bool) bool {

	if p.RunAsNonRoot != src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field16DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field17DeepEqual(src string) bool {

	if strings.Compare(p.CompleteTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetJobResponse) Field18DeepEqual(src int32) bool {

	if p.Active != src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field19DeepEqual(src int32) bool {

	if p.Succeeded != src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field20DeepEqual(src int32) bool {

	if p.Failed != src {
		return false
	}
	return true
}
func (p *GetJobResponse) Field21DeepEqual(src []string) bool {

	if len(p.ImagePullSecrets) != len(src) {
		return false
	}
	for i, v := range p.ImagePullSecrets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field22DeepEqual(src []*KeyValuePair) bool {

	if len(p.Selector) != len(src) {
		return false
	}
	for i, v := range p.Selector {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field23DeepEqual(src *NodeAffinity) bool {

	if !p.NodeAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetJobResponse) Field24DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field25DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodAnnotations) != len(src) {
		return false
	}
	for i, v := range p.PodAnnotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetJobResponse) Field100DeepEqual(src bool) bool {

	if p.IsVci != src {
		return false
	}
	return true
}

type ListJobsResponse struct {
	Total int64      `thrift:"Total,1,required" json:"Total"`
	Items []*JobItem `thrift:"Items,2,required" json:"Items"`
}

func NewListJobsResponse() *ListJobsResponse {
	return &ListJobsResponse{}
}

func (p *ListJobsResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListJobsResponse) GetItems() (v []*JobItem) {
	return p.Items
}
func (p *ListJobsResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListJobsResponse) SetItems(val []*JobItem) {
	p.Items = val
}

var fieldIDToName_ListJobsResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListJobsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListJobsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListJobsResponse[fieldId]))
}

func (p *ListJobsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListJobsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*JobItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewJobItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListJobsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListJobsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListJobsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListJobsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListJobsResponse(%+v)", *p)
}

func (p *ListJobsResponse) DeepEqual(ano *ListJobsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListJobsResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListJobsResponse) Field2DeepEqual(src []*JobItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type JobItem struct {
	ClusterId    string          `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace    string          `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name         string          `thrift:"Name,3,required" from:"metadata.name"`
	Labels       []*KeyValuePair `thrift:"Labels,4,required" from:"metadata.labels"`
	Description  string          `thrift:"Description,5" from:"metadata.annotations.<description>"`
	Active       int32           `thrift:"Active,6,required" from:"status.active"`
	Succeeded    int32           `thrift:"Succeeded,7,required" from:"status.succeeded"`
	Failed       int32           `thrift:"Failed,8,required" from:"status.failed"`
	StartTime    string          `thrift:"StartTime,9,required" from:"status.startTime"`
	CompleteTime string          `thrift:"CompleteTime,10,required" from:"status.completionTime"`
	Parallelism  *int32          `thrift:"Parallelism,11" from:"spec.parallelism"`
	PodLabels    []*KeyValuePair `thrift:"PodLabels,12,required" from:"spec.template.metadata.labels"`
}

func NewJobItem() *JobItem {
	return &JobItem{

		Namespace:    "",
		Name:         "",
		Description:  "",
		StartTime:    "",
		CompleteTime: "",
	}
}

func (p *JobItem) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *JobItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *JobItem) GetName() (v string) {
	return p.Name
}

func (p *JobItem) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var JobItem_Description_DEFAULT string = ""

func (p *JobItem) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return JobItem_Description_DEFAULT
	}
	return p.Description
}

func (p *JobItem) GetActive() (v int32) {
	return p.Active
}

func (p *JobItem) GetSucceeded() (v int32) {
	return p.Succeeded
}

func (p *JobItem) GetFailed() (v int32) {
	return p.Failed
}

func (p *JobItem) GetStartTime() (v string) {
	return p.StartTime
}

func (p *JobItem) GetCompleteTime() (v string) {
	return p.CompleteTime
}

var JobItem_Parallelism_DEFAULT int32

func (p *JobItem) GetParallelism() (v int32) {
	if !p.IsSetParallelism() {
		return JobItem_Parallelism_DEFAULT
	}
	return *p.Parallelism
}

func (p *JobItem) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}
func (p *JobItem) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *JobItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *JobItem) SetName(val string) {
	p.Name = val
}
func (p *JobItem) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *JobItem) SetDescription(val string) {
	p.Description = val
}
func (p *JobItem) SetActive(val int32) {
	p.Active = val
}
func (p *JobItem) SetSucceeded(val int32) {
	p.Succeeded = val
}
func (p *JobItem) SetFailed(val int32) {
	p.Failed = val
}
func (p *JobItem) SetStartTime(val string) {
	p.StartTime = val
}
func (p *JobItem) SetCompleteTime(val string) {
	p.CompleteTime = val
}
func (p *JobItem) SetParallelism(val *int32) {
	p.Parallelism = val
}
func (p *JobItem) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}

var fieldIDToName_JobItem = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "Labels",
	5:  "Description",
	6:  "Active",
	7:  "Succeeded",
	8:  "Failed",
	9:  "StartTime",
	10: "CompleteTime",
	11: "Parallelism",
	12: "PodLabels",
}

func (p *JobItem) IsSetDescription() bool {
	return p.Description != JobItem_Description_DEFAULT
}

func (p *JobItem) IsSetParallelism() bool {
	return p.Parallelism != nil
}

func (p *JobItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetActive bool = false
	var issetSucceeded bool = false
	var issetFailed bool = false
	var issetStartTime bool = false
	var issetCompleteTime bool = false
	var issetPodLabels bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetActive = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetSucceeded = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetFailed = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetCompleteTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetActive {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetSucceeded {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetFailed {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetCompleteTime {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JobItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_JobItem[fieldId]))
}

func (p *JobItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *JobItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *JobItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *JobItem) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *JobItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *JobItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Active = v
	}
	return nil
}

func (p *JobItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Succeeded = v
	}
	return nil
}

func (p *JobItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Failed = v
	}
	return nil
}

func (p *JobItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *JobItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CompleteTime = v
	}
	return nil
}

func (p *JobItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Parallelism = &v
	}
	return nil
}

func (p *JobItem) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *JobItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JobItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JobItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JobItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JobItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *JobItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *JobItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *JobItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Active", thrift.I32, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Active); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *JobItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Succeeded", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Succeeded); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *JobItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Failed", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Failed); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *JobItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("StartTime", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *JobItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CompleteTime", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CompleteTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *JobItem) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelism() {
		if err = oprot.WriteFieldBegin("Parallelism", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Parallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *JobItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *JobItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobItem(%+v)", *p)
}

func (p *JobItem) DeepEqual(ano *JobItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Active) {
		return false
	}
	if !p.Field7DeepEqual(ano.Succeeded) {
		return false
	}
	if !p.Field8DeepEqual(ano.Failed) {
		return false
	}
	if !p.Field9DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.CompleteTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.Parallelism) {
		return false
	}
	if !p.Field12DeepEqual(ano.PodLabels) {
		return false
	}
	return true
}

func (p *JobItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *JobItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *JobItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *JobItem) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *JobItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *JobItem) Field6DeepEqual(src int32) bool {

	if p.Active != src {
		return false
	}
	return true
}
func (p *JobItem) Field7DeepEqual(src int32) bool {

	if p.Succeeded != src {
		return false
	}
	return true
}
func (p *JobItem) Field8DeepEqual(src int32) bool {

	if p.Failed != src {
		return false
	}
	return true
}
func (p *JobItem) Field9DeepEqual(src string) bool {

	if strings.Compare(p.StartTime, src) != 0 {
		return false
	}
	return true
}
func (p *JobItem) Field10DeepEqual(src string) bool {

	if strings.Compare(p.CompleteTime, src) != 0 {
		return false
	}
	return true
}
func (p *JobItem) Field11DeepEqual(src *int32) bool {

	if p.Parallelism == src {
		return true
	} else if p.Parallelism == nil || src == nil {
		return false
	}
	if *p.Parallelism != *src {
		return false
	}
	return true
}
func (p *JobItem) Field12DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateJobRequest struct {
	ClusterId             string                    `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace             string                    `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name                  string                    `thrift:"Name,3,required" from:"metadata.name"`
	Labels                []*KeyValuePair           `thrift:"Labels,4,required" from:"metadata.labels"`
	Description           string                    `thrift:"Description,5" from:"metadata.annotations.<description>,important"`
	Containers            []*ContainerConfiguration `thrift:"Containers,6,required" json:"Containers"`
	Volumes               []*Volume                 `thrift:"Volumes,7,required" json:"Volumes"`
	Completions           *int32                    `thrift:"Completions,8" from:"spec.completions"`
	Parallelism           *int32                    `thrift:"Parallelism,9" from:"spec.parallelism"`
	ActiveDeadlineSeconds *int64                    `thrift:"ActiveDeadlineSeconds,10" from:"spec.activeDeadlineSeconds"`
	BackoffLimit          *int32                    `thrift:"BackoffLimit,11" from:"spec.backoffLimit"`
	RestartPolicy         string                    `thrift:"RestartPolicy,12,required" from:"spec.template.spec.restartPolicy"`
	PodLabels             []*KeyValuePair           `thrift:"PodLabels,13,required" from:"spec.template.metadata.labels"`
	DnsPolicy             string                    `thrift:"DnsPolicy,14,required" json:"DnsPolicy" default:"ClusterFirst" from:"spec.template.spec.dnsPolicy"`
	RunAsNonRoot          bool                      `thrift:"RunAsNonRoot,15,required" from:"spec.template.spec.securityContext.runAsNonRoot"`
	ImagePullSecrets      []string                  `thrift:"ImagePullSecrets,16,required" json:"ImagePullSecrets"`
	NodeAffinity          *NodeAffinity             `thrift:"NodeAffinity,17" json:"NodeAffinity,omitempty"`
	Annotations           []*KeyValuePair           `thrift:"Annotations,18" from:"metadata.annotations"`
	PodAnnotations        []*KeyValuePair           `thrift:"PodAnnotations,19" from:"spec.template.metadata.annotations"`
	IsVci                 *bool                     `thrift:"IsVci,100" json:"IsVci,omitempty"`
	Top                   *base.TopParam            `thrift:"Top,255,required" json:"Top"`
}

func NewCreateJobRequest() *CreateJobRequest {
	return &CreateJobRequest{

		ClusterId:   "",
		Namespace:   "",
		Name:        "",
		Description: "",
		DnsPolicy:   "ClusterFirst",
	}
}

func (p *CreateJobRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateJobRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateJobRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateJobRequest) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}

var CreateJobRequest_Description_DEFAULT string = ""

func (p *CreateJobRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateJobRequest_Description_DEFAULT
	}
	return p.Description
}

func (p *CreateJobRequest) GetContainers() (v []*ContainerConfiguration) {
	return p.Containers
}

func (p *CreateJobRequest) GetVolumes() (v []*Volume) {
	return p.Volumes
}

var CreateJobRequest_Completions_DEFAULT int32

func (p *CreateJobRequest) GetCompletions() (v int32) {
	if !p.IsSetCompletions() {
		return CreateJobRequest_Completions_DEFAULT
	}
	return *p.Completions
}

var CreateJobRequest_Parallelism_DEFAULT int32

func (p *CreateJobRequest) GetParallelism() (v int32) {
	if !p.IsSetParallelism() {
		return CreateJobRequest_Parallelism_DEFAULT
	}
	return *p.Parallelism
}

var CreateJobRequest_ActiveDeadlineSeconds_DEFAULT int64

func (p *CreateJobRequest) GetActiveDeadlineSeconds() (v int64) {
	if !p.IsSetActiveDeadlineSeconds() {
		return CreateJobRequest_ActiveDeadlineSeconds_DEFAULT
	}
	return *p.ActiveDeadlineSeconds
}

var CreateJobRequest_BackoffLimit_DEFAULT int32

func (p *CreateJobRequest) GetBackoffLimit() (v int32) {
	if !p.IsSetBackoffLimit() {
		return CreateJobRequest_BackoffLimit_DEFAULT
	}
	return *p.BackoffLimit
}

func (p *CreateJobRequest) GetRestartPolicy() (v string) {
	return p.RestartPolicy
}

func (p *CreateJobRequest) GetPodLabels() (v []*KeyValuePair) {
	return p.PodLabels
}

func (p *CreateJobRequest) GetDnsPolicy() (v string) {
	return p.DnsPolicy
}

func (p *CreateJobRequest) GetRunAsNonRoot() (v bool) {
	return p.RunAsNonRoot
}

func (p *CreateJobRequest) GetImagePullSecrets() (v []string) {
	return p.ImagePullSecrets
}

var CreateJobRequest_NodeAffinity_DEFAULT *NodeAffinity

func (p *CreateJobRequest) GetNodeAffinity() (v *NodeAffinity) {
	if !p.IsSetNodeAffinity() {
		return CreateJobRequest_NodeAffinity_DEFAULT
	}
	return p.NodeAffinity
}

var CreateJobRequest_Annotations_DEFAULT []*KeyValuePair

func (p *CreateJobRequest) GetAnnotations() (v []*KeyValuePair) {
	if !p.IsSetAnnotations() {
		return CreateJobRequest_Annotations_DEFAULT
	}
	return p.Annotations
}

var CreateJobRequest_PodAnnotations_DEFAULT []*KeyValuePair

func (p *CreateJobRequest) GetPodAnnotations() (v []*KeyValuePair) {
	if !p.IsSetPodAnnotations() {
		return CreateJobRequest_PodAnnotations_DEFAULT
	}
	return p.PodAnnotations
}

var CreateJobRequest_IsVci_DEFAULT bool

func (p *CreateJobRequest) GetIsVci() (v bool) {
	if !p.IsSetIsVci() {
		return CreateJobRequest_IsVci_DEFAULT
	}
	return *p.IsVci
}

var CreateJobRequest_Top_DEFAULT *base.TopParam

func (p *CreateJobRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateJobRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateJobRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateJobRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateJobRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateJobRequest) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}
func (p *CreateJobRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateJobRequest) SetContainers(val []*ContainerConfiguration) {
	p.Containers = val
}
func (p *CreateJobRequest) SetVolumes(val []*Volume) {
	p.Volumes = val
}
func (p *CreateJobRequest) SetCompletions(val *int32) {
	p.Completions = val
}
func (p *CreateJobRequest) SetParallelism(val *int32) {
	p.Parallelism = val
}
func (p *CreateJobRequest) SetActiveDeadlineSeconds(val *int64) {
	p.ActiveDeadlineSeconds = val
}
func (p *CreateJobRequest) SetBackoffLimit(val *int32) {
	p.BackoffLimit = val
}
func (p *CreateJobRequest) SetRestartPolicy(val string) {
	p.RestartPolicy = val
}
func (p *CreateJobRequest) SetPodLabels(val []*KeyValuePair) {
	p.PodLabels = val
}
func (p *CreateJobRequest) SetDnsPolicy(val string) {
	p.DnsPolicy = val
}
func (p *CreateJobRequest) SetRunAsNonRoot(val bool) {
	p.RunAsNonRoot = val
}
func (p *CreateJobRequest) SetImagePullSecrets(val []string) {
	p.ImagePullSecrets = val
}
func (p *CreateJobRequest) SetNodeAffinity(val *NodeAffinity) {
	p.NodeAffinity = val
}
func (p *CreateJobRequest) SetAnnotations(val []*KeyValuePair) {
	p.Annotations = val
}
func (p *CreateJobRequest) SetPodAnnotations(val []*KeyValuePair) {
	p.PodAnnotations = val
}
func (p *CreateJobRequest) SetIsVci(val *bool) {
	p.IsVci = val
}
func (p *CreateJobRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateJobRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Labels",
	5:   "Description",
	6:   "Containers",
	7:   "Volumes",
	8:   "Completions",
	9:   "Parallelism",
	10:  "ActiveDeadlineSeconds",
	11:  "BackoffLimit",
	12:  "RestartPolicy",
	13:  "PodLabels",
	14:  "DnsPolicy",
	15:  "RunAsNonRoot",
	16:  "ImagePullSecrets",
	17:  "NodeAffinity",
	18:  "Annotations",
	19:  "PodAnnotations",
	100: "IsVci",
	255: "Top",
}

func (p *CreateJobRequest) IsSetDescription() bool {
	return p.Description != CreateJobRequest_Description_DEFAULT
}

func (p *CreateJobRequest) IsSetCompletions() bool {
	return p.Completions != nil
}

func (p *CreateJobRequest) IsSetParallelism() bool {
	return p.Parallelism != nil
}

func (p *CreateJobRequest) IsSetActiveDeadlineSeconds() bool {
	return p.ActiveDeadlineSeconds != nil
}

func (p *CreateJobRequest) IsSetBackoffLimit() bool {
	return p.BackoffLimit != nil
}

func (p *CreateJobRequest) IsSetNodeAffinity() bool {
	return p.NodeAffinity != nil
}

func (p *CreateJobRequest) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *CreateJobRequest) IsSetPodAnnotations() bool {
	return p.PodAnnotations != nil
}

func (p *CreateJobRequest) IsSetIsVci() bool {
	return p.IsVci != nil
}

func (p *CreateJobRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateJobRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetLabels bool = false
	var issetContainers bool = false
	var issetVolumes bool = false
	var issetRestartPolicy bool = false
	var issetPodLabels bool = false
	var issetDnsPolicy bool = false
	var issetRunAsNonRoot bool = false
	var issetImagePullSecrets bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetContainers = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetVolumes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetRestartPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetPodLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetDnsPolicy = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetRunAsNonRoot = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetImagePullSecrets = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 19:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetContainers {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetVolumes {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetRestartPolicy {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetPodLabels {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetDnsPolicy {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetRunAsNonRoot {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetImagePullSecrets {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateJobRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateJobRequest[fieldId]))
}

func (p *CreateJobRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Containers = make([]*ContainerConfiguration, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewContainerConfiguration()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Containers = append(p.Containers, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Volumes = make([]*Volume, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewVolume()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Volumes = append(p.Volumes, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Completions = &v
	}
	return nil
}

func (p *CreateJobRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Parallelism = &v
	}
	return nil
}

func (p *CreateJobRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ActiveDeadlineSeconds = &v
	}
	return nil
}

func (p *CreateJobRequest) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.BackoffLimit = &v
	}
	return nil
}

func (p *CreateJobRequest) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RestartPolicy = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodLabels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodLabels = append(p.PodLabels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DnsPolicy = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.RunAsNonRoot = v
	}
	return nil
}

func (p *CreateJobRequest) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ImagePullSecrets = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ImagePullSecrets = append(p.ImagePullSecrets, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField17(iprot thrift.TProtocol) error {
	p.NodeAffinity = NewNodeAffinity()
	if err := p.NodeAffinity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Annotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Annotations = append(p.Annotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField19(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PodAnnotations = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PodAnnotations = append(p.PodAnnotations, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) ReadField100(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsVci = &v
	}
	return nil
}

func (p *CreateJobRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateJobRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateJobRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateJobRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateJobRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateJobRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateJobRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateJobRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateJobRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Containers", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Containers)); err != nil {
		return err
	}
	for _, v := range p.Containers {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateJobRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Volumes", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Volumes)); err != nil {
		return err
	}
	for _, v := range p.Volumes {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateJobRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompletions() {
		if err = oprot.WriteFieldBegin("Completions", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Completions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateJobRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetParallelism() {
		if err = oprot.WriteFieldBegin("Parallelism", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Parallelism); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateJobRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetActiveDeadlineSeconds() {
		if err = oprot.WriteFieldBegin("ActiveDeadlineSeconds", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ActiveDeadlineSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateJobRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBackoffLimit() {
		if err = oprot.WriteFieldBegin("BackoffLimit", thrift.I32, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.BackoffLimit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateJobRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RestartPolicy", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RestartPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateJobRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("PodLabels", thrift.LIST, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodLabels)); err != nil {
		return err
	}
	for _, v := range p.PodLabels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateJobRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("DnsPolicy", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DnsPolicy); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *CreateJobRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("RunAsNonRoot", thrift.BOOL, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.RunAsNonRoot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *CreateJobRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ImagePullSecrets", thrift.LIST, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ImagePullSecrets)); err != nil {
		return err
	}
	for _, v := range p.ImagePullSecrets {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *CreateJobRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetNodeAffinity() {
		if err = oprot.WriteFieldBegin("NodeAffinity", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.NodeAffinity.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *CreateJobRequest) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("Annotations", thrift.LIST, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *CreateJobRequest) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPodAnnotations() {
		if err = oprot.WriteFieldBegin("PodAnnotations", thrift.LIST, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PodAnnotations)); err != nil {
			return err
		}
		for _, v := range p.PodAnnotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}

func (p *CreateJobRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsVci() {
		if err = oprot.WriteFieldBegin("IsVci", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsVci); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *CreateJobRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateJobRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateJobRequest(%+v)", *p)
}

func (p *CreateJobRequest) DeepEqual(ano *CreateJobRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Labels) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Containers) {
		return false
	}
	if !p.Field7DeepEqual(ano.Volumes) {
		return false
	}
	if !p.Field8DeepEqual(ano.Completions) {
		return false
	}
	if !p.Field9DeepEqual(ano.Parallelism) {
		return false
	}
	if !p.Field10DeepEqual(ano.ActiveDeadlineSeconds) {
		return false
	}
	if !p.Field11DeepEqual(ano.BackoffLimit) {
		return false
	}
	if !p.Field12DeepEqual(ano.RestartPolicy) {
		return false
	}
	if !p.Field13DeepEqual(ano.PodLabels) {
		return false
	}
	if !p.Field14DeepEqual(ano.DnsPolicy) {
		return false
	}
	if !p.Field15DeepEqual(ano.RunAsNonRoot) {
		return false
	}
	if !p.Field16DeepEqual(ano.ImagePullSecrets) {
		return false
	}
	if !p.Field17DeepEqual(ano.NodeAffinity) {
		return false
	}
	if !p.Field18DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field19DeepEqual(ano.PodAnnotations) {
		return false
	}
	if !p.Field100DeepEqual(ano.IsVci) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateJobRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field4DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field6DeepEqual(src []*ContainerConfiguration) bool {

	if len(p.Containers) != len(src) {
		return false
	}
	for i, v := range p.Containers {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field7DeepEqual(src []*Volume) bool {

	if len(p.Volumes) != len(src) {
		return false
	}
	for i, v := range p.Volumes {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field8DeepEqual(src *int32) bool {

	if p.Completions == src {
		return true
	} else if p.Completions == nil || src == nil {
		return false
	}
	if *p.Completions != *src {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field9DeepEqual(src *int32) bool {

	if p.Parallelism == src {
		return true
	} else if p.Parallelism == nil || src == nil {
		return false
	}
	if *p.Parallelism != *src {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field10DeepEqual(src *int64) bool {

	if p.ActiveDeadlineSeconds == src {
		return true
	} else if p.ActiveDeadlineSeconds == nil || src == nil {
		return false
	}
	if *p.ActiveDeadlineSeconds != *src {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field11DeepEqual(src *int32) bool {

	if p.BackoffLimit == src {
		return true
	} else if p.BackoffLimit == nil || src == nil {
		return false
	}
	if *p.BackoffLimit != *src {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field12DeepEqual(src string) bool {

	if strings.Compare(p.RestartPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field13DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodLabels) != len(src) {
		return false
	}
	for i, v := range p.PodLabels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field14DeepEqual(src string) bool {

	if strings.Compare(p.DnsPolicy, src) != 0 {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field15DeepEqual(src bool) bool {

	if p.RunAsNonRoot != src {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field16DeepEqual(src []string) bool {

	if len(p.ImagePullSecrets) != len(src) {
		return false
	}
	for i, v := range p.ImagePullSecrets {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field17DeepEqual(src *NodeAffinity) bool {

	if !p.NodeAffinity.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field18DeepEqual(src []*KeyValuePair) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field19DeepEqual(src []*KeyValuePair) bool {

	if len(p.PodAnnotations) != len(src) {
		return false
	}
	for i, v := range p.PodAnnotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateJobRequest) Field100DeepEqual(src *bool) bool {

	if p.IsVci == src {
		return true
	} else if p.IsVci == nil || src == nil {
		return false
	}
	if *p.IsVci != *src {
		return false
	}
	return true
}
func (p *CreateJobRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
