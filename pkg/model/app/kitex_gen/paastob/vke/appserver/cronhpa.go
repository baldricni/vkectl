// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type GetCronHorizontalPodAutoscalerResponse struct {
	ClusterId     string  `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace     string  `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name          string  `thrift:"Name,3,required" from:"metadata.name"`
	Description   string  `thrift:"Description,5" from:"metadata.annotations.<description>"`
	CreateTime    string  `thrift:"CreateTime,6,required" from:"metadata.creationTimestamp"`
	LastScaleTime string  `thrift:"LastScaleTime,7,required" from:"status.lastScaleTime"`
	WorkloadKind  string  `thrift:"WorkloadKind,8,required" json:"WorkloadKind"`
	WorkloadName  string  `thrift:"WorkloadName,9,required" json:"WorkloadName"`
	Crons         []*Cron `thrift:"Crons,10,required" json:"Crons"`
}

func NewGetCronHorizontalPodAutoscalerResponse() *GetCronHorizontalPodAutoscalerResponse {
	return &GetCronHorizontalPodAutoscalerResponse{

		ClusterId:     "",
		Namespace:     "",
		Name:          "",
		Description:   "",
		CreateTime:    "",
		LastScaleTime: "",
		WorkloadKind:  "",
		WorkloadName:  "",
	}
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetName() (v string) {
	return p.Name
}

var GetCronHorizontalPodAutoscalerResponse_Description_DEFAULT string = ""

func (p *GetCronHorizontalPodAutoscalerResponse) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return GetCronHorizontalPodAutoscalerResponse_Description_DEFAULT
	}
	return p.Description
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetLastScaleTime() (v string) {
	return p.LastScaleTime
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetWorkloadKind() (v string) {
	return p.WorkloadKind
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetWorkloadName() (v string) {
	return p.WorkloadName
}

func (p *GetCronHorizontalPodAutoscalerResponse) GetCrons() (v []*Cron) {
	return p.Crons
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetName(val string) {
	p.Name = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetLastScaleTime(val string) {
	p.LastScaleTime = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetWorkloadKind(val string) {
	p.WorkloadKind = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetWorkloadName(val string) {
	p.WorkloadName = val
}
func (p *GetCronHorizontalPodAutoscalerResponse) SetCrons(val []*Cron) {
	p.Crons = val
}

var fieldIDToName_GetCronHorizontalPodAutoscalerResponse = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	5:  "Description",
	6:  "CreateTime",
	7:  "LastScaleTime",
	8:  "WorkloadKind",
	9:  "WorkloadName",
	10: "Crons",
}

func (p *GetCronHorizontalPodAutoscalerResponse) IsSetDescription() bool {
	return p.Description != GetCronHorizontalPodAutoscalerResponse_Description_DEFAULT
}

func (p *GetCronHorizontalPodAutoscalerResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetCreateTime bool = false
	var issetLastScaleTime bool = false
	var issetWorkloadKind bool = false
	var issetWorkloadName bool = false
	var issetCrons bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastScaleTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetCrons = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetLastScaleTime {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadKind {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadName {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetCrons {
		fieldId = 10
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCronHorizontalPodAutoscalerResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetCronHorizontalPodAutoscalerResponse[fieldId]))
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastScaleTime = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkloadKind = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkloadName = v
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Crons = make([]*Cron, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCron()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Crons = append(p.Crons, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCronHorizontalPodAutoscalerResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCronHorizontalPodAutoscalerResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastScaleTime", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastScaleTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadKind", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkloadKind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadName", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkloadName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Crons", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Crons)); err != nil {
		return err
	}
	for _, v := range p.Crons {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetCronHorizontalPodAutoscalerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCronHorizontalPodAutoscalerResponse(%+v)", *p)
}

func (p *GetCronHorizontalPodAutoscalerResponse) DeepEqual(ano *GetCronHorizontalPodAutoscalerResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.LastScaleTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.WorkloadKind) {
		return false
	}
	if !p.Field9DeepEqual(ano.WorkloadName) {
		return false
	}
	if !p.Field10DeepEqual(ano.Crons) {
		return false
	}
	return true
}

func (p *GetCronHorizontalPodAutoscalerResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field7DeepEqual(src string) bool {

	if strings.Compare(p.LastScaleTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.WorkloadKind, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.WorkloadName, src) != 0 {
		return false
	}
	return true
}
func (p *GetCronHorizontalPodAutoscalerResponse) Field10DeepEqual(src []*Cron) bool {

	if len(p.Crons) != len(src) {
		return false
	}
	for i, v := range p.Crons {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ListCronHorizontalPodAutoscalersResponse struct {
	Total int64                              `thrift:"Total,1,required" json:"Total"`
	Items []*CronHorizontalPodAutoscalerItem `thrift:"Items,2,required" json:"Items"`
}

func NewListCronHorizontalPodAutoscalersResponse() *ListCronHorizontalPodAutoscalersResponse {
	return &ListCronHorizontalPodAutoscalersResponse{}
}

func (p *ListCronHorizontalPodAutoscalersResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListCronHorizontalPodAutoscalersResponse) GetItems() (v []*CronHorizontalPodAutoscalerItem) {
	return p.Items
}
func (p *ListCronHorizontalPodAutoscalersResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListCronHorizontalPodAutoscalersResponse) SetItems(val []*CronHorizontalPodAutoscalerItem) {
	p.Items = val
}

var fieldIDToName_ListCronHorizontalPodAutoscalersResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListCronHorizontalPodAutoscalersResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListCronHorizontalPodAutoscalersResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListCronHorizontalPodAutoscalersResponse[fieldId]))
}

func (p *ListCronHorizontalPodAutoscalersResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListCronHorizontalPodAutoscalersResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*CronHorizontalPodAutoscalerItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCronHorizontalPodAutoscalerItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListCronHorizontalPodAutoscalersResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCronHorizontalPodAutoscalersResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListCronHorizontalPodAutoscalersResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListCronHorizontalPodAutoscalersResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListCronHorizontalPodAutoscalersResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListCronHorizontalPodAutoscalersResponse(%+v)", *p)
}

func (p *ListCronHorizontalPodAutoscalersResponse) DeepEqual(ano *ListCronHorizontalPodAutoscalersResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListCronHorizontalPodAutoscalersResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListCronHorizontalPodAutoscalersResponse) Field2DeepEqual(src []*CronHorizontalPodAutoscalerItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CronHorizontalPodAutoscalerItem struct {
	Namespace     string  `thrift:"Namespace,1,required" from:"metadata.namespace"`
	Name          string  `thrift:"Name,2,required" from:"metadata.name"`
	Description   string  `thrift:"Description,3,required" from:"metadata.annotations.<description>"`
	CreateTime    string  `thrift:"CreateTime,4,required" from:"metadata.creationTimestamp"`
	WorkloadKind  string  `thrift:"WorkloadKind,5,required" json:"WorkloadKind"`
	WorkloadName  string  `thrift:"WorkloadName,6,required" json:"WorkloadName"`
	LastScaleTime string  `thrift:"LastScaleTime,7,required" from:"status.lastScheduleTime"`
	Replicas      int32   `thrift:"Replicas,8,required" from:"status.currentReplicas"`
	Crons         []*Cron `thrift:"Crons,9,required" json:"Crons"`
}

func NewCronHorizontalPodAutoscalerItem() *CronHorizontalPodAutoscalerItem {
	return &CronHorizontalPodAutoscalerItem{

		Namespace:     "",
		Name:          "",
		Description:   "",
		CreateTime:    "",
		WorkloadKind:  "",
		WorkloadName:  "",
		LastScaleTime: "",
		Replicas:      0,
	}
}

func (p *CronHorizontalPodAutoscalerItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CronHorizontalPodAutoscalerItem) GetName() (v string) {
	return p.Name
}

func (p *CronHorizontalPodAutoscalerItem) GetDescription() (v string) {
	return p.Description
}

func (p *CronHorizontalPodAutoscalerItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *CronHorizontalPodAutoscalerItem) GetWorkloadKind() (v string) {
	return p.WorkloadKind
}

func (p *CronHorizontalPodAutoscalerItem) GetWorkloadName() (v string) {
	return p.WorkloadName
}

func (p *CronHorizontalPodAutoscalerItem) GetLastScaleTime() (v string) {
	return p.LastScaleTime
}

func (p *CronHorizontalPodAutoscalerItem) GetReplicas() (v int32) {
	return p.Replicas
}

func (p *CronHorizontalPodAutoscalerItem) GetCrons() (v []*Cron) {
	return p.Crons
}
func (p *CronHorizontalPodAutoscalerItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CronHorizontalPodAutoscalerItem) SetName(val string) {
	p.Name = val
}
func (p *CronHorizontalPodAutoscalerItem) SetDescription(val string) {
	p.Description = val
}
func (p *CronHorizontalPodAutoscalerItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *CronHorizontalPodAutoscalerItem) SetWorkloadKind(val string) {
	p.WorkloadKind = val
}
func (p *CronHorizontalPodAutoscalerItem) SetWorkloadName(val string) {
	p.WorkloadName = val
}
func (p *CronHorizontalPodAutoscalerItem) SetLastScaleTime(val string) {
	p.LastScaleTime = val
}
func (p *CronHorizontalPodAutoscalerItem) SetReplicas(val int32) {
	p.Replicas = val
}
func (p *CronHorizontalPodAutoscalerItem) SetCrons(val []*Cron) {
	p.Crons = val
}

var fieldIDToName_CronHorizontalPodAutoscalerItem = map[int16]string{
	1: "Namespace",
	2: "Name",
	3: "Description",
	4: "CreateTime",
	5: "WorkloadKind",
	6: "WorkloadName",
	7: "LastScaleTime",
	8: "Replicas",
	9: "Crons",
}

func (p *CronHorizontalPodAutoscalerItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNamespace bool = false
	var issetName bool = false
	var issetDescription bool = false
	var issetCreateTime bool = false
	var issetWorkloadKind bool = false
	var issetWorkloadName bool = false
	var issetLastScaleTime bool = false
	var issetReplicas bool = false
	var issetCrons bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetLastScaleTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetReplicas = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetCrons = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNamespace {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadKind {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetLastScaleTime {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetReplicas {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetCrons {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CronHorizontalPodAutoscalerItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CronHorizontalPodAutoscalerItem[fieldId]))
}

func (p *CronHorizontalPodAutoscalerItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkloadKind = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkloadName = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastScaleTime = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Replicas = v
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Crons = make([]*Cron, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCron()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Crons = append(p.Crons, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CronHorizontalPodAutoscalerItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CronHorizontalPodAutoscalerItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadKind", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkloadKind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkloadName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("LastScaleTime", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastScaleTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Replicas", thrift.I32, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Replicas); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Crons", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Crons)); err != nil {
		return err
	}
	for _, v := range p.Crons {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CronHorizontalPodAutoscalerItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CronHorizontalPodAutoscalerItem(%+v)", *p)
}

func (p *CronHorizontalPodAutoscalerItem) DeepEqual(ano *CronHorizontalPodAutoscalerItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.WorkloadKind) {
		return false
	}
	if !p.Field6DeepEqual(ano.WorkloadName) {
		return false
	}
	if !p.Field7DeepEqual(ano.LastScaleTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.Replicas) {
		return false
	}
	if !p.Field9DeepEqual(ano.Crons) {
		return false
	}
	return true
}

func (p *CronHorizontalPodAutoscalerItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.WorkloadKind, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.WorkloadName, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field7DeepEqual(src string) bool {

	if strings.Compare(p.LastScaleTime, src) != 0 {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field8DeepEqual(src int32) bool {

	if p.Replicas != src {
		return false
	}
	return true
}
func (p *CronHorizontalPodAutoscalerItem) Field9DeepEqual(src []*Cron) bool {

	if len(p.Crons) != len(src) {
		return false
	}
	for i, v := range p.Crons {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateCronHorizontalPodAutoscalerRequest struct {
	ClusterId    string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace    string         `thrift:"Namespace,2,required" from:"metadata.namespace"`
	Name         string         `thrift:"Name,3,required" from:"metadata.name"`
	Description  string         `thrift:"Description,4" from:"metadata.annotations.<description>"`
	WorkloadKind string         `thrift:"WorkloadKind,5,required" json:"WorkloadKind"`
	WorkloadName string         `thrift:"WorkloadName,6,required" json:"WorkloadName"`
	Crons        []*Cron        `thrift:"Crons,7,required" json:"Crons"`
	Top          *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewCreateCronHorizontalPodAutoscalerRequest() *CreateCronHorizontalPodAutoscalerRequest {
	return &CreateCronHorizontalPodAutoscalerRequest{

		ClusterId:    "",
		Namespace:    "",
		Name:         "",
		Description:  "",
		WorkloadKind: "",
		WorkloadName: "",
	}
}

func (p *CreateCronHorizontalPodAutoscalerRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateCronHorizontalPodAutoscalerRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateCronHorizontalPodAutoscalerRequest) GetName() (v string) {
	return p.Name
}

var CreateCronHorizontalPodAutoscalerRequest_Description_DEFAULT string = ""

func (p *CreateCronHorizontalPodAutoscalerRequest) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateCronHorizontalPodAutoscalerRequest_Description_DEFAULT
	}
	return p.Description
}

func (p *CreateCronHorizontalPodAutoscalerRequest) GetWorkloadKind() (v string) {
	return p.WorkloadKind
}

func (p *CreateCronHorizontalPodAutoscalerRequest) GetWorkloadName() (v string) {
	return p.WorkloadName
}

func (p *CreateCronHorizontalPodAutoscalerRequest) GetCrons() (v []*Cron) {
	return p.Crons
}

var CreateCronHorizontalPodAutoscalerRequest_Top_DEFAULT *base.TopParam

func (p *CreateCronHorizontalPodAutoscalerRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateCronHorizontalPodAutoscalerRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetDescription(val string) {
	p.Description = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetWorkloadKind(val string) {
	p.WorkloadKind = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetWorkloadName(val string) {
	p.WorkloadName = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetCrons(val []*Cron) {
	p.Crons = val
}
func (p *CreateCronHorizontalPodAutoscalerRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateCronHorizontalPodAutoscalerRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Description",
	5:   "WorkloadKind",
	6:   "WorkloadName",
	7:   "Crons",
	255: "Top",
}

func (p *CreateCronHorizontalPodAutoscalerRequest) IsSetDescription() bool {
	return p.Description != CreateCronHorizontalPodAutoscalerRequest_Description_DEFAULT
}

func (p *CreateCronHorizontalPodAutoscalerRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetWorkloadKind bool = false
	var issetWorkloadName bool = false
	var issetCrons bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkloadName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetCrons = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadKind {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetWorkloadName {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetCrons {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCronHorizontalPodAutoscalerRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateCronHorizontalPodAutoscalerRequest[fieldId]))
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkloadKind = v
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.WorkloadName = v
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Crons = make([]*Cron, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCron()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Crons = append(p.Crons, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCronHorizontalPodAutoscalerRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCronHorizontalPodAutoscalerRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("Description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadKind", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkloadKind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("WorkloadName", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkloadName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Crons", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Crons)); err != nil {
		return err
	}
	for _, v := range p.Crons {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCronHorizontalPodAutoscalerRequest(%+v)", *p)
}

func (p *CreateCronHorizontalPodAutoscalerRequest) DeepEqual(ano *CreateCronHorizontalPodAutoscalerRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.WorkloadKind) {
		return false
	}
	if !p.Field6DeepEqual(ano.WorkloadName) {
		return false
	}
	if !p.Field7DeepEqual(ano.Crons) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateCronHorizontalPodAutoscalerRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.WorkloadKind, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.WorkloadName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field7DeepEqual(src []*Cron) bool {

	if len(p.Crons) != len(src) {
		return false
	}
	for i, v := range p.Crons {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateCronHorizontalPodAutoscalerRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type Cron struct {
	Schedule string `thrift:"Schedule,1,required" json:"Schedule"`
	Target   int32  `thrift:"Target,2,required" json:"Target"`
}

func NewCron() *Cron {
	return &Cron{}
}

func (p *Cron) GetSchedule() (v string) {
	return p.Schedule
}

func (p *Cron) GetTarget() (v int32) {
	return p.Target
}
func (p *Cron) SetSchedule(val string) {
	p.Schedule = val
}
func (p *Cron) SetTarget(val int32) {
	p.Target = val
}

var fieldIDToName_Cron = map[int16]string{
	1: "Schedule",
	2: "Target",
}

func (p *Cron) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSchedule bool = false
	var issetTarget bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchedule = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTarget = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSchedule {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTarget {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Cron[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_Cron[fieldId]))
}

func (p *Cron) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Schedule = v
	}
	return nil
}

func (p *Cron) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Target = v
	}
	return nil
}

func (p *Cron) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Cron"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Cron) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Schedule", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Schedule); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Cron) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Target", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Target); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Cron) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Cron(%+v)", *p)
}

func (p *Cron) DeepEqual(ano *Cron) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Schedule) {
		return false
	}
	if !p.Field2DeepEqual(ano.Target) {
		return false
	}
	return true
}

func (p *Cron) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Schedule, src) != 0 {
		return false
	}
	return true
}
func (p *Cron) Field2DeepEqual(src int32) bool {

	if p.Target != src {
		return false
	}
	return true
}
