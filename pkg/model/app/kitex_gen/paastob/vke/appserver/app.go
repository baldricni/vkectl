// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/paastob/productivity/common"
)

type ErrCode int64

const (
	ErrCode_ParamErr        ErrCode = 1
	ErrCode_NetworkErr      ErrCode = 2
	ErrCode_NotFoundErr     ErrCode = 3
	ErrCode_InternalErr     ErrCode = 4
	ErrCode_AlreadyExistErr ErrCode = 5
)

func (p ErrCode) String() string {
	switch p {
	case ErrCode_ParamErr:
		return "ParamErr"
	case ErrCode_NetworkErr:
		return "NetworkErr"
	case ErrCode_NotFoundErr:
		return "NotFoundErr"
	case ErrCode_InternalErr:
		return "InternalErr"
	case ErrCode_AlreadyExistErr:
		return "AlreadyExistErr"
	}
	return "<UNSET>"
}

func ErrCodeFromString(s string) (ErrCode, error) {
	switch s {
	case "ParamErr":
		return ErrCode_ParamErr, nil
	case "NetworkErr":
		return ErrCode_NetworkErr, nil
	case "NotFoundErr":
		return ErrCode_NotFoundErr, nil
	case "InternalErr":
		return ErrCode_InternalErr, nil
	case "AlreadyExistErr":
		return ErrCode_AlreadyExistErr, nil
	}
	return ErrCode(0), fmt.Errorf("not a valid ErrCode string")
}

func ErrCodePtr(v ErrCode) *ErrCode { return &v }

func (p *ErrCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ErrCode(result.Int64)
	return
}

func (p *ErrCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type AppAPIService interface {
	GetConfigMap(ctx context.Context, req *GetRequest) (r *GetConfigMapResponse, err error)

	ListConfigMaps(ctx context.Context, req *ListRequest) (r *ListConfigMapsResponse, err error)

	CreateConfigMap(ctx context.Context, req *CreateConfigMapRequest) (r *GetConfigMapResponse, err error)

	UpdateConfigMap(ctx context.Context, req *CreateConfigMapRequest) (r *GetConfigMapResponse, err error)

	DeleteConfigMap(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	GetService(ctx context.Context, req *GetServiceRequest) (r *GetServiceResponse, err error)

	ListServices(ctx context.Context, req *ListServiceRequest) (r *ListServicesResponse, err error)

	CreateService(ctx context.Context, req *CreateServiceRequest) (r *GetServiceResponse, err error)

	UpdateService(ctx context.Context, req *CreateServiceRequest) (r *GetServiceResponse, err error)

	DeleteService(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	PatchWorkloadImage(ctx context.Context, req *PatchImageRequest) (r *EmptyResponse, err error)

	PatchWorkloadReplicas(ctx context.Context, req *PatchReplicasRequest) (r *EmptyResponse, err error)

	RestartWorkload(ctx context.Context, req *RestartRequest) (r *EmptyResponse, err error)

	RollbackWorkload(ctx context.Context, req *RollbackRequest) (r *EmptyResponse, err error)

	ListWorkloadPods(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListWorkloadPodsResponse, err error)

	ListWorkloadServices(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListServicesResponse, err error)

	ListWorkloadHistories(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListWorkloadHistoriesResponse, err error)

	ListObjectEvents(ctx context.Context, req *ListObjectEventsRequest) (r *ListWorkloadEventsResponse, err error)

	PatchWorkloadParallelism(ctx context.Context, req *PatchParallelismRequest) (r *EmptyResponse, err error)

	GetContainerLogs(ctx context.Context, req *GetContainerLogsRequest) (r *GetContainerLogsResponse, err error)

	ListWorkloadHorizontalPodAutoscalers(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListWorkloadHorizontalPodAutoscalersResponse, err error)

	GetDeployment(ctx context.Context, req *GetRequest) (r *GetDeploymentResponse, err error)

	ListDeployments(ctx context.Context, req *ListRequest) (r *ListDeploymentsResponse, err error)

	CreateDeployment(ctx context.Context, req *CreateDeploymentRequest) (r *GetDeploymentResponse, err error)

	UpdateDeployment(ctx context.Context, req *CreateDeploymentRequest) (r *GetDeploymentResponse, err error)

	DeleteDeployment(ctx context.Context, req *DeleteRequest) (r *EmptyResponse, err error)

	GetStatefulSet(ctx context.Context, req *GetRequest) (r *GetStatefulSetResponse, err error)

	ListStatefulSets(ctx context.Context, req *ListRequest) (r *ListStatefulSetsResponse, err error)

	CreateStatefulSet(ctx context.Context, req *CreateStatefulSetRequest) (r *GetStatefulSetResponse, err error)

	UpdateStatefulSet(ctx context.Context, req *CreateStatefulSetRequest) (r *GetStatefulSetResponse, err error)

	DeleteStatefulSet(ctx context.Context, req *DeleteRequest) (r *EmptyResponse, err error)

	GetJob(ctx context.Context, req *GetRequest) (r *GetJobResponse, err error)

	ListJobs(ctx context.Context, req *ListRequest) (r *ListJobsResponse, err error)

	CreateJob(ctx context.Context, req *CreateJobRequest) (r *GetJobResponse, err error)

	UpdateJob(ctx context.Context, req *CreateJobRequest) (r *GetJobResponse, err error)

	DeleteJob(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	GetSecret(ctx context.Context, req *GetRequest) (r *GetSecretResponse, err error)

	ListSecrets(ctx context.Context, req *ListSecretsRequest) (r *ListSecretsResponse, err error)

	CreateSecret(ctx context.Context, req *CreateSecretRequest) (r *GetSecretResponse, err error)

	UpdateSecret(ctx context.Context, req *CreateSecretRequest) (r *GetSecretResponse, err error)

	DeleteSecret(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	GetDaemonSet(ctx context.Context, req *GetRequest) (r *GetDaemonSetResponse, err error)

	ListDaemonSets(ctx context.Context, req *ListRequest) (r *ListDaemonSetsResponse, err error)

	CreateDaemonSet(ctx context.Context, req *CreateDaemonSetRequest) (r *GetDaemonSetResponse, err error)

	UpdateDaemonSet(ctx context.Context, req *CreateDaemonSetRequest) (r *GetDaemonSetResponse, err error)

	DeleteDaemonSet(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	GetCronJob(ctx context.Context, req *GetRequest) (r *GetCronJobResponse, err error)

	ListCronJobs(ctx context.Context, req *ListRequest) (r *ListCronJobsResponse, err error)

	ListJobsFromCronJob(ctx context.Context, req *ListJobsFromCronJobRequest) (r *ListJobsFromCronJobResponse, err error)

	CreateCronJob(ctx context.Context, req *CreateCronJobRequest) (r *GetCronJobResponse, err error)

	UpdateCronJob(ctx context.Context, req *CreateCronJobRequest) (r *GetCronJobResponse, err error)

	DeleteCronJob(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	PatchCronJobSuspend(ctx context.Context, req *PatchCronJobSuspendRequest) (r *EmptyResponse, err error)

	GetResourceYaml(ctx context.Context, req *GetResourceYamlRequest) (r *GetResourceYamlResponse, err error)

	CreateResourceByYaml(ctx context.Context, req *CreateResourceByYamlRequest) (r *EmptyResponse, err error)

	UpdateResourceByYaml(ctx context.Context, req *UpdateResourceByYamlRequest) (r *EmptyResponse, err error)

	GetHorizontalPodAutoscaler(ctx context.Context, req *GetRequest) (r *GetHorizontalPodAutoscalerResponse, err error)

	ListHorizontalPodAutoscalers(ctx context.Context, req *ListRequest) (r *ListHorizontalPodAutoscalersResponse, err error)

	CreateHorizontalPodAutoscaler(ctx context.Context, req *CreateHorizontalPodAutoscalerRequest) (r *GetHorizontalPodAutoscalerResponse, err error)

	UpdateHorizontalPodAutoscaler(ctx context.Context, req *CreateHorizontalPodAutoscalerRequest) (r *GetHorizontalPodAutoscalerResponse, err error)

	DeleteHorizontalPodAutoscaler(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	GetPod(ctx context.Context, req *GetRequest) (r *GetPodResponse, err error)

	ListPods(ctx context.Context, req *ListPodsRequest) (r *ListPodsResponse, err error)

	DeletePod(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	GetAPIGroup(ctx context.Context, req *GetAPIGroupRequest) (r *GetAPIGroupResponse, err error)

	ListAPIGroups(ctx context.Context, req *ListRequest) (r *ListAPIGroupsResponse, err error)

	ListCRDs(ctx context.Context, req *ListRequest) (r *ListCRDsResponse, err error)

	DeleteCRD(ctx context.Context, req *DeleteCRDRequest) (r *EmptyResponse, err error)

	GetResource(ctx context.Context, req *GetResourceRequest) (r *ResourceItem, err error)

	ListResources(ctx context.Context, req *ListResourcesRequest) (r *ListResourcesResponse, err error)

	DeleteResource(ctx context.Context, req *GetResourceRequest) (r *EmptyResponse, err error)

	ListCharts(ctx context.Context, req *ListChartsRequest) (r *ListChartsResponse, err error)

	ListChartCategories(ctx context.Context, req *ListChartCategoriesRequest) (r *ListChartCategoriesResponse, err error)

	GetChart(ctx context.Context, req *GetChartRequest) (r *GetChartResponse, err error)

	ListReleases(ctx context.Context, req *ListReleasesRequest) (r *ListReleasesResponse, err error)

	GetRelease(ctx context.Context, req *GetReleaseRequest) (r *GetReleaseResponse, err error)

	CreateRelease(ctx context.Context, req *CreateReleaseRequest) (r *CreateReleaseResponse, err error)

	UpdateRelease(ctx context.Context, req *CreateReleaseRequest) (r *CreateReleaseResponse, err error)

	RollbackRelease(ctx context.Context, req *RollbackReleaseRequest) (r *CreateReleaseResponse, err error)

	DeleteRelease(ctx context.Context, req *DeleteReleaseRequest) (r *EmptyResponse, err error)

	ListCronHorizontalPodAutoscalers(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListCronHorizontalPodAutoscalersResponse, err error)

	CreateCronHorizontalPodAutoscaler(ctx context.Context, req *CreateCronHorizontalPodAutoscalerRequest) (r *GetCronHorizontalPodAutoscalerResponse, err error)

	UpdateCronHorizontalPodAutoscaler(ctx context.Context, req *CreateCronHorizontalPodAutoscalerRequest) (r *GetCronHorizontalPodAutoscalerResponse, err error)

	DeleteCronHorizontalPodAutoscaler(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error)

	ListLogCollectRules(ctx context.Context, req *ListLogCollectRulesReq) (r *ListLogCollectRulesResp, err error)

	CreateLogCollectRule(ctx context.Context, req *CreateLogCollectRuleReq) (r *CreateLogCollectRuleResp, err error)

	UpdateLogCollectRule(ctx context.Context, req *UpdateLogCollectRuleReq) (r *EmptyResponse, err error)

	DeleteLogCollectRule(ctx context.Context, req *DeleteLogCollectRuleReq) (r *EmptyResponse, err error)

	GetLogCollectRule(ctx context.Context, req *GetLogCollectRuleReq) (r *LogCollectRule, err error)

	ForwardKubernetesApi(ctx context.Context, req *ForwardKubernetesApiRequest) (r *ForwardKubernetesApiResponse, err error)
}

type AppAPIServiceClient struct {
	c thrift.TClient
}

func NewAppAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AppAPIServiceClient {
	return &AppAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAppAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AppAPIServiceClient {
	return &AppAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAppAPIServiceClient(c thrift.TClient) *AppAPIServiceClient {
	return &AppAPIServiceClient{
		c: c,
	}
}

func (p *AppAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AppAPIServiceClient) GetConfigMap(ctx context.Context, req *GetRequest) (r *GetConfigMapResponse, err error) {
	var _args AppAPIServiceGetConfigMapArgs
	_args.Req = req
	var _result AppAPIServiceGetConfigMapResult
	if err = p.Client_().Call(ctx, "GetConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListConfigMaps(ctx context.Context, req *ListRequest) (r *ListConfigMapsResponse, err error) {
	var _args AppAPIServiceListConfigMapsArgs
	_args.Req = req
	var _result AppAPIServiceListConfigMapsResult
	if err = p.Client_().Call(ctx, "ListConfigMaps", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateConfigMap(ctx context.Context, req *CreateConfigMapRequest) (r *GetConfigMapResponse, err error) {
	var _args AppAPIServiceCreateConfigMapArgs
	_args.Req = req
	var _result AppAPIServiceCreateConfigMapResult
	if err = p.Client_().Call(ctx, "CreateConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateConfigMap(ctx context.Context, req *CreateConfigMapRequest) (r *GetConfigMapResponse, err error) {
	var _args AppAPIServiceUpdateConfigMapArgs
	_args.Req = req
	var _result AppAPIServiceUpdateConfigMapResult
	if err = p.Client_().Call(ctx, "UpdateConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteConfigMap(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteConfigMapArgs
	_args.Req = req
	var _result AppAPIServiceDeleteConfigMapResult
	if err = p.Client_().Call(ctx, "DeleteConfigMap", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetService(ctx context.Context, req *GetServiceRequest) (r *GetServiceResponse, err error) {
	var _args AppAPIServiceGetServiceArgs
	_args.Req = req
	var _result AppAPIServiceGetServiceResult
	if err = p.Client_().Call(ctx, "GetService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListServices(ctx context.Context, req *ListServiceRequest) (r *ListServicesResponse, err error) {
	var _args AppAPIServiceListServicesArgs
	_args.Req = req
	var _result AppAPIServiceListServicesResult
	if err = p.Client_().Call(ctx, "ListServices", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateService(ctx context.Context, req *CreateServiceRequest) (r *GetServiceResponse, err error) {
	var _args AppAPIServiceCreateServiceArgs
	_args.Req = req
	var _result AppAPIServiceCreateServiceResult
	if err = p.Client_().Call(ctx, "CreateService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateService(ctx context.Context, req *CreateServiceRequest) (r *GetServiceResponse, err error) {
	var _args AppAPIServiceUpdateServiceArgs
	_args.Req = req
	var _result AppAPIServiceUpdateServiceResult
	if err = p.Client_().Call(ctx, "UpdateService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteService(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteServiceArgs
	_args.Req = req
	var _result AppAPIServiceDeleteServiceResult
	if err = p.Client_().Call(ctx, "DeleteService", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) PatchWorkloadImage(ctx context.Context, req *PatchImageRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServicePatchWorkloadImageArgs
	_args.Req = req
	var _result AppAPIServicePatchWorkloadImageResult
	if err = p.Client_().Call(ctx, "PatchWorkloadImage", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) PatchWorkloadReplicas(ctx context.Context, req *PatchReplicasRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServicePatchWorkloadReplicasArgs
	_args.Req = req
	var _result AppAPIServicePatchWorkloadReplicasResult
	if err = p.Client_().Call(ctx, "PatchWorkloadReplicas", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) RestartWorkload(ctx context.Context, req *RestartRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceRestartWorkloadArgs
	_args.Req = req
	var _result AppAPIServiceRestartWorkloadResult
	if err = p.Client_().Call(ctx, "RestartWorkload", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) RollbackWorkload(ctx context.Context, req *RollbackRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceRollbackWorkloadArgs
	_args.Req = req
	var _result AppAPIServiceRollbackWorkloadResult
	if err = p.Client_().Call(ctx, "RollbackWorkload", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListWorkloadPods(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListWorkloadPodsResponse, err error) {
	var _args AppAPIServiceListWorkloadPodsArgs
	_args.Req = req
	var _result AppAPIServiceListWorkloadPodsResult
	if err = p.Client_().Call(ctx, "ListWorkloadPods", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListWorkloadServices(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListServicesResponse, err error) {
	var _args AppAPIServiceListWorkloadServicesArgs
	_args.Req = req
	var _result AppAPIServiceListWorkloadServicesResult
	if err = p.Client_().Call(ctx, "ListWorkloadServices", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListWorkloadHistories(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListWorkloadHistoriesResponse, err error) {
	var _args AppAPIServiceListWorkloadHistoriesArgs
	_args.Req = req
	var _result AppAPIServiceListWorkloadHistoriesResult
	if err = p.Client_().Call(ctx, "ListWorkloadHistories", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListObjectEvents(ctx context.Context, req *ListObjectEventsRequest) (r *ListWorkloadEventsResponse, err error) {
	var _args AppAPIServiceListObjectEventsArgs
	_args.Req = req
	var _result AppAPIServiceListObjectEventsResult
	if err = p.Client_().Call(ctx, "ListObjectEvents", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) PatchWorkloadParallelism(ctx context.Context, req *PatchParallelismRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServicePatchWorkloadParallelismArgs
	_args.Req = req
	var _result AppAPIServicePatchWorkloadParallelismResult
	if err = p.Client_().Call(ctx, "PatchWorkloadParallelism", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetContainerLogs(ctx context.Context, req *GetContainerLogsRequest) (r *GetContainerLogsResponse, err error) {
	var _args AppAPIServiceGetContainerLogsArgs
	_args.Req = req
	var _result AppAPIServiceGetContainerLogsResult
	if err = p.Client_().Call(ctx, "GetContainerLogs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListWorkloadHorizontalPodAutoscalers(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListWorkloadHorizontalPodAutoscalersResponse, err error) {
	var _args AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs
	_args.Req = req
	var _result AppAPIServiceListWorkloadHorizontalPodAutoscalersResult
	if err = p.Client_().Call(ctx, "ListWorkloadHorizontalPodAutoscalers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetDeployment(ctx context.Context, req *GetRequest) (r *GetDeploymentResponse, err error) {
	var _args AppAPIServiceGetDeploymentArgs
	_args.Req = req
	var _result AppAPIServiceGetDeploymentResult
	if err = p.Client_().Call(ctx, "GetDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListDeployments(ctx context.Context, req *ListRequest) (r *ListDeploymentsResponse, err error) {
	var _args AppAPIServiceListDeploymentsArgs
	_args.Req = req
	var _result AppAPIServiceListDeploymentsResult
	if err = p.Client_().Call(ctx, "ListDeployments", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateDeployment(ctx context.Context, req *CreateDeploymentRequest) (r *GetDeploymentResponse, err error) {
	var _args AppAPIServiceCreateDeploymentArgs
	_args.Req = req
	var _result AppAPIServiceCreateDeploymentResult
	if err = p.Client_().Call(ctx, "CreateDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateDeployment(ctx context.Context, req *CreateDeploymentRequest) (r *GetDeploymentResponse, err error) {
	var _args AppAPIServiceUpdateDeploymentArgs
	_args.Req = req
	var _result AppAPIServiceUpdateDeploymentResult
	if err = p.Client_().Call(ctx, "UpdateDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteDeployment(ctx context.Context, req *DeleteRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteDeploymentArgs
	_args.Req = req
	var _result AppAPIServiceDeleteDeploymentResult
	if err = p.Client_().Call(ctx, "DeleteDeployment", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetStatefulSet(ctx context.Context, req *GetRequest) (r *GetStatefulSetResponse, err error) {
	var _args AppAPIServiceGetStatefulSetArgs
	_args.Req = req
	var _result AppAPIServiceGetStatefulSetResult
	if err = p.Client_().Call(ctx, "GetStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListStatefulSets(ctx context.Context, req *ListRequest) (r *ListStatefulSetsResponse, err error) {
	var _args AppAPIServiceListStatefulSetsArgs
	_args.Req = req
	var _result AppAPIServiceListStatefulSetsResult
	if err = p.Client_().Call(ctx, "ListStatefulSets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateStatefulSet(ctx context.Context, req *CreateStatefulSetRequest) (r *GetStatefulSetResponse, err error) {
	var _args AppAPIServiceCreateStatefulSetArgs
	_args.Req = req
	var _result AppAPIServiceCreateStatefulSetResult
	if err = p.Client_().Call(ctx, "CreateStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateStatefulSet(ctx context.Context, req *CreateStatefulSetRequest) (r *GetStatefulSetResponse, err error) {
	var _args AppAPIServiceUpdateStatefulSetArgs
	_args.Req = req
	var _result AppAPIServiceUpdateStatefulSetResult
	if err = p.Client_().Call(ctx, "UpdateStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteStatefulSet(ctx context.Context, req *DeleteRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteStatefulSetArgs
	_args.Req = req
	var _result AppAPIServiceDeleteStatefulSetResult
	if err = p.Client_().Call(ctx, "DeleteStatefulSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetJob(ctx context.Context, req *GetRequest) (r *GetJobResponse, err error) {
	var _args AppAPIServiceGetJobArgs
	_args.Req = req
	var _result AppAPIServiceGetJobResult
	if err = p.Client_().Call(ctx, "GetJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListJobs(ctx context.Context, req *ListRequest) (r *ListJobsResponse, err error) {
	var _args AppAPIServiceListJobsArgs
	_args.Req = req
	var _result AppAPIServiceListJobsResult
	if err = p.Client_().Call(ctx, "ListJobs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateJob(ctx context.Context, req *CreateJobRequest) (r *GetJobResponse, err error) {
	var _args AppAPIServiceCreateJobArgs
	_args.Req = req
	var _result AppAPIServiceCreateJobResult
	if err = p.Client_().Call(ctx, "CreateJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateJob(ctx context.Context, req *CreateJobRequest) (r *GetJobResponse, err error) {
	var _args AppAPIServiceUpdateJobArgs
	_args.Req = req
	var _result AppAPIServiceUpdateJobResult
	if err = p.Client_().Call(ctx, "UpdateJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteJob(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteJobArgs
	_args.Req = req
	var _result AppAPIServiceDeleteJobResult
	if err = p.Client_().Call(ctx, "DeleteJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetSecret(ctx context.Context, req *GetRequest) (r *GetSecretResponse, err error) {
	var _args AppAPIServiceGetSecretArgs
	_args.Req = req
	var _result AppAPIServiceGetSecretResult
	if err = p.Client_().Call(ctx, "GetSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListSecrets(ctx context.Context, req *ListSecretsRequest) (r *ListSecretsResponse, err error) {
	var _args AppAPIServiceListSecretsArgs
	_args.Req = req
	var _result AppAPIServiceListSecretsResult
	if err = p.Client_().Call(ctx, "ListSecrets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateSecret(ctx context.Context, req *CreateSecretRequest) (r *GetSecretResponse, err error) {
	var _args AppAPIServiceCreateSecretArgs
	_args.Req = req
	var _result AppAPIServiceCreateSecretResult
	if err = p.Client_().Call(ctx, "CreateSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateSecret(ctx context.Context, req *CreateSecretRequest) (r *GetSecretResponse, err error) {
	var _args AppAPIServiceUpdateSecretArgs
	_args.Req = req
	var _result AppAPIServiceUpdateSecretResult
	if err = p.Client_().Call(ctx, "UpdateSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteSecret(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteSecretArgs
	_args.Req = req
	var _result AppAPIServiceDeleteSecretResult
	if err = p.Client_().Call(ctx, "DeleteSecret", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetDaemonSet(ctx context.Context, req *GetRequest) (r *GetDaemonSetResponse, err error) {
	var _args AppAPIServiceGetDaemonSetArgs
	_args.Req = req
	var _result AppAPIServiceGetDaemonSetResult
	if err = p.Client_().Call(ctx, "GetDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListDaemonSets(ctx context.Context, req *ListRequest) (r *ListDaemonSetsResponse, err error) {
	var _args AppAPIServiceListDaemonSetsArgs
	_args.Req = req
	var _result AppAPIServiceListDaemonSetsResult
	if err = p.Client_().Call(ctx, "ListDaemonSets", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateDaemonSet(ctx context.Context, req *CreateDaemonSetRequest) (r *GetDaemonSetResponse, err error) {
	var _args AppAPIServiceCreateDaemonSetArgs
	_args.Req = req
	var _result AppAPIServiceCreateDaemonSetResult
	if err = p.Client_().Call(ctx, "CreateDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateDaemonSet(ctx context.Context, req *CreateDaemonSetRequest) (r *GetDaemonSetResponse, err error) {
	var _args AppAPIServiceUpdateDaemonSetArgs
	_args.Req = req
	var _result AppAPIServiceUpdateDaemonSetResult
	if err = p.Client_().Call(ctx, "UpdateDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteDaemonSet(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteDaemonSetArgs
	_args.Req = req
	var _result AppAPIServiceDeleteDaemonSetResult
	if err = p.Client_().Call(ctx, "DeleteDaemonSet", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetCronJob(ctx context.Context, req *GetRequest) (r *GetCronJobResponse, err error) {
	var _args AppAPIServiceGetCronJobArgs
	_args.Req = req
	var _result AppAPIServiceGetCronJobResult
	if err = p.Client_().Call(ctx, "GetCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListCronJobs(ctx context.Context, req *ListRequest) (r *ListCronJobsResponse, err error) {
	var _args AppAPIServiceListCronJobsArgs
	_args.Req = req
	var _result AppAPIServiceListCronJobsResult
	if err = p.Client_().Call(ctx, "ListCronJobs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListJobsFromCronJob(ctx context.Context, req *ListJobsFromCronJobRequest) (r *ListJobsFromCronJobResponse, err error) {
	var _args AppAPIServiceListJobsFromCronJobArgs
	_args.Req = req
	var _result AppAPIServiceListJobsFromCronJobResult
	if err = p.Client_().Call(ctx, "ListJobsFromCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateCronJob(ctx context.Context, req *CreateCronJobRequest) (r *GetCronJobResponse, err error) {
	var _args AppAPIServiceCreateCronJobArgs
	_args.Req = req
	var _result AppAPIServiceCreateCronJobResult
	if err = p.Client_().Call(ctx, "CreateCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateCronJob(ctx context.Context, req *CreateCronJobRequest) (r *GetCronJobResponse, err error) {
	var _args AppAPIServiceUpdateCronJobArgs
	_args.Req = req
	var _result AppAPIServiceUpdateCronJobResult
	if err = p.Client_().Call(ctx, "UpdateCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteCronJob(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteCronJobArgs
	_args.Req = req
	var _result AppAPIServiceDeleteCronJobResult
	if err = p.Client_().Call(ctx, "DeleteCronJob", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) PatchCronJobSuspend(ctx context.Context, req *PatchCronJobSuspendRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServicePatchCronJobSuspendArgs
	_args.Req = req
	var _result AppAPIServicePatchCronJobSuspendResult
	if err = p.Client_().Call(ctx, "PatchCronJobSuspend", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetResourceYaml(ctx context.Context, req *GetResourceYamlRequest) (r *GetResourceYamlResponse, err error) {
	var _args AppAPIServiceGetResourceYamlArgs
	_args.Req = req
	var _result AppAPIServiceGetResourceYamlResult
	if err = p.Client_().Call(ctx, "GetResourceYaml", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateResourceByYaml(ctx context.Context, req *CreateResourceByYamlRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceCreateResourceByYamlArgs
	_args.Req = req
	var _result AppAPIServiceCreateResourceByYamlResult
	if err = p.Client_().Call(ctx, "CreateResourceByYaml", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateResourceByYaml(ctx context.Context, req *UpdateResourceByYamlRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceUpdateResourceByYamlArgs
	_args.Req = req
	var _result AppAPIServiceUpdateResourceByYamlResult
	if err = p.Client_().Call(ctx, "UpdateResourceByYaml", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetHorizontalPodAutoscaler(ctx context.Context, req *GetRequest) (r *GetHorizontalPodAutoscalerResponse, err error) {
	var _args AppAPIServiceGetHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceGetHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "GetHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListHorizontalPodAutoscalers(ctx context.Context, req *ListRequest) (r *ListHorizontalPodAutoscalersResponse, err error) {
	var _args AppAPIServiceListHorizontalPodAutoscalersArgs
	_args.Req = req
	var _result AppAPIServiceListHorizontalPodAutoscalersResult
	if err = p.Client_().Call(ctx, "ListHorizontalPodAutoscalers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateHorizontalPodAutoscaler(ctx context.Context, req *CreateHorizontalPodAutoscalerRequest) (r *GetHorizontalPodAutoscalerResponse, err error) {
	var _args AppAPIServiceCreateHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceCreateHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "CreateHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateHorizontalPodAutoscaler(ctx context.Context, req *CreateHorizontalPodAutoscalerRequest) (r *GetHorizontalPodAutoscalerResponse, err error) {
	var _args AppAPIServiceUpdateHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceUpdateHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "UpdateHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteHorizontalPodAutoscaler(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceDeleteHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "DeleteHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetPod(ctx context.Context, req *GetRequest) (r *GetPodResponse, err error) {
	var _args AppAPIServiceGetPodArgs
	_args.Req = req
	var _result AppAPIServiceGetPodResult
	if err = p.Client_().Call(ctx, "GetPod", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListPods(ctx context.Context, req *ListPodsRequest) (r *ListPodsResponse, err error) {
	var _args AppAPIServiceListPodsArgs
	_args.Req = req
	var _result AppAPIServiceListPodsResult
	if err = p.Client_().Call(ctx, "ListPods", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeletePod(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeletePodArgs
	_args.Req = req
	var _result AppAPIServiceDeletePodResult
	if err = p.Client_().Call(ctx, "DeletePod", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetAPIGroup(ctx context.Context, req *GetAPIGroupRequest) (r *GetAPIGroupResponse, err error) {
	var _args AppAPIServiceGetAPIGroupArgs
	_args.Req = req
	var _result AppAPIServiceGetAPIGroupResult
	if err = p.Client_().Call(ctx, "GetAPIGroup", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListAPIGroups(ctx context.Context, req *ListRequest) (r *ListAPIGroupsResponse, err error) {
	var _args AppAPIServiceListAPIGroupsArgs
	_args.Req = req
	var _result AppAPIServiceListAPIGroupsResult
	if err = p.Client_().Call(ctx, "ListAPIGroups", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListCRDs(ctx context.Context, req *ListRequest) (r *ListCRDsResponse, err error) {
	var _args AppAPIServiceListCRDsArgs
	_args.Req = req
	var _result AppAPIServiceListCRDsResult
	if err = p.Client_().Call(ctx, "ListCRDs", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteCRD(ctx context.Context, req *DeleteCRDRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteCRDArgs
	_args.Req = req
	var _result AppAPIServiceDeleteCRDResult
	if err = p.Client_().Call(ctx, "DeleteCRD", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetResource(ctx context.Context, req *GetResourceRequest) (r *ResourceItem, err error) {
	var _args AppAPIServiceGetResourceArgs
	_args.Req = req
	var _result AppAPIServiceGetResourceResult
	if err = p.Client_().Call(ctx, "GetResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListResources(ctx context.Context, req *ListResourcesRequest) (r *ListResourcesResponse, err error) {
	var _args AppAPIServiceListResourcesArgs
	_args.Req = req
	var _result AppAPIServiceListResourcesResult
	if err = p.Client_().Call(ctx, "ListResources", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteResource(ctx context.Context, req *GetResourceRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteResourceArgs
	_args.Req = req
	var _result AppAPIServiceDeleteResourceResult
	if err = p.Client_().Call(ctx, "DeleteResource", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListCharts(ctx context.Context, req *ListChartsRequest) (r *ListChartsResponse, err error) {
	var _args AppAPIServiceListChartsArgs
	_args.Req = req
	var _result AppAPIServiceListChartsResult
	if err = p.Client_().Call(ctx, "ListCharts", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListChartCategories(ctx context.Context, req *ListChartCategoriesRequest) (r *ListChartCategoriesResponse, err error) {
	var _args AppAPIServiceListChartCategoriesArgs
	_args.Req = req
	var _result AppAPIServiceListChartCategoriesResult
	if err = p.Client_().Call(ctx, "ListChartCategories", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetChart(ctx context.Context, req *GetChartRequest) (r *GetChartResponse, err error) {
	var _args AppAPIServiceGetChartArgs
	_args.Req = req
	var _result AppAPIServiceGetChartResult
	if err = p.Client_().Call(ctx, "GetChart", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListReleases(ctx context.Context, req *ListReleasesRequest) (r *ListReleasesResponse, err error) {
	var _args AppAPIServiceListReleasesArgs
	_args.Req = req
	var _result AppAPIServiceListReleasesResult
	if err = p.Client_().Call(ctx, "ListReleases", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetRelease(ctx context.Context, req *GetReleaseRequest) (r *GetReleaseResponse, err error) {
	var _args AppAPIServiceGetReleaseArgs
	_args.Req = req
	var _result AppAPIServiceGetReleaseResult
	if err = p.Client_().Call(ctx, "GetRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateRelease(ctx context.Context, req *CreateReleaseRequest) (r *CreateReleaseResponse, err error) {
	var _args AppAPIServiceCreateReleaseArgs
	_args.Req = req
	var _result AppAPIServiceCreateReleaseResult
	if err = p.Client_().Call(ctx, "CreateRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateRelease(ctx context.Context, req *CreateReleaseRequest) (r *CreateReleaseResponse, err error) {
	var _args AppAPIServiceUpdateReleaseArgs
	_args.Req = req
	var _result AppAPIServiceUpdateReleaseResult
	if err = p.Client_().Call(ctx, "UpdateRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) RollbackRelease(ctx context.Context, req *RollbackReleaseRequest) (r *CreateReleaseResponse, err error) {
	var _args AppAPIServiceRollbackReleaseArgs
	_args.Req = req
	var _result AppAPIServiceRollbackReleaseResult
	if err = p.Client_().Call(ctx, "RollbackRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteRelease(ctx context.Context, req *DeleteReleaseRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteReleaseArgs
	_args.Req = req
	var _result AppAPIServiceDeleteReleaseResult
	if err = p.Client_().Call(ctx, "DeleteRelease", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListCronHorizontalPodAutoscalers(ctx context.Context, req *ListWorkloadObjectsRequest) (r *ListCronHorizontalPodAutoscalersResponse, err error) {
	var _args AppAPIServiceListCronHorizontalPodAutoscalersArgs
	_args.Req = req
	var _result AppAPIServiceListCronHorizontalPodAutoscalersResult
	if err = p.Client_().Call(ctx, "ListCronHorizontalPodAutoscalers", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateCronHorizontalPodAutoscaler(ctx context.Context, req *CreateCronHorizontalPodAutoscalerRequest) (r *GetCronHorizontalPodAutoscalerResponse, err error) {
	var _args AppAPIServiceCreateCronHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceCreateCronHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "CreateCronHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateCronHorizontalPodAutoscaler(ctx context.Context, req *CreateCronHorizontalPodAutoscalerRequest) (r *GetCronHorizontalPodAutoscalerResponse, err error) {
	var _args AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceUpdateCronHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "UpdateCronHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteCronHorizontalPodAutoscaler(ctx context.Context, req *GetRequest) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs
	_args.Req = req
	var _result AppAPIServiceDeleteCronHorizontalPodAutoscalerResult
	if err = p.Client_().Call(ctx, "DeleteCronHorizontalPodAutoscaler", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ListLogCollectRules(ctx context.Context, req *ListLogCollectRulesReq) (r *ListLogCollectRulesResp, err error) {
	var _args AppAPIServiceListLogCollectRulesArgs
	_args.Req = req
	var _result AppAPIServiceListLogCollectRulesResult
	if err = p.Client_().Call(ctx, "ListLogCollectRules", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) CreateLogCollectRule(ctx context.Context, req *CreateLogCollectRuleReq) (r *CreateLogCollectRuleResp, err error) {
	var _args AppAPIServiceCreateLogCollectRuleArgs
	_args.Req = req
	var _result AppAPIServiceCreateLogCollectRuleResult
	if err = p.Client_().Call(ctx, "CreateLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) UpdateLogCollectRule(ctx context.Context, req *UpdateLogCollectRuleReq) (r *EmptyResponse, err error) {
	var _args AppAPIServiceUpdateLogCollectRuleArgs
	_args.Req = req
	var _result AppAPIServiceUpdateLogCollectRuleResult
	if err = p.Client_().Call(ctx, "UpdateLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) DeleteLogCollectRule(ctx context.Context, req *DeleteLogCollectRuleReq) (r *EmptyResponse, err error) {
	var _args AppAPIServiceDeleteLogCollectRuleArgs
	_args.Req = req
	var _result AppAPIServiceDeleteLogCollectRuleResult
	if err = p.Client_().Call(ctx, "DeleteLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) GetLogCollectRule(ctx context.Context, req *GetLogCollectRuleReq) (r *LogCollectRule, err error) {
	var _args AppAPIServiceGetLogCollectRuleArgs
	_args.Req = req
	var _result AppAPIServiceGetLogCollectRuleResult
	if err = p.Client_().Call(ctx, "GetLogCollectRule", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

func (p *AppAPIServiceClient) ForwardKubernetesApi(ctx context.Context, req *ForwardKubernetesApiRequest) (r *ForwardKubernetesApiResponse, err error) {
	var _args AppAPIServiceForwardKubernetesApiArgs
	_args.Req = req
	var _result AppAPIServiceForwardKubernetesApiResult
	if err = p.Client_().Call(ctx, "ForwardKubernetesApi", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.Err != nil:
		return r, _result.Err
	}
	return _result.GetSuccess(), nil
}

type AppAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AppAPIService
}

func (p *AppAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AppAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AppAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAppAPIServiceProcessor(handler AppAPIService) *AppAPIServiceProcessor {
	self := &AppAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetConfigMap", &appAPIServiceProcessorGetConfigMap{handler: handler})
	self.AddToProcessorMap("ListConfigMaps", &appAPIServiceProcessorListConfigMaps{handler: handler})
	self.AddToProcessorMap("CreateConfigMap", &appAPIServiceProcessorCreateConfigMap{handler: handler})
	self.AddToProcessorMap("UpdateConfigMap", &appAPIServiceProcessorUpdateConfigMap{handler: handler})
	self.AddToProcessorMap("DeleteConfigMap", &appAPIServiceProcessorDeleteConfigMap{handler: handler})
	self.AddToProcessorMap("GetService", &appAPIServiceProcessorGetService{handler: handler})
	self.AddToProcessorMap("ListServices", &appAPIServiceProcessorListServices{handler: handler})
	self.AddToProcessorMap("CreateService", &appAPIServiceProcessorCreateService{handler: handler})
	self.AddToProcessorMap("UpdateService", &appAPIServiceProcessorUpdateService{handler: handler})
	self.AddToProcessorMap("DeleteService", &appAPIServiceProcessorDeleteService{handler: handler})
	self.AddToProcessorMap("PatchWorkloadImage", &appAPIServiceProcessorPatchWorkloadImage{handler: handler})
	self.AddToProcessorMap("PatchWorkloadReplicas", &appAPIServiceProcessorPatchWorkloadReplicas{handler: handler})
	self.AddToProcessorMap("RestartWorkload", &appAPIServiceProcessorRestartWorkload{handler: handler})
	self.AddToProcessorMap("RollbackWorkload", &appAPIServiceProcessorRollbackWorkload{handler: handler})
	self.AddToProcessorMap("ListWorkloadPods", &appAPIServiceProcessorListWorkloadPods{handler: handler})
	self.AddToProcessorMap("ListWorkloadServices", &appAPIServiceProcessorListWorkloadServices{handler: handler})
	self.AddToProcessorMap("ListWorkloadHistories", &appAPIServiceProcessorListWorkloadHistories{handler: handler})
	self.AddToProcessorMap("ListObjectEvents", &appAPIServiceProcessorListObjectEvents{handler: handler})
	self.AddToProcessorMap("PatchWorkloadParallelism", &appAPIServiceProcessorPatchWorkloadParallelism{handler: handler})
	self.AddToProcessorMap("GetContainerLogs", &appAPIServiceProcessorGetContainerLogs{handler: handler})
	self.AddToProcessorMap("ListWorkloadHorizontalPodAutoscalers", &appAPIServiceProcessorListWorkloadHorizontalPodAutoscalers{handler: handler})
	self.AddToProcessorMap("GetDeployment", &appAPIServiceProcessorGetDeployment{handler: handler})
	self.AddToProcessorMap("ListDeployments", &appAPIServiceProcessorListDeployments{handler: handler})
	self.AddToProcessorMap("CreateDeployment", &appAPIServiceProcessorCreateDeployment{handler: handler})
	self.AddToProcessorMap("UpdateDeployment", &appAPIServiceProcessorUpdateDeployment{handler: handler})
	self.AddToProcessorMap("DeleteDeployment", &appAPIServiceProcessorDeleteDeployment{handler: handler})
	self.AddToProcessorMap("GetStatefulSet", &appAPIServiceProcessorGetStatefulSet{handler: handler})
	self.AddToProcessorMap("ListStatefulSets", &appAPIServiceProcessorListStatefulSets{handler: handler})
	self.AddToProcessorMap("CreateStatefulSet", &appAPIServiceProcessorCreateStatefulSet{handler: handler})
	self.AddToProcessorMap("UpdateStatefulSet", &appAPIServiceProcessorUpdateStatefulSet{handler: handler})
	self.AddToProcessorMap("DeleteStatefulSet", &appAPIServiceProcessorDeleteStatefulSet{handler: handler})
	self.AddToProcessorMap("GetJob", &appAPIServiceProcessorGetJob{handler: handler})
	self.AddToProcessorMap("ListJobs", &appAPIServiceProcessorListJobs{handler: handler})
	self.AddToProcessorMap("CreateJob", &appAPIServiceProcessorCreateJob{handler: handler})
	self.AddToProcessorMap("UpdateJob", &appAPIServiceProcessorUpdateJob{handler: handler})
	self.AddToProcessorMap("DeleteJob", &appAPIServiceProcessorDeleteJob{handler: handler})
	self.AddToProcessorMap("GetSecret", &appAPIServiceProcessorGetSecret{handler: handler})
	self.AddToProcessorMap("ListSecrets", &appAPIServiceProcessorListSecrets{handler: handler})
	self.AddToProcessorMap("CreateSecret", &appAPIServiceProcessorCreateSecret{handler: handler})
	self.AddToProcessorMap("UpdateSecret", &appAPIServiceProcessorUpdateSecret{handler: handler})
	self.AddToProcessorMap("DeleteSecret", &appAPIServiceProcessorDeleteSecret{handler: handler})
	self.AddToProcessorMap("GetDaemonSet", &appAPIServiceProcessorGetDaemonSet{handler: handler})
	self.AddToProcessorMap("ListDaemonSets", &appAPIServiceProcessorListDaemonSets{handler: handler})
	self.AddToProcessorMap("CreateDaemonSet", &appAPIServiceProcessorCreateDaemonSet{handler: handler})
	self.AddToProcessorMap("UpdateDaemonSet", &appAPIServiceProcessorUpdateDaemonSet{handler: handler})
	self.AddToProcessorMap("DeleteDaemonSet", &appAPIServiceProcessorDeleteDaemonSet{handler: handler})
	self.AddToProcessorMap("GetCronJob", &appAPIServiceProcessorGetCronJob{handler: handler})
	self.AddToProcessorMap("ListCronJobs", &appAPIServiceProcessorListCronJobs{handler: handler})
	self.AddToProcessorMap("ListJobsFromCronJob", &appAPIServiceProcessorListJobsFromCronJob{handler: handler})
	self.AddToProcessorMap("CreateCronJob", &appAPIServiceProcessorCreateCronJob{handler: handler})
	self.AddToProcessorMap("UpdateCronJob", &appAPIServiceProcessorUpdateCronJob{handler: handler})
	self.AddToProcessorMap("DeleteCronJob", &appAPIServiceProcessorDeleteCronJob{handler: handler})
	self.AddToProcessorMap("PatchCronJobSuspend", &appAPIServiceProcessorPatchCronJobSuspend{handler: handler})
	self.AddToProcessorMap("GetResourceYaml", &appAPIServiceProcessorGetResourceYaml{handler: handler})
	self.AddToProcessorMap("CreateResourceByYaml", &appAPIServiceProcessorCreateResourceByYaml{handler: handler})
	self.AddToProcessorMap("UpdateResourceByYaml", &appAPIServiceProcessorUpdateResourceByYaml{handler: handler})
	self.AddToProcessorMap("GetHorizontalPodAutoscaler", &appAPIServiceProcessorGetHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("ListHorizontalPodAutoscalers", &appAPIServiceProcessorListHorizontalPodAutoscalers{handler: handler})
	self.AddToProcessorMap("CreateHorizontalPodAutoscaler", &appAPIServiceProcessorCreateHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("UpdateHorizontalPodAutoscaler", &appAPIServiceProcessorUpdateHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("DeleteHorizontalPodAutoscaler", &appAPIServiceProcessorDeleteHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("GetPod", &appAPIServiceProcessorGetPod{handler: handler})
	self.AddToProcessorMap("ListPods", &appAPIServiceProcessorListPods{handler: handler})
	self.AddToProcessorMap("DeletePod", &appAPIServiceProcessorDeletePod{handler: handler})
	self.AddToProcessorMap("GetAPIGroup", &appAPIServiceProcessorGetAPIGroup{handler: handler})
	self.AddToProcessorMap("ListAPIGroups", &appAPIServiceProcessorListAPIGroups{handler: handler})
	self.AddToProcessorMap("ListCRDs", &appAPIServiceProcessorListCRDs{handler: handler})
	self.AddToProcessorMap("DeleteCRD", &appAPIServiceProcessorDeleteCRD{handler: handler})
	self.AddToProcessorMap("GetResource", &appAPIServiceProcessorGetResource{handler: handler})
	self.AddToProcessorMap("ListResources", &appAPIServiceProcessorListResources{handler: handler})
	self.AddToProcessorMap("DeleteResource", &appAPIServiceProcessorDeleteResource{handler: handler})
	self.AddToProcessorMap("ListCharts", &appAPIServiceProcessorListCharts{handler: handler})
	self.AddToProcessorMap("ListChartCategories", &appAPIServiceProcessorListChartCategories{handler: handler})
	self.AddToProcessorMap("GetChart", &appAPIServiceProcessorGetChart{handler: handler})
	self.AddToProcessorMap("ListReleases", &appAPIServiceProcessorListReleases{handler: handler})
	self.AddToProcessorMap("GetRelease", &appAPIServiceProcessorGetRelease{handler: handler})
	self.AddToProcessorMap("CreateRelease", &appAPIServiceProcessorCreateRelease{handler: handler})
	self.AddToProcessorMap("UpdateRelease", &appAPIServiceProcessorUpdateRelease{handler: handler})
	self.AddToProcessorMap("RollbackRelease", &appAPIServiceProcessorRollbackRelease{handler: handler})
	self.AddToProcessorMap("DeleteRelease", &appAPIServiceProcessorDeleteRelease{handler: handler})
	self.AddToProcessorMap("ListCronHorizontalPodAutoscalers", &appAPIServiceProcessorListCronHorizontalPodAutoscalers{handler: handler})
	self.AddToProcessorMap("CreateCronHorizontalPodAutoscaler", &appAPIServiceProcessorCreateCronHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("UpdateCronHorizontalPodAutoscaler", &appAPIServiceProcessorUpdateCronHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("DeleteCronHorizontalPodAutoscaler", &appAPIServiceProcessorDeleteCronHorizontalPodAutoscaler{handler: handler})
	self.AddToProcessorMap("ListLogCollectRules", &appAPIServiceProcessorListLogCollectRules{handler: handler})
	self.AddToProcessorMap("CreateLogCollectRule", &appAPIServiceProcessorCreateLogCollectRule{handler: handler})
	self.AddToProcessorMap("UpdateLogCollectRule", &appAPIServiceProcessorUpdateLogCollectRule{handler: handler})
	self.AddToProcessorMap("DeleteLogCollectRule", &appAPIServiceProcessorDeleteLogCollectRule{handler: handler})
	self.AddToProcessorMap("GetLogCollectRule", &appAPIServiceProcessorGetLogCollectRule{handler: handler})
	self.AddToProcessorMap("ForwardKubernetesApi", &appAPIServiceProcessorForwardKubernetesApi{handler: handler})
	return self
}
func (p *AppAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type appAPIServiceProcessorGetConfigMap struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetConfigMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetConfigMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetConfigMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetConfigMapResult{}
	var retval *GetConfigMapResponse
	if retval, err2 = p.handler.GetConfigMap(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetConfigMap: "+err2.Error())
			oprot.WriteMessageBegin("GetConfigMap", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetConfigMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListConfigMaps struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListConfigMaps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListConfigMapsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListConfigMaps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListConfigMapsResult{}
	var retval *ListConfigMapsResponse
	if retval, err2 = p.handler.ListConfigMaps(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListConfigMaps: "+err2.Error())
			oprot.WriteMessageBegin("ListConfigMaps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListConfigMaps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateConfigMap struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateConfigMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateConfigMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateConfigMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateConfigMapResult{}
	var retval *GetConfigMapResponse
	if retval, err2 = p.handler.CreateConfigMap(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateConfigMap: "+err2.Error())
			oprot.WriteMessageBegin("CreateConfigMap", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateConfigMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateConfigMap struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateConfigMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateConfigMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateConfigMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateConfigMapResult{}
	var retval *GetConfigMapResponse
	if retval, err2 = p.handler.UpdateConfigMap(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateConfigMap: "+err2.Error())
			oprot.WriteMessageBegin("UpdateConfigMap", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateConfigMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteConfigMap struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteConfigMap) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteConfigMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteConfigMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteConfigMapResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteConfigMap(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteConfigMap: "+err2.Error())
			oprot.WriteMessageBegin("DeleteConfigMap", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteConfigMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetService struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetServiceResult{}
	var retval *GetServiceResponse
	if retval, err2 = p.handler.GetService(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetService: "+err2.Error())
			oprot.WriteMessageBegin("GetService", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListServices struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListServices) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListServicesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListServices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListServicesResult{}
	var retval *ListServicesResponse
	if retval, err2 = p.handler.ListServices(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListServices: "+err2.Error())
			oprot.WriteMessageBegin("ListServices", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListServices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateService struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateServiceResult{}
	var retval *GetServiceResponse
	if retval, err2 = p.handler.CreateService(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateService: "+err2.Error())
			oprot.WriteMessageBegin("CreateService", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateService struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateServiceResult{}
	var retval *GetServiceResponse
	if retval, err2 = p.handler.UpdateService(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateService: "+err2.Error())
			oprot.WriteMessageBegin("UpdateService", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteService struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteService) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteServiceResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteService(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteService: "+err2.Error())
			oprot.WriteMessageBegin("DeleteService", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorPatchWorkloadImage struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorPatchWorkloadImage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServicePatchWorkloadImageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PatchWorkloadImage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServicePatchWorkloadImageResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.PatchWorkloadImage(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PatchWorkloadImage: "+err2.Error())
			oprot.WriteMessageBegin("PatchWorkloadImage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PatchWorkloadImage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorPatchWorkloadReplicas struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorPatchWorkloadReplicas) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServicePatchWorkloadReplicasArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PatchWorkloadReplicas", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServicePatchWorkloadReplicasResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.PatchWorkloadReplicas(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PatchWorkloadReplicas: "+err2.Error())
			oprot.WriteMessageBegin("PatchWorkloadReplicas", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PatchWorkloadReplicas", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorRestartWorkload struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorRestartWorkload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceRestartWorkloadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RestartWorkload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceRestartWorkloadResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.RestartWorkload(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RestartWorkload: "+err2.Error())
			oprot.WriteMessageBegin("RestartWorkload", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RestartWorkload", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorRollbackWorkload struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorRollbackWorkload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceRollbackWorkloadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RollbackWorkload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceRollbackWorkloadResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.RollbackWorkload(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RollbackWorkload: "+err2.Error())
			oprot.WriteMessageBegin("RollbackWorkload", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RollbackWorkload", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListWorkloadPods struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListWorkloadPods) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListWorkloadPodsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListWorkloadPods", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListWorkloadPodsResult{}
	var retval *ListWorkloadPodsResponse
	if retval, err2 = p.handler.ListWorkloadPods(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListWorkloadPods: "+err2.Error())
			oprot.WriteMessageBegin("ListWorkloadPods", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListWorkloadPods", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListWorkloadServices struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListWorkloadServices) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListWorkloadServicesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListWorkloadServices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListWorkloadServicesResult{}
	var retval *ListServicesResponse
	if retval, err2 = p.handler.ListWorkloadServices(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListWorkloadServices: "+err2.Error())
			oprot.WriteMessageBegin("ListWorkloadServices", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListWorkloadServices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListWorkloadHistories struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListWorkloadHistories) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListWorkloadHistoriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListWorkloadHistories", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListWorkloadHistoriesResult{}
	var retval *ListWorkloadHistoriesResponse
	if retval, err2 = p.handler.ListWorkloadHistories(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListWorkloadHistories: "+err2.Error())
			oprot.WriteMessageBegin("ListWorkloadHistories", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListWorkloadHistories", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListObjectEvents struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListObjectEvents) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListObjectEventsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListObjectEvents", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListObjectEventsResult{}
	var retval *ListWorkloadEventsResponse
	if retval, err2 = p.handler.ListObjectEvents(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListObjectEvents: "+err2.Error())
			oprot.WriteMessageBegin("ListObjectEvents", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListObjectEvents", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorPatchWorkloadParallelism struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorPatchWorkloadParallelism) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServicePatchWorkloadParallelismArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PatchWorkloadParallelism", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServicePatchWorkloadParallelismResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.PatchWorkloadParallelism(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PatchWorkloadParallelism: "+err2.Error())
			oprot.WriteMessageBegin("PatchWorkloadParallelism", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PatchWorkloadParallelism", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetContainerLogs struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetContainerLogs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetContainerLogsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetContainerLogs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetContainerLogsResult{}
	var retval *GetContainerLogsResponse
	if retval, err2 = p.handler.GetContainerLogs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetContainerLogs: "+err2.Error())
			oprot.WriteMessageBegin("GetContainerLogs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetContainerLogs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListWorkloadHorizontalPodAutoscalers struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListWorkloadHorizontalPodAutoscalers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListWorkloadHorizontalPodAutoscalers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListWorkloadHorizontalPodAutoscalersResult{}
	var retval *ListWorkloadHorizontalPodAutoscalersResponse
	if retval, err2 = p.handler.ListWorkloadHorizontalPodAutoscalers(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListWorkloadHorizontalPodAutoscalers: "+err2.Error())
			oprot.WriteMessageBegin("ListWorkloadHorizontalPodAutoscalers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListWorkloadHorizontalPodAutoscalers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetDeployment struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetDeploymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeployment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetDeploymentResult{}
	var retval *GetDeploymentResponse
	if retval, err2 = p.handler.GetDeployment(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeployment: "+err2.Error())
			oprot.WriteMessageBegin("GetDeployment", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeployment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListDeployments struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListDeployments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListDeploymentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDeployments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListDeploymentsResult{}
	var retval *ListDeploymentsResponse
	if retval, err2 = p.handler.ListDeployments(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDeployments: "+err2.Error())
			oprot.WriteMessageBegin("ListDeployments", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDeployments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateDeployment struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateDeploymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDeployment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateDeploymentResult{}
	var retval *GetDeploymentResponse
	if retval, err2 = p.handler.CreateDeployment(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDeployment: "+err2.Error())
			oprot.WriteMessageBegin("CreateDeployment", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDeployment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateDeployment struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateDeploymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDeployment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateDeploymentResult{}
	var retval *GetDeploymentResponse
	if retval, err2 = p.handler.UpdateDeployment(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDeployment: "+err2.Error())
			oprot.WriteMessageBegin("UpdateDeployment", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDeployment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteDeployment struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteDeployment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteDeploymentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDeployment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteDeploymentResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteDeployment(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDeployment: "+err2.Error())
			oprot.WriteMessageBegin("DeleteDeployment", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDeployment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetStatefulSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetStatefulSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetStatefulSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetStatefulSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetStatefulSetResult{}
	var retval *GetStatefulSetResponse
	if retval, err2 = p.handler.GetStatefulSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetStatefulSet: "+err2.Error())
			oprot.WriteMessageBegin("GetStatefulSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetStatefulSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListStatefulSets struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListStatefulSets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListStatefulSetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListStatefulSets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListStatefulSetsResult{}
	var retval *ListStatefulSetsResponse
	if retval, err2 = p.handler.ListStatefulSets(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListStatefulSets: "+err2.Error())
			oprot.WriteMessageBegin("ListStatefulSets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListStatefulSets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateStatefulSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateStatefulSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateStatefulSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateStatefulSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateStatefulSetResult{}
	var retval *GetStatefulSetResponse
	if retval, err2 = p.handler.CreateStatefulSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateStatefulSet: "+err2.Error())
			oprot.WriteMessageBegin("CreateStatefulSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateStatefulSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateStatefulSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateStatefulSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateStatefulSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateStatefulSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateStatefulSetResult{}
	var retval *GetStatefulSetResponse
	if retval, err2 = p.handler.UpdateStatefulSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateStatefulSet: "+err2.Error())
			oprot.WriteMessageBegin("UpdateStatefulSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateStatefulSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteStatefulSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteStatefulSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteStatefulSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteStatefulSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteStatefulSetResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteStatefulSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteStatefulSet: "+err2.Error())
			oprot.WriteMessageBegin("DeleteStatefulSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteStatefulSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetJobResult{}
	var retval *GetJobResponse
	if retval, err2 = p.handler.GetJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetJob: "+err2.Error())
			oprot.WriteMessageBegin("GetJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListJobs struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListJobsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListJobsResult{}
	var retval *ListJobsResponse
	if retval, err2 = p.handler.ListJobs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListJobs: "+err2.Error())
			oprot.WriteMessageBegin("ListJobs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListJobs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateJobResult{}
	var retval *GetJobResponse
	if retval, err2 = p.handler.CreateJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateJob: "+err2.Error())
			oprot.WriteMessageBegin("CreateJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateJobResult{}
	var retval *GetJobResponse
	if retval, err2 = p.handler.UpdateJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateJob: "+err2.Error())
			oprot.WriteMessageBegin("UpdateJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteJobResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteJob: "+err2.Error())
			oprot.WriteMessageBegin("DeleteJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetSecret struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetSecret) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetSecretArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetSecret", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetSecretResult{}
	var retval *GetSecretResponse
	if retval, err2 = p.handler.GetSecret(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetSecret: "+err2.Error())
			oprot.WriteMessageBegin("GetSecret", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetSecret", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListSecrets struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListSecrets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListSecretsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSecrets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListSecretsResult{}
	var retval *ListSecretsResponse
	if retval, err2 = p.handler.ListSecrets(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSecrets: "+err2.Error())
			oprot.WriteMessageBegin("ListSecrets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSecrets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateSecret struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateSecret) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateSecretArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateSecret", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateSecretResult{}
	var retval *GetSecretResponse
	if retval, err2 = p.handler.CreateSecret(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateSecret: "+err2.Error())
			oprot.WriteMessageBegin("CreateSecret", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateSecret", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateSecret struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateSecret) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateSecretArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateSecret", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateSecretResult{}
	var retval *GetSecretResponse
	if retval, err2 = p.handler.UpdateSecret(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateSecret: "+err2.Error())
			oprot.WriteMessageBegin("UpdateSecret", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateSecret", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteSecret struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteSecret) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteSecretArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteSecret", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteSecretResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteSecret(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteSecret: "+err2.Error())
			oprot.WriteMessageBegin("DeleteSecret", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteSecret", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetDaemonSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetDaemonSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetDaemonSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDaemonSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetDaemonSetResult{}
	var retval *GetDaemonSetResponse
	if retval, err2 = p.handler.GetDaemonSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDaemonSet: "+err2.Error())
			oprot.WriteMessageBegin("GetDaemonSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDaemonSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListDaemonSets struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListDaemonSets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListDaemonSetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListDaemonSets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListDaemonSetsResult{}
	var retval *ListDaemonSetsResponse
	if retval, err2 = p.handler.ListDaemonSets(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListDaemonSets: "+err2.Error())
			oprot.WriteMessageBegin("ListDaemonSets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListDaemonSets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateDaemonSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateDaemonSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateDaemonSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateDaemonSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateDaemonSetResult{}
	var retval *GetDaemonSetResponse
	if retval, err2 = p.handler.CreateDaemonSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateDaemonSet: "+err2.Error())
			oprot.WriteMessageBegin("CreateDaemonSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateDaemonSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateDaemonSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateDaemonSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateDaemonSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDaemonSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateDaemonSetResult{}
	var retval *GetDaemonSetResponse
	if retval, err2 = p.handler.UpdateDaemonSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDaemonSet: "+err2.Error())
			oprot.WriteMessageBegin("UpdateDaemonSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDaemonSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteDaemonSet struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteDaemonSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteDaemonSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDaemonSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteDaemonSetResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteDaemonSet(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDaemonSet: "+err2.Error())
			oprot.WriteMessageBegin("DeleteDaemonSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDaemonSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetCronJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetCronJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetCronJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCronJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetCronJobResult{}
	var retval *GetCronJobResponse
	if retval, err2 = p.handler.GetCronJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCronJob: "+err2.Error())
			oprot.WriteMessageBegin("GetCronJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCronJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListCronJobs struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListCronJobs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListCronJobsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCronJobs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListCronJobsResult{}
	var retval *ListCronJobsResponse
	if retval, err2 = p.handler.ListCronJobs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCronJobs: "+err2.Error())
			oprot.WriteMessageBegin("ListCronJobs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCronJobs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListJobsFromCronJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListJobsFromCronJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListJobsFromCronJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListJobsFromCronJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListJobsFromCronJobResult{}
	var retval *ListJobsFromCronJobResponse
	if retval, err2 = p.handler.ListJobsFromCronJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListJobsFromCronJob: "+err2.Error())
			oprot.WriteMessageBegin("ListJobsFromCronJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListJobsFromCronJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateCronJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateCronJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateCronJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCronJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateCronJobResult{}
	var retval *GetCronJobResponse
	if retval, err2 = p.handler.CreateCronJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCronJob: "+err2.Error())
			oprot.WriteMessageBegin("CreateCronJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCronJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateCronJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateCronJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateCronJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCronJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateCronJobResult{}
	var retval *GetCronJobResponse
	if retval, err2 = p.handler.UpdateCronJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCronJob: "+err2.Error())
			oprot.WriteMessageBegin("UpdateCronJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCronJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteCronJob struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteCronJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteCronJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCronJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteCronJobResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteCronJob(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCronJob: "+err2.Error())
			oprot.WriteMessageBegin("DeleteCronJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCronJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorPatchCronJobSuspend struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorPatchCronJobSuspend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServicePatchCronJobSuspendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PatchCronJobSuspend", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServicePatchCronJobSuspendResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.PatchCronJobSuspend(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PatchCronJobSuspend: "+err2.Error())
			oprot.WriteMessageBegin("PatchCronJobSuspend", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PatchCronJobSuspend", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetResourceYaml struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetResourceYaml) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetResourceYamlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetResourceYaml", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetResourceYamlResult{}
	var retval *GetResourceYamlResponse
	if retval, err2 = p.handler.GetResourceYaml(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetResourceYaml: "+err2.Error())
			oprot.WriteMessageBegin("GetResourceYaml", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetResourceYaml", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateResourceByYaml struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateResourceByYaml) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateResourceByYamlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateResourceByYaml", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateResourceByYamlResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.CreateResourceByYaml(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateResourceByYaml: "+err2.Error())
			oprot.WriteMessageBegin("CreateResourceByYaml", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateResourceByYaml", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateResourceByYaml struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateResourceByYaml) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateResourceByYamlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateResourceByYaml", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateResourceByYamlResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.UpdateResourceByYaml(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateResourceByYaml: "+err2.Error())
			oprot.WriteMessageBegin("UpdateResourceByYaml", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateResourceByYaml", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetHorizontalPodAutoscalerResult{}
	var retval *GetHorizontalPodAutoscalerResponse
	if retval, err2 = p.handler.GetHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("GetHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListHorizontalPodAutoscalers struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListHorizontalPodAutoscalers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListHorizontalPodAutoscalersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListHorizontalPodAutoscalers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListHorizontalPodAutoscalersResult{}
	var retval *ListHorizontalPodAutoscalersResponse
	if retval, err2 = p.handler.ListHorizontalPodAutoscalers(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListHorizontalPodAutoscalers: "+err2.Error())
			oprot.WriteMessageBegin("ListHorizontalPodAutoscalers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListHorizontalPodAutoscalers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateHorizontalPodAutoscalerResult{}
	var retval *GetHorizontalPodAutoscalerResponse
	if retval, err2 = p.handler.CreateHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("CreateHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateHorizontalPodAutoscalerResult{}
	var retval *GetHorizontalPodAutoscalerResponse
	if retval, err2 = p.handler.UpdateHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("UpdateHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteHorizontalPodAutoscalerResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("DeleteHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetPod struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetPod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetPodArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetPodResult{}
	var retval *GetPodResponse
	if retval, err2 = p.handler.GetPod(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPod: "+err2.Error())
			oprot.WriteMessageBegin("GetPod", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListPods struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListPods) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListPodsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPods", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListPodsResult{}
	var retval *ListPodsResponse
	if retval, err2 = p.handler.ListPods(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPods: "+err2.Error())
			oprot.WriteMessageBegin("ListPods", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPods", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeletePod struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeletePod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeletePodArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeletePodResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeletePod(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePod: "+err2.Error())
			oprot.WriteMessageBegin("DeletePod", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetAPIGroup struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetAPIGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetAPIGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAPIGroup", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetAPIGroupResult{}
	var retval *GetAPIGroupResponse
	if retval, err2 = p.handler.GetAPIGroup(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAPIGroup: "+err2.Error())
			oprot.WriteMessageBegin("GetAPIGroup", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAPIGroup", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListAPIGroups struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListAPIGroups) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListAPIGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListAPIGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListAPIGroupsResult{}
	var retval *ListAPIGroupsResponse
	if retval, err2 = p.handler.ListAPIGroups(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListAPIGroups: "+err2.Error())
			oprot.WriteMessageBegin("ListAPIGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListAPIGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListCRDs struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListCRDs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListCRDsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCRDs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListCRDsResult{}
	var retval *ListCRDsResponse
	if retval, err2 = p.handler.ListCRDs(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCRDs: "+err2.Error())
			oprot.WriteMessageBegin("ListCRDs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCRDs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteCRD struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteCRD) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteCRDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCRD", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteCRDResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteCRD(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCRD: "+err2.Error())
			oprot.WriteMessageBegin("DeleteCRD", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCRD", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetResource struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetResourceResult{}
	var retval *ResourceItem
	if retval, err2 = p.handler.GetResource(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetResource: "+err2.Error())
			oprot.WriteMessageBegin("GetResource", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListResources struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListResources) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListResourcesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListResources", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListResourcesResult{}
	var retval *ListResourcesResponse
	if retval, err2 = p.handler.ListResources(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListResources: "+err2.Error())
			oprot.WriteMessageBegin("ListResources", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListResources", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteResource struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteResource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteResourceResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteResource(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteResource: "+err2.Error())
			oprot.WriteMessageBegin("DeleteResource", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListCharts struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListCharts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListChartsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCharts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListChartsResult{}
	var retval *ListChartsResponse
	if retval, err2 = p.handler.ListCharts(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCharts: "+err2.Error())
			oprot.WriteMessageBegin("ListCharts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCharts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListChartCategories struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListChartCategories) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListChartCategoriesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListChartCategories", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListChartCategoriesResult{}
	var retval *ListChartCategoriesResponse
	if retval, err2 = p.handler.ListChartCategories(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListChartCategories: "+err2.Error())
			oprot.WriteMessageBegin("ListChartCategories", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListChartCategories", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetChart struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetChart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetChartArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetChart", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetChartResult{}
	var retval *GetChartResponse
	if retval, err2 = p.handler.GetChart(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetChart: "+err2.Error())
			oprot.WriteMessageBegin("GetChart", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetChart", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListReleases struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListReleases) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListReleasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListReleases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListReleasesResult{}
	var retval *ListReleasesResponse
	if retval, err2 = p.handler.ListReleases(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListReleases: "+err2.Error())
			oprot.WriteMessageBegin("ListReleases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListReleases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetRelease struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetRelease) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetReleaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetRelease", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetReleaseResult{}
	var retval *GetReleaseResponse
	if retval, err2 = p.handler.GetRelease(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetRelease: "+err2.Error())
			oprot.WriteMessageBegin("GetRelease", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetRelease", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateRelease struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateRelease) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateReleaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateRelease", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateReleaseResult{}
	var retval *CreateReleaseResponse
	if retval, err2 = p.handler.CreateRelease(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateRelease: "+err2.Error())
			oprot.WriteMessageBegin("CreateRelease", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateRelease", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateRelease struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateRelease) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateReleaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateRelease", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateReleaseResult{}
	var retval *CreateReleaseResponse
	if retval, err2 = p.handler.UpdateRelease(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateRelease: "+err2.Error())
			oprot.WriteMessageBegin("UpdateRelease", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateRelease", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorRollbackRelease struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorRollbackRelease) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceRollbackReleaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RollbackRelease", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceRollbackReleaseResult{}
	var retval *CreateReleaseResponse
	if retval, err2 = p.handler.RollbackRelease(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RollbackRelease: "+err2.Error())
			oprot.WriteMessageBegin("RollbackRelease", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RollbackRelease", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteRelease struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteRelease) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteReleaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteRelease", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteReleaseResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteRelease(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteRelease: "+err2.Error())
			oprot.WriteMessageBegin("DeleteRelease", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteRelease", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListCronHorizontalPodAutoscalers struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListCronHorizontalPodAutoscalers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListCronHorizontalPodAutoscalersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCronHorizontalPodAutoscalers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListCronHorizontalPodAutoscalersResult{}
	var retval *ListCronHorizontalPodAutoscalersResponse
	if retval, err2 = p.handler.ListCronHorizontalPodAutoscalers(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCronHorizontalPodAutoscalers: "+err2.Error())
			oprot.WriteMessageBegin("ListCronHorizontalPodAutoscalers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCronHorizontalPodAutoscalers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateCronHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateCronHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateCronHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCronHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateCronHorizontalPodAutoscalerResult{}
	var retval *GetCronHorizontalPodAutoscalerResponse
	if retval, err2 = p.handler.CreateCronHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCronHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("CreateCronHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCronHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateCronHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateCronHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateCronHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateCronHorizontalPodAutoscalerResult{}
	var retval *GetCronHorizontalPodAutoscalerResponse
	if retval, err2 = p.handler.UpdateCronHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateCronHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("UpdateCronHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateCronHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteCronHorizontalPodAutoscaler struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteCronHorizontalPodAutoscaler) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCronHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteCronHorizontalPodAutoscalerResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteCronHorizontalPodAutoscaler(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCronHorizontalPodAutoscaler: "+err2.Error())
			oprot.WriteMessageBegin("DeleteCronHorizontalPodAutoscaler", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCronHorizontalPodAutoscaler", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorListLogCollectRules struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorListLogCollectRules) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceListLogCollectRulesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListLogCollectRules", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceListLogCollectRulesResult{}
	var retval *ListLogCollectRulesResp
	if retval, err2 = p.handler.ListLogCollectRules(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListLogCollectRules: "+err2.Error())
			oprot.WriteMessageBegin("ListLogCollectRules", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListLogCollectRules", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorCreateLogCollectRule struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorCreateLogCollectRule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceCreateLogCollectRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateLogCollectRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceCreateLogCollectRuleResult{}
	var retval *CreateLogCollectRuleResp
	if retval, err2 = p.handler.CreateLogCollectRule(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateLogCollectRule: "+err2.Error())
			oprot.WriteMessageBegin("CreateLogCollectRule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateLogCollectRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorUpdateLogCollectRule struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorUpdateLogCollectRule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceUpdateLogCollectRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateLogCollectRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceUpdateLogCollectRuleResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.UpdateLogCollectRule(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateLogCollectRule: "+err2.Error())
			oprot.WriteMessageBegin("UpdateLogCollectRule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateLogCollectRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorDeleteLogCollectRule struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorDeleteLogCollectRule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceDeleteLogCollectRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteLogCollectRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceDeleteLogCollectRuleResult{}
	var retval *EmptyResponse
	if retval, err2 = p.handler.DeleteLogCollectRule(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteLogCollectRule: "+err2.Error())
			oprot.WriteMessageBegin("DeleteLogCollectRule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteLogCollectRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorGetLogCollectRule struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorGetLogCollectRule) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceGetLogCollectRuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLogCollectRule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceGetLogCollectRuleResult{}
	var retval *LogCollectRule
	if retval, err2 = p.handler.GetLogCollectRule(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLogCollectRule: "+err2.Error())
			oprot.WriteMessageBegin("GetLogCollectRule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLogCollectRule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type appAPIServiceProcessorForwardKubernetesApi struct {
	handler AppAPIService
}

func (p *appAPIServiceProcessorForwardKubernetesApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppAPIServiceForwardKubernetesApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ForwardKubernetesApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := AppAPIServiceForwardKubernetesApiResult{}
	var retval *ForwardKubernetesApiResponse
	if retval, err2 = p.handler.ForwardKubernetesApi(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *common.Error:
			result.Err = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ForwardKubernetesApi: "+err2.Error())
			oprot.WriteMessageBegin("ForwardKubernetesApi", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ForwardKubernetesApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type AppAPIServiceGetConfigMapArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetConfigMapArgs() *AppAPIServiceGetConfigMapArgs {
	return &AppAPIServiceGetConfigMapArgs{}
}

var AppAPIServiceGetConfigMapArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetConfigMapArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetConfigMapArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetConfigMapArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetConfigMapArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetConfigMapArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetConfigMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetConfigMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetConfigMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetConfigMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetConfigMapArgs(%+v)", *p)
}

func (p *AppAPIServiceGetConfigMapArgs) DeepEqual(ano *AppAPIServiceGetConfigMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetConfigMapArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetConfigMapResult struct {
	Success *GetConfigMapResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetConfigMapResult() *AppAPIServiceGetConfigMapResult {
	return &AppAPIServiceGetConfigMapResult{}
}

var AppAPIServiceGetConfigMapResult_Success_DEFAULT *GetConfigMapResponse

func (p *AppAPIServiceGetConfigMapResult) GetSuccess() (v *GetConfigMapResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetConfigMapResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetConfigMapResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetConfigMapResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetConfigMapResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetConfigMapResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetConfigMapResponse)
}
func (p *AppAPIServiceGetConfigMapResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetConfigMapResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetConfigMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetConfigMapResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetConfigMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetConfigMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetConfigMapResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetConfigMapResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetConfigMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetConfigMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetConfigMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetConfigMapResult(%+v)", *p)
}

func (p *AppAPIServiceGetConfigMapResult) DeepEqual(ano *AppAPIServiceGetConfigMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetConfigMapResult) Field0DeepEqual(src *GetConfigMapResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetConfigMapResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListConfigMapsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListConfigMapsArgs() *AppAPIServiceListConfigMapsArgs {
	return &AppAPIServiceListConfigMapsArgs{}
}

var AppAPIServiceListConfigMapsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListConfigMapsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListConfigMapsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListConfigMapsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListConfigMapsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListConfigMapsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListConfigMapsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListConfigMapsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListConfigMapsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListConfigMaps_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListConfigMapsArgs(%+v)", *p)
}

func (p *AppAPIServiceListConfigMapsArgs) DeepEqual(ano *AppAPIServiceListConfigMapsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListConfigMapsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListConfigMapsResult struct {
	Success *ListConfigMapsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListConfigMapsResult() *AppAPIServiceListConfigMapsResult {
	return &AppAPIServiceListConfigMapsResult{}
}

var AppAPIServiceListConfigMapsResult_Success_DEFAULT *ListConfigMapsResponse

func (p *AppAPIServiceListConfigMapsResult) GetSuccess() (v *ListConfigMapsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListConfigMapsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListConfigMapsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListConfigMapsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListConfigMapsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListConfigMapsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListConfigMapsResponse)
}
func (p *AppAPIServiceListConfigMapsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListConfigMapsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListConfigMapsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListConfigMapsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListConfigMapsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListConfigMapsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListConfigMapsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListConfigMapsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListConfigMapsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListConfigMaps_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListConfigMapsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListConfigMapsResult(%+v)", *p)
}

func (p *AppAPIServiceListConfigMapsResult) DeepEqual(ano *AppAPIServiceListConfigMapsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListConfigMapsResult) Field0DeepEqual(src *ListConfigMapsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListConfigMapsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateConfigMapArgs struct {
	Req *CreateConfigMapRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateConfigMapArgs() *AppAPIServiceCreateConfigMapArgs {
	return &AppAPIServiceCreateConfigMapArgs{}
}

var AppAPIServiceCreateConfigMapArgs_Req_DEFAULT *CreateConfigMapRequest

func (p *AppAPIServiceCreateConfigMapArgs) GetReq() (v *CreateConfigMapRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateConfigMapArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateConfigMapArgs) SetReq(val *CreateConfigMapRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateConfigMapArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateConfigMapArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateConfigMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateConfigMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateConfigMapRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateConfigMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateConfigMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateConfigMapArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateConfigMapArgs) DeepEqual(ano *AppAPIServiceCreateConfigMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateConfigMapArgs) Field1DeepEqual(src *CreateConfigMapRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateConfigMapResult struct {
	Success *GetConfigMapResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateConfigMapResult() *AppAPIServiceCreateConfigMapResult {
	return &AppAPIServiceCreateConfigMapResult{}
}

var AppAPIServiceCreateConfigMapResult_Success_DEFAULT *GetConfigMapResponse

func (p *AppAPIServiceCreateConfigMapResult) GetSuccess() (v *GetConfigMapResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateConfigMapResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateConfigMapResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateConfigMapResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateConfigMapResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateConfigMapResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetConfigMapResponse)
}
func (p *AppAPIServiceCreateConfigMapResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateConfigMapResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateConfigMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateConfigMapResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateConfigMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateConfigMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetConfigMapResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateConfigMapResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateConfigMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateConfigMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateConfigMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateConfigMapResult(%+v)", *p)
}

func (p *AppAPIServiceCreateConfigMapResult) DeepEqual(ano *AppAPIServiceCreateConfigMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateConfigMapResult) Field0DeepEqual(src *GetConfigMapResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateConfigMapResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateConfigMapArgs struct {
	Req *CreateConfigMapRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateConfigMapArgs() *AppAPIServiceUpdateConfigMapArgs {
	return &AppAPIServiceUpdateConfigMapArgs{}
}

var AppAPIServiceUpdateConfigMapArgs_Req_DEFAULT *CreateConfigMapRequest

func (p *AppAPIServiceUpdateConfigMapArgs) GetReq() (v *CreateConfigMapRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateConfigMapArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateConfigMapArgs) SetReq(val *CreateConfigMapRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateConfigMapArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateConfigMapArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateConfigMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateConfigMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateConfigMapRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateConfigMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateConfigMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateConfigMapArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateConfigMapArgs) DeepEqual(ano *AppAPIServiceUpdateConfigMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateConfigMapArgs) Field1DeepEqual(src *CreateConfigMapRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateConfigMapResult struct {
	Success *GetConfigMapResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateConfigMapResult() *AppAPIServiceUpdateConfigMapResult {
	return &AppAPIServiceUpdateConfigMapResult{}
}

var AppAPIServiceUpdateConfigMapResult_Success_DEFAULT *GetConfigMapResponse

func (p *AppAPIServiceUpdateConfigMapResult) GetSuccess() (v *GetConfigMapResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateConfigMapResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateConfigMapResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateConfigMapResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateConfigMapResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateConfigMapResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetConfigMapResponse)
}
func (p *AppAPIServiceUpdateConfigMapResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateConfigMapResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateConfigMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateConfigMapResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateConfigMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateConfigMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetConfigMapResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateConfigMapResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateConfigMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateConfigMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateConfigMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateConfigMapResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateConfigMapResult) DeepEqual(ano *AppAPIServiceUpdateConfigMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateConfigMapResult) Field0DeepEqual(src *GetConfigMapResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateConfigMapResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteConfigMapArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteConfigMapArgs() *AppAPIServiceDeleteConfigMapArgs {
	return &AppAPIServiceDeleteConfigMapArgs{}
}

var AppAPIServiceDeleteConfigMapArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteConfigMapArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteConfigMapArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteConfigMapArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteConfigMapArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteConfigMapArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteConfigMapArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteConfigMapArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteConfigMapArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteConfigMap_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteConfigMapArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteConfigMapArgs) DeepEqual(ano *AppAPIServiceDeleteConfigMapArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteConfigMapArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteConfigMapResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteConfigMapResult() *AppAPIServiceDeleteConfigMapResult {
	return &AppAPIServiceDeleteConfigMapResult{}
}

var AppAPIServiceDeleteConfigMapResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteConfigMapResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteConfigMapResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteConfigMapResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteConfigMapResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteConfigMapResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteConfigMapResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteConfigMapResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteConfigMapResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteConfigMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteConfigMapResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteConfigMapResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteConfigMapResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteConfigMapResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteConfigMapResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteConfigMap_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteConfigMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteConfigMapResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteConfigMapResult) DeepEqual(ano *AppAPIServiceDeleteConfigMapResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteConfigMapResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteConfigMapResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetServiceArgs struct {
	Req *GetServiceRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetServiceArgs() *AppAPIServiceGetServiceArgs {
	return &AppAPIServiceGetServiceArgs{}
}

var AppAPIServiceGetServiceArgs_Req_DEFAULT *GetServiceRequest

func (p *AppAPIServiceGetServiceArgs) GetReq() (v *GetServiceRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetServiceArgs) SetReq(val *GetServiceRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetServiceArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetServiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetServiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetServiceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetServiceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetServiceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetService_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetServiceArgs(%+v)", *p)
}

func (p *AppAPIServiceGetServiceArgs) DeepEqual(ano *AppAPIServiceGetServiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetServiceArgs) Field1DeepEqual(src *GetServiceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetServiceResult struct {
	Success *GetServiceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetServiceResult() *AppAPIServiceGetServiceResult {
	return &AppAPIServiceGetServiceResult{}
}

var AppAPIServiceGetServiceResult_Success_DEFAULT *GetServiceResponse

func (p *AppAPIServiceGetServiceResult) GetSuccess() (v *GetServiceResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetServiceResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetServiceResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetServiceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetServiceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetServiceResponse)
}
func (p *AppAPIServiceGetServiceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetServiceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetServiceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetServiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetServiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetServiceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetServiceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetServiceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetServiceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetService_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetServiceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetServiceResult(%+v)", *p)
}

func (p *AppAPIServiceGetServiceResult) DeepEqual(ano *AppAPIServiceGetServiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetServiceResult) Field0DeepEqual(src *GetServiceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetServiceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListServicesArgs struct {
	Req *ListServiceRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListServicesArgs() *AppAPIServiceListServicesArgs {
	return &AppAPIServiceListServicesArgs{}
}

var AppAPIServiceListServicesArgs_Req_DEFAULT *ListServiceRequest

func (p *AppAPIServiceListServicesArgs) GetReq() (v *ListServiceRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListServicesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListServicesArgs) SetReq(val *ListServiceRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListServicesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListServicesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListServicesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListServicesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListServicesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListServiceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListServicesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListServices_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListServicesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListServicesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListServicesArgs(%+v)", *p)
}

func (p *AppAPIServiceListServicesArgs) DeepEqual(ano *AppAPIServiceListServicesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListServicesArgs) Field1DeepEqual(src *ListServiceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListServicesResult struct {
	Success *ListServicesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListServicesResult() *AppAPIServiceListServicesResult {
	return &AppAPIServiceListServicesResult{}
}

var AppAPIServiceListServicesResult_Success_DEFAULT *ListServicesResponse

func (p *AppAPIServiceListServicesResult) GetSuccess() (v *ListServicesResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListServicesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListServicesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListServicesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListServicesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListServicesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListServicesResponse)
}
func (p *AppAPIServiceListServicesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListServicesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListServicesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListServicesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListServicesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListServicesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListServicesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListServicesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListServicesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListServicesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListServices_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListServicesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListServicesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListServicesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListServicesResult(%+v)", *p)
}

func (p *AppAPIServiceListServicesResult) DeepEqual(ano *AppAPIServiceListServicesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListServicesResult) Field0DeepEqual(src *ListServicesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListServicesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateServiceArgs struct {
	Req *CreateServiceRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateServiceArgs() *AppAPIServiceCreateServiceArgs {
	return &AppAPIServiceCreateServiceArgs{}
}

var AppAPIServiceCreateServiceArgs_Req_DEFAULT *CreateServiceRequest

func (p *AppAPIServiceCreateServiceArgs) GetReq() (v *CreateServiceRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateServiceArgs) SetReq(val *CreateServiceRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateServiceArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateServiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateServiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateServiceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateServiceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateService_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateServiceArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateServiceArgs) DeepEqual(ano *AppAPIServiceCreateServiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateServiceArgs) Field1DeepEqual(src *CreateServiceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateServiceResult struct {
	Success *GetServiceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateServiceResult() *AppAPIServiceCreateServiceResult {
	return &AppAPIServiceCreateServiceResult{}
}

var AppAPIServiceCreateServiceResult_Success_DEFAULT *GetServiceResponse

func (p *AppAPIServiceCreateServiceResult) GetSuccess() (v *GetServiceResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateServiceResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateServiceResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateServiceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateServiceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetServiceResponse)
}
func (p *AppAPIServiceCreateServiceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateServiceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateServiceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateServiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateServiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetServiceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateServiceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateServiceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateService_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateServiceResult(%+v)", *p)
}

func (p *AppAPIServiceCreateServiceResult) DeepEqual(ano *AppAPIServiceCreateServiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateServiceResult) Field0DeepEqual(src *GetServiceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateServiceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateServiceArgs struct {
	Req *CreateServiceRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateServiceArgs() *AppAPIServiceUpdateServiceArgs {
	return &AppAPIServiceUpdateServiceArgs{}
}

var AppAPIServiceUpdateServiceArgs_Req_DEFAULT *CreateServiceRequest

func (p *AppAPIServiceUpdateServiceArgs) GetReq() (v *CreateServiceRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateServiceArgs) SetReq(val *CreateServiceRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateServiceArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateServiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateServiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateServiceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateServiceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateService_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateServiceArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateServiceArgs) DeepEqual(ano *AppAPIServiceUpdateServiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateServiceArgs) Field1DeepEqual(src *CreateServiceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateServiceResult struct {
	Success *GetServiceResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateServiceResult() *AppAPIServiceUpdateServiceResult {
	return &AppAPIServiceUpdateServiceResult{}
}

var AppAPIServiceUpdateServiceResult_Success_DEFAULT *GetServiceResponse

func (p *AppAPIServiceUpdateServiceResult) GetSuccess() (v *GetServiceResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateServiceResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateServiceResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateServiceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateServiceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetServiceResponse)
}
func (p *AppAPIServiceUpdateServiceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateServiceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateServiceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateServiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateServiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetServiceResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateServiceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateServiceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateService_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateServiceResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateServiceResult) DeepEqual(ano *AppAPIServiceUpdateServiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateServiceResult) Field0DeepEqual(src *GetServiceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateServiceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteServiceArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteServiceArgs() *AppAPIServiceDeleteServiceArgs {
	return &AppAPIServiceDeleteServiceArgs{}
}

var AppAPIServiceDeleteServiceArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteServiceArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteServiceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteServiceArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteServiceArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteServiceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteServiceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteServiceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteServiceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteService_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteServiceArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteServiceArgs) DeepEqual(ano *AppAPIServiceDeleteServiceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteServiceArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteServiceResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteServiceResult() *AppAPIServiceDeleteServiceResult {
	return &AppAPIServiceDeleteServiceResult{}
}

var AppAPIServiceDeleteServiceResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteServiceResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteServiceResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteServiceResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteServiceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteServiceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteServiceResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteServiceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteServiceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteServiceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteServiceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteServiceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteServiceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteServiceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteService_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteServiceResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteServiceResult) DeepEqual(ano *AppAPIServiceDeleteServiceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteServiceResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteServiceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchWorkloadImageArgs struct {
	Req *PatchImageRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServicePatchWorkloadImageArgs() *AppAPIServicePatchWorkloadImageArgs {
	return &AppAPIServicePatchWorkloadImageArgs{}
}

var AppAPIServicePatchWorkloadImageArgs_Req_DEFAULT *PatchImageRequest

func (p *AppAPIServicePatchWorkloadImageArgs) GetReq() (v *PatchImageRequest) {
	if !p.IsSetReq() {
		return AppAPIServicePatchWorkloadImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServicePatchWorkloadImageArgs) SetReq(val *PatchImageRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServicePatchWorkloadImageArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServicePatchWorkloadImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServicePatchWorkloadImageArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchWorkloadImageArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPatchImageRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadImageArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchWorkloadImage_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchWorkloadImageArgs(%+v)", *p)
}

func (p *AppAPIServicePatchWorkloadImageArgs) DeepEqual(ano *AppAPIServicePatchWorkloadImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchWorkloadImageArgs) Field1DeepEqual(src *PatchImageRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchWorkloadImageResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServicePatchWorkloadImageResult() *AppAPIServicePatchWorkloadImageResult {
	return &AppAPIServicePatchWorkloadImageResult{}
}

var AppAPIServicePatchWorkloadImageResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServicePatchWorkloadImageResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServicePatchWorkloadImageResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServicePatchWorkloadImageResult_Err_DEFAULT *common.Error

func (p *AppAPIServicePatchWorkloadImageResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServicePatchWorkloadImageResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServicePatchWorkloadImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServicePatchWorkloadImageResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServicePatchWorkloadImageResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServicePatchWorkloadImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServicePatchWorkloadImageResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServicePatchWorkloadImageResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchWorkloadImageResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadImageResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadImageResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchWorkloadImage_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchWorkloadImageResult(%+v)", *p)
}

func (p *AppAPIServicePatchWorkloadImageResult) DeepEqual(ano *AppAPIServicePatchWorkloadImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchWorkloadImageResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServicePatchWorkloadImageResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchWorkloadReplicasArgs struct {
	Req *PatchReplicasRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServicePatchWorkloadReplicasArgs() *AppAPIServicePatchWorkloadReplicasArgs {
	return &AppAPIServicePatchWorkloadReplicasArgs{}
}

var AppAPIServicePatchWorkloadReplicasArgs_Req_DEFAULT *PatchReplicasRequest

func (p *AppAPIServicePatchWorkloadReplicasArgs) GetReq() (v *PatchReplicasRequest) {
	if !p.IsSetReq() {
		return AppAPIServicePatchWorkloadReplicasArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServicePatchWorkloadReplicasArgs) SetReq(val *PatchReplicasRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServicePatchWorkloadReplicasArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchWorkloadReplicasArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPatchReplicasRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchWorkloadReplicas_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchWorkloadReplicasArgs(%+v)", *p)
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) DeepEqual(ano *AppAPIServicePatchWorkloadReplicasArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchWorkloadReplicasArgs) Field1DeepEqual(src *PatchReplicasRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchWorkloadReplicasResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServicePatchWorkloadReplicasResult() *AppAPIServicePatchWorkloadReplicasResult {
	return &AppAPIServicePatchWorkloadReplicasResult{}
}

var AppAPIServicePatchWorkloadReplicasResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServicePatchWorkloadReplicasResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServicePatchWorkloadReplicasResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServicePatchWorkloadReplicasResult_Err_DEFAULT *common.Error

func (p *AppAPIServicePatchWorkloadReplicasResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServicePatchWorkloadReplicasResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServicePatchWorkloadReplicasResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServicePatchWorkloadReplicasResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServicePatchWorkloadReplicasResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServicePatchWorkloadReplicasResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServicePatchWorkloadReplicasResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServicePatchWorkloadReplicasResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchWorkloadReplicasResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadReplicasResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadReplicasResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchWorkloadReplicas_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadReplicasResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchWorkloadReplicasResult(%+v)", *p)
}

func (p *AppAPIServicePatchWorkloadReplicasResult) DeepEqual(ano *AppAPIServicePatchWorkloadReplicasResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchWorkloadReplicasResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServicePatchWorkloadReplicasResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceRestartWorkloadArgs struct {
	Req *RestartRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceRestartWorkloadArgs() *AppAPIServiceRestartWorkloadArgs {
	return &AppAPIServiceRestartWorkloadArgs{}
}

var AppAPIServiceRestartWorkloadArgs_Req_DEFAULT *RestartRequest

func (p *AppAPIServiceRestartWorkloadArgs) GetReq() (v *RestartRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceRestartWorkloadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceRestartWorkloadArgs) SetReq(val *RestartRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceRestartWorkloadArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceRestartWorkloadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceRestartWorkloadArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceRestartWorkloadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRestartRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRestartWorkloadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RestartWorkload_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceRestartWorkloadArgs(%+v)", *p)
}

func (p *AppAPIServiceRestartWorkloadArgs) DeepEqual(ano *AppAPIServiceRestartWorkloadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceRestartWorkloadArgs) Field1DeepEqual(src *RestartRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceRestartWorkloadResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceRestartWorkloadResult() *AppAPIServiceRestartWorkloadResult {
	return &AppAPIServiceRestartWorkloadResult{}
}

var AppAPIServiceRestartWorkloadResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceRestartWorkloadResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceRestartWorkloadResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceRestartWorkloadResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceRestartWorkloadResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceRestartWorkloadResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceRestartWorkloadResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceRestartWorkloadResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceRestartWorkloadResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceRestartWorkloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceRestartWorkloadResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceRestartWorkloadResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceRestartWorkloadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRestartWorkloadResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRestartWorkloadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RestartWorkload_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceRestartWorkloadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceRestartWorkloadResult(%+v)", *p)
}

func (p *AppAPIServiceRestartWorkloadResult) DeepEqual(ano *AppAPIServiceRestartWorkloadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceRestartWorkloadResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceRestartWorkloadResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceRollbackWorkloadArgs struct {
	Req *RollbackRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceRollbackWorkloadArgs() *AppAPIServiceRollbackWorkloadArgs {
	return &AppAPIServiceRollbackWorkloadArgs{}
}

var AppAPIServiceRollbackWorkloadArgs_Req_DEFAULT *RollbackRequest

func (p *AppAPIServiceRollbackWorkloadArgs) GetReq() (v *RollbackRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceRollbackWorkloadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceRollbackWorkloadArgs) SetReq(val *RollbackRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceRollbackWorkloadArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceRollbackWorkloadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceRollbackWorkloadArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceRollbackWorkloadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRollbackRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRollbackWorkloadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RollbackWorkload_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceRollbackWorkloadArgs(%+v)", *p)
}

func (p *AppAPIServiceRollbackWorkloadArgs) DeepEqual(ano *AppAPIServiceRollbackWorkloadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceRollbackWorkloadArgs) Field1DeepEqual(src *RollbackRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceRollbackWorkloadResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceRollbackWorkloadResult() *AppAPIServiceRollbackWorkloadResult {
	return &AppAPIServiceRollbackWorkloadResult{}
}

var AppAPIServiceRollbackWorkloadResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceRollbackWorkloadResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceRollbackWorkloadResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceRollbackWorkloadResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceRollbackWorkloadResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceRollbackWorkloadResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceRollbackWorkloadResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceRollbackWorkloadResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceRollbackWorkloadResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceRollbackWorkloadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceRollbackWorkloadResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceRollbackWorkloadResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceRollbackWorkloadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRollbackWorkloadResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRollbackWorkloadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RollbackWorkload_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceRollbackWorkloadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceRollbackWorkloadResult(%+v)", *p)
}

func (p *AppAPIServiceRollbackWorkloadResult) DeepEqual(ano *AppAPIServiceRollbackWorkloadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceRollbackWorkloadResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceRollbackWorkloadResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadPodsArgs struct {
	Req *ListWorkloadObjectsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListWorkloadPodsArgs() *AppAPIServiceListWorkloadPodsArgs {
	return &AppAPIServiceListWorkloadPodsArgs{}
}

var AppAPIServiceListWorkloadPodsArgs_Req_DEFAULT *ListWorkloadObjectsRequest

func (p *AppAPIServiceListWorkloadPodsArgs) GetReq() (v *ListWorkloadObjectsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListWorkloadPodsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListWorkloadPodsArgs) SetReq(val *ListWorkloadObjectsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListWorkloadPodsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListWorkloadPodsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListWorkloadPodsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadPodsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListWorkloadObjectsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadPodsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadPods_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadPodsArgs(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadPodsArgs) DeepEqual(ano *AppAPIServiceListWorkloadPodsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadPodsArgs) Field1DeepEqual(src *ListWorkloadObjectsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadPodsResult struct {
	Success *ListWorkloadPodsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListWorkloadPodsResult() *AppAPIServiceListWorkloadPodsResult {
	return &AppAPIServiceListWorkloadPodsResult{}
}

var AppAPIServiceListWorkloadPodsResult_Success_DEFAULT *ListWorkloadPodsResponse

func (p *AppAPIServiceListWorkloadPodsResult) GetSuccess() (v *ListWorkloadPodsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListWorkloadPodsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListWorkloadPodsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListWorkloadPodsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListWorkloadPodsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListWorkloadPodsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListWorkloadPodsResponse)
}
func (p *AppAPIServiceListWorkloadPodsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListWorkloadPodsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListWorkloadPodsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListWorkloadPodsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListWorkloadPodsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadPodsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListWorkloadPodsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadPodsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadPodsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadPods_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadPodsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadPodsResult(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadPodsResult) DeepEqual(ano *AppAPIServiceListWorkloadPodsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadPodsResult) Field0DeepEqual(src *ListWorkloadPodsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListWorkloadPodsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadServicesArgs struct {
	Req *ListWorkloadObjectsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListWorkloadServicesArgs() *AppAPIServiceListWorkloadServicesArgs {
	return &AppAPIServiceListWorkloadServicesArgs{}
}

var AppAPIServiceListWorkloadServicesArgs_Req_DEFAULT *ListWorkloadObjectsRequest

func (p *AppAPIServiceListWorkloadServicesArgs) GetReq() (v *ListWorkloadObjectsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListWorkloadServicesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListWorkloadServicesArgs) SetReq(val *ListWorkloadObjectsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListWorkloadServicesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListWorkloadServicesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListWorkloadServicesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadServicesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListWorkloadObjectsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadServicesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadServices_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadServicesArgs(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadServicesArgs) DeepEqual(ano *AppAPIServiceListWorkloadServicesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadServicesArgs) Field1DeepEqual(src *ListWorkloadObjectsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadServicesResult struct {
	Success *ListServicesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListWorkloadServicesResult() *AppAPIServiceListWorkloadServicesResult {
	return &AppAPIServiceListWorkloadServicesResult{}
}

var AppAPIServiceListWorkloadServicesResult_Success_DEFAULT *ListServicesResponse

func (p *AppAPIServiceListWorkloadServicesResult) GetSuccess() (v *ListServicesResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListWorkloadServicesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListWorkloadServicesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListWorkloadServicesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListWorkloadServicesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListWorkloadServicesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListServicesResponse)
}
func (p *AppAPIServiceListWorkloadServicesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListWorkloadServicesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListWorkloadServicesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListWorkloadServicesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListWorkloadServicesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadServicesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListServicesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadServicesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadServicesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadServices_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadServicesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadServicesResult(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadServicesResult) DeepEqual(ano *AppAPIServiceListWorkloadServicesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadServicesResult) Field0DeepEqual(src *ListServicesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListWorkloadServicesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadHistoriesArgs struct {
	Req *ListWorkloadObjectsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListWorkloadHistoriesArgs() *AppAPIServiceListWorkloadHistoriesArgs {
	return &AppAPIServiceListWorkloadHistoriesArgs{}
}

var AppAPIServiceListWorkloadHistoriesArgs_Req_DEFAULT *ListWorkloadObjectsRequest

func (p *AppAPIServiceListWorkloadHistoriesArgs) GetReq() (v *ListWorkloadObjectsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListWorkloadHistoriesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListWorkloadHistoriesArgs) SetReq(val *ListWorkloadObjectsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListWorkloadHistoriesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadHistoriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListWorkloadObjectsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadHistories_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadHistoriesArgs(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) DeepEqual(ano *AppAPIServiceListWorkloadHistoriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadHistoriesArgs) Field1DeepEqual(src *ListWorkloadObjectsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadHistoriesResult struct {
	Success *ListWorkloadHistoriesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListWorkloadHistoriesResult() *AppAPIServiceListWorkloadHistoriesResult {
	return &AppAPIServiceListWorkloadHistoriesResult{}
}

var AppAPIServiceListWorkloadHistoriesResult_Success_DEFAULT *ListWorkloadHistoriesResponse

func (p *AppAPIServiceListWorkloadHistoriesResult) GetSuccess() (v *ListWorkloadHistoriesResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListWorkloadHistoriesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListWorkloadHistoriesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListWorkloadHistoriesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListWorkloadHistoriesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListWorkloadHistoriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListWorkloadHistoriesResponse)
}
func (p *AppAPIServiceListWorkloadHistoriesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListWorkloadHistoriesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListWorkloadHistoriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListWorkloadHistoriesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListWorkloadHistoriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadHistoriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListWorkloadHistoriesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadHistoriesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadHistoriesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadHistories_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHistoriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadHistoriesResult(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadHistoriesResult) DeepEqual(ano *AppAPIServiceListWorkloadHistoriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadHistoriesResult) Field0DeepEqual(src *ListWorkloadHistoriesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListWorkloadHistoriesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListObjectEventsArgs struct {
	Req *ListObjectEventsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListObjectEventsArgs() *AppAPIServiceListObjectEventsArgs {
	return &AppAPIServiceListObjectEventsArgs{}
}

var AppAPIServiceListObjectEventsArgs_Req_DEFAULT *ListObjectEventsRequest

func (p *AppAPIServiceListObjectEventsArgs) GetReq() (v *ListObjectEventsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListObjectEventsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListObjectEventsArgs) SetReq(val *ListObjectEventsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListObjectEventsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListObjectEventsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListObjectEventsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListObjectEventsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListObjectEventsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListObjectEventsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListObjectEvents_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListObjectEventsArgs(%+v)", *p)
}

func (p *AppAPIServiceListObjectEventsArgs) DeepEqual(ano *AppAPIServiceListObjectEventsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListObjectEventsArgs) Field1DeepEqual(src *ListObjectEventsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListObjectEventsResult struct {
	Success *ListWorkloadEventsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error               `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListObjectEventsResult() *AppAPIServiceListObjectEventsResult {
	return &AppAPIServiceListObjectEventsResult{}
}

var AppAPIServiceListObjectEventsResult_Success_DEFAULT *ListWorkloadEventsResponse

func (p *AppAPIServiceListObjectEventsResult) GetSuccess() (v *ListWorkloadEventsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListObjectEventsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListObjectEventsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListObjectEventsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListObjectEventsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListObjectEventsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListWorkloadEventsResponse)
}
func (p *AppAPIServiceListObjectEventsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListObjectEventsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListObjectEventsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListObjectEventsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListObjectEventsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListObjectEventsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListWorkloadEventsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListObjectEventsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListObjectEventsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListObjectEvents_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListObjectEventsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListObjectEventsResult(%+v)", *p)
}

func (p *AppAPIServiceListObjectEventsResult) DeepEqual(ano *AppAPIServiceListObjectEventsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListObjectEventsResult) Field0DeepEqual(src *ListWorkloadEventsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListObjectEventsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchWorkloadParallelismArgs struct {
	Req *PatchParallelismRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServicePatchWorkloadParallelismArgs() *AppAPIServicePatchWorkloadParallelismArgs {
	return &AppAPIServicePatchWorkloadParallelismArgs{}
}

var AppAPIServicePatchWorkloadParallelismArgs_Req_DEFAULT *PatchParallelismRequest

func (p *AppAPIServicePatchWorkloadParallelismArgs) GetReq() (v *PatchParallelismRequest) {
	if !p.IsSetReq() {
		return AppAPIServicePatchWorkloadParallelismArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServicePatchWorkloadParallelismArgs) SetReq(val *PatchParallelismRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServicePatchWorkloadParallelismArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchWorkloadParallelismArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPatchParallelismRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchWorkloadParallelism_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchWorkloadParallelismArgs(%+v)", *p)
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) DeepEqual(ano *AppAPIServicePatchWorkloadParallelismArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchWorkloadParallelismArgs) Field1DeepEqual(src *PatchParallelismRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchWorkloadParallelismResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServicePatchWorkloadParallelismResult() *AppAPIServicePatchWorkloadParallelismResult {
	return &AppAPIServicePatchWorkloadParallelismResult{}
}

var AppAPIServicePatchWorkloadParallelismResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServicePatchWorkloadParallelismResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServicePatchWorkloadParallelismResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServicePatchWorkloadParallelismResult_Err_DEFAULT *common.Error

func (p *AppAPIServicePatchWorkloadParallelismResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServicePatchWorkloadParallelismResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServicePatchWorkloadParallelismResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServicePatchWorkloadParallelismResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServicePatchWorkloadParallelismResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServicePatchWorkloadParallelismResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServicePatchWorkloadParallelismResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServicePatchWorkloadParallelismResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchWorkloadParallelismResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadParallelismResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchWorkloadParallelismResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchWorkloadParallelism_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchWorkloadParallelismResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchWorkloadParallelismResult(%+v)", *p)
}

func (p *AppAPIServicePatchWorkloadParallelismResult) DeepEqual(ano *AppAPIServicePatchWorkloadParallelismResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchWorkloadParallelismResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServicePatchWorkloadParallelismResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetContainerLogsArgs struct {
	Req *GetContainerLogsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetContainerLogsArgs() *AppAPIServiceGetContainerLogsArgs {
	return &AppAPIServiceGetContainerLogsArgs{}
}

var AppAPIServiceGetContainerLogsArgs_Req_DEFAULT *GetContainerLogsRequest

func (p *AppAPIServiceGetContainerLogsArgs) GetReq() (v *GetContainerLogsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetContainerLogsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetContainerLogsArgs) SetReq(val *GetContainerLogsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetContainerLogsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetContainerLogsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetContainerLogsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetContainerLogsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetContainerLogsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetContainerLogsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetContainerLogs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetContainerLogsArgs(%+v)", *p)
}

func (p *AppAPIServiceGetContainerLogsArgs) DeepEqual(ano *AppAPIServiceGetContainerLogsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetContainerLogsArgs) Field1DeepEqual(src *GetContainerLogsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetContainerLogsResult struct {
	Success *GetContainerLogsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetContainerLogsResult() *AppAPIServiceGetContainerLogsResult {
	return &AppAPIServiceGetContainerLogsResult{}
}

var AppAPIServiceGetContainerLogsResult_Success_DEFAULT *GetContainerLogsResponse

func (p *AppAPIServiceGetContainerLogsResult) GetSuccess() (v *GetContainerLogsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetContainerLogsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetContainerLogsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetContainerLogsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetContainerLogsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetContainerLogsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetContainerLogsResponse)
}
func (p *AppAPIServiceGetContainerLogsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetContainerLogsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetContainerLogsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetContainerLogsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetContainerLogsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetContainerLogsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetContainerLogsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetContainerLogsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetContainerLogsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetContainerLogs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetContainerLogsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetContainerLogsResult(%+v)", *p)
}

func (p *AppAPIServiceGetContainerLogsResult) DeepEqual(ano *AppAPIServiceGetContainerLogsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetContainerLogsResult) Field0DeepEqual(src *GetContainerLogsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetContainerLogsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs struct {
	Req *ListWorkloadObjectsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListWorkloadHorizontalPodAutoscalersArgs() *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs {
	return &AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs{}
}

var AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs_Req_DEFAULT *ListWorkloadObjectsRequest

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) GetReq() (v *ListWorkloadObjectsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) SetReq(val *ListWorkloadObjectsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListWorkloadObjectsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadHorizontalPodAutoscalers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) DeepEqual(ano *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersArgs) Field1DeepEqual(src *ListWorkloadObjectsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListWorkloadHorizontalPodAutoscalersResult struct {
	Success *ListWorkloadHorizontalPodAutoscalersResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                                 `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListWorkloadHorizontalPodAutoscalersResult() *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult {
	return &AppAPIServiceListWorkloadHorizontalPodAutoscalersResult{}
}

var AppAPIServiceListWorkloadHorizontalPodAutoscalersResult_Success_DEFAULT *ListWorkloadHorizontalPodAutoscalersResponse

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) GetSuccess() (v *ListWorkloadHorizontalPodAutoscalersResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListWorkloadHorizontalPodAutoscalersResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListWorkloadHorizontalPodAutoscalersResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListWorkloadHorizontalPodAutoscalersResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListWorkloadHorizontalPodAutoscalersResponse)
}
func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListWorkloadHorizontalPodAutoscalersResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListWorkloadHorizontalPodAutoscalersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListWorkloadHorizontalPodAutoscalersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListWorkloadHorizontalPodAutoscalers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListWorkloadHorizontalPodAutoscalersResult(%+v)", *p)
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) DeepEqual(ano *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) Field0DeepEqual(src *ListWorkloadHorizontalPodAutoscalersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListWorkloadHorizontalPodAutoscalersResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetDeploymentArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetDeploymentArgs() *AppAPIServiceGetDeploymentArgs {
	return &AppAPIServiceGetDeploymentArgs{}
}

var AppAPIServiceGetDeploymentArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetDeploymentArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetDeploymentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetDeploymentArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetDeploymentArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetDeploymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetDeploymentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetDeploymentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetDeploymentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeployment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetDeploymentArgs(%+v)", *p)
}

func (p *AppAPIServiceGetDeploymentArgs) DeepEqual(ano *AppAPIServiceGetDeploymentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetDeploymentArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetDeploymentResult struct {
	Success *GetDeploymentResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetDeploymentResult() *AppAPIServiceGetDeploymentResult {
	return &AppAPIServiceGetDeploymentResult{}
}

var AppAPIServiceGetDeploymentResult_Success_DEFAULT *GetDeploymentResponse

func (p *AppAPIServiceGetDeploymentResult) GetSuccess() (v *GetDeploymentResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetDeploymentResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetDeploymentResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetDeploymentResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetDeploymentResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetDeploymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDeploymentResponse)
}
func (p *AppAPIServiceGetDeploymentResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetDeploymentResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetDeploymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetDeploymentResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetDeploymentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetDeploymentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDeploymentResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetDeploymentResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetDeploymentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeployment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetDeploymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetDeploymentResult(%+v)", *p)
}

func (p *AppAPIServiceGetDeploymentResult) DeepEqual(ano *AppAPIServiceGetDeploymentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetDeploymentResult) Field0DeepEqual(src *GetDeploymentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetDeploymentResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListDeploymentsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListDeploymentsArgs() *AppAPIServiceListDeploymentsArgs {
	return &AppAPIServiceListDeploymentsArgs{}
}

var AppAPIServiceListDeploymentsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListDeploymentsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListDeploymentsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListDeploymentsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListDeploymentsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListDeploymentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListDeploymentsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListDeploymentsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListDeploymentsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDeployments_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListDeploymentsArgs(%+v)", *p)
}

func (p *AppAPIServiceListDeploymentsArgs) DeepEqual(ano *AppAPIServiceListDeploymentsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListDeploymentsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListDeploymentsResult struct {
	Success *ListDeploymentsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListDeploymentsResult() *AppAPIServiceListDeploymentsResult {
	return &AppAPIServiceListDeploymentsResult{}
}

var AppAPIServiceListDeploymentsResult_Success_DEFAULT *ListDeploymentsResponse

func (p *AppAPIServiceListDeploymentsResult) GetSuccess() (v *ListDeploymentsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListDeploymentsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListDeploymentsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListDeploymentsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListDeploymentsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListDeploymentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDeploymentsResponse)
}
func (p *AppAPIServiceListDeploymentsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListDeploymentsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListDeploymentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListDeploymentsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListDeploymentsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListDeploymentsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListDeploymentsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListDeploymentsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListDeploymentsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDeployments_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListDeploymentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListDeploymentsResult(%+v)", *p)
}

func (p *AppAPIServiceListDeploymentsResult) DeepEqual(ano *AppAPIServiceListDeploymentsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListDeploymentsResult) Field0DeepEqual(src *ListDeploymentsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListDeploymentsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateDeploymentArgs struct {
	Req *CreateDeploymentRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateDeploymentArgs() *AppAPIServiceCreateDeploymentArgs {
	return &AppAPIServiceCreateDeploymentArgs{}
}

var AppAPIServiceCreateDeploymentArgs_Req_DEFAULT *CreateDeploymentRequest

func (p *AppAPIServiceCreateDeploymentArgs) GetReq() (v *CreateDeploymentRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateDeploymentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateDeploymentArgs) SetReq(val *CreateDeploymentRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateDeploymentArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateDeploymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateDeploymentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateDeploymentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateDeploymentRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateDeploymentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDeployment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateDeploymentArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateDeploymentArgs) DeepEqual(ano *AppAPIServiceCreateDeploymentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateDeploymentArgs) Field1DeepEqual(src *CreateDeploymentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateDeploymentResult struct {
	Success *GetDeploymentResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateDeploymentResult() *AppAPIServiceCreateDeploymentResult {
	return &AppAPIServiceCreateDeploymentResult{}
}

var AppAPIServiceCreateDeploymentResult_Success_DEFAULT *GetDeploymentResponse

func (p *AppAPIServiceCreateDeploymentResult) GetSuccess() (v *GetDeploymentResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateDeploymentResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateDeploymentResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateDeploymentResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateDeploymentResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateDeploymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDeploymentResponse)
}
func (p *AppAPIServiceCreateDeploymentResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateDeploymentResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateDeploymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateDeploymentResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateDeploymentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateDeploymentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDeploymentResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateDeploymentResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateDeploymentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDeployment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateDeploymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateDeploymentResult(%+v)", *p)
}

func (p *AppAPIServiceCreateDeploymentResult) DeepEqual(ano *AppAPIServiceCreateDeploymentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateDeploymentResult) Field0DeepEqual(src *GetDeploymentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateDeploymentResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateDeploymentArgs struct {
	Req *CreateDeploymentRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateDeploymentArgs() *AppAPIServiceUpdateDeploymentArgs {
	return &AppAPIServiceUpdateDeploymentArgs{}
}

var AppAPIServiceUpdateDeploymentArgs_Req_DEFAULT *CreateDeploymentRequest

func (p *AppAPIServiceUpdateDeploymentArgs) GetReq() (v *CreateDeploymentRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateDeploymentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateDeploymentArgs) SetReq(val *CreateDeploymentRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateDeploymentArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateDeploymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateDeploymentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateDeploymentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateDeploymentRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateDeploymentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeployment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateDeploymentArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateDeploymentArgs) DeepEqual(ano *AppAPIServiceUpdateDeploymentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateDeploymentArgs) Field1DeepEqual(src *CreateDeploymentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateDeploymentResult struct {
	Success *GetDeploymentResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateDeploymentResult() *AppAPIServiceUpdateDeploymentResult {
	return &AppAPIServiceUpdateDeploymentResult{}
}

var AppAPIServiceUpdateDeploymentResult_Success_DEFAULT *GetDeploymentResponse

func (p *AppAPIServiceUpdateDeploymentResult) GetSuccess() (v *GetDeploymentResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateDeploymentResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateDeploymentResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateDeploymentResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateDeploymentResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateDeploymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDeploymentResponse)
}
func (p *AppAPIServiceUpdateDeploymentResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateDeploymentResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateDeploymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateDeploymentResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateDeploymentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateDeploymentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDeploymentResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateDeploymentResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateDeploymentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDeployment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateDeploymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateDeploymentResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateDeploymentResult) DeepEqual(ano *AppAPIServiceUpdateDeploymentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateDeploymentResult) Field0DeepEqual(src *GetDeploymentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateDeploymentResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteDeploymentArgs struct {
	Req *DeleteRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteDeploymentArgs() *AppAPIServiceDeleteDeploymentArgs {
	return &AppAPIServiceDeleteDeploymentArgs{}
}

var AppAPIServiceDeleteDeploymentArgs_Req_DEFAULT *DeleteRequest

func (p *AppAPIServiceDeleteDeploymentArgs) GetReq() (v *DeleteRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteDeploymentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteDeploymentArgs) SetReq(val *DeleteRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteDeploymentArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteDeploymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteDeploymentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteDeploymentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteDeploymentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDeployment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteDeploymentArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteDeploymentArgs) DeepEqual(ano *AppAPIServiceDeleteDeploymentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteDeploymentArgs) Field1DeepEqual(src *DeleteRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteDeploymentResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteDeploymentResult() *AppAPIServiceDeleteDeploymentResult {
	return &AppAPIServiceDeleteDeploymentResult{}
}

var AppAPIServiceDeleteDeploymentResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteDeploymentResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteDeploymentResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteDeploymentResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteDeploymentResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteDeploymentResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteDeploymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteDeploymentResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteDeploymentResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteDeploymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteDeploymentResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteDeploymentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteDeploymentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteDeploymentResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteDeploymentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDeployment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteDeploymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteDeploymentResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteDeploymentResult) DeepEqual(ano *AppAPIServiceDeleteDeploymentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteDeploymentResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteDeploymentResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetStatefulSetArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetStatefulSetArgs() *AppAPIServiceGetStatefulSetArgs {
	return &AppAPIServiceGetStatefulSetArgs{}
}

var AppAPIServiceGetStatefulSetArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetStatefulSetArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetStatefulSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetStatefulSetArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetStatefulSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetStatefulSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetStatefulSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetStatefulSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetStatefulSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetStatefulSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetStatefulSetArgs(%+v)", *p)
}

func (p *AppAPIServiceGetStatefulSetArgs) DeepEqual(ano *AppAPIServiceGetStatefulSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetStatefulSetArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetStatefulSetResult struct {
	Success *GetStatefulSetResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetStatefulSetResult() *AppAPIServiceGetStatefulSetResult {
	return &AppAPIServiceGetStatefulSetResult{}
}

var AppAPIServiceGetStatefulSetResult_Success_DEFAULT *GetStatefulSetResponse

func (p *AppAPIServiceGetStatefulSetResult) GetSuccess() (v *GetStatefulSetResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetStatefulSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetStatefulSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetStatefulSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetStatefulSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetStatefulSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetStatefulSetResponse)
}
func (p *AppAPIServiceGetStatefulSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetStatefulSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetStatefulSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetStatefulSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetStatefulSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetStatefulSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetStatefulSetResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetStatefulSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetStatefulSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetStatefulSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetStatefulSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetStatefulSetResult(%+v)", *p)
}

func (p *AppAPIServiceGetStatefulSetResult) DeepEqual(ano *AppAPIServiceGetStatefulSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetStatefulSetResult) Field0DeepEqual(src *GetStatefulSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetStatefulSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListStatefulSetsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListStatefulSetsArgs() *AppAPIServiceListStatefulSetsArgs {
	return &AppAPIServiceListStatefulSetsArgs{}
}

var AppAPIServiceListStatefulSetsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListStatefulSetsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListStatefulSetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListStatefulSetsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListStatefulSetsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListStatefulSetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListStatefulSetsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListStatefulSetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListStatefulSetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListStatefulSets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListStatefulSetsArgs(%+v)", *p)
}

func (p *AppAPIServiceListStatefulSetsArgs) DeepEqual(ano *AppAPIServiceListStatefulSetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListStatefulSetsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListStatefulSetsResult struct {
	Success *ListStatefulSetsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListStatefulSetsResult() *AppAPIServiceListStatefulSetsResult {
	return &AppAPIServiceListStatefulSetsResult{}
}

var AppAPIServiceListStatefulSetsResult_Success_DEFAULT *ListStatefulSetsResponse

func (p *AppAPIServiceListStatefulSetsResult) GetSuccess() (v *ListStatefulSetsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListStatefulSetsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListStatefulSetsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListStatefulSetsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListStatefulSetsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListStatefulSetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListStatefulSetsResponse)
}
func (p *AppAPIServiceListStatefulSetsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListStatefulSetsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListStatefulSetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListStatefulSetsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListStatefulSetsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListStatefulSetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListStatefulSetsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListStatefulSetsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListStatefulSetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListStatefulSets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListStatefulSetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListStatefulSetsResult(%+v)", *p)
}

func (p *AppAPIServiceListStatefulSetsResult) DeepEqual(ano *AppAPIServiceListStatefulSetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListStatefulSetsResult) Field0DeepEqual(src *ListStatefulSetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListStatefulSetsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateStatefulSetArgs struct {
	Req *CreateStatefulSetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateStatefulSetArgs() *AppAPIServiceCreateStatefulSetArgs {
	return &AppAPIServiceCreateStatefulSetArgs{}
}

var AppAPIServiceCreateStatefulSetArgs_Req_DEFAULT *CreateStatefulSetRequest

func (p *AppAPIServiceCreateStatefulSetArgs) GetReq() (v *CreateStatefulSetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateStatefulSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateStatefulSetArgs) SetReq(val *CreateStatefulSetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateStatefulSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateStatefulSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateStatefulSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateStatefulSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateStatefulSetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateStatefulSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateStatefulSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateStatefulSetArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateStatefulSetArgs) DeepEqual(ano *AppAPIServiceCreateStatefulSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateStatefulSetArgs) Field1DeepEqual(src *CreateStatefulSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateStatefulSetResult struct {
	Success *GetStatefulSetResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateStatefulSetResult() *AppAPIServiceCreateStatefulSetResult {
	return &AppAPIServiceCreateStatefulSetResult{}
}

var AppAPIServiceCreateStatefulSetResult_Success_DEFAULT *GetStatefulSetResponse

func (p *AppAPIServiceCreateStatefulSetResult) GetSuccess() (v *GetStatefulSetResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateStatefulSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateStatefulSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateStatefulSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateStatefulSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateStatefulSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetStatefulSetResponse)
}
func (p *AppAPIServiceCreateStatefulSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateStatefulSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateStatefulSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateStatefulSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateStatefulSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateStatefulSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetStatefulSetResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateStatefulSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateStatefulSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateStatefulSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateStatefulSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateStatefulSetResult(%+v)", *p)
}

func (p *AppAPIServiceCreateStatefulSetResult) DeepEqual(ano *AppAPIServiceCreateStatefulSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateStatefulSetResult) Field0DeepEqual(src *GetStatefulSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateStatefulSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateStatefulSetArgs struct {
	Req *CreateStatefulSetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateStatefulSetArgs() *AppAPIServiceUpdateStatefulSetArgs {
	return &AppAPIServiceUpdateStatefulSetArgs{}
}

var AppAPIServiceUpdateStatefulSetArgs_Req_DEFAULT *CreateStatefulSetRequest

func (p *AppAPIServiceUpdateStatefulSetArgs) GetReq() (v *CreateStatefulSetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateStatefulSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateStatefulSetArgs) SetReq(val *CreateStatefulSetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateStatefulSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateStatefulSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateStatefulSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateStatefulSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateStatefulSetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateStatefulSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateStatefulSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateStatefulSetArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateStatefulSetArgs) DeepEqual(ano *AppAPIServiceUpdateStatefulSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateStatefulSetArgs) Field1DeepEqual(src *CreateStatefulSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateStatefulSetResult struct {
	Success *GetStatefulSetResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateStatefulSetResult() *AppAPIServiceUpdateStatefulSetResult {
	return &AppAPIServiceUpdateStatefulSetResult{}
}

var AppAPIServiceUpdateStatefulSetResult_Success_DEFAULT *GetStatefulSetResponse

func (p *AppAPIServiceUpdateStatefulSetResult) GetSuccess() (v *GetStatefulSetResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateStatefulSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateStatefulSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateStatefulSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateStatefulSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateStatefulSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetStatefulSetResponse)
}
func (p *AppAPIServiceUpdateStatefulSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateStatefulSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateStatefulSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateStatefulSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateStatefulSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateStatefulSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetStatefulSetResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateStatefulSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateStatefulSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateStatefulSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateStatefulSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateStatefulSetResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateStatefulSetResult) DeepEqual(ano *AppAPIServiceUpdateStatefulSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateStatefulSetResult) Field0DeepEqual(src *GetStatefulSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateStatefulSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteStatefulSetArgs struct {
	Req *DeleteRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteStatefulSetArgs() *AppAPIServiceDeleteStatefulSetArgs {
	return &AppAPIServiceDeleteStatefulSetArgs{}
}

var AppAPIServiceDeleteStatefulSetArgs_Req_DEFAULT *DeleteRequest

func (p *AppAPIServiceDeleteStatefulSetArgs) GetReq() (v *DeleteRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteStatefulSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteStatefulSetArgs) SetReq(val *DeleteRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteStatefulSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteStatefulSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteStatefulSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteStatefulSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteStatefulSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteStatefulSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteStatefulSetArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteStatefulSetArgs) DeepEqual(ano *AppAPIServiceDeleteStatefulSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteStatefulSetArgs) Field1DeepEqual(src *DeleteRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteStatefulSetResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteStatefulSetResult() *AppAPIServiceDeleteStatefulSetResult {
	return &AppAPIServiceDeleteStatefulSetResult{}
}

var AppAPIServiceDeleteStatefulSetResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteStatefulSetResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteStatefulSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteStatefulSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteStatefulSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteStatefulSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteStatefulSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteStatefulSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteStatefulSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteStatefulSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteStatefulSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteStatefulSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteStatefulSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteStatefulSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteStatefulSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteStatefulSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteStatefulSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteStatefulSetResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteStatefulSetResult) DeepEqual(ano *AppAPIServiceDeleteStatefulSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteStatefulSetResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteStatefulSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetJobArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetJobArgs() *AppAPIServiceGetJobArgs {
	return &AppAPIServiceGetJobArgs{}
}

var AppAPIServiceGetJobArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetJobArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetJobArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetJobArgs(%+v)", *p)
}

func (p *AppAPIServiceGetJobArgs) DeepEqual(ano *AppAPIServiceGetJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetJobArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetJobResult struct {
	Success *GetJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error   `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetJobResult() *AppAPIServiceGetJobResult {
	return &AppAPIServiceGetJobResult{}
}

var AppAPIServiceGetJobResult_Success_DEFAULT *GetJobResponse

func (p *AppAPIServiceGetJobResult) GetSuccess() (v *GetJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetJobResponse)
}
func (p *AppAPIServiceGetJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetJobResult(%+v)", *p)
}

func (p *AppAPIServiceGetJobResult) DeepEqual(ano *AppAPIServiceGetJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetJobResult) Field0DeepEqual(src *GetJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListJobsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListJobsArgs() *AppAPIServiceListJobsArgs {
	return &AppAPIServiceListJobsArgs{}
}

var AppAPIServiceListJobsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListJobsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListJobsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListJobsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListJobsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListJobsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListJobsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListJobsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListJobsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListJobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListJobsArgs(%+v)", *p)
}

func (p *AppAPIServiceListJobsArgs) DeepEqual(ano *AppAPIServiceListJobsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListJobsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListJobsResult struct {
	Success *ListJobsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error     `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListJobsResult() *AppAPIServiceListJobsResult {
	return &AppAPIServiceListJobsResult{}
}

var AppAPIServiceListJobsResult_Success_DEFAULT *ListJobsResponse

func (p *AppAPIServiceListJobsResult) GetSuccess() (v *ListJobsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListJobsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListJobsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListJobsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListJobsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListJobsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListJobsResponse)
}
func (p *AppAPIServiceListJobsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListJobsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListJobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListJobsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListJobsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListJobsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListJobsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListJobsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListJobsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListJobsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListJobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListJobsResult(%+v)", *p)
}

func (p *AppAPIServiceListJobsResult) DeepEqual(ano *AppAPIServiceListJobsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListJobsResult) Field0DeepEqual(src *ListJobsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListJobsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateJobArgs struct {
	Req *CreateJobRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateJobArgs() *AppAPIServiceCreateJobArgs {
	return &AppAPIServiceCreateJobArgs{}
}

var AppAPIServiceCreateJobArgs_Req_DEFAULT *CreateJobRequest

func (p *AppAPIServiceCreateJobArgs) GetReq() (v *CreateJobRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateJobArgs) SetReq(val *CreateJobRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateJobRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateJobArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateJobArgs) DeepEqual(ano *AppAPIServiceCreateJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateJobArgs) Field1DeepEqual(src *CreateJobRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateJobResult struct {
	Success *GetJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error   `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateJobResult() *AppAPIServiceCreateJobResult {
	return &AppAPIServiceCreateJobResult{}
}

var AppAPIServiceCreateJobResult_Success_DEFAULT *GetJobResponse

func (p *AppAPIServiceCreateJobResult) GetSuccess() (v *GetJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetJobResponse)
}
func (p *AppAPIServiceCreateJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateJobResult(%+v)", *p)
}

func (p *AppAPIServiceCreateJobResult) DeepEqual(ano *AppAPIServiceCreateJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateJobResult) Field0DeepEqual(src *GetJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateJobArgs struct {
	Req *CreateJobRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateJobArgs() *AppAPIServiceUpdateJobArgs {
	return &AppAPIServiceUpdateJobArgs{}
}

var AppAPIServiceUpdateJobArgs_Req_DEFAULT *CreateJobRequest

func (p *AppAPIServiceUpdateJobArgs) GetReq() (v *CreateJobRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateJobArgs) SetReq(val *CreateJobRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateJobRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateJobArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateJobArgs) DeepEqual(ano *AppAPIServiceUpdateJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateJobArgs) Field1DeepEqual(src *CreateJobRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateJobResult struct {
	Success *GetJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error   `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateJobResult() *AppAPIServiceUpdateJobResult {
	return &AppAPIServiceUpdateJobResult{}
}

var AppAPIServiceUpdateJobResult_Success_DEFAULT *GetJobResponse

func (p *AppAPIServiceUpdateJobResult) GetSuccess() (v *GetJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetJobResponse)
}
func (p *AppAPIServiceUpdateJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateJobResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateJobResult) DeepEqual(ano *AppAPIServiceUpdateJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateJobResult) Field0DeepEqual(src *GetJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteJobArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteJobArgs() *AppAPIServiceDeleteJobArgs {
	return &AppAPIServiceDeleteJobArgs{}
}

var AppAPIServiceDeleteJobArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteJobArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteJobArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteJobArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteJobArgs) DeepEqual(ano *AppAPIServiceDeleteJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteJobArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteJobResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteJobResult() *AppAPIServiceDeleteJobResult {
	return &AppAPIServiceDeleteJobResult{}
}

var AppAPIServiceDeleteJobResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteJobResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteJobResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteJobResult) DeepEqual(ano *AppAPIServiceDeleteJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteJobResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetSecretArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetSecretArgs() *AppAPIServiceGetSecretArgs {
	return &AppAPIServiceGetSecretArgs{}
}

var AppAPIServiceGetSecretArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetSecretArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetSecretArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetSecretArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetSecretArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetSecretArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetSecretArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetSecretArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetSecretArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetSecretArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSecret_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetSecretArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetSecretArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetSecretArgs(%+v)", *p)
}

func (p *AppAPIServiceGetSecretArgs) DeepEqual(ano *AppAPIServiceGetSecretArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetSecretArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetSecretResult struct {
	Success *GetSecretResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error      `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetSecretResult() *AppAPIServiceGetSecretResult {
	return &AppAPIServiceGetSecretResult{}
}

var AppAPIServiceGetSecretResult_Success_DEFAULT *GetSecretResponse

func (p *AppAPIServiceGetSecretResult) GetSuccess() (v *GetSecretResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetSecretResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetSecretResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetSecretResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetSecretResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetSecretResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSecretResponse)
}
func (p *AppAPIServiceGetSecretResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetSecretResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetSecretResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetSecretResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetSecretResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetSecretResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetSecretResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetSecretResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetSecretResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetSecretResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetSecret_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetSecretResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetSecretResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetSecretResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetSecretResult(%+v)", *p)
}

func (p *AppAPIServiceGetSecretResult) DeepEqual(ano *AppAPIServiceGetSecretResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetSecretResult) Field0DeepEqual(src *GetSecretResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetSecretResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListSecretsArgs struct {
	Req *ListSecretsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListSecretsArgs() *AppAPIServiceListSecretsArgs {
	return &AppAPIServiceListSecretsArgs{}
}

var AppAPIServiceListSecretsArgs_Req_DEFAULT *ListSecretsRequest

func (p *AppAPIServiceListSecretsArgs) GetReq() (v *ListSecretsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListSecretsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListSecretsArgs) SetReq(val *ListSecretsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListSecretsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListSecretsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListSecretsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListSecretsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListSecretsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListSecretsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListSecretsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSecrets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListSecretsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListSecretsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListSecretsArgs(%+v)", *p)
}

func (p *AppAPIServiceListSecretsArgs) DeepEqual(ano *AppAPIServiceListSecretsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListSecretsArgs) Field1DeepEqual(src *ListSecretsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListSecretsResult struct {
	Success *ListSecretsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error        `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListSecretsResult() *AppAPIServiceListSecretsResult {
	return &AppAPIServiceListSecretsResult{}
}

var AppAPIServiceListSecretsResult_Success_DEFAULT *ListSecretsResponse

func (p *AppAPIServiceListSecretsResult) GetSuccess() (v *ListSecretsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListSecretsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListSecretsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListSecretsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListSecretsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListSecretsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSecretsResponse)
}
func (p *AppAPIServiceListSecretsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListSecretsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListSecretsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListSecretsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListSecretsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListSecretsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListSecretsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListSecretsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListSecretsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListSecretsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSecrets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListSecretsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListSecretsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListSecretsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListSecretsResult(%+v)", *p)
}

func (p *AppAPIServiceListSecretsResult) DeepEqual(ano *AppAPIServiceListSecretsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListSecretsResult) Field0DeepEqual(src *ListSecretsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListSecretsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateSecretArgs struct {
	Req *CreateSecretRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateSecretArgs() *AppAPIServiceCreateSecretArgs {
	return &AppAPIServiceCreateSecretArgs{}
}

var AppAPIServiceCreateSecretArgs_Req_DEFAULT *CreateSecretRequest

func (p *AppAPIServiceCreateSecretArgs) GetReq() (v *CreateSecretRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateSecretArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateSecretArgs) SetReq(val *CreateSecretRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateSecretArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateSecretArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateSecretArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateSecretArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateSecretRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateSecretArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSecret_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateSecretArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateSecretArgs) DeepEqual(ano *AppAPIServiceCreateSecretArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateSecretArgs) Field1DeepEqual(src *CreateSecretRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateSecretResult struct {
	Success *GetSecretResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error      `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateSecretResult() *AppAPIServiceCreateSecretResult {
	return &AppAPIServiceCreateSecretResult{}
}

var AppAPIServiceCreateSecretResult_Success_DEFAULT *GetSecretResponse

func (p *AppAPIServiceCreateSecretResult) GetSuccess() (v *GetSecretResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateSecretResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateSecretResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateSecretResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateSecretResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateSecretResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSecretResponse)
}
func (p *AppAPIServiceCreateSecretResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateSecretResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateSecretResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateSecretResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateSecretResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateSecretResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetSecretResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateSecretResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateSecretResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateSecret_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateSecretResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateSecretResult(%+v)", *p)
}

func (p *AppAPIServiceCreateSecretResult) DeepEqual(ano *AppAPIServiceCreateSecretResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateSecretResult) Field0DeepEqual(src *GetSecretResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateSecretResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateSecretArgs struct {
	Req *CreateSecretRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateSecretArgs() *AppAPIServiceUpdateSecretArgs {
	return &AppAPIServiceUpdateSecretArgs{}
}

var AppAPIServiceUpdateSecretArgs_Req_DEFAULT *CreateSecretRequest

func (p *AppAPIServiceUpdateSecretArgs) GetReq() (v *CreateSecretRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateSecretArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateSecretArgs) SetReq(val *CreateSecretRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateSecretArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateSecretArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateSecretArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateSecretArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateSecretRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateSecretArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSecret_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateSecretArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateSecretArgs) DeepEqual(ano *AppAPIServiceUpdateSecretArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateSecretArgs) Field1DeepEqual(src *CreateSecretRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateSecretResult struct {
	Success *GetSecretResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error      `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateSecretResult() *AppAPIServiceUpdateSecretResult {
	return &AppAPIServiceUpdateSecretResult{}
}

var AppAPIServiceUpdateSecretResult_Success_DEFAULT *GetSecretResponse

func (p *AppAPIServiceUpdateSecretResult) GetSuccess() (v *GetSecretResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateSecretResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateSecretResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateSecretResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateSecretResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateSecretResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetSecretResponse)
}
func (p *AppAPIServiceUpdateSecretResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateSecretResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateSecretResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateSecretResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateSecretResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateSecretResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetSecretResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateSecretResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateSecretResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateSecret_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateSecretResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateSecretResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateSecretResult) DeepEqual(ano *AppAPIServiceUpdateSecretResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateSecretResult) Field0DeepEqual(src *GetSecretResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateSecretResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteSecretArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteSecretArgs() *AppAPIServiceDeleteSecretArgs {
	return &AppAPIServiceDeleteSecretArgs{}
}

var AppAPIServiceDeleteSecretArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteSecretArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteSecretArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteSecretArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteSecretArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteSecretArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteSecretArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteSecretArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteSecretArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSecret_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteSecretArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteSecretArgs) DeepEqual(ano *AppAPIServiceDeleteSecretArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteSecretArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteSecretResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteSecretResult() *AppAPIServiceDeleteSecretResult {
	return &AppAPIServiceDeleteSecretResult{}
}

var AppAPIServiceDeleteSecretResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteSecretResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteSecretResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteSecretResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteSecretResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteSecretResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteSecretResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteSecretResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteSecretResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteSecretResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteSecretResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteSecretResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteSecretResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteSecretResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteSecretResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteSecret_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteSecretResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteSecretResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteSecretResult) DeepEqual(ano *AppAPIServiceDeleteSecretResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteSecretResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteSecretResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetDaemonSetArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetDaemonSetArgs() *AppAPIServiceGetDaemonSetArgs {
	return &AppAPIServiceGetDaemonSetArgs{}
}

var AppAPIServiceGetDaemonSetArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetDaemonSetArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetDaemonSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetDaemonSetArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetDaemonSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetDaemonSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetDaemonSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetDaemonSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetDaemonSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDaemonSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetDaemonSetArgs(%+v)", *p)
}

func (p *AppAPIServiceGetDaemonSetArgs) DeepEqual(ano *AppAPIServiceGetDaemonSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetDaemonSetArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetDaemonSetResult struct {
	Success *GetDaemonSetResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetDaemonSetResult() *AppAPIServiceGetDaemonSetResult {
	return &AppAPIServiceGetDaemonSetResult{}
}

var AppAPIServiceGetDaemonSetResult_Success_DEFAULT *GetDaemonSetResponse

func (p *AppAPIServiceGetDaemonSetResult) GetSuccess() (v *GetDaemonSetResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetDaemonSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetDaemonSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetDaemonSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetDaemonSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetDaemonSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDaemonSetResponse)
}
func (p *AppAPIServiceGetDaemonSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetDaemonSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetDaemonSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetDaemonSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetDaemonSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetDaemonSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDaemonSetResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetDaemonSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetDaemonSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDaemonSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetDaemonSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetDaemonSetResult(%+v)", *p)
}

func (p *AppAPIServiceGetDaemonSetResult) DeepEqual(ano *AppAPIServiceGetDaemonSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetDaemonSetResult) Field0DeepEqual(src *GetDaemonSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetDaemonSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListDaemonSetsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListDaemonSetsArgs() *AppAPIServiceListDaemonSetsArgs {
	return &AppAPIServiceListDaemonSetsArgs{}
}

var AppAPIServiceListDaemonSetsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListDaemonSetsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListDaemonSetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListDaemonSetsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListDaemonSetsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListDaemonSetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListDaemonSetsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListDaemonSetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListDaemonSetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDaemonSets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListDaemonSetsArgs(%+v)", *p)
}

func (p *AppAPIServiceListDaemonSetsArgs) DeepEqual(ano *AppAPIServiceListDaemonSetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListDaemonSetsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListDaemonSetsResult struct {
	Success *ListDaemonSetsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListDaemonSetsResult() *AppAPIServiceListDaemonSetsResult {
	return &AppAPIServiceListDaemonSetsResult{}
}

var AppAPIServiceListDaemonSetsResult_Success_DEFAULT *ListDaemonSetsResponse

func (p *AppAPIServiceListDaemonSetsResult) GetSuccess() (v *ListDaemonSetsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListDaemonSetsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListDaemonSetsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListDaemonSetsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListDaemonSetsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListDaemonSetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListDaemonSetsResponse)
}
func (p *AppAPIServiceListDaemonSetsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListDaemonSetsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListDaemonSetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListDaemonSetsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListDaemonSetsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListDaemonSetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListDaemonSetsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListDaemonSetsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListDaemonSetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListDaemonSets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListDaemonSetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListDaemonSetsResult(%+v)", *p)
}

func (p *AppAPIServiceListDaemonSetsResult) DeepEqual(ano *AppAPIServiceListDaemonSetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListDaemonSetsResult) Field0DeepEqual(src *ListDaemonSetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListDaemonSetsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateDaemonSetArgs struct {
	Req *CreateDaemonSetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateDaemonSetArgs() *AppAPIServiceCreateDaemonSetArgs {
	return &AppAPIServiceCreateDaemonSetArgs{}
}

var AppAPIServiceCreateDaemonSetArgs_Req_DEFAULT *CreateDaemonSetRequest

func (p *AppAPIServiceCreateDaemonSetArgs) GetReq() (v *CreateDaemonSetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateDaemonSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateDaemonSetArgs) SetReq(val *CreateDaemonSetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateDaemonSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateDaemonSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateDaemonSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateDaemonSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateDaemonSetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateDaemonSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDaemonSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateDaemonSetArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateDaemonSetArgs) DeepEqual(ano *AppAPIServiceCreateDaemonSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateDaemonSetArgs) Field1DeepEqual(src *CreateDaemonSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateDaemonSetResult struct {
	Success *GetDaemonSetResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateDaemonSetResult() *AppAPIServiceCreateDaemonSetResult {
	return &AppAPIServiceCreateDaemonSetResult{}
}

var AppAPIServiceCreateDaemonSetResult_Success_DEFAULT *GetDaemonSetResponse

func (p *AppAPIServiceCreateDaemonSetResult) GetSuccess() (v *GetDaemonSetResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateDaemonSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateDaemonSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateDaemonSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateDaemonSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateDaemonSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDaemonSetResponse)
}
func (p *AppAPIServiceCreateDaemonSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateDaemonSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateDaemonSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateDaemonSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateDaemonSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateDaemonSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDaemonSetResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateDaemonSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateDaemonSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateDaemonSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateDaemonSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateDaemonSetResult(%+v)", *p)
}

func (p *AppAPIServiceCreateDaemonSetResult) DeepEqual(ano *AppAPIServiceCreateDaemonSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateDaemonSetResult) Field0DeepEqual(src *GetDaemonSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateDaemonSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateDaemonSetArgs struct {
	Req *CreateDaemonSetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateDaemonSetArgs() *AppAPIServiceUpdateDaemonSetArgs {
	return &AppAPIServiceUpdateDaemonSetArgs{}
}

var AppAPIServiceUpdateDaemonSetArgs_Req_DEFAULT *CreateDaemonSetRequest

func (p *AppAPIServiceUpdateDaemonSetArgs) GetReq() (v *CreateDaemonSetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateDaemonSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateDaemonSetArgs) SetReq(val *CreateDaemonSetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateDaemonSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateDaemonSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateDaemonSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateDaemonSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateDaemonSetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateDaemonSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDaemonSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateDaemonSetArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateDaemonSetArgs) DeepEqual(ano *AppAPIServiceUpdateDaemonSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateDaemonSetArgs) Field1DeepEqual(src *CreateDaemonSetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateDaemonSetResult struct {
	Success *GetDaemonSetResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateDaemonSetResult() *AppAPIServiceUpdateDaemonSetResult {
	return &AppAPIServiceUpdateDaemonSetResult{}
}

var AppAPIServiceUpdateDaemonSetResult_Success_DEFAULT *GetDaemonSetResponse

func (p *AppAPIServiceUpdateDaemonSetResult) GetSuccess() (v *GetDaemonSetResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateDaemonSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateDaemonSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateDaemonSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateDaemonSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateDaemonSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDaemonSetResponse)
}
func (p *AppAPIServiceUpdateDaemonSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateDaemonSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateDaemonSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateDaemonSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateDaemonSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateDaemonSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDaemonSetResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateDaemonSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateDaemonSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDaemonSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateDaemonSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateDaemonSetResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateDaemonSetResult) DeepEqual(ano *AppAPIServiceUpdateDaemonSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateDaemonSetResult) Field0DeepEqual(src *GetDaemonSetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateDaemonSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteDaemonSetArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteDaemonSetArgs() *AppAPIServiceDeleteDaemonSetArgs {
	return &AppAPIServiceDeleteDaemonSetArgs{}
}

var AppAPIServiceDeleteDaemonSetArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteDaemonSetArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteDaemonSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteDaemonSetArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteDaemonSetArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteDaemonSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteDaemonSetArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteDaemonSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteDaemonSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDaemonSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteDaemonSetArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteDaemonSetArgs) DeepEqual(ano *AppAPIServiceDeleteDaemonSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteDaemonSetArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteDaemonSetResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteDaemonSetResult() *AppAPIServiceDeleteDaemonSetResult {
	return &AppAPIServiceDeleteDaemonSetResult{}
}

var AppAPIServiceDeleteDaemonSetResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteDaemonSetResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteDaemonSetResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteDaemonSetResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteDaemonSetResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteDaemonSetResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteDaemonSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteDaemonSetResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteDaemonSetResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteDaemonSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteDaemonSetResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteDaemonSetResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteDaemonSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteDaemonSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteDaemonSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDaemonSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteDaemonSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteDaemonSetResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteDaemonSetResult) DeepEqual(ano *AppAPIServiceDeleteDaemonSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteDaemonSetResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteDaemonSetResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetCronJobArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetCronJobArgs() *AppAPIServiceGetCronJobArgs {
	return &AppAPIServiceGetCronJobArgs{}
}

var AppAPIServiceGetCronJobArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetCronJobArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetCronJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetCronJobArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetCronJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetCronJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetCronJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetCronJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetCronJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCronJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetCronJobArgs(%+v)", *p)
}

func (p *AppAPIServiceGetCronJobArgs) DeepEqual(ano *AppAPIServiceGetCronJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetCronJobArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetCronJobResult struct {
	Success *GetCronJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetCronJobResult() *AppAPIServiceGetCronJobResult {
	return &AppAPIServiceGetCronJobResult{}
}

var AppAPIServiceGetCronJobResult_Success_DEFAULT *GetCronJobResponse

func (p *AppAPIServiceGetCronJobResult) GetSuccess() (v *GetCronJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetCronJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetCronJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetCronJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetCronJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetCronJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCronJobResponse)
}
func (p *AppAPIServiceGetCronJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetCronJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetCronJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetCronJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetCronJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetCronJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCronJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetCronJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetCronJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCronJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetCronJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetCronJobResult(%+v)", *p)
}

func (p *AppAPIServiceGetCronJobResult) DeepEqual(ano *AppAPIServiceGetCronJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetCronJobResult) Field0DeepEqual(src *GetCronJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetCronJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListCronJobsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListCronJobsArgs() *AppAPIServiceListCronJobsArgs {
	return &AppAPIServiceListCronJobsArgs{}
}

var AppAPIServiceListCronJobsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListCronJobsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListCronJobsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListCronJobsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListCronJobsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListCronJobsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListCronJobsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListCronJobsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCronJobsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCronJobs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListCronJobsArgs(%+v)", *p)
}

func (p *AppAPIServiceListCronJobsArgs) DeepEqual(ano *AppAPIServiceListCronJobsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListCronJobsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListCronJobsResult struct {
	Success *ListCronJobsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListCronJobsResult() *AppAPIServiceListCronJobsResult {
	return &AppAPIServiceListCronJobsResult{}
}

var AppAPIServiceListCronJobsResult_Success_DEFAULT *ListCronJobsResponse

func (p *AppAPIServiceListCronJobsResult) GetSuccess() (v *ListCronJobsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListCronJobsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListCronJobsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListCronJobsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListCronJobsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListCronJobsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListCronJobsResponse)
}
func (p *AppAPIServiceListCronJobsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListCronJobsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListCronJobsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListCronJobsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListCronJobsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListCronJobsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListCronJobsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCronJobsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCronJobsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCronJobs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListCronJobsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListCronJobsResult(%+v)", *p)
}

func (p *AppAPIServiceListCronJobsResult) DeepEqual(ano *AppAPIServiceListCronJobsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListCronJobsResult) Field0DeepEqual(src *ListCronJobsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListCronJobsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListJobsFromCronJobArgs struct {
	Req *ListJobsFromCronJobRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListJobsFromCronJobArgs() *AppAPIServiceListJobsFromCronJobArgs {
	return &AppAPIServiceListJobsFromCronJobArgs{}
}

var AppAPIServiceListJobsFromCronJobArgs_Req_DEFAULT *ListJobsFromCronJobRequest

func (p *AppAPIServiceListJobsFromCronJobArgs) GetReq() (v *ListJobsFromCronJobRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListJobsFromCronJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListJobsFromCronJobArgs) SetReq(val *ListJobsFromCronJobRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListJobsFromCronJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListJobsFromCronJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListJobsFromCronJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListJobsFromCronJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListJobsFromCronJobRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListJobsFromCronJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobsFromCronJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListJobsFromCronJobArgs(%+v)", *p)
}

func (p *AppAPIServiceListJobsFromCronJobArgs) DeepEqual(ano *AppAPIServiceListJobsFromCronJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListJobsFromCronJobArgs) Field1DeepEqual(src *ListJobsFromCronJobRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListJobsFromCronJobResult struct {
	Success *ListJobsFromCronJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListJobsFromCronJobResult() *AppAPIServiceListJobsFromCronJobResult {
	return &AppAPIServiceListJobsFromCronJobResult{}
}

var AppAPIServiceListJobsFromCronJobResult_Success_DEFAULT *ListJobsFromCronJobResponse

func (p *AppAPIServiceListJobsFromCronJobResult) GetSuccess() (v *ListJobsFromCronJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListJobsFromCronJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListJobsFromCronJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListJobsFromCronJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListJobsFromCronJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListJobsFromCronJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListJobsFromCronJobResponse)
}
func (p *AppAPIServiceListJobsFromCronJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListJobsFromCronJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListJobsFromCronJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListJobsFromCronJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListJobsFromCronJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListJobsFromCronJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListJobsFromCronJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListJobsFromCronJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListJobsFromCronJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListJobsFromCronJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListJobsFromCronJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListJobsFromCronJobResult(%+v)", *p)
}

func (p *AppAPIServiceListJobsFromCronJobResult) DeepEqual(ano *AppAPIServiceListJobsFromCronJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListJobsFromCronJobResult) Field0DeepEqual(src *ListJobsFromCronJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListJobsFromCronJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateCronJobArgs struct {
	Req *CreateCronJobRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateCronJobArgs() *AppAPIServiceCreateCronJobArgs {
	return &AppAPIServiceCreateCronJobArgs{}
}

var AppAPIServiceCreateCronJobArgs_Req_DEFAULT *CreateCronJobRequest

func (p *AppAPIServiceCreateCronJobArgs) GetReq() (v *CreateCronJobRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateCronJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateCronJobArgs) SetReq(val *CreateCronJobRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateCronJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateCronJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateCronJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateCronJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCronJobRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateCronJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCronJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateCronJobArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateCronJobArgs) DeepEqual(ano *AppAPIServiceCreateCronJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateCronJobArgs) Field1DeepEqual(src *CreateCronJobRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateCronJobResult struct {
	Success *GetCronJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateCronJobResult() *AppAPIServiceCreateCronJobResult {
	return &AppAPIServiceCreateCronJobResult{}
}

var AppAPIServiceCreateCronJobResult_Success_DEFAULT *GetCronJobResponse

func (p *AppAPIServiceCreateCronJobResult) GetSuccess() (v *GetCronJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateCronJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateCronJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateCronJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateCronJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateCronJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCronJobResponse)
}
func (p *AppAPIServiceCreateCronJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateCronJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateCronJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateCronJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateCronJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateCronJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCronJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateCronJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateCronJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCronJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateCronJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateCronJobResult(%+v)", *p)
}

func (p *AppAPIServiceCreateCronJobResult) DeepEqual(ano *AppAPIServiceCreateCronJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateCronJobResult) Field0DeepEqual(src *GetCronJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateCronJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateCronJobArgs struct {
	Req *CreateCronJobRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateCronJobArgs() *AppAPIServiceUpdateCronJobArgs {
	return &AppAPIServiceUpdateCronJobArgs{}
}

var AppAPIServiceUpdateCronJobArgs_Req_DEFAULT *CreateCronJobRequest

func (p *AppAPIServiceUpdateCronJobArgs) GetReq() (v *CreateCronJobRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateCronJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateCronJobArgs) SetReq(val *CreateCronJobRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateCronJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateCronJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateCronJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateCronJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCronJobRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateCronJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCronJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateCronJobArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateCronJobArgs) DeepEqual(ano *AppAPIServiceUpdateCronJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateCronJobArgs) Field1DeepEqual(src *CreateCronJobRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateCronJobResult struct {
	Success *GetCronJobResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateCronJobResult() *AppAPIServiceUpdateCronJobResult {
	return &AppAPIServiceUpdateCronJobResult{}
}

var AppAPIServiceUpdateCronJobResult_Success_DEFAULT *GetCronJobResponse

func (p *AppAPIServiceUpdateCronJobResult) GetSuccess() (v *GetCronJobResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateCronJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateCronJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateCronJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateCronJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateCronJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCronJobResponse)
}
func (p *AppAPIServiceUpdateCronJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateCronJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateCronJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateCronJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateCronJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateCronJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCronJobResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateCronJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateCronJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCronJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateCronJobResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateCronJobResult) DeepEqual(ano *AppAPIServiceUpdateCronJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateCronJobResult) Field0DeepEqual(src *GetCronJobResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateCronJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteCronJobArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteCronJobArgs() *AppAPIServiceDeleteCronJobArgs {
	return &AppAPIServiceDeleteCronJobArgs{}
}

var AppAPIServiceDeleteCronJobArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteCronJobArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteCronJobArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteCronJobArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteCronJobArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteCronJobArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteCronJobArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteCronJobArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCronJobArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCronJob_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteCronJobArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteCronJobArgs) DeepEqual(ano *AppAPIServiceDeleteCronJobArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteCronJobArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteCronJobResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteCronJobResult() *AppAPIServiceDeleteCronJobResult {
	return &AppAPIServiceDeleteCronJobResult{}
}

var AppAPIServiceDeleteCronJobResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteCronJobResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteCronJobResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteCronJobResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteCronJobResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteCronJobResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteCronJobResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteCronJobResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteCronJobResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteCronJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteCronJobResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteCronJobResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteCronJobResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCronJobResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCronJobResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCronJob_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteCronJobResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteCronJobResult) DeepEqual(ano *AppAPIServiceDeleteCronJobResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteCronJobResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteCronJobResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchCronJobSuspendArgs struct {
	Req *PatchCronJobSuspendRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServicePatchCronJobSuspendArgs() *AppAPIServicePatchCronJobSuspendArgs {
	return &AppAPIServicePatchCronJobSuspendArgs{}
}

var AppAPIServicePatchCronJobSuspendArgs_Req_DEFAULT *PatchCronJobSuspendRequest

func (p *AppAPIServicePatchCronJobSuspendArgs) GetReq() (v *PatchCronJobSuspendRequest) {
	if !p.IsSetReq() {
		return AppAPIServicePatchCronJobSuspendArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServicePatchCronJobSuspendArgs) SetReq(val *PatchCronJobSuspendRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServicePatchCronJobSuspendArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServicePatchCronJobSuspendArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServicePatchCronJobSuspendArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchCronJobSuspendArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewPatchCronJobSuspendRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchCronJobSuspendArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchCronJobSuspend_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchCronJobSuspendArgs(%+v)", *p)
}

func (p *AppAPIServicePatchCronJobSuspendArgs) DeepEqual(ano *AppAPIServicePatchCronJobSuspendArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchCronJobSuspendArgs) Field1DeepEqual(src *PatchCronJobSuspendRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServicePatchCronJobSuspendResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServicePatchCronJobSuspendResult() *AppAPIServicePatchCronJobSuspendResult {
	return &AppAPIServicePatchCronJobSuspendResult{}
}

var AppAPIServicePatchCronJobSuspendResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServicePatchCronJobSuspendResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServicePatchCronJobSuspendResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServicePatchCronJobSuspendResult_Err_DEFAULT *common.Error

func (p *AppAPIServicePatchCronJobSuspendResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServicePatchCronJobSuspendResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServicePatchCronJobSuspendResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServicePatchCronJobSuspendResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServicePatchCronJobSuspendResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServicePatchCronJobSuspendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServicePatchCronJobSuspendResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServicePatchCronJobSuspendResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServicePatchCronJobSuspendResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchCronJobSuspendResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServicePatchCronJobSuspendResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PatchCronJobSuspend_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServicePatchCronJobSuspendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServicePatchCronJobSuspendResult(%+v)", *p)
}

func (p *AppAPIServicePatchCronJobSuspendResult) DeepEqual(ano *AppAPIServicePatchCronJobSuspendResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServicePatchCronJobSuspendResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServicePatchCronJobSuspendResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetResourceYamlArgs struct {
	Req *GetResourceYamlRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetResourceYamlArgs() *AppAPIServiceGetResourceYamlArgs {
	return &AppAPIServiceGetResourceYamlArgs{}
}

var AppAPIServiceGetResourceYamlArgs_Req_DEFAULT *GetResourceYamlRequest

func (p *AppAPIServiceGetResourceYamlArgs) GetReq() (v *GetResourceYamlRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetResourceYamlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetResourceYamlArgs) SetReq(val *GetResourceYamlRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetResourceYamlArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetResourceYamlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetResourceYamlArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetResourceYamlArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetResourceYamlRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetResourceYamlArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResourceYaml_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetResourceYamlArgs(%+v)", *p)
}

func (p *AppAPIServiceGetResourceYamlArgs) DeepEqual(ano *AppAPIServiceGetResourceYamlArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetResourceYamlArgs) Field1DeepEqual(src *GetResourceYamlRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetResourceYamlResult struct {
	Success *GetResourceYamlResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetResourceYamlResult() *AppAPIServiceGetResourceYamlResult {
	return &AppAPIServiceGetResourceYamlResult{}
}

var AppAPIServiceGetResourceYamlResult_Success_DEFAULT *GetResourceYamlResponse

func (p *AppAPIServiceGetResourceYamlResult) GetSuccess() (v *GetResourceYamlResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetResourceYamlResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetResourceYamlResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetResourceYamlResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetResourceYamlResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetResourceYamlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetResourceYamlResponse)
}
func (p *AppAPIServiceGetResourceYamlResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetResourceYamlResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetResourceYamlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetResourceYamlResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetResourceYamlResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetResourceYamlResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetResourceYamlResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetResourceYamlResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetResourceYamlResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResourceYaml_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetResourceYamlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetResourceYamlResult(%+v)", *p)
}

func (p *AppAPIServiceGetResourceYamlResult) DeepEqual(ano *AppAPIServiceGetResourceYamlResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetResourceYamlResult) Field0DeepEqual(src *GetResourceYamlResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetResourceYamlResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateResourceByYamlArgs struct {
	Req *CreateResourceByYamlRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateResourceByYamlArgs() *AppAPIServiceCreateResourceByYamlArgs {
	return &AppAPIServiceCreateResourceByYamlArgs{}
}

var AppAPIServiceCreateResourceByYamlArgs_Req_DEFAULT *CreateResourceByYamlRequest

func (p *AppAPIServiceCreateResourceByYamlArgs) GetReq() (v *CreateResourceByYamlRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateResourceByYamlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateResourceByYamlArgs) SetReq(val *CreateResourceByYamlRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateResourceByYamlArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateResourceByYamlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateResourceByYamlArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateResourceByYamlArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateResourceByYamlRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateResourceByYamlArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateResourceByYaml_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateResourceByYamlArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateResourceByYamlArgs) DeepEqual(ano *AppAPIServiceCreateResourceByYamlArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateResourceByYamlArgs) Field1DeepEqual(src *CreateResourceByYamlRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateResourceByYamlResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateResourceByYamlResult() *AppAPIServiceCreateResourceByYamlResult {
	return &AppAPIServiceCreateResourceByYamlResult{}
}

var AppAPIServiceCreateResourceByYamlResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceCreateResourceByYamlResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateResourceByYamlResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateResourceByYamlResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateResourceByYamlResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateResourceByYamlResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateResourceByYamlResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceCreateResourceByYamlResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateResourceByYamlResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateResourceByYamlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateResourceByYamlResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateResourceByYamlResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateResourceByYamlResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateResourceByYamlResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateResourceByYamlResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateResourceByYaml_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateResourceByYamlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateResourceByYamlResult(%+v)", *p)
}

func (p *AppAPIServiceCreateResourceByYamlResult) DeepEqual(ano *AppAPIServiceCreateResourceByYamlResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateResourceByYamlResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateResourceByYamlResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateResourceByYamlArgs struct {
	Req *UpdateResourceByYamlRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateResourceByYamlArgs() *AppAPIServiceUpdateResourceByYamlArgs {
	return &AppAPIServiceUpdateResourceByYamlArgs{}
}

var AppAPIServiceUpdateResourceByYamlArgs_Req_DEFAULT *UpdateResourceByYamlRequest

func (p *AppAPIServiceUpdateResourceByYamlArgs) GetReq() (v *UpdateResourceByYamlRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateResourceByYamlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateResourceByYamlArgs) SetReq(val *UpdateResourceByYamlRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateResourceByYamlArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateResourceByYamlArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateResourceByYamlRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateResourceByYaml_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateResourceByYamlArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) DeepEqual(ano *AppAPIServiceUpdateResourceByYamlArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateResourceByYamlArgs) Field1DeepEqual(src *UpdateResourceByYamlRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateResourceByYamlResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateResourceByYamlResult() *AppAPIServiceUpdateResourceByYamlResult {
	return &AppAPIServiceUpdateResourceByYamlResult{}
}

var AppAPIServiceUpdateResourceByYamlResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceUpdateResourceByYamlResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateResourceByYamlResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateResourceByYamlResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateResourceByYamlResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateResourceByYamlResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateResourceByYamlResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceUpdateResourceByYamlResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateResourceByYamlResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateResourceByYamlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateResourceByYamlResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateResourceByYamlResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateResourceByYamlResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateResourceByYamlResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateResourceByYamlResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateResourceByYaml_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateResourceByYamlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateResourceByYamlResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateResourceByYamlResult) DeepEqual(ano *AppAPIServiceUpdateResourceByYamlResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateResourceByYamlResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateResourceByYamlResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetHorizontalPodAutoscalerArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetHorizontalPodAutoscalerArgs() *AppAPIServiceGetHorizontalPodAutoscalerArgs {
	return &AppAPIServiceGetHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceGetHorizontalPodAutoscalerArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceGetHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetHorizontalPodAutoscalerResult struct {
	Success *GetHorizontalPodAutoscalerResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetHorizontalPodAutoscalerResult() *AppAPIServiceGetHorizontalPodAutoscalerResult {
	return &AppAPIServiceGetHorizontalPodAutoscalerResult{}
}

var AppAPIServiceGetHorizontalPodAutoscalerResult_Success_DEFAULT *GetHorizontalPodAutoscalerResponse

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) GetSuccess() (v *GetHorizontalPodAutoscalerResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetHorizontalPodAutoscalerResponse)
}
func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetHorizontalPodAutoscalerResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceGetHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) Field0DeepEqual(src *GetHorizontalPodAutoscalerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListHorizontalPodAutoscalersArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListHorizontalPodAutoscalersArgs() *AppAPIServiceListHorizontalPodAutoscalersArgs {
	return &AppAPIServiceListHorizontalPodAutoscalersArgs{}
}

var AppAPIServiceListHorizontalPodAutoscalersArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListHorizontalPodAutoscalersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListHorizontalPodAutoscalersArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListHorizontalPodAutoscalersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListHorizontalPodAutoscalers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListHorizontalPodAutoscalersArgs(%+v)", *p)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) DeepEqual(ano *AppAPIServiceListHorizontalPodAutoscalersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListHorizontalPodAutoscalersArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListHorizontalPodAutoscalersResult struct {
	Success *ListHorizontalPodAutoscalersResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListHorizontalPodAutoscalersResult() *AppAPIServiceListHorizontalPodAutoscalersResult {
	return &AppAPIServiceListHorizontalPodAutoscalersResult{}
}

var AppAPIServiceListHorizontalPodAutoscalersResult_Success_DEFAULT *ListHorizontalPodAutoscalersResponse

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) GetSuccess() (v *ListHorizontalPodAutoscalersResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListHorizontalPodAutoscalersResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListHorizontalPodAutoscalersResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListHorizontalPodAutoscalersResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListHorizontalPodAutoscalersResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListHorizontalPodAutoscalersResponse)
}
func (p *AppAPIServiceListHorizontalPodAutoscalersResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListHorizontalPodAutoscalersResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListHorizontalPodAutoscalersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListHorizontalPodAutoscalersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListHorizontalPodAutoscalers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListHorizontalPodAutoscalersResult(%+v)", *p)
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) DeepEqual(ano *AppAPIServiceListHorizontalPodAutoscalersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListHorizontalPodAutoscalersResult) Field0DeepEqual(src *ListHorizontalPodAutoscalersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListHorizontalPodAutoscalersResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateHorizontalPodAutoscalerArgs struct {
	Req *CreateHorizontalPodAutoscalerRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateHorizontalPodAutoscalerArgs() *AppAPIServiceCreateHorizontalPodAutoscalerArgs {
	return &AppAPIServiceCreateHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceCreateHorizontalPodAutoscalerArgs_Req_DEFAULT *CreateHorizontalPodAutoscalerRequest

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) GetReq() (v *CreateHorizontalPodAutoscalerRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) SetReq(val *CreateHorizontalPodAutoscalerRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateHorizontalPodAutoscalerRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceCreateHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerArgs) Field1DeepEqual(src *CreateHorizontalPodAutoscalerRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateHorizontalPodAutoscalerResult struct {
	Success *GetHorizontalPodAutoscalerResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateHorizontalPodAutoscalerResult() *AppAPIServiceCreateHorizontalPodAutoscalerResult {
	return &AppAPIServiceCreateHorizontalPodAutoscalerResult{}
}

var AppAPIServiceCreateHorizontalPodAutoscalerResult_Success_DEFAULT *GetHorizontalPodAutoscalerResponse

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) GetSuccess() (v *GetHorizontalPodAutoscalerResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetHorizontalPodAutoscalerResponse)
}
func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetHorizontalPodAutoscalerResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceCreateHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) Field0DeepEqual(src *GetHorizontalPodAutoscalerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateHorizontalPodAutoscalerArgs struct {
	Req *CreateHorizontalPodAutoscalerRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateHorizontalPodAutoscalerArgs() *AppAPIServiceUpdateHorizontalPodAutoscalerArgs {
	return &AppAPIServiceUpdateHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceUpdateHorizontalPodAutoscalerArgs_Req_DEFAULT *CreateHorizontalPodAutoscalerRequest

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) GetReq() (v *CreateHorizontalPodAutoscalerRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) SetReq(val *CreateHorizontalPodAutoscalerRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateHorizontalPodAutoscalerRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerArgs) Field1DeepEqual(src *CreateHorizontalPodAutoscalerRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateHorizontalPodAutoscalerResult struct {
	Success *GetHorizontalPodAutoscalerResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateHorizontalPodAutoscalerResult() *AppAPIServiceUpdateHorizontalPodAutoscalerResult {
	return &AppAPIServiceUpdateHorizontalPodAutoscalerResult{}
}

var AppAPIServiceUpdateHorizontalPodAutoscalerResult_Success_DEFAULT *GetHorizontalPodAutoscalerResponse

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) GetSuccess() (v *GetHorizontalPodAutoscalerResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetHorizontalPodAutoscalerResponse)
}
func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetHorizontalPodAutoscalerResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceUpdateHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) Field0DeepEqual(src *GetHorizontalPodAutoscalerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteHorizontalPodAutoscalerArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteHorizontalPodAutoscalerArgs() *AppAPIServiceDeleteHorizontalPodAutoscalerArgs {
	return &AppAPIServiceDeleteHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceDeleteHorizontalPodAutoscalerArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteHorizontalPodAutoscalerResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteHorizontalPodAutoscalerResult() *AppAPIServiceDeleteHorizontalPodAutoscalerResult {
	return &AppAPIServiceDeleteHorizontalPodAutoscalerResult{}
}

var AppAPIServiceDeleteHorizontalPodAutoscalerResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceDeleteHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetPodArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetPodArgs() *AppAPIServiceGetPodArgs {
	return &AppAPIServiceGetPodArgs{}
}

var AppAPIServiceGetPodArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceGetPodArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetPodArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetPodArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetPodArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetPodArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetPodArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetPodArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetPodArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetPodArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPod_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetPodArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetPodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetPodArgs(%+v)", *p)
}

func (p *AppAPIServiceGetPodArgs) DeepEqual(ano *AppAPIServiceGetPodArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetPodArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetPodResult struct {
	Success *GetPodResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error   `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetPodResult() *AppAPIServiceGetPodResult {
	return &AppAPIServiceGetPodResult{}
}

var AppAPIServiceGetPodResult_Success_DEFAULT *GetPodResponse

func (p *AppAPIServiceGetPodResult) GetSuccess() (v *GetPodResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetPodResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetPodResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetPodResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetPodResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetPodResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPodResponse)
}
func (p *AppAPIServiceGetPodResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetPodResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetPodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetPodResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetPodResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetPodResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetPodResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetPodResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetPodResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetPodResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPod_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetPodResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetPodResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetPodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetPodResult(%+v)", *p)
}

func (p *AppAPIServiceGetPodResult) DeepEqual(ano *AppAPIServiceGetPodResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetPodResult) Field0DeepEqual(src *GetPodResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetPodResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListPodsArgs struct {
	Req *ListPodsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListPodsArgs() *AppAPIServiceListPodsArgs {
	return &AppAPIServiceListPodsArgs{}
}

var AppAPIServiceListPodsArgs_Req_DEFAULT *ListPodsRequest

func (p *AppAPIServiceListPodsArgs) GetReq() (v *ListPodsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListPodsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListPodsArgs) SetReq(val *ListPodsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListPodsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListPodsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListPodsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListPodsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListPodsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListPodsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListPodsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPods_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListPodsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListPodsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListPodsArgs(%+v)", *p)
}

func (p *AppAPIServiceListPodsArgs) DeepEqual(ano *AppAPIServiceListPodsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListPodsArgs) Field1DeepEqual(src *ListPodsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListPodsResult struct {
	Success *ListPodsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error     `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListPodsResult() *AppAPIServiceListPodsResult {
	return &AppAPIServiceListPodsResult{}
}

var AppAPIServiceListPodsResult_Success_DEFAULT *ListPodsResponse

func (p *AppAPIServiceListPodsResult) GetSuccess() (v *ListPodsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListPodsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListPodsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListPodsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListPodsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListPodsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPodsResponse)
}
func (p *AppAPIServiceListPodsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListPodsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListPodsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListPodsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListPodsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListPodsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListPodsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListPodsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListPodsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListPodsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPods_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListPodsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListPodsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListPodsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListPodsResult(%+v)", *p)
}

func (p *AppAPIServiceListPodsResult) DeepEqual(ano *AppAPIServiceListPodsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListPodsResult) Field0DeepEqual(src *ListPodsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListPodsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeletePodArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeletePodArgs() *AppAPIServiceDeletePodArgs {
	return &AppAPIServiceDeletePodArgs{}
}

var AppAPIServiceDeletePodArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeletePodArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeletePodArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeletePodArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeletePodArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeletePodArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeletePodArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeletePodArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeletePodArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeletePodArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePod_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeletePodArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeletePodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeletePodArgs(%+v)", *p)
}

func (p *AppAPIServiceDeletePodArgs) DeepEqual(ano *AppAPIServiceDeletePodArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeletePodArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeletePodResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeletePodResult() *AppAPIServiceDeletePodResult {
	return &AppAPIServiceDeletePodResult{}
}

var AppAPIServiceDeletePodResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeletePodResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeletePodResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeletePodResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeletePodResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeletePodResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeletePodResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeletePodResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeletePodResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeletePodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeletePodResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeletePodResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeletePodResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeletePodResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeletePodResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeletePodResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePod_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeletePodResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeletePodResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeletePodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeletePodResult(%+v)", *p)
}

func (p *AppAPIServiceDeletePodResult) DeepEqual(ano *AppAPIServiceDeletePodResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeletePodResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeletePodResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetAPIGroupArgs struct {
	Req *GetAPIGroupRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetAPIGroupArgs() *AppAPIServiceGetAPIGroupArgs {
	return &AppAPIServiceGetAPIGroupArgs{}
}

var AppAPIServiceGetAPIGroupArgs_Req_DEFAULT *GetAPIGroupRequest

func (p *AppAPIServiceGetAPIGroupArgs) GetReq() (v *GetAPIGroupRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetAPIGroupArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetAPIGroupArgs) SetReq(val *GetAPIGroupRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetAPIGroupArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetAPIGroupArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetAPIGroupArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetAPIGroupArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetAPIGroupRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetAPIGroupArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAPIGroup_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetAPIGroupArgs(%+v)", *p)
}

func (p *AppAPIServiceGetAPIGroupArgs) DeepEqual(ano *AppAPIServiceGetAPIGroupArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetAPIGroupArgs) Field1DeepEqual(src *GetAPIGroupRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetAPIGroupResult struct {
	Success *GetAPIGroupResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error        `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetAPIGroupResult() *AppAPIServiceGetAPIGroupResult {
	return &AppAPIServiceGetAPIGroupResult{}
}

var AppAPIServiceGetAPIGroupResult_Success_DEFAULT *GetAPIGroupResponse

func (p *AppAPIServiceGetAPIGroupResult) GetSuccess() (v *GetAPIGroupResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetAPIGroupResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetAPIGroupResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetAPIGroupResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetAPIGroupResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetAPIGroupResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAPIGroupResponse)
}
func (p *AppAPIServiceGetAPIGroupResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetAPIGroupResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetAPIGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetAPIGroupResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetAPIGroupResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetAPIGroupResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetAPIGroupResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetAPIGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetAPIGroupResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAPIGroup_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetAPIGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetAPIGroupResult(%+v)", *p)
}

func (p *AppAPIServiceGetAPIGroupResult) DeepEqual(ano *AppAPIServiceGetAPIGroupResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetAPIGroupResult) Field0DeepEqual(src *GetAPIGroupResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetAPIGroupResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListAPIGroupsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListAPIGroupsArgs() *AppAPIServiceListAPIGroupsArgs {
	return &AppAPIServiceListAPIGroupsArgs{}
}

var AppAPIServiceListAPIGroupsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListAPIGroupsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListAPIGroupsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListAPIGroupsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListAPIGroupsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListAPIGroupsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListAPIGroupsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListAPIGroupsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListAPIGroupsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAPIGroups_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListAPIGroupsArgs(%+v)", *p)
}

func (p *AppAPIServiceListAPIGroupsArgs) DeepEqual(ano *AppAPIServiceListAPIGroupsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListAPIGroupsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListAPIGroupsResult struct {
	Success *ListAPIGroupsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListAPIGroupsResult() *AppAPIServiceListAPIGroupsResult {
	return &AppAPIServiceListAPIGroupsResult{}
}

var AppAPIServiceListAPIGroupsResult_Success_DEFAULT *ListAPIGroupsResponse

func (p *AppAPIServiceListAPIGroupsResult) GetSuccess() (v *ListAPIGroupsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListAPIGroupsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListAPIGroupsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListAPIGroupsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListAPIGroupsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListAPIGroupsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAPIGroupsResponse)
}
func (p *AppAPIServiceListAPIGroupsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListAPIGroupsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListAPIGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListAPIGroupsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListAPIGroupsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListAPIGroupsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListAPIGroupsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListAPIGroupsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListAPIGroupsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAPIGroups_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListAPIGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListAPIGroupsResult(%+v)", *p)
}

func (p *AppAPIServiceListAPIGroupsResult) DeepEqual(ano *AppAPIServiceListAPIGroupsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListAPIGroupsResult) Field0DeepEqual(src *ListAPIGroupsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListAPIGroupsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListCRDsArgs struct {
	Req *ListRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListCRDsArgs() *AppAPIServiceListCRDsArgs {
	return &AppAPIServiceListCRDsArgs{}
}

var AppAPIServiceListCRDsArgs_Req_DEFAULT *ListRequest

func (p *AppAPIServiceListCRDsArgs) GetReq() (v *ListRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListCRDsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListCRDsArgs) SetReq(val *ListRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListCRDsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListCRDsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListCRDsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListCRDsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListCRDsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCRDsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCRDs_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListCRDsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListCRDsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListCRDsArgs(%+v)", *p)
}

func (p *AppAPIServiceListCRDsArgs) DeepEqual(ano *AppAPIServiceListCRDsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListCRDsArgs) Field1DeepEqual(src *ListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListCRDsResult struct {
	Success *ListCRDsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error     `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListCRDsResult() *AppAPIServiceListCRDsResult {
	return &AppAPIServiceListCRDsResult{}
}

var AppAPIServiceListCRDsResult_Success_DEFAULT *ListCRDsResponse

func (p *AppAPIServiceListCRDsResult) GetSuccess() (v *ListCRDsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListCRDsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListCRDsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListCRDsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListCRDsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListCRDsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListCRDsResponse)
}
func (p *AppAPIServiceListCRDsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListCRDsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListCRDsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListCRDsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListCRDsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListCRDsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListCRDsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListCRDsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCRDsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCRDsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCRDs_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListCRDsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListCRDsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListCRDsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListCRDsResult(%+v)", *p)
}

func (p *AppAPIServiceListCRDsResult) DeepEqual(ano *AppAPIServiceListCRDsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListCRDsResult) Field0DeepEqual(src *ListCRDsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListCRDsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteCRDArgs struct {
	Req *DeleteCRDRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteCRDArgs() *AppAPIServiceDeleteCRDArgs {
	return &AppAPIServiceDeleteCRDArgs{}
}

var AppAPIServiceDeleteCRDArgs_Req_DEFAULT *DeleteCRDRequest

func (p *AppAPIServiceDeleteCRDArgs) GetReq() (v *DeleteCRDRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteCRDArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteCRDArgs) SetReq(val *DeleteCRDRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteCRDArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteCRDArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteCRDArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteCRDArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteCRDRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCRDArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCRD_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteCRDArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteCRDArgs) DeepEqual(ano *AppAPIServiceDeleteCRDArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteCRDArgs) Field1DeepEqual(src *DeleteCRDRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteCRDResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteCRDResult() *AppAPIServiceDeleteCRDResult {
	return &AppAPIServiceDeleteCRDResult{}
}

var AppAPIServiceDeleteCRDResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteCRDResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteCRDResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteCRDResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteCRDResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteCRDResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteCRDResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteCRDResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteCRDResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteCRDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteCRDResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteCRDResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteCRDResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCRDResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCRDResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCRD_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCRDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteCRDResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteCRDResult) DeepEqual(ano *AppAPIServiceDeleteCRDResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteCRDResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteCRDResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetResourceArgs struct {
	Req *GetResourceRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetResourceArgs() *AppAPIServiceGetResourceArgs {
	return &AppAPIServiceGetResourceArgs{}
}

var AppAPIServiceGetResourceArgs_Req_DEFAULT *GetResourceRequest

func (p *AppAPIServiceGetResourceArgs) GetReq() (v *GetResourceRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetResourceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetResourceArgs) SetReq(val *GetResourceRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetResourceArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetResourceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetResourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetResourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetResourceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetResourceArgs(%+v)", *p)
}

func (p *AppAPIServiceGetResourceArgs) DeepEqual(ano *AppAPIServiceGetResourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetResourceArgs) Field1DeepEqual(src *GetResourceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetResourceResult struct {
	Success *ResourceItem `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetResourceResult() *AppAPIServiceGetResourceResult {
	return &AppAPIServiceGetResourceResult{}
}

var AppAPIServiceGetResourceResult_Success_DEFAULT *ResourceItem

func (p *AppAPIServiceGetResourceResult) GetSuccess() (v *ResourceItem) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetResourceResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetResourceResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetResourceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetResourceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetResourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*ResourceItem)
}
func (p *AppAPIServiceGetResourceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetResourceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetResourceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetResourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewResourceItem()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetResourceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetResourceResult(%+v)", *p)
}

func (p *AppAPIServiceGetResourceResult) DeepEqual(ano *AppAPIServiceGetResourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetResourceResult) Field0DeepEqual(src *ResourceItem) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetResourceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListResourcesArgs struct {
	Req *ListResourcesRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListResourcesArgs() *AppAPIServiceListResourcesArgs {
	return &AppAPIServiceListResourcesArgs{}
}

var AppAPIServiceListResourcesArgs_Req_DEFAULT *ListResourcesRequest

func (p *AppAPIServiceListResourcesArgs) GetReq() (v *ListResourcesRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListResourcesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListResourcesArgs) SetReq(val *ListResourcesRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListResourcesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListResourcesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListResourcesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListResourcesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListResourcesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListResourcesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListResourcesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListResources_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListResourcesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListResourcesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListResourcesArgs(%+v)", *p)
}

func (p *AppAPIServiceListResourcesArgs) DeepEqual(ano *AppAPIServiceListResourcesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListResourcesArgs) Field1DeepEqual(src *ListResourcesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListResourcesResult struct {
	Success *ListResourcesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListResourcesResult() *AppAPIServiceListResourcesResult {
	return &AppAPIServiceListResourcesResult{}
}

var AppAPIServiceListResourcesResult_Success_DEFAULT *ListResourcesResponse

func (p *AppAPIServiceListResourcesResult) GetSuccess() (v *ListResourcesResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListResourcesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListResourcesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListResourcesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListResourcesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListResourcesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListResourcesResponse)
}
func (p *AppAPIServiceListResourcesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListResourcesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListResourcesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListResourcesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListResourcesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListResourcesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListResourcesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListResourcesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListResourcesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListResourcesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListResources_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListResourcesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListResourcesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListResourcesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListResourcesResult(%+v)", *p)
}

func (p *AppAPIServiceListResourcesResult) DeepEqual(ano *AppAPIServiceListResourcesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListResourcesResult) Field0DeepEqual(src *ListResourcesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListResourcesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteResourceArgs struct {
	Req *GetResourceRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteResourceArgs() *AppAPIServiceDeleteResourceArgs {
	return &AppAPIServiceDeleteResourceArgs{}
}

var AppAPIServiceDeleteResourceArgs_Req_DEFAULT *GetResourceRequest

func (p *AppAPIServiceDeleteResourceArgs) GetReq() (v *GetResourceRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteResourceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteResourceArgs) SetReq(val *GetResourceRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteResourceArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteResourceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteResourceArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteResourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetResourceRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteResourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteResourceArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteResourceArgs) DeepEqual(ano *AppAPIServiceDeleteResourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteResourceArgs) Field1DeepEqual(src *GetResourceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteResourceResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteResourceResult() *AppAPIServiceDeleteResourceResult {
	return &AppAPIServiceDeleteResourceResult{}
}

var AppAPIServiceDeleteResourceResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteResourceResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteResourceResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteResourceResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteResourceResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteResourceResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteResourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteResourceResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteResourceResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteResourceResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteResourceResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteResourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteResourceResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteResourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteResourceResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteResourceResult) DeepEqual(ano *AppAPIServiceDeleteResourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteResourceResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteResourceResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListChartsArgs struct {
	Req *ListChartsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListChartsArgs() *AppAPIServiceListChartsArgs {
	return &AppAPIServiceListChartsArgs{}
}

var AppAPIServiceListChartsArgs_Req_DEFAULT *ListChartsRequest

func (p *AppAPIServiceListChartsArgs) GetReq() (v *ListChartsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListChartsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListChartsArgs) SetReq(val *ListChartsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListChartsArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListChartsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListChartsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListChartsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListChartsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListChartsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListChartsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCharts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListChartsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListChartsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListChartsArgs(%+v)", *p)
}

func (p *AppAPIServiceListChartsArgs) DeepEqual(ano *AppAPIServiceListChartsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListChartsArgs) Field1DeepEqual(src *ListChartsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListChartsResult struct {
	Success *ListChartsResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListChartsResult() *AppAPIServiceListChartsResult {
	return &AppAPIServiceListChartsResult{}
}

var AppAPIServiceListChartsResult_Success_DEFAULT *ListChartsResponse

func (p *AppAPIServiceListChartsResult) GetSuccess() (v *ListChartsResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListChartsResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListChartsResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListChartsResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListChartsResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListChartsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListChartsResponse)
}
func (p *AppAPIServiceListChartsResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListChartsResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListChartsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListChartsResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListChartsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListChartsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListChartsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListChartsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListChartsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListChartsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCharts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListChartsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListChartsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListChartsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListChartsResult(%+v)", *p)
}

func (p *AppAPIServiceListChartsResult) DeepEqual(ano *AppAPIServiceListChartsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListChartsResult) Field0DeepEqual(src *ListChartsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListChartsResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListChartCategoriesArgs struct {
	Req *ListChartCategoriesRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListChartCategoriesArgs() *AppAPIServiceListChartCategoriesArgs {
	return &AppAPIServiceListChartCategoriesArgs{}
}

var AppAPIServiceListChartCategoriesArgs_Req_DEFAULT *ListChartCategoriesRequest

func (p *AppAPIServiceListChartCategoriesArgs) GetReq() (v *ListChartCategoriesRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListChartCategoriesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListChartCategoriesArgs) SetReq(val *ListChartCategoriesRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListChartCategoriesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListChartCategoriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListChartCategoriesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListChartCategoriesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListChartCategoriesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListChartCategoriesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListChartCategories_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListChartCategoriesArgs(%+v)", *p)
}

func (p *AppAPIServiceListChartCategoriesArgs) DeepEqual(ano *AppAPIServiceListChartCategoriesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListChartCategoriesArgs) Field1DeepEqual(src *ListChartCategoriesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListChartCategoriesResult struct {
	Success *ListChartCategoriesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListChartCategoriesResult() *AppAPIServiceListChartCategoriesResult {
	return &AppAPIServiceListChartCategoriesResult{}
}

var AppAPIServiceListChartCategoriesResult_Success_DEFAULT *ListChartCategoriesResponse

func (p *AppAPIServiceListChartCategoriesResult) GetSuccess() (v *ListChartCategoriesResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListChartCategoriesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListChartCategoriesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListChartCategoriesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListChartCategoriesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListChartCategoriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListChartCategoriesResponse)
}
func (p *AppAPIServiceListChartCategoriesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListChartCategoriesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListChartCategoriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListChartCategoriesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListChartCategoriesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListChartCategoriesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListChartCategoriesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListChartCategoriesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListChartCategoriesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListChartCategories_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListChartCategoriesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListChartCategoriesResult(%+v)", *p)
}

func (p *AppAPIServiceListChartCategoriesResult) DeepEqual(ano *AppAPIServiceListChartCategoriesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListChartCategoriesResult) Field0DeepEqual(src *ListChartCategoriesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListChartCategoriesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetChartArgs struct {
	Req *GetChartRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetChartArgs() *AppAPIServiceGetChartArgs {
	return &AppAPIServiceGetChartArgs{}
}

var AppAPIServiceGetChartArgs_Req_DEFAULT *GetChartRequest

func (p *AppAPIServiceGetChartArgs) GetReq() (v *GetChartRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetChartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetChartArgs) SetReq(val *GetChartRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetChartArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetChartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetChartArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetChartArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetChartArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetChartRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetChartArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChart_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetChartArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetChartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetChartArgs(%+v)", *p)
}

func (p *AppAPIServiceGetChartArgs) DeepEqual(ano *AppAPIServiceGetChartArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetChartArgs) Field1DeepEqual(src *GetChartRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetChartResult struct {
	Success *GetChartResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error     `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetChartResult() *AppAPIServiceGetChartResult {
	return &AppAPIServiceGetChartResult{}
}

var AppAPIServiceGetChartResult_Success_DEFAULT *GetChartResponse

func (p *AppAPIServiceGetChartResult) GetSuccess() (v *GetChartResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetChartResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetChartResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetChartResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetChartResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetChartResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetChartResponse)
}
func (p *AppAPIServiceGetChartResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetChartResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetChartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetChartResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetChartResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetChartResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetChartResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetChartResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetChartResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetChartResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChart_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetChartResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetChartResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetChartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetChartResult(%+v)", *p)
}

func (p *AppAPIServiceGetChartResult) DeepEqual(ano *AppAPIServiceGetChartResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetChartResult) Field0DeepEqual(src *GetChartResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetChartResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListReleasesArgs struct {
	Req *ListReleasesRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListReleasesArgs() *AppAPIServiceListReleasesArgs {
	return &AppAPIServiceListReleasesArgs{}
}

var AppAPIServiceListReleasesArgs_Req_DEFAULT *ListReleasesRequest

func (p *AppAPIServiceListReleasesArgs) GetReq() (v *ListReleasesRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListReleasesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListReleasesArgs) SetReq(val *ListReleasesRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListReleasesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListReleasesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListReleasesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListReleasesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListReleasesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListReleasesRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListReleasesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListReleases_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListReleasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListReleasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListReleasesArgs(%+v)", *p)
}

func (p *AppAPIServiceListReleasesArgs) DeepEqual(ano *AppAPIServiceListReleasesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListReleasesArgs) Field1DeepEqual(src *ListReleasesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListReleasesResult struct {
	Success *ListReleasesResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error         `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListReleasesResult() *AppAPIServiceListReleasesResult {
	return &AppAPIServiceListReleasesResult{}
}

var AppAPIServiceListReleasesResult_Success_DEFAULT *ListReleasesResponse

func (p *AppAPIServiceListReleasesResult) GetSuccess() (v *ListReleasesResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListReleasesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListReleasesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListReleasesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListReleasesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListReleasesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListReleasesResponse)
}
func (p *AppAPIServiceListReleasesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListReleasesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListReleasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListReleasesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListReleasesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListReleasesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListReleasesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListReleasesResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListReleasesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListReleasesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListReleases_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListReleasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListReleasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListReleasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListReleasesResult(%+v)", *p)
}

func (p *AppAPIServiceListReleasesResult) DeepEqual(ano *AppAPIServiceListReleasesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListReleasesResult) Field0DeepEqual(src *ListReleasesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListReleasesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetReleaseArgs struct {
	Req *GetReleaseRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetReleaseArgs() *AppAPIServiceGetReleaseArgs {
	return &AppAPIServiceGetReleaseArgs{}
}

var AppAPIServiceGetReleaseArgs_Req_DEFAULT *GetReleaseRequest

func (p *AppAPIServiceGetReleaseArgs) GetReq() (v *GetReleaseRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceGetReleaseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetReleaseArgs) SetReq(val *GetReleaseRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetReleaseArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetReleaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetReleaseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetReleaseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetReleaseRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetReleaseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRelease_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetReleaseArgs(%+v)", *p)
}

func (p *AppAPIServiceGetReleaseArgs) DeepEqual(ano *AppAPIServiceGetReleaseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetReleaseArgs) Field1DeepEqual(src *GetReleaseRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetReleaseResult struct {
	Success *GetReleaseResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error       `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetReleaseResult() *AppAPIServiceGetReleaseResult {
	return &AppAPIServiceGetReleaseResult{}
}

var AppAPIServiceGetReleaseResult_Success_DEFAULT *GetReleaseResponse

func (p *AppAPIServiceGetReleaseResult) GetSuccess() (v *GetReleaseResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetReleaseResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetReleaseResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetReleaseResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetReleaseResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetReleaseResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetReleaseResponse)
}
func (p *AppAPIServiceGetReleaseResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetReleaseResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetReleaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetReleaseResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetReleaseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetReleaseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetReleaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetReleaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetReleaseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetRelease_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetReleaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetReleaseResult(%+v)", *p)
}

func (p *AppAPIServiceGetReleaseResult) DeepEqual(ano *AppAPIServiceGetReleaseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetReleaseResult) Field0DeepEqual(src *GetReleaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetReleaseResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateReleaseArgs struct {
	Req *CreateReleaseRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateReleaseArgs() *AppAPIServiceCreateReleaseArgs {
	return &AppAPIServiceCreateReleaseArgs{}
}

var AppAPIServiceCreateReleaseArgs_Req_DEFAULT *CreateReleaseRequest

func (p *AppAPIServiceCreateReleaseArgs) GetReq() (v *CreateReleaseRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateReleaseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateReleaseArgs) SetReq(val *CreateReleaseRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateReleaseArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateReleaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateReleaseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateReleaseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateReleaseRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateReleaseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRelease_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateReleaseArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateReleaseArgs) DeepEqual(ano *AppAPIServiceCreateReleaseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateReleaseArgs) Field1DeepEqual(src *CreateReleaseRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateReleaseResult struct {
	Success *CreateReleaseResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateReleaseResult() *AppAPIServiceCreateReleaseResult {
	return &AppAPIServiceCreateReleaseResult{}
}

var AppAPIServiceCreateReleaseResult_Success_DEFAULT *CreateReleaseResponse

func (p *AppAPIServiceCreateReleaseResult) GetSuccess() (v *CreateReleaseResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateReleaseResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateReleaseResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateReleaseResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateReleaseResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateReleaseResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateReleaseResponse)
}
func (p *AppAPIServiceCreateReleaseResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateReleaseResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateReleaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateReleaseResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateReleaseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateReleaseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateReleaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateReleaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateReleaseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateRelease_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateReleaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateReleaseResult(%+v)", *p)
}

func (p *AppAPIServiceCreateReleaseResult) DeepEqual(ano *AppAPIServiceCreateReleaseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateReleaseResult) Field0DeepEqual(src *CreateReleaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateReleaseResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateReleaseArgs struct {
	Req *CreateReleaseRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateReleaseArgs() *AppAPIServiceUpdateReleaseArgs {
	return &AppAPIServiceUpdateReleaseArgs{}
}

var AppAPIServiceUpdateReleaseArgs_Req_DEFAULT *CreateReleaseRequest

func (p *AppAPIServiceUpdateReleaseArgs) GetReq() (v *CreateReleaseRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateReleaseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateReleaseArgs) SetReq(val *CreateReleaseRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateReleaseArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateReleaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateReleaseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateReleaseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateReleaseRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateReleaseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRelease_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateReleaseArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateReleaseArgs) DeepEqual(ano *AppAPIServiceUpdateReleaseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateReleaseArgs) Field1DeepEqual(src *CreateReleaseRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateReleaseResult struct {
	Success *CreateReleaseResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateReleaseResult() *AppAPIServiceUpdateReleaseResult {
	return &AppAPIServiceUpdateReleaseResult{}
}

var AppAPIServiceUpdateReleaseResult_Success_DEFAULT *CreateReleaseResponse

func (p *AppAPIServiceUpdateReleaseResult) GetSuccess() (v *CreateReleaseResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateReleaseResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateReleaseResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateReleaseResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateReleaseResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateReleaseResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateReleaseResponse)
}
func (p *AppAPIServiceUpdateReleaseResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateReleaseResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateReleaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateReleaseResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateReleaseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateReleaseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateReleaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateReleaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateReleaseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateRelease_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateReleaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateReleaseResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateReleaseResult) DeepEqual(ano *AppAPIServiceUpdateReleaseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateReleaseResult) Field0DeepEqual(src *CreateReleaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateReleaseResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceRollbackReleaseArgs struct {
	Req *RollbackReleaseRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceRollbackReleaseArgs() *AppAPIServiceRollbackReleaseArgs {
	return &AppAPIServiceRollbackReleaseArgs{}
}

var AppAPIServiceRollbackReleaseArgs_Req_DEFAULT *RollbackReleaseRequest

func (p *AppAPIServiceRollbackReleaseArgs) GetReq() (v *RollbackReleaseRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceRollbackReleaseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceRollbackReleaseArgs) SetReq(val *RollbackReleaseRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceRollbackReleaseArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceRollbackReleaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceRollbackReleaseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceRollbackReleaseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRollbackReleaseRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRollbackReleaseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RollbackRelease_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceRollbackReleaseArgs(%+v)", *p)
}

func (p *AppAPIServiceRollbackReleaseArgs) DeepEqual(ano *AppAPIServiceRollbackReleaseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceRollbackReleaseArgs) Field1DeepEqual(src *RollbackReleaseRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceRollbackReleaseResult struct {
	Success *CreateReleaseResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error          `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceRollbackReleaseResult() *AppAPIServiceRollbackReleaseResult {
	return &AppAPIServiceRollbackReleaseResult{}
}

var AppAPIServiceRollbackReleaseResult_Success_DEFAULT *CreateReleaseResponse

func (p *AppAPIServiceRollbackReleaseResult) GetSuccess() (v *CreateReleaseResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceRollbackReleaseResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceRollbackReleaseResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceRollbackReleaseResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceRollbackReleaseResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceRollbackReleaseResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateReleaseResponse)
}
func (p *AppAPIServiceRollbackReleaseResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceRollbackReleaseResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceRollbackReleaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceRollbackReleaseResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceRollbackReleaseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceRollbackReleaseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateReleaseResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRollbackReleaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceRollbackReleaseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RollbackRelease_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceRollbackReleaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceRollbackReleaseResult(%+v)", *p)
}

func (p *AppAPIServiceRollbackReleaseResult) DeepEqual(ano *AppAPIServiceRollbackReleaseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceRollbackReleaseResult) Field0DeepEqual(src *CreateReleaseResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceRollbackReleaseResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteReleaseArgs struct {
	Req *DeleteReleaseRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteReleaseArgs() *AppAPIServiceDeleteReleaseArgs {
	return &AppAPIServiceDeleteReleaseArgs{}
}

var AppAPIServiceDeleteReleaseArgs_Req_DEFAULT *DeleteReleaseRequest

func (p *AppAPIServiceDeleteReleaseArgs) GetReq() (v *DeleteReleaseRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteReleaseArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteReleaseArgs) SetReq(val *DeleteReleaseRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteReleaseArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteReleaseArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteReleaseArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteReleaseArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteReleaseRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteReleaseArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRelease_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteReleaseArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteReleaseArgs) DeepEqual(ano *AppAPIServiceDeleteReleaseArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteReleaseArgs) Field1DeepEqual(src *DeleteReleaseRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteReleaseResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteReleaseResult() *AppAPIServiceDeleteReleaseResult {
	return &AppAPIServiceDeleteReleaseResult{}
}

var AppAPIServiceDeleteReleaseResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteReleaseResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteReleaseResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteReleaseResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteReleaseResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteReleaseResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteReleaseResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteReleaseResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteReleaseResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteReleaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteReleaseResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteReleaseResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteReleaseResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteReleaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteReleaseResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteRelease_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteReleaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteReleaseResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteReleaseResult) DeepEqual(ano *AppAPIServiceDeleteReleaseResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteReleaseResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteReleaseResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListCronHorizontalPodAutoscalersArgs struct {
	Req *ListWorkloadObjectsRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListCronHorizontalPodAutoscalersArgs() *AppAPIServiceListCronHorizontalPodAutoscalersArgs {
	return &AppAPIServiceListCronHorizontalPodAutoscalersArgs{}
}

var AppAPIServiceListCronHorizontalPodAutoscalersArgs_Req_DEFAULT *ListWorkloadObjectsRequest

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) GetReq() (v *ListWorkloadObjectsRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceListCronHorizontalPodAutoscalersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) SetReq(val *ListWorkloadObjectsRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListCronHorizontalPodAutoscalersArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListCronHorizontalPodAutoscalersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListWorkloadObjectsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCronHorizontalPodAutoscalers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListCronHorizontalPodAutoscalersArgs(%+v)", *p)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) DeepEqual(ano *AppAPIServiceListCronHorizontalPodAutoscalersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersArgs) Field1DeepEqual(src *ListWorkloadObjectsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListCronHorizontalPodAutoscalersResult struct {
	Success *ListCronHorizontalPodAutoscalersResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                             `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListCronHorizontalPodAutoscalersResult() *AppAPIServiceListCronHorizontalPodAutoscalersResult {
	return &AppAPIServiceListCronHorizontalPodAutoscalersResult{}
}

var AppAPIServiceListCronHorizontalPodAutoscalersResult_Success_DEFAULT *ListCronHorizontalPodAutoscalersResponse

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) GetSuccess() (v *ListCronHorizontalPodAutoscalersResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListCronHorizontalPodAutoscalersResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListCronHorizontalPodAutoscalersResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListCronHorizontalPodAutoscalersResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListCronHorizontalPodAutoscalersResponse)
}
func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListCronHorizontalPodAutoscalersResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListCronHorizontalPodAutoscalersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListCronHorizontalPodAutoscalersResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCronHorizontalPodAutoscalers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListCronHorizontalPodAutoscalersResult(%+v)", *p)
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) DeepEqual(ano *AppAPIServiceListCronHorizontalPodAutoscalersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) Field0DeepEqual(src *ListCronHorizontalPodAutoscalersResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListCronHorizontalPodAutoscalersResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateCronHorizontalPodAutoscalerArgs struct {
	Req *CreateCronHorizontalPodAutoscalerRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateCronHorizontalPodAutoscalerArgs() *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs {
	return &AppAPIServiceCreateCronHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceCreateCronHorizontalPodAutoscalerArgs_Req_DEFAULT *CreateCronHorizontalPodAutoscalerRequest

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) GetReq() (v *CreateCronHorizontalPodAutoscalerRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateCronHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) SetReq(val *CreateCronHorizontalPodAutoscalerRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateCronHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateCronHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCronHorizontalPodAutoscalerRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCronHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateCronHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerArgs) Field1DeepEqual(src *CreateCronHorizontalPodAutoscalerRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateCronHorizontalPodAutoscalerResult struct {
	Success *GetCronHorizontalPodAutoscalerResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateCronHorizontalPodAutoscalerResult() *AppAPIServiceCreateCronHorizontalPodAutoscalerResult {
	return &AppAPIServiceCreateCronHorizontalPodAutoscalerResult{}
}

var AppAPIServiceCreateCronHorizontalPodAutoscalerResult_Success_DEFAULT *GetCronHorizontalPodAutoscalerResponse

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) GetSuccess() (v *GetCronHorizontalPodAutoscalerResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateCronHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateCronHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateCronHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCronHorizontalPodAutoscalerResponse)
}
func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateCronHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateCronHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCronHorizontalPodAutoscalerResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCronHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateCronHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) Field0DeepEqual(src *GetCronHorizontalPodAutoscalerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateCronHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs struct {
	Req *CreateCronHorizontalPodAutoscalerRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateCronHorizontalPodAutoscalerArgs() *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs {
	return &AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs_Req_DEFAULT *CreateCronHorizontalPodAutoscalerRequest

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) GetReq() (v *CreateCronHorizontalPodAutoscalerRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) SetReq(val *CreateCronHorizontalPodAutoscalerRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCronHorizontalPodAutoscalerRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCronHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerArgs) Field1DeepEqual(src *CreateCronHorizontalPodAutoscalerRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateCronHorizontalPodAutoscalerResult struct {
	Success *GetCronHorizontalPodAutoscalerResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                           `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateCronHorizontalPodAutoscalerResult() *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult {
	return &AppAPIServiceUpdateCronHorizontalPodAutoscalerResult{}
}

var AppAPIServiceUpdateCronHorizontalPodAutoscalerResult_Success_DEFAULT *GetCronHorizontalPodAutoscalerResponse

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) GetSuccess() (v *GetCronHorizontalPodAutoscalerResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateCronHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateCronHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateCronHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCronHorizontalPodAutoscalerResponse)
}
func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateCronHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateCronHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCronHorizontalPodAutoscalerResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateCronHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateCronHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) Field0DeepEqual(src *GetCronHorizontalPodAutoscalerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateCronHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs struct {
	Req *GetRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteCronHorizontalPodAutoscalerArgs() *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs {
	return &AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs{}
}

var AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs_Req_DEFAULT *GetRequest

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) GetReq() (v *GetRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) SetReq(val *GetRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCronHorizontalPodAutoscaler_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) DeepEqual(ano *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerArgs) Field1DeepEqual(src *GetRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteCronHorizontalPodAutoscalerResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteCronHorizontalPodAutoscalerResult() *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult {
	return &AppAPIServiceDeleteCronHorizontalPodAutoscalerResult{}
}

var AppAPIServiceDeleteCronHorizontalPodAutoscalerResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteCronHorizontalPodAutoscalerResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteCronHorizontalPodAutoscalerResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteCronHorizontalPodAutoscalerResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteCronHorizontalPodAutoscalerResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteCronHorizontalPodAutoscalerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCronHorizontalPodAutoscaler_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteCronHorizontalPodAutoscalerResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) DeepEqual(ano *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteCronHorizontalPodAutoscalerResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListLogCollectRulesArgs struct {
	Req *ListLogCollectRulesReq `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceListLogCollectRulesArgs() *AppAPIServiceListLogCollectRulesArgs {
	return &AppAPIServiceListLogCollectRulesArgs{}
}

var AppAPIServiceListLogCollectRulesArgs_Req_DEFAULT *ListLogCollectRulesReq

func (p *AppAPIServiceListLogCollectRulesArgs) GetReq() (v *ListLogCollectRulesReq) {
	if !p.IsSetReq() {
		return AppAPIServiceListLogCollectRulesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceListLogCollectRulesArgs) SetReq(val *ListLogCollectRulesReq) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceListLogCollectRulesArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceListLogCollectRulesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceListLogCollectRulesArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListLogCollectRulesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewListLogCollectRulesReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListLogCollectRulesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListLogCollectRules_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListLogCollectRulesArgs(%+v)", *p)
}

func (p *AppAPIServiceListLogCollectRulesArgs) DeepEqual(ano *AppAPIServiceListLogCollectRulesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceListLogCollectRulesArgs) Field1DeepEqual(src *ListLogCollectRulesReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceListLogCollectRulesResult struct {
	Success *ListLogCollectRulesResp `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error            `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceListLogCollectRulesResult() *AppAPIServiceListLogCollectRulesResult {
	return &AppAPIServiceListLogCollectRulesResult{}
}

var AppAPIServiceListLogCollectRulesResult_Success_DEFAULT *ListLogCollectRulesResp

func (p *AppAPIServiceListLogCollectRulesResult) GetSuccess() (v *ListLogCollectRulesResp) {
	if !p.IsSetSuccess() {
		return AppAPIServiceListLogCollectRulesResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceListLogCollectRulesResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceListLogCollectRulesResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceListLogCollectRulesResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceListLogCollectRulesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListLogCollectRulesResp)
}
func (p *AppAPIServiceListLogCollectRulesResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceListLogCollectRulesResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceListLogCollectRulesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceListLogCollectRulesResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceListLogCollectRulesResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceListLogCollectRulesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewListLogCollectRulesResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListLogCollectRulesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceListLogCollectRulesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListLogCollectRules_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceListLogCollectRulesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceListLogCollectRulesResult(%+v)", *p)
}

func (p *AppAPIServiceListLogCollectRulesResult) DeepEqual(ano *AppAPIServiceListLogCollectRulesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceListLogCollectRulesResult) Field0DeepEqual(src *ListLogCollectRulesResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceListLogCollectRulesResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateLogCollectRuleArgs struct {
	Req *CreateLogCollectRuleReq `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceCreateLogCollectRuleArgs() *AppAPIServiceCreateLogCollectRuleArgs {
	return &AppAPIServiceCreateLogCollectRuleArgs{}
}

var AppAPIServiceCreateLogCollectRuleArgs_Req_DEFAULT *CreateLogCollectRuleReq

func (p *AppAPIServiceCreateLogCollectRuleArgs) GetReq() (v *CreateLogCollectRuleReq) {
	if !p.IsSetReq() {
		return AppAPIServiceCreateLogCollectRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceCreateLogCollectRuleArgs) SetReq(val *CreateLogCollectRuleReq) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceCreateLogCollectRuleArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateLogCollectRuleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateLogCollectRuleReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLogCollectRule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateLogCollectRuleArgs(%+v)", *p)
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) DeepEqual(ano *AppAPIServiceCreateLogCollectRuleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateLogCollectRuleArgs) Field1DeepEqual(src *CreateLogCollectRuleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceCreateLogCollectRuleResult struct {
	Success *CreateLogCollectRuleResp `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error             `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceCreateLogCollectRuleResult() *AppAPIServiceCreateLogCollectRuleResult {
	return &AppAPIServiceCreateLogCollectRuleResult{}
}

var AppAPIServiceCreateLogCollectRuleResult_Success_DEFAULT *CreateLogCollectRuleResp

func (p *AppAPIServiceCreateLogCollectRuleResult) GetSuccess() (v *CreateLogCollectRuleResp) {
	if !p.IsSetSuccess() {
		return AppAPIServiceCreateLogCollectRuleResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceCreateLogCollectRuleResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceCreateLogCollectRuleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceCreateLogCollectRuleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceCreateLogCollectRuleResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateLogCollectRuleResp)
}
func (p *AppAPIServiceCreateLogCollectRuleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceCreateLogCollectRuleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceCreateLogCollectRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceCreateLogCollectRuleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceCreateLogCollectRuleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceCreateLogCollectRuleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateLogCollectRuleResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateLogCollectRuleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceCreateLogCollectRuleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLogCollectRule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceCreateLogCollectRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceCreateLogCollectRuleResult(%+v)", *p)
}

func (p *AppAPIServiceCreateLogCollectRuleResult) DeepEqual(ano *AppAPIServiceCreateLogCollectRuleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceCreateLogCollectRuleResult) Field0DeepEqual(src *CreateLogCollectRuleResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceCreateLogCollectRuleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateLogCollectRuleArgs struct {
	Req *UpdateLogCollectRuleReq `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceUpdateLogCollectRuleArgs() *AppAPIServiceUpdateLogCollectRuleArgs {
	return &AppAPIServiceUpdateLogCollectRuleArgs{}
}

var AppAPIServiceUpdateLogCollectRuleArgs_Req_DEFAULT *UpdateLogCollectRuleReq

func (p *AppAPIServiceUpdateLogCollectRuleArgs) GetReq() (v *UpdateLogCollectRuleReq) {
	if !p.IsSetReq() {
		return AppAPIServiceUpdateLogCollectRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceUpdateLogCollectRuleArgs) SetReq(val *UpdateLogCollectRuleReq) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceUpdateLogCollectRuleArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateLogCollectRuleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateLogCollectRuleReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLogCollectRule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateLogCollectRuleArgs(%+v)", *p)
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) DeepEqual(ano *AppAPIServiceUpdateLogCollectRuleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateLogCollectRuleArgs) Field1DeepEqual(src *UpdateLogCollectRuleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceUpdateLogCollectRuleResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceUpdateLogCollectRuleResult() *AppAPIServiceUpdateLogCollectRuleResult {
	return &AppAPIServiceUpdateLogCollectRuleResult{}
}

var AppAPIServiceUpdateLogCollectRuleResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceUpdateLogCollectRuleResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceUpdateLogCollectRuleResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceUpdateLogCollectRuleResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceUpdateLogCollectRuleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceUpdateLogCollectRuleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceUpdateLogCollectRuleResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceUpdateLogCollectRuleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceUpdateLogCollectRuleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceUpdateLogCollectRuleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateLogCollectRule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceUpdateLogCollectRuleResult(%+v)", *p)
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) DeepEqual(ano *AppAPIServiceUpdateLogCollectRuleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceUpdateLogCollectRuleResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceUpdateLogCollectRuleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteLogCollectRuleArgs struct {
	Req *DeleteLogCollectRuleReq `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceDeleteLogCollectRuleArgs() *AppAPIServiceDeleteLogCollectRuleArgs {
	return &AppAPIServiceDeleteLogCollectRuleArgs{}
}

var AppAPIServiceDeleteLogCollectRuleArgs_Req_DEFAULT *DeleteLogCollectRuleReq

func (p *AppAPIServiceDeleteLogCollectRuleArgs) GetReq() (v *DeleteLogCollectRuleReq) {
	if !p.IsSetReq() {
		return AppAPIServiceDeleteLogCollectRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceDeleteLogCollectRuleArgs) SetReq(val *DeleteLogCollectRuleReq) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceDeleteLogCollectRuleArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteLogCollectRuleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteLogCollectRuleReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLogCollectRule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteLogCollectRuleArgs(%+v)", *p)
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) DeepEqual(ano *AppAPIServiceDeleteLogCollectRuleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteLogCollectRuleArgs) Field1DeepEqual(src *DeleteLogCollectRuleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceDeleteLogCollectRuleResult struct {
	Success *EmptyResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error  `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceDeleteLogCollectRuleResult() *AppAPIServiceDeleteLogCollectRuleResult {
	return &AppAPIServiceDeleteLogCollectRuleResult{}
}

var AppAPIServiceDeleteLogCollectRuleResult_Success_DEFAULT *EmptyResponse

func (p *AppAPIServiceDeleteLogCollectRuleResult) GetSuccess() (v *EmptyResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceDeleteLogCollectRuleResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceDeleteLogCollectRuleResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceDeleteLogCollectRuleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceDeleteLogCollectRuleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceDeleteLogCollectRuleResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}
func (p *AppAPIServiceDeleteLogCollectRuleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceDeleteLogCollectRuleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceDeleteLogCollectRuleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEmptyResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteLogCollectRule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceDeleteLogCollectRuleResult(%+v)", *p)
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) DeepEqual(ano *AppAPIServiceDeleteLogCollectRuleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceDeleteLogCollectRuleResult) Field0DeepEqual(src *EmptyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceDeleteLogCollectRuleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetLogCollectRuleArgs struct {
	Req *GetLogCollectRuleReq `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceGetLogCollectRuleArgs() *AppAPIServiceGetLogCollectRuleArgs {
	return &AppAPIServiceGetLogCollectRuleArgs{}
}

var AppAPIServiceGetLogCollectRuleArgs_Req_DEFAULT *GetLogCollectRuleReq

func (p *AppAPIServiceGetLogCollectRuleArgs) GetReq() (v *GetLogCollectRuleReq) {
	if !p.IsSetReq() {
		return AppAPIServiceGetLogCollectRuleArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceGetLogCollectRuleArgs) SetReq(val *GetLogCollectRuleReq) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceGetLogCollectRuleArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceGetLogCollectRuleArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceGetLogCollectRuleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetLogCollectRuleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetLogCollectRuleReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetLogCollectRuleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLogCollectRule_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetLogCollectRuleArgs(%+v)", *p)
}

func (p *AppAPIServiceGetLogCollectRuleArgs) DeepEqual(ano *AppAPIServiceGetLogCollectRuleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetLogCollectRuleArgs) Field1DeepEqual(src *GetLogCollectRuleReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceGetLogCollectRuleResult struct {
	Success *LogCollectRule `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error   `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceGetLogCollectRuleResult() *AppAPIServiceGetLogCollectRuleResult {
	return &AppAPIServiceGetLogCollectRuleResult{}
}

var AppAPIServiceGetLogCollectRuleResult_Success_DEFAULT *LogCollectRule

func (p *AppAPIServiceGetLogCollectRuleResult) GetSuccess() (v *LogCollectRule) {
	if !p.IsSetSuccess() {
		return AppAPIServiceGetLogCollectRuleResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceGetLogCollectRuleResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceGetLogCollectRuleResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceGetLogCollectRuleResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceGetLogCollectRuleResult) SetSuccess(x interface{}) {
	p.Success = x.(*LogCollectRule)
}
func (p *AppAPIServiceGetLogCollectRuleResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceGetLogCollectRuleResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceGetLogCollectRuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceGetLogCollectRuleResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceGetLogCollectRuleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceGetLogCollectRuleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewLogCollectRule()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetLogCollectRuleResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceGetLogCollectRuleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLogCollectRule_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceGetLogCollectRuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceGetLogCollectRuleResult(%+v)", *p)
}

func (p *AppAPIServiceGetLogCollectRuleResult) DeepEqual(ano *AppAPIServiceGetLogCollectRuleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceGetLogCollectRuleResult) Field0DeepEqual(src *LogCollectRule) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceGetLogCollectRuleResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceForwardKubernetesApiArgs struct {
	Req *ForwardKubernetesApiRequest `thrift:"req,1" json:"req"`
}

func NewAppAPIServiceForwardKubernetesApiArgs() *AppAPIServiceForwardKubernetesApiArgs {
	return &AppAPIServiceForwardKubernetesApiArgs{}
}

var AppAPIServiceForwardKubernetesApiArgs_Req_DEFAULT *ForwardKubernetesApiRequest

func (p *AppAPIServiceForwardKubernetesApiArgs) GetReq() (v *ForwardKubernetesApiRequest) {
	if !p.IsSetReq() {
		return AppAPIServiceForwardKubernetesApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AppAPIServiceForwardKubernetesApiArgs) SetReq(val *ForwardKubernetesApiRequest) {
	p.Req = val
}

var fieldIDToName_AppAPIServiceForwardKubernetesApiArgs = map[int16]string{
	1: "req",
}

func (p *AppAPIServiceForwardKubernetesApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AppAPIServiceForwardKubernetesApiArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceForwardKubernetesApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewForwardKubernetesApiRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceForwardKubernetesApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ForwardKubernetesApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceForwardKubernetesApiArgs(%+v)", *p)
}

func (p *AppAPIServiceForwardKubernetesApiArgs) DeepEqual(ano *AppAPIServiceForwardKubernetesApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *AppAPIServiceForwardKubernetesApiArgs) Field1DeepEqual(src *ForwardKubernetesApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type AppAPIServiceForwardKubernetesApiResult struct {
	Success *ForwardKubernetesApiResponse `thrift:"success,0" json:"success,omitempty"`
	Err     *common.Error                 `thrift:"err,1" json:"err,omitempty"`
}

func NewAppAPIServiceForwardKubernetesApiResult() *AppAPIServiceForwardKubernetesApiResult {
	return &AppAPIServiceForwardKubernetesApiResult{}
}

var AppAPIServiceForwardKubernetesApiResult_Success_DEFAULT *ForwardKubernetesApiResponse

func (p *AppAPIServiceForwardKubernetesApiResult) GetSuccess() (v *ForwardKubernetesApiResponse) {
	if !p.IsSetSuccess() {
		return AppAPIServiceForwardKubernetesApiResult_Success_DEFAULT
	}
	return p.Success
}

var AppAPIServiceForwardKubernetesApiResult_Err_DEFAULT *common.Error

func (p *AppAPIServiceForwardKubernetesApiResult) GetErr() (v *common.Error) {
	if !p.IsSetErr() {
		return AppAPIServiceForwardKubernetesApiResult_Err_DEFAULT
	}
	return p.Err
}
func (p *AppAPIServiceForwardKubernetesApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ForwardKubernetesApiResponse)
}
func (p *AppAPIServiceForwardKubernetesApiResult) SetErr(val *common.Error) {
	p.Err = val
}

var fieldIDToName_AppAPIServiceForwardKubernetesApiResult = map[int16]string{
	0: "success",
	1: "err",
}

func (p *AppAPIServiceForwardKubernetesApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppAPIServiceForwardKubernetesApiResult) IsSetErr() bool {
	return p.Err != nil
}

func (p *AppAPIServiceForwardKubernetesApiResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppAPIServiceForwardKubernetesApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewForwardKubernetesApiResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceForwardKubernetesApiResult) ReadField1(iprot thrift.TProtocol) error {
	p.Err = common.NewError()
	if err := p.Err.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppAPIServiceForwardKubernetesApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ForwardKubernetesApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err = oprot.WriteFieldBegin("err", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Err.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppAPIServiceForwardKubernetesApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppAPIServiceForwardKubernetesApiResult(%+v)", *p)
}

func (p *AppAPIServiceForwardKubernetesApiResult) DeepEqual(ano *AppAPIServiceForwardKubernetesApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.Err) {
		return false
	}
	return true
}

func (p *AppAPIServiceForwardKubernetesApiResult) Field0DeepEqual(src *ForwardKubernetesApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AppAPIServiceForwardKubernetesApiResult) Field1DeepEqual(src *common.Error) bool {

	if !p.Err.DeepEqual(src) {
		return false
	}
	return true
}
