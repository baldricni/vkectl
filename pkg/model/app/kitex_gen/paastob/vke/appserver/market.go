// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package appserver

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/volcengine/vkectl/pkg/model/app/kitex_gen/base"
	"strings"
)

type ListChartCategoriesRequest struct {
	Top *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewListChartCategoriesRequest() *ListChartCategoriesRequest {
	return &ListChartCategoriesRequest{}
}

var ListChartCategoriesRequest_Top_DEFAULT *base.TopParam

func (p *ListChartCategoriesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListChartCategoriesRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListChartCategoriesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListChartCategoriesRequest = map[int16]string{
	255: "Top",
}

func (p *ListChartCategoriesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListChartCategoriesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListChartCategoriesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListChartCategoriesRequest[fieldId]))
}

func (p *ListChartCategoriesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListChartCategoriesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListChartCategoriesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListChartCategoriesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListChartCategoriesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListChartCategoriesRequest(%+v)", *p)
}

func (p *ListChartCategoriesRequest) DeepEqual(ano *ListChartCategoriesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListChartCategoriesRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListChartCategoriesResponse struct {
	TotalCount int32           `thrift:"TotalCount,1,required" json:"TotalCount"`
	Items      []*CategoryItem `thrift:"Items,2,required" json:"Items"`
}

func NewListChartCategoriesResponse() *ListChartCategoriesResponse {
	return &ListChartCategoriesResponse{}
}

func (p *ListChartCategoriesResponse) GetTotalCount() (v int32) {
	return p.TotalCount
}

func (p *ListChartCategoriesResponse) GetItems() (v []*CategoryItem) {
	return p.Items
}
func (p *ListChartCategoriesResponse) SetTotalCount(val int32) {
	p.TotalCount = val
}
func (p *ListChartCategoriesResponse) SetItems(val []*CategoryItem) {
	p.Items = val
}

var fieldIDToName_ListChartCategoriesResponse = map[int16]string{
	1: "TotalCount",
	2: "Items",
}

func (p *ListChartCategoriesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotalCount bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotalCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotalCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListChartCategoriesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListChartCategoriesResponse[fieldId]))
}

func (p *ListChartCategoriesResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *ListChartCategoriesResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*CategoryItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCategoryItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListChartCategoriesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListChartCategoriesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListChartCategoriesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("TotalCount", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.TotalCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListChartCategoriesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListChartCategoriesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListChartCategoriesResponse(%+v)", *p)
}

func (p *ListChartCategoriesResponse) DeepEqual(ano *ListChartCategoriesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TotalCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListChartCategoriesResponse) Field1DeepEqual(src int32) bool {

	if p.TotalCount != src {
		return false
	}
	return true
}
func (p *ListChartCategoriesResponse) Field2DeepEqual(src []*CategoryItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CategoryItem struct {
	Count    int32  `thrift:"Count,1,required" json:"Count"`
	Category string `thrift:"Category,2,required" json:"Category"`
}

func NewCategoryItem() *CategoryItem {
	return &CategoryItem{}
}

func (p *CategoryItem) GetCount() (v int32) {
	return p.Count
}

func (p *CategoryItem) GetCategory() (v string) {
	return p.Category
}
func (p *CategoryItem) SetCount(val int32) {
	p.Count = val
}
func (p *CategoryItem) SetCategory(val string) {
	p.Category = val
}

var fieldIDToName_CategoryItem = map[int16]string{
	1: "Count",
	2: "Category",
}

func (p *CategoryItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCount bool = false
	var issetCategory bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCount = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCount {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCategory {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CategoryItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CategoryItem[fieldId]))
}

func (p *CategoryItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Count = v
	}
	return nil
}

func (p *CategoryItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Category = v
	}
	return nil
}

func (p *CategoryItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CategoryItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CategoryItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Count", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CategoryItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Category", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Category); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CategoryItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryItem(%+v)", *p)
}

func (p *CategoryItem) DeepEqual(ano *CategoryItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Count) {
		return false
	}
	if !p.Field2DeepEqual(ano.Category) {
		return false
	}
	return true
}

func (p *CategoryItem) Field1DeepEqual(src int32) bool {

	if p.Count != src {
		return false
	}
	return true
}
func (p *CategoryItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Category, src) != 0 {
		return false
	}
	return true
}

type ChartVersionItem struct {
	Version    string `thrift:"Version,1,required" json:"Version"`
	AppVersion string `thrift:"AppVersion,2,required" json:"AppVersion"`
}

func NewChartVersionItem() *ChartVersionItem {
	return &ChartVersionItem{}
}

func (p *ChartVersionItem) GetVersion() (v string) {
	return p.Version
}

func (p *ChartVersionItem) GetAppVersion() (v string) {
	return p.AppVersion
}
func (p *ChartVersionItem) SetVersion(val string) {
	p.Version = val
}
func (p *ChartVersionItem) SetAppVersion(val string) {
	p.AppVersion = val
}

var fieldIDToName_ChartVersionItem = map[int16]string{
	1: "Version",
	2: "AppVersion",
}

func (p *ChartVersionItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVersion bool = false
	var issetAppVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChartVersionItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ChartVersionItem[fieldId]))
}

func (p *ChartVersionItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Version = v
	}
	return nil
}

func (p *ChartVersionItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *ChartVersionItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChartVersionItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChartVersionItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Version", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChartVersionItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChartVersionItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChartVersionItem(%+v)", *p)
}

func (p *ChartVersionItem) DeepEqual(ano *ChartVersionItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppVersion) {
		return false
	}
	return true
}

func (p *ChartVersionItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *ChartVersionItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}

type ListChartsRequest struct {
	From     string         `thrift:"From,1,required" json:"From"`
	Category string         `thrift:"Category,2,required" json:"Category"`
	Start    int32          `thrift:"Start,3" json:"Start,omitempty"`
	Limit    int32          `thrift:"Limit,4" json:"Limit" default:"9999"`
	Keyword  string         `thrift:"Keyword,5" json:"Keyword,omitempty"`
	Top      *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewListChartsRequest() *ListChartsRequest {
	return &ListChartsRequest{

		Start:   0,
		Limit:   9999,
		Keyword: "",
	}
}

func (p *ListChartsRequest) GetFrom() (v string) {
	return p.From
}

func (p *ListChartsRequest) GetCategory() (v string) {
	return p.Category
}

var ListChartsRequest_Start_DEFAULT int32 = 0

func (p *ListChartsRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListChartsRequest_Start_DEFAULT
	}
	return p.Start
}

var ListChartsRequest_Limit_DEFAULT int32 = 9999

func (p *ListChartsRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListChartsRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListChartsRequest_Keyword_DEFAULT string = ""

func (p *ListChartsRequest) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ListChartsRequest_Keyword_DEFAULT
	}
	return p.Keyword
}

var ListChartsRequest_Top_DEFAULT *base.TopParam

func (p *ListChartsRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListChartsRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListChartsRequest) SetFrom(val string) {
	p.From = val
}
func (p *ListChartsRequest) SetCategory(val string) {
	p.Category = val
}
func (p *ListChartsRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListChartsRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListChartsRequest) SetKeyword(val string) {
	p.Keyword = val
}
func (p *ListChartsRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListChartsRequest = map[int16]string{
	1:   "From",
	2:   "Category",
	3:   "Start",
	4:   "Limit",
	5:   "Keyword",
	255: "Top",
}

func (p *ListChartsRequest) IsSetStart() bool {
	return p.Start != ListChartsRequest_Start_DEFAULT
}

func (p *ListChartsRequest) IsSetLimit() bool {
	return p.Limit != ListChartsRequest_Limit_DEFAULT
}

func (p *ListChartsRequest) IsSetKeyword() bool {
	return p.Keyword != ListChartsRequest_Keyword_DEFAULT
}

func (p *ListChartsRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListChartsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFrom bool = false
	var issetCategory bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrom = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCategory = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFrom {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCategory {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListChartsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListChartsRequest[fieldId]))
}

func (p *ListChartsRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.From = v
	}
	return nil
}

func (p *ListChartsRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Category = v
	}
	return nil
}

func (p *ListChartsRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListChartsRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListChartsRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = v
	}
	return nil
}

func (p *ListChartsRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListChartsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListChartsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListChartsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("From", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.From); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListChartsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Category", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Category); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListChartsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListChartsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListChartsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("Keyword", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListChartsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListChartsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListChartsRequest(%+v)", *p)
}

func (p *ListChartsRequest) DeepEqual(ano *ListChartsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.From) {
		return false
	}
	if !p.Field2DeepEqual(ano.Category) {
		return false
	}
	if !p.Field3DeepEqual(ano.Start) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field5DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListChartsRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.From, src) != 0 {
		return false
	}
	return true
}
func (p *ListChartsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Category, src) != 0 {
		return false
	}
	return true
}
func (p *ListChartsRequest) Field3DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListChartsRequest) Field4DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListChartsRequest) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Keyword, src) != 0 {
		return false
	}
	return true
}
func (p *ListChartsRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListChartsResponse struct {
	Total int64        `thrift:"Total,1,required" json:"Total"`
	Items []*ChartItem `thrift:"Items,2,required" json:"Items"`
}

func NewListChartsResponse() *ListChartsResponse {
	return &ListChartsResponse{}
}

func (p *ListChartsResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListChartsResponse) GetItems() (v []*ChartItem) {
	return p.Items
}
func (p *ListChartsResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListChartsResponse) SetItems(val []*ChartItem) {
	p.Items = val
}

var fieldIDToName_ListChartsResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListChartsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListChartsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListChartsResponse[fieldId]))
}

func (p *ListChartsResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListChartsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ChartItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewChartItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListChartsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListChartsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListChartsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListChartsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListChartsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListChartsResponse(%+v)", *p)
}

func (p *ListChartsResponse) DeepEqual(ano *ListChartsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListChartsResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListChartsResponse) Field2DeepEqual(src []*ChartItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ChartItem struct {
	Name        string              `thrift:"Name,1,required" json:"Name"`
	Version     string              `thrift:"Version,2,required" json:"Version"`
	AppVersion  string              `thrift:"AppVersion,3,required" json:"AppVersion"`
	Icon        string              `thrift:"Icon,4,required" json:"Icon"`
	Description string              `thrift:"Description,5,required" json:"Description"`
	Versions    []*ChartVersionItem `thrift:"Versions,6,required" json:"Versions"`
}

func NewChartItem() *ChartItem {
	return &ChartItem{

		Versions: []*ChartVersionItem{},
	}
}

func (p *ChartItem) GetName() (v string) {
	return p.Name
}

func (p *ChartItem) GetVersion() (v string) {
	return p.Version
}

func (p *ChartItem) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *ChartItem) GetIcon() (v string) {
	return p.Icon
}

func (p *ChartItem) GetDescription() (v string) {
	return p.Description
}

func (p *ChartItem) GetVersions() (v []*ChartVersionItem) {
	return p.Versions
}
func (p *ChartItem) SetName(val string) {
	p.Name = val
}
func (p *ChartItem) SetVersion(val string) {
	p.Version = val
}
func (p *ChartItem) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *ChartItem) SetIcon(val string) {
	p.Icon = val
}
func (p *ChartItem) SetDescription(val string) {
	p.Description = val
}
func (p *ChartItem) SetVersions(val []*ChartVersionItem) {
	p.Versions = val
}

var fieldIDToName_ChartItem = map[int16]string{
	1: "Name",
	2: "Version",
	3: "AppVersion",
	4: "Icon",
	5: "Description",
	6: "Versions",
}

func (p *ChartItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetVersion bool = false
	var issetAppVersion bool = false
	var issetIcon bool = false
	var issetDescription bool = false
	var issetVersions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetIcon = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIcon {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetVersions {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChartItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ChartItem[fieldId]))
}

func (p *ChartItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ChartItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Version = v
	}
	return nil
}

func (p *ChartItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *ChartItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Icon = v
	}
	return nil
}

func (p *ChartItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *ChartItem) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Versions = make([]*ChartVersionItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewChartVersionItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Versions = append(p.Versions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ChartItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChartItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChartItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ChartItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Version", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ChartItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChartItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Icon", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Icon); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ChartItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChartItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Versions", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
		return err
	}
	for _, v := range p.Versions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ChartItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChartItem(%+v)", *p)
}

func (p *ChartItem) DeepEqual(ano *ChartItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.AppVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.Icon) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.Versions) {
		return false
	}
	return true
}

func (p *ChartItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ChartItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *ChartItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}
func (p *ChartItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Icon, src) != 0 {
		return false
	}
	return true
}
func (p *ChartItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ChartItem) Field6DeepEqual(src []*ChartVersionItem) bool {

	if len(p.Versions) != len(src) {
		return false
	}
	for i, v := range p.Versions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetChartRequest struct {
	From     string         `thrift:"From,1,required" json:"From"`
	Name     *string        `thrift:"Name,2" json:"Name,omitempty"`
	Version  *string        `thrift:"Version,3" json:"Version,omitempty"`
	ChartURL *string        `thrift:"ChartURL,4" json:"ChartURL,omitempty"`
	Username *string        `thrift:"Username,5" json:"Username,omitempty"`
	Password *string        `thrift:"Password,6" json:"Password,omitempty"`
	Top      *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewGetChartRequest() *GetChartRequest {
	return &GetChartRequest{}
}

func (p *GetChartRequest) GetFrom() (v string) {
	return p.From
}

var GetChartRequest_Name_DEFAULT string

func (p *GetChartRequest) GetName() (v string) {
	if !p.IsSetName() {
		return GetChartRequest_Name_DEFAULT
	}
	return *p.Name
}

var GetChartRequest_Version_DEFAULT string

func (p *GetChartRequest) GetVersion() (v string) {
	if !p.IsSetVersion() {
		return GetChartRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetChartRequest_ChartURL_DEFAULT string

func (p *GetChartRequest) GetChartURL() (v string) {
	if !p.IsSetChartURL() {
		return GetChartRequest_ChartURL_DEFAULT
	}
	return *p.ChartURL
}

var GetChartRequest_Username_DEFAULT string

func (p *GetChartRequest) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return GetChartRequest_Username_DEFAULT
	}
	return *p.Username
}

var GetChartRequest_Password_DEFAULT string

func (p *GetChartRequest) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return GetChartRequest_Password_DEFAULT
	}
	return *p.Password
}

var GetChartRequest_Top_DEFAULT *base.TopParam

func (p *GetChartRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetChartRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *GetChartRequest) SetFrom(val string) {
	p.From = val
}
func (p *GetChartRequest) SetName(val *string) {
	p.Name = val
}
func (p *GetChartRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *GetChartRequest) SetChartURL(val *string) {
	p.ChartURL = val
}
func (p *GetChartRequest) SetUsername(val *string) {
	p.Username = val
}
func (p *GetChartRequest) SetPassword(val *string) {
	p.Password = val
}
func (p *GetChartRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_GetChartRequest = map[int16]string{
	1:   "From",
	2:   "Name",
	3:   "Version",
	4:   "ChartURL",
	5:   "Username",
	6:   "Password",
	255: "Top",
}

func (p *GetChartRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *GetChartRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetChartRequest) IsSetChartURL() bool {
	return p.ChartURL != nil
}

func (p *GetChartRequest) IsSetUsername() bool {
	return p.Username != nil
}

func (p *GetChartRequest) IsSetPassword() bool {
	return p.Password != nil
}

func (p *GetChartRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetChartRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFrom bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrom = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFrom {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetChartRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetChartRequest[fieldId]))
}

func (p *GetChartRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.From = v
	}
	return nil
}

func (p *GetChartRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}

func (p *GetChartRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Version = &v
	}
	return nil
}

func (p *GetChartRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartURL = &v
	}
	return nil
}

func (p *GetChartRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}

func (p *GetChartRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = &v
	}
	return nil
}

func (p *GetChartRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetChartRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChartRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetChartRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("From", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.From); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetChartRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("Name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetChartRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("Version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetChartRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetChartURL() {
		if err = oprot.WriteFieldBegin("ChartURL", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChartURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetChartRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetChartRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err = oprot.WriteFieldBegin("Password", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Password); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetChartRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetChartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChartRequest(%+v)", *p)
}

func (p *GetChartRequest) DeepEqual(ano *GetChartRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.From) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.ChartURL) {
		return false
	}
	if !p.Field5DeepEqual(ano.Username) {
		return false
	}
	if !p.Field6DeepEqual(ano.Password) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *GetChartRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.From, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *GetChartRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *GetChartRequest) Field4DeepEqual(src *string) bool {

	if p.ChartURL == src {
		return true
	} else if p.ChartURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChartURL, *src) != 0 {
		return false
	}
	return true
}
func (p *GetChartRequest) Field5DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}
func (p *GetChartRequest) Field6DeepEqual(src *string) bool {

	if p.Password == src {
		return true
	} else if p.Password == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Password, *src) != 0 {
		return false
	}
	return true
}
func (p *GetChartRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type GetChartResponse struct {
	Name        string              `thrift:"Name,1,required" json:"Name"`
	Version     string              `thrift:"Version,2,required" json:"Version"`
	AppVersion  string              `thrift:"AppVersion,3,required" json:"AppVersion"`
	Icon        string              `thrift:"Icon,4,required" json:"Icon"`
	Description string              `thrift:"Description,5,required" json:"Description"`
	HomePage    string              `thrift:"HomePage,6,required" json:"HomePage"`
	Keywords    []string            `thrift:"Keywords,7,required" json:"Keywords"`
	Sources     []string            `thrift:"Sources,8,required" json:"Sources"`
	Readme      string              `thrift:"Readme,9,required" json:"Readme"`
	Values      string              `thrift:"Values,10,required" json:"Values"`
	Versions    []*ChartVersionItem `thrift:"Versions,11,required" json:"Versions"`
}

func NewGetChartResponse() *GetChartResponse {
	return &GetChartResponse{

		Versions: []*ChartVersionItem{},
	}
}

func (p *GetChartResponse) GetName() (v string) {
	return p.Name
}

func (p *GetChartResponse) GetVersion() (v string) {
	return p.Version
}

func (p *GetChartResponse) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *GetChartResponse) GetIcon() (v string) {
	return p.Icon
}

func (p *GetChartResponse) GetDescription() (v string) {
	return p.Description
}

func (p *GetChartResponse) GetHomePage() (v string) {
	return p.HomePage
}

func (p *GetChartResponse) GetKeywords() (v []string) {
	return p.Keywords
}

func (p *GetChartResponse) GetSources() (v []string) {
	return p.Sources
}

func (p *GetChartResponse) GetReadme() (v string) {
	return p.Readme
}

func (p *GetChartResponse) GetValues() (v string) {
	return p.Values
}

func (p *GetChartResponse) GetVersions() (v []*ChartVersionItem) {
	return p.Versions
}
func (p *GetChartResponse) SetName(val string) {
	p.Name = val
}
func (p *GetChartResponse) SetVersion(val string) {
	p.Version = val
}
func (p *GetChartResponse) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *GetChartResponse) SetIcon(val string) {
	p.Icon = val
}
func (p *GetChartResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetChartResponse) SetHomePage(val string) {
	p.HomePage = val
}
func (p *GetChartResponse) SetKeywords(val []string) {
	p.Keywords = val
}
func (p *GetChartResponse) SetSources(val []string) {
	p.Sources = val
}
func (p *GetChartResponse) SetReadme(val string) {
	p.Readme = val
}
func (p *GetChartResponse) SetValues(val string) {
	p.Values = val
}
func (p *GetChartResponse) SetVersions(val []*ChartVersionItem) {
	p.Versions = val
}

var fieldIDToName_GetChartResponse = map[int16]string{
	1:  "Name",
	2:  "Version",
	3:  "AppVersion",
	4:  "Icon",
	5:  "Description",
	6:  "HomePage",
	7:  "Keywords",
	8:  "Sources",
	9:  "Readme",
	10: "Values",
	11: "Versions",
}

func (p *GetChartResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetVersion bool = false
	var issetAppVersion bool = false
	var issetIcon bool = false
	var issetDescription bool = false
	var issetHomePage bool = false
	var issetKeywords bool = false
	var issetSources bool = false
	var issetReadme bool = false
	var issetValues bool = false
	var issetVersions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetIcon = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetHomePage = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetKeywords = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetSources = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetReadme = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetValues = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetIcon {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetHomePage {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetKeywords {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetSources {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetReadme {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetValues {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetVersions {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetChartResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetChartResponse[fieldId]))
}

func (p *GetChartResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetChartResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Version = v
	}
	return nil
}

func (p *GetChartResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *GetChartResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Icon = v
	}
	return nil
}

func (p *GetChartResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetChartResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.HomePage = v
	}
	return nil
}

func (p *GetChartResponse) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Keywords = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Keywords = append(p.Keywords, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetChartResponse) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Sources = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Sources = append(p.Sources, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetChartResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Readme = v
	}
	return nil
}

func (p *GetChartResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Values = v
	}
	return nil
}

func (p *GetChartResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Versions = make([]*ChartVersionItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewChartVersionItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Versions = append(p.Versions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetChartResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetChartResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetChartResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetChartResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Version", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetChartResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetChartResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Icon", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Icon); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetChartResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetChartResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("HomePage", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.HomePage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetChartResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Keywords", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Keywords)); err != nil {
		return err
	}
	for _, v := range p.Keywords {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetChartResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Sources", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Sources)); err != nil {
		return err
	}
	for _, v := range p.Sources {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetChartResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Readme", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Readme); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetChartResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Values", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Values); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetChartResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Versions", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
		return err
	}
	for _, v := range p.Versions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetChartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChartResponse(%+v)", *p)
}

func (p *GetChartResponse) DeepEqual(ano *GetChartResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.AppVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.Icon) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.HomePage) {
		return false
	}
	if !p.Field7DeepEqual(ano.Keywords) {
		return false
	}
	if !p.Field8DeepEqual(ano.Sources) {
		return false
	}
	if !p.Field9DeepEqual(ano.Readme) {
		return false
	}
	if !p.Field10DeepEqual(ano.Values) {
		return false
	}
	if !p.Field11DeepEqual(ano.Versions) {
		return false
	}
	return true
}

func (p *GetChartResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Icon, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.HomePage, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field7DeepEqual(src []string) bool {

	if len(p.Keywords) != len(src) {
		return false
	}
	for i, v := range p.Keywords {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetChartResponse) Field8DeepEqual(src []string) bool {

	if len(p.Sources) != len(src) {
		return false
	}
	for i, v := range p.Sources {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetChartResponse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Readme, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field10DeepEqual(src string) bool {

	if strings.Compare(p.Values, src) != 0 {
		return false
	}
	return true
}
func (p *GetChartResponse) Field11DeepEqual(src []*ChartVersionItem) bool {

	if len(p.Versions) != len(src) {
		return false
	}
	for i, v := range p.Versions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateReleaseRequest struct {
	From         string         `thrift:"From,1,required" json:"From"`
	ClusterId    string         `thrift:"ClusterId,2,required" json:"ClusterId"`
	Namespace    string         `thrift:"Namespace,3,required" json:"Namespace"`
	Name         string         `thrift:"Name,4,required" json:"Name"`
	ChartName    *string        `thrift:"ChartName,5" json:"ChartName,omitempty"`
	ChartVersion *string        `thrift:"ChartVersion,6" json:"ChartVersion,omitempty"`
	Values       string         `thrift:"Values,7,required" json:"Values"`
	ChartURL     *string        `thrift:"ChartURL,8" json:"ChartURL,omitempty"`
	Username     *string        `thrift:"Username,9" json:"Username,omitempty"`
	Password     *string        `thrift:"Password,10" json:"Password,omitempty"`
	Top          *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewCreateReleaseRequest() *CreateReleaseRequest {
	return &CreateReleaseRequest{}
}

func (p *CreateReleaseRequest) GetFrom() (v string) {
	return p.From
}

func (p *CreateReleaseRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateReleaseRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateReleaseRequest) GetName() (v string) {
	return p.Name
}

var CreateReleaseRequest_ChartName_DEFAULT string

func (p *CreateReleaseRequest) GetChartName() (v string) {
	if !p.IsSetChartName() {
		return CreateReleaseRequest_ChartName_DEFAULT
	}
	return *p.ChartName
}

var CreateReleaseRequest_ChartVersion_DEFAULT string

func (p *CreateReleaseRequest) GetChartVersion() (v string) {
	if !p.IsSetChartVersion() {
		return CreateReleaseRequest_ChartVersion_DEFAULT
	}
	return *p.ChartVersion
}

func (p *CreateReleaseRequest) GetValues() (v string) {
	return p.Values
}

var CreateReleaseRequest_ChartURL_DEFAULT string

func (p *CreateReleaseRequest) GetChartURL() (v string) {
	if !p.IsSetChartURL() {
		return CreateReleaseRequest_ChartURL_DEFAULT
	}
	return *p.ChartURL
}

var CreateReleaseRequest_Username_DEFAULT string

func (p *CreateReleaseRequest) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return CreateReleaseRequest_Username_DEFAULT
	}
	return *p.Username
}

var CreateReleaseRequest_Password_DEFAULT string

func (p *CreateReleaseRequest) GetPassword() (v string) {
	if !p.IsSetPassword() {
		return CreateReleaseRequest_Password_DEFAULT
	}
	return *p.Password
}

var CreateReleaseRequest_Top_DEFAULT *base.TopParam

func (p *CreateReleaseRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return CreateReleaseRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *CreateReleaseRequest) SetFrom(val string) {
	p.From = val
}
func (p *CreateReleaseRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateReleaseRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateReleaseRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateReleaseRequest) SetChartName(val *string) {
	p.ChartName = val
}
func (p *CreateReleaseRequest) SetChartVersion(val *string) {
	p.ChartVersion = val
}
func (p *CreateReleaseRequest) SetValues(val string) {
	p.Values = val
}
func (p *CreateReleaseRequest) SetChartURL(val *string) {
	p.ChartURL = val
}
func (p *CreateReleaseRequest) SetUsername(val *string) {
	p.Username = val
}
func (p *CreateReleaseRequest) SetPassword(val *string) {
	p.Password = val
}
func (p *CreateReleaseRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_CreateReleaseRequest = map[int16]string{
	1:   "From",
	2:   "ClusterId",
	3:   "Namespace",
	4:   "Name",
	5:   "ChartName",
	6:   "ChartVersion",
	7:   "Values",
	8:   "ChartURL",
	9:   "Username",
	10:  "Password",
	255: "Top",
}

func (p *CreateReleaseRequest) IsSetChartName() bool {
	return p.ChartName != nil
}

func (p *CreateReleaseRequest) IsSetChartVersion() bool {
	return p.ChartVersion != nil
}

func (p *CreateReleaseRequest) IsSetChartURL() bool {
	return p.ChartURL != nil
}

func (p *CreateReleaseRequest) IsSetUsername() bool {
	return p.Username != nil
}

func (p *CreateReleaseRequest) IsSetPassword() bool {
	return p.Password != nil
}

func (p *CreateReleaseRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *CreateReleaseRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFrom bool = false
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetValues bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrom = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetValues = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFrom {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetClusterId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetValues {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateReleaseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateReleaseRequest[fieldId]))
}

func (p *CreateReleaseRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.From = v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartName = &v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartVersion = &v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Values = v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartURL = &v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Password = &v
	}
	return nil
}

func (p *CreateReleaseRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateReleaseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateReleaseRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("From", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.From); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetChartName() {
		if err = oprot.WriteFieldBegin("ChartName", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChartName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetChartVersion() {
		if err = oprot.WriteFieldBegin("ChartVersion", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChartVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Values", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Values); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetChartURL() {
		if err = oprot.WriteFieldBegin("ChartURL", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChartURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err = oprot.WriteFieldBegin("Password", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Password); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateReleaseRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateReleaseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateReleaseRequest(%+v)", *p)
}

func (p *CreateReleaseRequest) DeepEqual(ano *CreateReleaseRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.From) {
		return false
	}
	if !p.Field2DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.ChartName) {
		return false
	}
	if !p.Field6DeepEqual(ano.ChartVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.Values) {
		return false
	}
	if !p.Field8DeepEqual(ano.ChartURL) {
		return false
	}
	if !p.Field9DeepEqual(ano.Username) {
		return false
	}
	if !p.Field10DeepEqual(ano.Password) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *CreateReleaseRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.From, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field5DeepEqual(src *string) bool {

	if p.ChartName == src {
		return true
	} else if p.ChartName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChartName, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field6DeepEqual(src *string) bool {

	if p.ChartVersion == src {
		return true
	} else if p.ChartVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChartVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Values, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field8DeepEqual(src *string) bool {

	if p.ChartURL == src {
		return true
	} else if p.ChartURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChartURL, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field9DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field10DeepEqual(src *string) bool {

	if p.Password == src {
		return true
	} else if p.Password == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Password, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ReleaseRevision struct {
	Revision     int32  `thrift:"Revision,1,required" json:"Revision"`
	ChartName    string `thrift:"ChartName,2,required" json:"ChartName"`
	ChartVersion string `thrift:"ChartVersion,3,required" json:"ChartVersion"`
	AppVersion   string `thrift:"AppVersion,4,required" json:"AppVersion"`
	CreateTime   string `thrift:"CreateTime,5,required" json:"CreateTime"`
}

func NewReleaseRevision() *ReleaseRevision {
	return &ReleaseRevision{}
}

func (p *ReleaseRevision) GetRevision() (v int32) {
	return p.Revision
}

func (p *ReleaseRevision) GetChartName() (v string) {
	return p.ChartName
}

func (p *ReleaseRevision) GetChartVersion() (v string) {
	return p.ChartVersion
}

func (p *ReleaseRevision) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *ReleaseRevision) GetCreateTime() (v string) {
	return p.CreateTime
}
func (p *ReleaseRevision) SetRevision(val int32) {
	p.Revision = val
}
func (p *ReleaseRevision) SetChartName(val string) {
	p.ChartName = val
}
func (p *ReleaseRevision) SetChartVersion(val string) {
	p.ChartVersion = val
}
func (p *ReleaseRevision) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *ReleaseRevision) SetCreateTime(val string) {
	p.CreateTime = val
}

var fieldIDToName_ReleaseRevision = map[int16]string{
	1: "Revision",
	2: "ChartName",
	3: "ChartVersion",
	4: "AppVersion",
	5: "CreateTime",
}

func (p *ReleaseRevision) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRevision bool = false
	var issetChartName bool = false
	var issetChartVersion bool = false
	var issetAppVersion bool = false
	var issetCreateTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRevision = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRevision {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetChartName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetChartVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReleaseRevision[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ReleaseRevision[fieldId]))
}

func (p *ReleaseRevision) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ReleaseRevision) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartName = v
	}
	return nil
}

func (p *ReleaseRevision) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartVersion = v
	}
	return nil
}

func (p *ReleaseRevision) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *ReleaseRevision) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *ReleaseRevision) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReleaseRevision"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReleaseRevision) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Revision", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Revision); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReleaseRevision) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartName", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ReleaseRevision) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartVersion", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ReleaseRevision) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ReleaseRevision) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ReleaseRevision) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReleaseRevision(%+v)", *p)
}

func (p *ReleaseRevision) DeepEqual(ano *ReleaseRevision) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Revision) {
		return false
	}
	if !p.Field2DeepEqual(ano.ChartName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ChartVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.AppVersion) {
		return false
	}
	if !p.Field5DeepEqual(ano.CreateTime) {
		return false
	}
	return true
}

func (p *ReleaseRevision) Field1DeepEqual(src int32) bool {

	if p.Revision != src {
		return false
	}
	return true
}
func (p *ReleaseRevision) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ChartName, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseRevision) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ChartVersion, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseRevision) Field4DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseRevision) Field5DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}

type KubeResource struct {
	ApiGroup   string          `thrift:"ApiGroup,1,required" json:"ApiGroup"`
	ApiVersion string          `thrift:"ApiVersion,2,required" json:"ApiVersion"`
	Kind       string          `thrift:"Kind,3,required" json:"Kind"`
	Name       string          `thrift:"Name,4,required" json:"Name"`
	Namespace  string          `thrift:"Namespace,5,required" json:"Namespace"`
	Namespaced bool            `thrift:"Namespaced,6,required" json:"Namespaced"`
	Labels     []*KeyValuePair `thrift:"Labels,8,required" json:"Labels"`
}

func NewKubeResource() *KubeResource {
	return &KubeResource{}
}

func (p *KubeResource) GetApiGroup() (v string) {
	return p.ApiGroup
}

func (p *KubeResource) GetApiVersion() (v string) {
	return p.ApiVersion
}

func (p *KubeResource) GetKind() (v string) {
	return p.Kind
}

func (p *KubeResource) GetName() (v string) {
	return p.Name
}

func (p *KubeResource) GetNamespace() (v string) {
	return p.Namespace
}

func (p *KubeResource) GetNamespaced() (v bool) {
	return p.Namespaced
}

func (p *KubeResource) GetLabels() (v []*KeyValuePair) {
	return p.Labels
}
func (p *KubeResource) SetApiGroup(val string) {
	p.ApiGroup = val
}
func (p *KubeResource) SetApiVersion(val string) {
	p.ApiVersion = val
}
func (p *KubeResource) SetKind(val string) {
	p.Kind = val
}
func (p *KubeResource) SetName(val string) {
	p.Name = val
}
func (p *KubeResource) SetNamespace(val string) {
	p.Namespace = val
}
func (p *KubeResource) SetNamespaced(val bool) {
	p.Namespaced = val
}
func (p *KubeResource) SetLabels(val []*KeyValuePair) {
	p.Labels = val
}

var fieldIDToName_KubeResource = map[int16]string{
	1: "ApiGroup",
	2: "ApiVersion",
	3: "Kind",
	4: "Name",
	5: "Namespace",
	6: "Namespaced",
	8: "Labels",
}

func (p *KubeResource) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetApiGroup bool = false
	var issetApiVersion bool = false
	var issetKind bool = false
	var issetName bool = false
	var issetNamespace bool = false
	var issetNamespaced bool = false
	var issetLabels bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetApiGroup = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetApiVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetKind = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespaced = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetLabels = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetApiGroup {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetApiVersion {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetKind {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetNamespaced {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetLabels {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KubeResource[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_KubeResource[fieldId]))
}

func (p *KubeResource) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ApiGroup = v
	}
	return nil
}

func (p *KubeResource) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ApiVersion = v
	}
	return nil
}

func (p *KubeResource) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Kind = v
	}
	return nil
}

func (p *KubeResource) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *KubeResource) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *KubeResource) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Namespaced = v
	}
	return nil
}

func (p *KubeResource) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Labels = make([]*KeyValuePair, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKeyValuePair()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Labels = append(p.Labels, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *KubeResource) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KubeResource"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KubeResource) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ApiGroup", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ApiGroup); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *KubeResource) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ApiVersion", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ApiVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *KubeResource) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Kind", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Kind); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *KubeResource) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *KubeResource) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *KubeResource) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespaced", thrift.BOOL, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Namespaced); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *KubeResource) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Labels", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Labels)); err != nil {
		return err
	}
	for _, v := range p.Labels {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *KubeResource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KubeResource(%+v)", *p)
}

func (p *KubeResource) DeepEqual(ano *KubeResource) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ApiGroup) {
		return false
	}
	if !p.Field2DeepEqual(ano.ApiVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.Kind) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field6DeepEqual(ano.Namespaced) {
		return false
	}
	if !p.Field8DeepEqual(ano.Labels) {
		return false
	}
	return true
}

func (p *KubeResource) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ApiGroup, src) != 0 {
		return false
	}
	return true
}
func (p *KubeResource) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ApiVersion, src) != 0 {
		return false
	}
	return true
}
func (p *KubeResource) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Kind, src) != 0 {
		return false
	}
	return true
}
func (p *KubeResource) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *KubeResource) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *KubeResource) Field6DeepEqual(src bool) bool {

	if p.Namespaced != src {
		return false
	}
	return true
}
func (p *KubeResource) Field8DeepEqual(src []*KeyValuePair) bool {

	if len(p.Labels) != len(src) {
		return false
	}
	for i, v := range p.Labels {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetReleaseRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace string         `thrift:"Namespace,2,required" json:"Namespace"`
	Name      string         `thrift:"Name,3,required" json:"Name"`
	Revision  int32          `thrift:"Revision,4" json:"Revision,omitempty"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewGetReleaseRequest() *GetReleaseRequest {
	return &GetReleaseRequest{

		Revision: 0,
	}
}

func (p *GetReleaseRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetReleaseRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetReleaseRequest) GetName() (v string) {
	return p.Name
}

var GetReleaseRequest_Revision_DEFAULT int32 = 0

func (p *GetReleaseRequest) GetRevision() (v int32) {
	if !p.IsSetRevision() {
		return GetReleaseRequest_Revision_DEFAULT
	}
	return p.Revision
}

var GetReleaseRequest_Top_DEFAULT *base.TopParam

func (p *GetReleaseRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return GetReleaseRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *GetReleaseRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetReleaseRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetReleaseRequest) SetName(val string) {
	p.Name = val
}
func (p *GetReleaseRequest) SetRevision(val int32) {
	p.Revision = val
}
func (p *GetReleaseRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_GetReleaseRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Revision",
	255: "Top",
}

func (p *GetReleaseRequest) IsSetRevision() bool {
	return p.Revision != GetReleaseRequest_Revision_DEFAULT
}

func (p *GetReleaseRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *GetReleaseRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetReleaseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetReleaseRequest[fieldId]))
}

func (p *GetReleaseRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetReleaseRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetReleaseRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetReleaseRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Revision = v
	}
	return nil
}

func (p *GetReleaseRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetReleaseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleaseRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetReleaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetReleaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetReleaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetReleaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRevision() {
		if err = oprot.WriteFieldBegin("Revision", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Revision); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetReleaseRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetReleaseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseRequest(%+v)", *p)
}

func (p *GetReleaseRequest) DeepEqual(ano *GetReleaseRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Revision) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *GetReleaseRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseRequest) Field4DeepEqual(src int32) bool {

	if p.Revision != src {
		return false
	}
	return true
}
func (p *GetReleaseRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type GetReleaseResponse struct {
	ClusterId       string             `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace       string             `thrift:"Namespace,2,required" json:"Namespace"`
	Name            string             `thrift:"Name,3,required" json:"Name"`
	ChartName       string             `thrift:"ChartName,4,required" json:"ChartName"`
	ChartVersion    string             `thrift:"ChartVersion,5,required" json:"ChartVersion"`
	AppVersion      string             `thrift:"AppVersion,6,required" json:"AppVersion"`
	Values          string             `thrift:"Values,7,required" json:"Values"`
	Status          string             `thrift:"Status,8,required" json:"Status"`
	Description     string             `thrift:"Description,9,required" json:"Description"`
	UpdateTime      string             `thrift:"UpdateTime,10,required" json:"UpdateTime"`
	CreateTime      string             `thrift:"CreateTime,11,required" json:"CreateTime"`
	From            string             `thrift:"From,12,required" json:"From"`
	ChartURL        *string            `thrift:"ChartURL,13" json:"ChartURL,omitempty"`
	Username        *string            `thrift:"Username,14" json:"Username,omitempty"`
	Revision        int32              `thrift:"Revision,15,required" json:"Revision"`
	CurrentRevision int32              `thrift:"CurrentRevision,16,required" json:"CurrentRevision"`
	Resources       []*KubeResource    `thrift:"Resources,17,required" json:"Resources"`
	Revisions       []*ReleaseRevision `thrift:"Revisions,18,required" json:"Revisions"`
}

func NewGetReleaseResponse() *GetReleaseResponse {
	return &GetReleaseResponse{

		Resources: []*KubeResource{},
		Revisions: []*ReleaseRevision{},
	}
}

func (p *GetReleaseResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *GetReleaseResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *GetReleaseResponse) GetName() (v string) {
	return p.Name
}

func (p *GetReleaseResponse) GetChartName() (v string) {
	return p.ChartName
}

func (p *GetReleaseResponse) GetChartVersion() (v string) {
	return p.ChartVersion
}

func (p *GetReleaseResponse) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *GetReleaseResponse) GetValues() (v string) {
	return p.Values
}

func (p *GetReleaseResponse) GetStatus() (v string) {
	return p.Status
}

func (p *GetReleaseResponse) GetDescription() (v string) {
	return p.Description
}

func (p *GetReleaseResponse) GetUpdateTime() (v string) {
	return p.UpdateTime
}

func (p *GetReleaseResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *GetReleaseResponse) GetFrom() (v string) {
	return p.From
}

var GetReleaseResponse_ChartURL_DEFAULT string

func (p *GetReleaseResponse) GetChartURL() (v string) {
	if !p.IsSetChartURL() {
		return GetReleaseResponse_ChartURL_DEFAULT
	}
	return *p.ChartURL
}

var GetReleaseResponse_Username_DEFAULT string

func (p *GetReleaseResponse) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return GetReleaseResponse_Username_DEFAULT
	}
	return *p.Username
}

func (p *GetReleaseResponse) GetRevision() (v int32) {
	return p.Revision
}

func (p *GetReleaseResponse) GetCurrentRevision() (v int32) {
	return p.CurrentRevision
}

func (p *GetReleaseResponse) GetResources() (v []*KubeResource) {
	return p.Resources
}

func (p *GetReleaseResponse) GetRevisions() (v []*ReleaseRevision) {
	return p.Revisions
}
func (p *GetReleaseResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *GetReleaseResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *GetReleaseResponse) SetName(val string) {
	p.Name = val
}
func (p *GetReleaseResponse) SetChartName(val string) {
	p.ChartName = val
}
func (p *GetReleaseResponse) SetChartVersion(val string) {
	p.ChartVersion = val
}
func (p *GetReleaseResponse) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *GetReleaseResponse) SetValues(val string) {
	p.Values = val
}
func (p *GetReleaseResponse) SetStatus(val string) {
	p.Status = val
}
func (p *GetReleaseResponse) SetDescription(val string) {
	p.Description = val
}
func (p *GetReleaseResponse) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *GetReleaseResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *GetReleaseResponse) SetFrom(val string) {
	p.From = val
}
func (p *GetReleaseResponse) SetChartURL(val *string) {
	p.ChartURL = val
}
func (p *GetReleaseResponse) SetUsername(val *string) {
	p.Username = val
}
func (p *GetReleaseResponse) SetRevision(val int32) {
	p.Revision = val
}
func (p *GetReleaseResponse) SetCurrentRevision(val int32) {
	p.CurrentRevision = val
}
func (p *GetReleaseResponse) SetResources(val []*KubeResource) {
	p.Resources = val
}
func (p *GetReleaseResponse) SetRevisions(val []*ReleaseRevision) {
	p.Revisions = val
}

var fieldIDToName_GetReleaseResponse = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "ChartName",
	5:  "ChartVersion",
	6:  "AppVersion",
	7:  "Values",
	8:  "Status",
	9:  "Description",
	10: "UpdateTime",
	11: "CreateTime",
	12: "From",
	13: "ChartURL",
	14: "Username",
	15: "Revision",
	16: "CurrentRevision",
	17: "Resources",
	18: "Revisions",
}

func (p *GetReleaseResponse) IsSetChartURL() bool {
	return p.ChartURL != nil
}

func (p *GetReleaseResponse) IsSetUsername() bool {
	return p.Username != nil
}

func (p *GetReleaseResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetChartName bool = false
	var issetChartVersion bool = false
	var issetAppVersion bool = false
	var issetValues bool = false
	var issetStatus bool = false
	var issetDescription bool = false
	var issetUpdateTime bool = false
	var issetCreateTime bool = false
	var issetFrom bool = false
	var issetRevision bool = false
	var issetCurrentRevision bool = false
	var issetResources bool = false
	var issetRevisions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetValues = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrom = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetRevision = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
				issetCurrentRevision = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
				issetResources = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 18:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
				issetRevisions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetChartName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetChartVersion {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetValues {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetFrom {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetRevision {
		fieldId = 15
		goto RequiredFieldNotSetError
	}

	if !issetCurrentRevision {
		fieldId = 16
		goto RequiredFieldNotSetError
	}

	if !issetResources {
		fieldId = 17
		goto RequiredFieldNotSetError
	}

	if !issetRevisions {
		fieldId = 18
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetReleaseResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_GetReleaseResponse[fieldId]))
}

func (p *GetReleaseResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartName = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartVersion = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Values = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.From = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartURL = &v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Revision = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.CurrentRevision = v
	}
	return nil
}

func (p *GetReleaseResponse) ReadField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Resources = make([]*KubeResource, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewKubeResource()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Resources = append(p.Resources, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetReleaseResponse) ReadField18(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Revisions = make([]*ReleaseRevision, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewReleaseRevision()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Revisions = append(p.Revisions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetReleaseResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetReleaseResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetReleaseResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartName", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartVersion", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Values", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Values); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("From", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.From); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetChartURL() {
		if err = oprot.WriteFieldBegin("ChartURL", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChartURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Revision", thrift.I32, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Revision); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField16(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CurrentRevision", thrift.I32, 16); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.CurrentRevision); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Resources", thrift.LIST, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
		return err
	}
	for _, v := range p.Resources {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *GetReleaseResponse) writeField18(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Revisions", thrift.LIST, 18); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Revisions)); err != nil {
		return err
	}
	for _, v := range p.Revisions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}

func (p *GetReleaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetReleaseResponse(%+v)", *p)
}

func (p *GetReleaseResponse) DeepEqual(ano *GetReleaseResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.ChartName) {
		return false
	}
	if !p.Field5DeepEqual(ano.ChartVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.AppVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.Values) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	if !p.Field9DeepEqual(ano.Description) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.From) {
		return false
	}
	if !p.Field13DeepEqual(ano.ChartURL) {
		return false
	}
	if !p.Field14DeepEqual(ano.Username) {
		return false
	}
	if !p.Field15DeepEqual(ano.Revision) {
		return false
	}
	if !p.Field16DeepEqual(ano.CurrentRevision) {
		return false
	}
	if !p.Field17DeepEqual(ano.Resources) {
		return false
	}
	if !p.Field18DeepEqual(ano.Revisions) {
		return false
	}
	return true
}

func (p *GetReleaseResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ChartName, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ChartVersion, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Values, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field10DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field11DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field12DeepEqual(src string) bool {

	if strings.Compare(p.From, src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field13DeepEqual(src *string) bool {

	if p.ChartURL == src {
		return true
	} else if p.ChartURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChartURL, *src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field14DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field15DeepEqual(src int32) bool {

	if p.Revision != src {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field16DeepEqual(src int32) bool {

	if p.CurrentRevision != src {
		return false
	}
	return true
}
func (p *GetReleaseResponse) Field17DeepEqual(src []*KubeResource) bool {

	if len(p.Resources) != len(src) {
		return false
	}
	for i, v := range p.Resources {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetReleaseResponse) Field18DeepEqual(src []*ReleaseRevision) bool {

	if len(p.Revisions) != len(src) {
		return false
	}
	for i, v := range p.Revisions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CreateReleaseResponse struct {
	ClusterId    string  `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace    string  `thrift:"Namespace,2,required" json:"Namespace"`
	Name         string  `thrift:"Name,3,required" json:"Name"`
	ChartName    string  `thrift:"ChartName,4,required" json:"ChartName"`
	ChartVersion string  `thrift:"ChartVersion,5,required" json:"ChartVersion"`
	AppVersion   string  `thrift:"AppVersion,6,required" json:"AppVersion"`
	Values       string  `thrift:"Values,7,required" json:"Values"`
	Status       string  `thrift:"Status,8,required" json:"Status"`
	UpdateTime   string  `thrift:"UpdateTime,9,required" json:"UpdateTime"`
	CreateTime   string  `thrift:"CreateTime,10,required" json:"CreateTime"`
	From         string  `thrift:"From,11,required" json:"From"`
	ChartURL     *string `thrift:"ChartURL,12" json:"ChartURL,omitempty"`
	Username     *string `thrift:"Username,13" json:"Username,omitempty"`
}

func NewCreateReleaseResponse() *CreateReleaseResponse {
	return &CreateReleaseResponse{}
}

func (p *CreateReleaseResponse) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *CreateReleaseResponse) GetNamespace() (v string) {
	return p.Namespace
}

func (p *CreateReleaseResponse) GetName() (v string) {
	return p.Name
}

func (p *CreateReleaseResponse) GetChartName() (v string) {
	return p.ChartName
}

func (p *CreateReleaseResponse) GetChartVersion() (v string) {
	return p.ChartVersion
}

func (p *CreateReleaseResponse) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *CreateReleaseResponse) GetValues() (v string) {
	return p.Values
}

func (p *CreateReleaseResponse) GetStatus() (v string) {
	return p.Status
}

func (p *CreateReleaseResponse) GetUpdateTime() (v string) {
	return p.UpdateTime
}

func (p *CreateReleaseResponse) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *CreateReleaseResponse) GetFrom() (v string) {
	return p.From
}

var CreateReleaseResponse_ChartURL_DEFAULT string

func (p *CreateReleaseResponse) GetChartURL() (v string) {
	if !p.IsSetChartURL() {
		return CreateReleaseResponse_ChartURL_DEFAULT
	}
	return *p.ChartURL
}

var CreateReleaseResponse_Username_DEFAULT string

func (p *CreateReleaseResponse) GetUsername() (v string) {
	if !p.IsSetUsername() {
		return CreateReleaseResponse_Username_DEFAULT
	}
	return *p.Username
}
func (p *CreateReleaseResponse) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *CreateReleaseResponse) SetNamespace(val string) {
	p.Namespace = val
}
func (p *CreateReleaseResponse) SetName(val string) {
	p.Name = val
}
func (p *CreateReleaseResponse) SetChartName(val string) {
	p.ChartName = val
}
func (p *CreateReleaseResponse) SetChartVersion(val string) {
	p.ChartVersion = val
}
func (p *CreateReleaseResponse) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *CreateReleaseResponse) SetValues(val string) {
	p.Values = val
}
func (p *CreateReleaseResponse) SetStatus(val string) {
	p.Status = val
}
func (p *CreateReleaseResponse) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *CreateReleaseResponse) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *CreateReleaseResponse) SetFrom(val string) {
	p.From = val
}
func (p *CreateReleaseResponse) SetChartURL(val *string) {
	p.ChartURL = val
}
func (p *CreateReleaseResponse) SetUsername(val *string) {
	p.Username = val
}

var fieldIDToName_CreateReleaseResponse = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "ChartName",
	5:  "ChartVersion",
	6:  "AppVersion",
	7:  "Values",
	8:  "Status",
	9:  "UpdateTime",
	10: "CreateTime",
	11: "From",
	12: "ChartURL",
	13: "Username",
}

func (p *CreateReleaseResponse) IsSetChartURL() bool {
	return p.ChartURL != nil
}

func (p *CreateReleaseResponse) IsSetUsername() bool {
	return p.Username != nil
}

func (p *CreateReleaseResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetChartName bool = false
	var issetChartVersion bool = false
	var issetAppVersion bool = false
	var issetValues bool = false
	var issetStatus bool = false
	var issetUpdateTime bool = false
	var issetCreateTime bool = false
	var issetFrom bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetValues = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetFrom = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetChartName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetChartVersion {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetValues {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetFrom {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateReleaseResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_CreateReleaseResponse[fieldId]))
}

func (p *CreateReleaseResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartName = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartVersion = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Values = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.From = v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartURL = &v
	}
	return nil
}

func (p *CreateReleaseResponse) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = &v
	}
	return nil
}

func (p *CreateReleaseResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateReleaseResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartName", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartVersion", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Values", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Values); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("From", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.From); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetChartURL() {
		if err = oprot.WriteFieldBegin("ChartURL", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ChartURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *CreateReleaseResponse) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err = oprot.WriteFieldBegin("Username", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Username); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *CreateReleaseResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateReleaseResponse(%+v)", *p)
}

func (p *CreateReleaseResponse) DeepEqual(ano *CreateReleaseResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.ChartName) {
		return false
	}
	if !p.Field5DeepEqual(ano.ChartVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.AppVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.Values) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	if !p.Field9DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.From) {
		return false
	}
	if !p.Field12DeepEqual(ano.ChartURL) {
		return false
	}
	if !p.Field13DeepEqual(ano.Username) {
		return false
	}
	return true
}

func (p *CreateReleaseResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ChartName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ChartVersion, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Values, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field9DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field10DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field11DeepEqual(src string) bool {

	if strings.Compare(p.From, src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field12DeepEqual(src *string) bool {

	if p.ChartURL == src {
		return true
	} else if p.ChartURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ChartURL, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateReleaseResponse) Field13DeepEqual(src *string) bool {

	if p.Username == src {
		return true
	} else if p.Username == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Username, *src) != 0 {
		return false
	}
	return true
}

type ListReleasesRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace string         `thrift:"Namespace,2,required" json:"Namespace"`
	Start     int32          `thrift:"Start,3" json:"Start,omitempty"`
	Limit     int32          `thrift:"Limit,4" json:"Limit" default:"9999"`
	Statuses  []string       `thrift:"Statuses,5" json:"Statuses,omitempty"`
	Keyword   *string        `thrift:"Keyword,6" json:"Keyword,omitempty"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewListReleasesRequest() *ListReleasesRequest {
	return &ListReleasesRequest{

		Start: 0,
		Limit: 9999,
	}
}

func (p *ListReleasesRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *ListReleasesRequest) GetNamespace() (v string) {
	return p.Namespace
}

var ListReleasesRequest_Start_DEFAULT int32 = 0

func (p *ListReleasesRequest) GetStart() (v int32) {
	if !p.IsSetStart() {
		return ListReleasesRequest_Start_DEFAULT
	}
	return p.Start
}

var ListReleasesRequest_Limit_DEFAULT int32 = 9999

func (p *ListReleasesRequest) GetLimit() (v int32) {
	if !p.IsSetLimit() {
		return ListReleasesRequest_Limit_DEFAULT
	}
	return p.Limit
}

var ListReleasesRequest_Statuses_DEFAULT []string

func (p *ListReleasesRequest) GetStatuses() (v []string) {
	if !p.IsSetStatuses() {
		return ListReleasesRequest_Statuses_DEFAULT
	}
	return p.Statuses
}

var ListReleasesRequest_Keyword_DEFAULT string

func (p *ListReleasesRequest) GetKeyword() (v string) {
	if !p.IsSetKeyword() {
		return ListReleasesRequest_Keyword_DEFAULT
	}
	return *p.Keyword
}

var ListReleasesRequest_Top_DEFAULT *base.TopParam

func (p *ListReleasesRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return ListReleasesRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *ListReleasesRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ListReleasesRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ListReleasesRequest) SetStart(val int32) {
	p.Start = val
}
func (p *ListReleasesRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *ListReleasesRequest) SetStatuses(val []string) {
	p.Statuses = val
}
func (p *ListReleasesRequest) SetKeyword(val *string) {
	p.Keyword = val
}
func (p *ListReleasesRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_ListReleasesRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Start",
	4:   "Limit",
	5:   "Statuses",
	6:   "Keyword",
	255: "Top",
}

func (p *ListReleasesRequest) IsSetStart() bool {
	return p.Start != ListReleasesRequest_Start_DEFAULT
}

func (p *ListReleasesRequest) IsSetLimit() bool {
	return p.Limit != ListReleasesRequest_Limit_DEFAULT
}

func (p *ListReleasesRequest) IsSetStatuses() bool {
	return p.Statuses != nil
}

func (p *ListReleasesRequest) IsSetKeyword() bool {
	return p.Keyword != nil
}

func (p *ListReleasesRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *ListReleasesRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListReleasesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListReleasesRequest[fieldId]))
}

func (p *ListReleasesRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ListReleasesRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ListReleasesRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Start = v
	}
	return nil
}

func (p *ListReleasesRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *ListReleasesRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Statuses = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Statuses = append(p.Statuses, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListReleasesRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keyword = &v
	}
	return nil
}

func (p *ListReleasesRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ListReleasesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListReleasesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListReleasesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListReleasesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListReleasesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStart() {
		if err = oprot.WriteFieldBegin("Start", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Start); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ListReleasesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err = oprot.WriteFieldBegin("Limit", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(p.Limit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListReleasesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatuses() {
		if err = oprot.WriteFieldBegin("Statuses", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Statuses)); err != nil {
			return err
		}
		for _, v := range p.Statuses {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ListReleasesRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("Keyword", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ListReleasesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListReleasesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListReleasesRequest(%+v)", *p)
}

func (p *ListReleasesRequest) DeepEqual(ano *ListReleasesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Start) {
		return false
	}
	if !p.Field4DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field5DeepEqual(ano.Statuses) {
		return false
	}
	if !p.Field6DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *ListReleasesRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ListReleasesRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ListReleasesRequest) Field3DeepEqual(src int32) bool {

	if p.Start != src {
		return false
	}
	return true
}
func (p *ListReleasesRequest) Field4DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *ListReleasesRequest) Field5DeepEqual(src []string) bool {

	if len(p.Statuses) != len(src) {
		return false
	}
	for i, v := range p.Statuses {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListReleasesRequest) Field6DeepEqual(src *string) bool {

	if p.Keyword == src {
		return true
	} else if p.Keyword == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Keyword, *src) != 0 {
		return false
	}
	return true
}
func (p *ListReleasesRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type ListReleasesResponse struct {
	Total int64          `thrift:"Total,1,required" json:"Total"`
	Items []*ReleaseItem `thrift:"Items,2,required" json:"Items"`
}

func NewListReleasesResponse() *ListReleasesResponse {
	return &ListReleasesResponse{}
}

func (p *ListReleasesResponse) GetTotal() (v int64) {
	return p.Total
}

func (p *ListReleasesResponse) GetItems() (v []*ReleaseItem) {
	return p.Items
}
func (p *ListReleasesResponse) SetTotal(val int64) {
	p.Total = val
}
func (p *ListReleasesResponse) SetItems(val []*ReleaseItem) {
	p.Items = val
}

var fieldIDToName_ListReleasesResponse = map[int16]string{
	1: "Total",
	2: "Items",
}

func (p *ListReleasesResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTotal bool = false
	var issetItems bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTotal = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetItems = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTotal {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetItems {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListReleasesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ListReleasesResponse[fieldId]))
}

func (p *ListReleasesResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *ListReleasesResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*ReleaseItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewReleaseItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ListReleasesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListReleasesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListReleasesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Total", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ListReleasesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Items", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ListReleasesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListReleasesResponse(%+v)", *p)
}

func (p *ListReleasesResponse) DeepEqual(ano *ListReleasesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Total) {
		return false
	}
	if !p.Field2DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *ListReleasesResponse) Field1DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ListReleasesResponse) Field2DeepEqual(src []*ReleaseItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ReleaseItem struct {
	ClusterId    string `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace    string `thrift:"Namespace,2,required" json:"Namespace"`
	Name         string `thrift:"Name,3,required" json:"Name"`
	ChartName    string `thrift:"ChartName,4,required" json:"ChartName"`
	ChartVersion string `thrift:"ChartVersion,5,required" json:"ChartVersion"`
	AppVersion   string `thrift:"AppVersion,6,required" json:"AppVersion"`
	Status       string `thrift:"Status,7,required" json:"Status"`
	Description  string `thrift:"Description,8,required" json:"Description"`
	UpdateTime   string `thrift:"UpdateTime,9,required" json:"UpdateTime"`
	CreateTime   string `thrift:"CreateTime,10,required" json:"CreateTime"`
	Revision     int32  `thrift:"Revision,11,required" json:"Revision"`
}

func NewReleaseItem() *ReleaseItem {
	return &ReleaseItem{}
}

func (p *ReleaseItem) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *ReleaseItem) GetNamespace() (v string) {
	return p.Namespace
}

func (p *ReleaseItem) GetName() (v string) {
	return p.Name
}

func (p *ReleaseItem) GetChartName() (v string) {
	return p.ChartName
}

func (p *ReleaseItem) GetChartVersion() (v string) {
	return p.ChartVersion
}

func (p *ReleaseItem) GetAppVersion() (v string) {
	return p.AppVersion
}

func (p *ReleaseItem) GetStatus() (v string) {
	return p.Status
}

func (p *ReleaseItem) GetDescription() (v string) {
	return p.Description
}

func (p *ReleaseItem) GetUpdateTime() (v string) {
	return p.UpdateTime
}

func (p *ReleaseItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *ReleaseItem) GetRevision() (v int32) {
	return p.Revision
}
func (p *ReleaseItem) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *ReleaseItem) SetNamespace(val string) {
	p.Namespace = val
}
func (p *ReleaseItem) SetName(val string) {
	p.Name = val
}
func (p *ReleaseItem) SetChartName(val string) {
	p.ChartName = val
}
func (p *ReleaseItem) SetChartVersion(val string) {
	p.ChartVersion = val
}
func (p *ReleaseItem) SetAppVersion(val string) {
	p.AppVersion = val
}
func (p *ReleaseItem) SetStatus(val string) {
	p.Status = val
}
func (p *ReleaseItem) SetDescription(val string) {
	p.Description = val
}
func (p *ReleaseItem) SetUpdateTime(val string) {
	p.UpdateTime = val
}
func (p *ReleaseItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *ReleaseItem) SetRevision(val int32) {
	p.Revision = val
}

var fieldIDToName_ReleaseItem = map[int16]string{
	1:  "ClusterId",
	2:  "Namespace",
	3:  "Name",
	4:  "ChartName",
	5:  "ChartVersion",
	6:  "AppVersion",
	7:  "Status",
	8:  "Description",
	9:  "UpdateTime",
	10: "CreateTime",
	11: "Revision",
}

func (p *ReleaseItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetChartName bool = false
	var issetChartVersion bool = false
	var issetAppVersion bool = false
	var issetStatus bool = false
	var issetDescription bool = false
	var issetUpdateTime bool = false
	var issetCreateTime bool = false
	var issetRevision bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetChartVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAppVersion = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetUpdateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetCreateTime = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetRevision = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetChartName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetChartVersion {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAppVersion {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetUpdateTime {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetCreateTime {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetRevision {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReleaseItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_ReleaseItem[fieldId]))
}

func (p *ReleaseItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *ReleaseItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *ReleaseItem) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ReleaseItem) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartName = v
	}
	return nil
}

func (p *ReleaseItem) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChartVersion = v
	}
	return nil
}

func (p *ReleaseItem) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppVersion = v
	}
	return nil
}

func (p *ReleaseItem) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *ReleaseItem) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}

func (p *ReleaseItem) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *ReleaseItem) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *ReleaseItem) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Revision = v
	}
	return nil
}

func (p *ReleaseItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReleaseItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReleaseItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReleaseItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ReleaseItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ReleaseItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartName", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ReleaseItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ChartVersion", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChartVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ReleaseItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("AppVersion", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AppVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ReleaseItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Status", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ReleaseItem) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Description", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ReleaseItem) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UpdateTime", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ReleaseItem) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CreateTime", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ReleaseItem) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Revision", thrift.I32, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Revision); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *ReleaseItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReleaseItem(%+v)", *p)
}

func (p *ReleaseItem) DeepEqual(ano *ReleaseItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.ChartName) {
		return false
	}
	if !p.Field5DeepEqual(ano.ChartVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.AppVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.Status) {
		return false
	}
	if !p.Field8DeepEqual(ano.Description) {
		return false
	}
	if !p.Field9DeepEqual(ano.UpdateTime) {
		return false
	}
	if !p.Field10DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.Revision) {
		return false
	}
	return true
}

func (p *ReleaseItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ChartName, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ChartVersion, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AppVersion, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field7DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field9DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field10DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *ReleaseItem) Field11DeepEqual(src int32) bool {

	if p.Revision != src {
		return false
	}
	return true
}

type DeleteReleaseRequest struct {
	ClusterId   string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace   string         `thrift:"Namespace,2,required" json:"Namespace"`
	Name        string         `thrift:"Name,3,required" json:"Name"`
	IsDeleteCRD bool           `thrift:"IsDeleteCRD,4" json:"IsDeleteCRD,omitempty"`
	Top         *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewDeleteReleaseRequest() *DeleteReleaseRequest {
	return &DeleteReleaseRequest{

		IsDeleteCRD: false,
	}
}

func (p *DeleteReleaseRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *DeleteReleaseRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *DeleteReleaseRequest) GetName() (v string) {
	return p.Name
}

var DeleteReleaseRequest_IsDeleteCRD_DEFAULT bool = false

func (p *DeleteReleaseRequest) GetIsDeleteCRD() (v bool) {
	if !p.IsSetIsDeleteCRD() {
		return DeleteReleaseRequest_IsDeleteCRD_DEFAULT
	}
	return p.IsDeleteCRD
}

var DeleteReleaseRequest_Top_DEFAULT *base.TopParam

func (p *DeleteReleaseRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return DeleteReleaseRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *DeleteReleaseRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *DeleteReleaseRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *DeleteReleaseRequest) SetName(val string) {
	p.Name = val
}
func (p *DeleteReleaseRequest) SetIsDeleteCRD(val bool) {
	p.IsDeleteCRD = val
}
func (p *DeleteReleaseRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_DeleteReleaseRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "IsDeleteCRD",
	255: "Top",
}

func (p *DeleteReleaseRequest) IsSetIsDeleteCRD() bool {
	return p.IsDeleteCRD != DeleteReleaseRequest_IsDeleteCRD_DEFAULT
}

func (p *DeleteReleaseRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *DeleteReleaseRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteReleaseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_DeleteReleaseRequest[fieldId]))
}

func (p *DeleteReleaseRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *DeleteReleaseRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *DeleteReleaseRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *DeleteReleaseRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsDeleteCRD = v
	}
	return nil
}

func (p *DeleteReleaseRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DeleteReleaseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteReleaseRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteReleaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteReleaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteReleaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DeleteReleaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDeleteCRD() {
		if err = oprot.WriteFieldBegin("IsDeleteCRD", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(p.IsDeleteCRD); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DeleteReleaseRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteReleaseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteReleaseRequest(%+v)", *p)
}

func (p *DeleteReleaseRequest) DeepEqual(ano *DeleteReleaseRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsDeleteCRD) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *DeleteReleaseRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteReleaseRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteReleaseRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteReleaseRequest) Field4DeepEqual(src bool) bool {

	if p.IsDeleteCRD != src {
		return false
	}
	return true
}
func (p *DeleteReleaseRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}

type RollbackReleaseRequest struct {
	ClusterId string         `thrift:"ClusterId,1,required" json:"ClusterId"`
	Namespace string         `thrift:"Namespace,2,required" json:"Namespace"`
	Name      string         `thrift:"Name,3,required" json:"Name"`
	Revision  int32          `thrift:"Revision,4,required" json:"Revision"`
	Top       *base.TopParam `thrift:"Top,255,required" json:"Top"`
}

func NewRollbackReleaseRequest() *RollbackReleaseRequest {
	return &RollbackReleaseRequest{}
}

func (p *RollbackReleaseRequest) GetClusterId() (v string) {
	return p.ClusterId
}

func (p *RollbackReleaseRequest) GetNamespace() (v string) {
	return p.Namespace
}

func (p *RollbackReleaseRequest) GetName() (v string) {
	return p.Name
}

func (p *RollbackReleaseRequest) GetRevision() (v int32) {
	return p.Revision
}

var RollbackReleaseRequest_Top_DEFAULT *base.TopParam

func (p *RollbackReleaseRequest) GetTop() (v *base.TopParam) {
	if !p.IsSetTop() {
		return RollbackReleaseRequest_Top_DEFAULT
	}
	return p.Top
}
func (p *RollbackReleaseRequest) SetClusterId(val string) {
	p.ClusterId = val
}
func (p *RollbackReleaseRequest) SetNamespace(val string) {
	p.Namespace = val
}
func (p *RollbackReleaseRequest) SetName(val string) {
	p.Name = val
}
func (p *RollbackReleaseRequest) SetRevision(val int32) {
	p.Revision = val
}
func (p *RollbackReleaseRequest) SetTop(val *base.TopParam) {
	p.Top = val
}

var fieldIDToName_RollbackReleaseRequest = map[int16]string{
	1:   "ClusterId",
	2:   "Namespace",
	3:   "Name",
	4:   "Revision",
	255: "Top",
}

func (p *RollbackReleaseRequest) IsSetTop() bool {
	return p.Top != nil
}

func (p *RollbackReleaseRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClusterId bool = false
	var issetNamespace bool = false
	var issetName bool = false
	var issetRevision bool = false
	var issetTop bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClusterId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespace = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetRevision = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
				issetTop = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClusterId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNamespace {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRevision {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTop {
		fieldId = 255
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RollbackReleaseRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_RollbackReleaseRequest[fieldId]))
}

func (p *RollbackReleaseRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClusterId = v
	}
	return nil
}

func (p *RollbackReleaseRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Namespace = v
	}
	return nil
}

func (p *RollbackReleaseRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *RollbackReleaseRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Revision = v
	}
	return nil
}

func (p *RollbackReleaseRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Top = base.NewTopParam()
	if err := p.Top.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RollbackReleaseRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RollbackReleaseRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RollbackReleaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ClusterId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClusterId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RollbackReleaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Namespace", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Namespace); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RollbackReleaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RollbackReleaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Revision", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Revision); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *RollbackReleaseRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Top", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Top.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RollbackReleaseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RollbackReleaseRequest(%+v)", *p)
}

func (p *RollbackReleaseRequest) DeepEqual(ano *RollbackReleaseRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClusterId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Namespace) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Revision) {
		return false
	}
	if !p.Field255DeepEqual(ano.Top) {
		return false
	}
	return true
}

func (p *RollbackReleaseRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClusterId, src) != 0 {
		return false
	}
	return true
}
func (p *RollbackReleaseRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Namespace, src) != 0 {
		return false
	}
	return true
}
func (p *RollbackReleaseRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *RollbackReleaseRequest) Field4DeepEqual(src int32) bool {

	if p.Revision != src {
		return false
	}
	return true
}
func (p *RollbackReleaseRequest) Field255DeepEqual(src *base.TopParam) bool {

	if !p.Top.DeepEqual(src) {
		return false
	}
	return true
}
